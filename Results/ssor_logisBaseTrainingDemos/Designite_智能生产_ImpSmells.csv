Implementation smell,Namespace,Class,File,Method,Description
Long Method,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The method has 268 lines of code.
Complex Method,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,Cyclomatic complexity of the method is 12
Complex Method,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,Cyclomatic complexity of the method is 78
Complex Method,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuReadDataCommandComposer,Cyclomatic complexity of the method is 11
Complex Method,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,Cyclomatic complexity of the method is 11
Complex Method,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,Cyclomatic complexity of the method is 11
Long Parameter List,FactorySystem,FOrders,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\FOrders.cs,FOrders,The method has 10 parameters.
Long Parameter List,FactorySystem,zigbeeInfo,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeInfo.cs,zigbeeInfo,The method has 6 parameters.
Long Parameter List,FactorySystem.lei,FProduct,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\FProduct.cs,FProduct,The method has 10 parameters.
Long Parameter List,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuReadDataCommandComposer,The method has 6 parameters.
Long Parameter List,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The method has 6 parameters.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\HttpDownloader.cs,TryRequest,The length of the statement  "		IAsyncResult result = (IAsyncResult)myHttpWebRequest.BeginGetResponse (new AsyncCallback (RespCallback)' myRequestState); " is 121.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\HttpDownloader.cs,RespCallback,The length of the statement  "		IAsyncResult asynchronousInputRead = responseStream.BeginRead (myRequestState.BufferRead' 0' BUFFER_SIZE' new AsyncCallback (ReadCallBack)' myRequestState); " is 156.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\HttpDownloader.cs,ReadCallBack,The length of the statement  "			IAsyncResult asynchronousResult = responseStream.BeginRead (myRequestState.BufferRead' 0' BUFFER_SIZE' new AsyncCallback (ReadCallBack)' myRequestState); " is 153.
Long Statement,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\UDPServer.cs,startUDPListening,The length of the statement  "			serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender); " is 134.
Long Statement,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\UDPServer.cs,OnReceive,The length of the statement  "		serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender); " is 134.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,StartWriteEpc,The length of the statement  "	List<string> commands = Rmu900RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' null' 1' 2' epc' null); " is 129.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,SendCommand,The length of the statement  "	Debug.WriteLine (string.Format ("SendCommand -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 131.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "		Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ()))); " is 175.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 140.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 137.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "				Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 131.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "						Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 145.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 153.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 137.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 134.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ())); " is 167.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 146.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "						Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 153.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The length of the statement  "						Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuReadDataCommandComposer,The length of the statement  "		commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55"; " is 155.
Long Statement,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The length of the statement  "		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ()))); " is 188.
Long Statement,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The length of the statement  "				Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ())); " is 133.
Long Statement,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The length of the statement  "			Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ())); " is 197.
Empty Catch Block,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,frmTiebiao,The method has an empty catch block.
Magic Number,FactorySystem,frmSysConfig,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmSysConfig.cs,button1_Click,The following statement contains a magic number: UDPServer.startUDPListening (12306);  
Magic Number,FactorySystem,frmProducing,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducing.cs,helper_RequestCompleted_getproducingProduct,The following statement contains a magic number: columns [0].Width = 100;  
Magic Number,FactorySystem,frmProducing,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducing.cs,Produce,The following statement contains a magic number: dgvProductInfo [4' 0].Value = "工序一";  
Magic Number,FactorySystem,frmProducing,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducing.cs,timer1_Tick,The following statement contains a magic number: if (dgvProductInfo [4' 0].Value.ToString ().Trim () == "待生产") {  	string id = dgvProductInfo [0' 0].Value.ToString ();  	Produce ();  }  else {  	if (dgvProductInfo [4' 0].Value == "工序一") {  		ClearFirtLine ();  		if (dgvProductInfo.Rows.Count > 0) {  			string id = dgvProductInfo [0' 0].Value.ToString ();  			Produce ();  		}  	}  }  
Magic Number,FactorySystem,frmProducing,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducing.cs,timer1_Tick,The following statement contains a magic number: if (dgvProductInfo [4' 0].Value.ToString ().Trim () == "待生产") {  	string id = dgvProductInfo [0' 0].Value.ToString ();  	Produce ();  }  else {  	if (dgvProductInfo [4' 0].Value == "工序一") {  		ClearFirtLine ();  		if (dgvProductInfo.Rows.Count > 0) {  			string id = dgvProductInfo [0' 0].Value.ToString ();  			Produce ();  		}  	}  }  
Magic Number,FactorySystem,frmProducing,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducing.cs,timer1_Tick,The following statement contains a magic number: if (dgvProductInfo [4' 0].Value == "工序一") {  	ClearFirtLine ();  	if (dgvProductInfo.Rows.Count > 0) {  		string id = dgvProductInfo [0' 0].Value.ToString ();  		Produce ();  	}  }  
Magic Number,FactorySystem,frmProducing,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducing.cs,timer2_Tick,The following statement contains a magic number: if (dgvProductInfo.Rows.Count > 0) {  	if (dgvProductInfo [4' 0].Value.ToString ().Trim () == "工序一") {  		Produced (dgvProductInfo [0' 0].Value.ToString ());  	}  }  
Magic Number,FactorySystem,frmProducing,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducing.cs,timer2_Tick,The following statement contains a magic number: if (dgvProductInfo [4' 0].Value.ToString ().Trim () == "工序一") {  	Produced (dgvProductInfo [0' 0].Value.ToString ());  }  
Magic Number,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,helper_RequestCompleted_getproducingProduct,The following statement contains a magic number: columns [0].Width = 100;  
Magic Number,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,The following statement contains a magic number: switch (indexcontxt) {  case "产品编码":  	index.num = 1;  	break;  case "产品名称":  	index.num = 2;  	break;  case "产品类别":  	index.num = 3;  	break;  case "生产车间":  	index.num = 4;  	break;  }  
Magic Number,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,The following statement contains a magic number: switch (indexcontxt) {  case "产品编码":  	index.num = 1;  	break;  case "产品名称":  	index.num = 2;  	break;  case "产品类别":  	index.num = 3;  	break;  case "生产车间":  	index.num = 4;  	break;  }  
Magic Number,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,The following statement contains a magic number: switch (indexcontxt) {  case "产品编码":  	index.num = 1;  	break;  case "产品名称":  	index.num = 2;  	break;  case "产品类别":  	index.num = 3;  	break;  case "生产车间":  	index.num = 4;  	break;  }  
Magic Number,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,The following statement contains a magic number: index.num = 2;  
Magic Number,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,The following statement contains a magic number: index.num = 3;  
Magic Number,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,The following statement contains a magic number: index.num = 4;  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,frmTiebiao,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 57600' Parity.None' 8' StopBits.One);  	((SerialPortDataTransfer)dataTransfer).Comport = comport;  }  catch (System.Exception ex) {  }  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,frmTiebiao,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 57600' Parity.None' 8' StopBits.One);  	((SerialPortDataTransfer)dataTransfer).Comport = comport;  }  catch (System.Exception ex) {  }  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,frmTiebiao,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 57600' Parity.None' 8' StopBits.One);  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,frmTiebiao,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 57600' Parity.None' 8' StopBits.One);  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,helper_RequestCompleted_getproducingProduct,The following statement contains a magic number: columns [0].Width = 100;  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,txtEpc_TextChanged,The following statement contains a magic number: if (txtContent.Length >= 0 && txtContent.Length < 24) {  	Value = "当前EPC长度为 " + txtContent.Length.ToString () + "'长度不符合要求";  	goto SetTipValue;  }  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,txtEpc_TextChanged,The following statement contains a magic number: if (txtContent.Length > 24) {  	Value = "当前EPC长度为 " + txtContent.Length.ToString () + "'长度不符合要求";  	goto SetTipValue;  }  
Magic Number,FactorySystem,frmTiebiao,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmTiebiao.cs,txtEpc_TextChanged,The following statement contains a magic number: if (txtContent.Length == 24) {  	//Value = "当前EPC长度为 " + txtContent.Length.ToString();  	if (!Regex.IsMatch (txtContent' "[0-9a-fA-F]{24}")) {  		Value = "EPC中含有不符合要求的符号";  		goto SetTipValue;  	}  	//if (this.ctl.CheckEpcExist(txtContent))  	//{  	//    Value = "当前EPC已经使用过，请重新制定";  	//    goto SetTipValue;  	//}  	Value = "当前EPC符合要求";  	lblTip.ForeColor = Color.Black;  	this.btnWriteEpc.Enabled = true;  }  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\UDPServer.cs,startUDPListening,The following statement contains a magic number: try {  	if (serverSocket == null) {  		IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  		for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  			ipAddress = ipHostInfo.AddressList [i];  			if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  				break;  			}  			else {  				ipAddress = null;  			}  		}  		if (null == ipAddress) {  			return;  		}  		IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  		//We are using UDP sockets  		serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  		//IPAddress ip = IPAddress.Parse(servIP);  		//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  		//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  		//Bind this address to the server  		serverSocket.Bind (ipEndPoint);  		//防止客户端强行中断造成的异常  		long IOC_IN = 0x80000000;  		long IOC_VENDOR = 0x18000000;  		long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  		byte[] optionInValue =  {  			Convert.ToByte (false)  		};  		byte[] optionOutValue = new byte[4];  		serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  		IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  		//The epSender identifies the incoming clients  		EndPoint epSender = (EndPoint)ipeSender;  		//Start receiving data  		serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  	}  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("UDPServer.startUDPListening  -> error = {0}"' ex.Message));  }  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\UDPServer.cs,startUDPListening,The following statement contains a magic number: try {  	if (serverSocket == null) {  		IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  		for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  			ipAddress = ipHostInfo.AddressList [i];  			if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  				break;  			}  			else {  				ipAddress = null;  			}  		}  		if (null == ipAddress) {  			return;  		}  		IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  		//We are using UDP sockets  		serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  		//IPAddress ip = IPAddress.Parse(servIP);  		//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  		//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  		//Bind this address to the server  		serverSocket.Bind (ipEndPoint);  		//防止客户端强行中断造成的异常  		long IOC_IN = 0x80000000;  		long IOC_VENDOR = 0x18000000;  		long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  		byte[] optionInValue =  {  			Convert.ToByte (false)  		};  		byte[] optionOutValue = new byte[4];  		serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  		IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  		//The epSender identifies the incoming clients  		EndPoint epSender = (EndPoint)ipeSender;  		//Start receiving data  		serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  	}  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("UDPServer.startUDPListening  -> error = {0}"' ex.Message));  }  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\UDPServer.cs,startUDPListening,The following statement contains a magic number: if (serverSocket == null) {  	IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  	for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  		ipAddress = ipHostInfo.AddressList [i];  		if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  			break;  		}  		else {  			ipAddress = null;  		}  	}  	if (null == ipAddress) {  		return;  	}  	IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  	//We are using UDP sockets  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  	//IPAddress ip = IPAddress.Parse(servIP);  	//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  	//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  	//Bind this address to the server  	serverSocket.Bind (ipEndPoint);  	//防止客户端强行中断造成的异常  	long IOC_IN = 0x80000000;  	long IOC_VENDOR = 0x18000000;  	long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  	byte[] optionInValue =  {  		Convert.ToByte (false)  	};  	byte[] optionOutValue = new byte[4];  	serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  	IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  	//The epSender identifies the incoming clients  	EndPoint epSender = (EndPoint)ipeSender;  	//Start receiving data  	serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  }  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\UDPServer.cs,startUDPListening,The following statement contains a magic number: if (serverSocket == null) {  	IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  	for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  		ipAddress = ipHostInfo.AddressList [i];  		if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  			break;  		}  		else {  			ipAddress = null;  		}  	}  	if (null == ipAddress) {  		return;  	}  	IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  	//We are using UDP sockets  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  	//IPAddress ip = IPAddress.Parse(servIP);  	//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  	//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  	//Bind this address to the server  	serverSocket.Bind (ipEndPoint);  	//防止客户端强行中断造成的异常  	long IOC_IN = 0x80000000;  	long IOC_VENDOR = 0x18000000;  	long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  	byte[] optionInValue =  {  		Convert.ToByte (false)  	};  	byte[] optionOutValue = new byte[4];  	serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  	IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  	//The epSender identifies the incoming clients  	EndPoint epSender = (EndPoint)ipeSender;  	//Start receiving data  	serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,SendCommand,The following statement contains a magic number: for (int i = 0; i < commands.Count; i++) {  	SendCommand (commands [i]);  	Thread.Sleep (400);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,SendCommand,The following statement contains a magic number: Thread.Sleep (400);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  			break;  		case 0x7:  			//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  			//RMUStatus.Set();  			//StopSeeing(RFIDEventType.RMU_getVersioin);  			string strVersion = null;  			if (bytesCmd.Count >= 11) {  				strVersion = bytesCmd [11].ToString ();  			}  			HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  			break;  		case 0x10:  			//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  			//StopSeeing(RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  			//StopSeeing(RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  				//StopSeeing(RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  			//StopSeeing(RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  			//StopSeeing(RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  			//StopSeeing(RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  				//StopSeeing(RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  				//StopSeeing(RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	//dicCommandSuccess[(int)RFIDEventType.RMU_CardIsReady] = true;//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  		break;  	case 0x7:  		//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  		//RMUStatus.Set();  		//StopSeeing(RFIDEventType.RMU_getVersioin);  		string strVersion = null;  		if (bytesCmd.Count >= 11) {  			strVersion = bytesCmd [11].ToString ();  		}  		HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  		break;  	case 0x10:  		//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  		//StopSeeing(RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  		//StopSeeing(RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  			//StopSeeing(RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  		//StopSeeing(RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  		//StopSeeing(RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  		//StopSeeing(RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  			//StopSeeing(RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  			//StopSeeing(RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (nEndIndex != -1) {  	if (nEndIndex > 0) {  		if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  		 {  			break;  		}  		else {  			if (nEndIndex - 2 >= 0) {  				if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  				 {  					break;  				}  			}  		}  	}  	if (nEndIndex + 1 < maxbuf.Count) {  		nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  	}  	else {  		return;  		//没找到一个完整的命令字符串，无法继续处理，直接返回  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: while (nEndIndex != -1) {  	if (nEndIndex > 0) {  		if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  		 {  			break;  		}  		else {  			if (nEndIndex - 2 >= 0) {  				if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  				 {  					break;  				}  			}  		}  	}  	if (nEndIndex + 1 < maxbuf.Count) {  		nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  	}  	else {  		return;  		//没找到一个完整的命令字符串，无法继续处理，直接返回  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex > 0) {  	if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  	 {  		break;  	}  	else {  		if (nEndIndex - 2 >= 0) {  			if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  			 {  				break;  			}  		}  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex > 0) {  	if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  	 {  		break;  	}  	else {  		if (nEndIndex - 2 >= 0) {  			if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  			 {  				break;  			}  		}  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾   {  	break;  }  else {  	if (nEndIndex - 2 >= 0) {  		if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  		 {  			break;  		}  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾   {  	break;  }  else {  	if (nEndIndex - 2 >= 0) {  		if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  		 {  			break;  		}  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex - 2 >= 0) {  	if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  	 {  		break;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex - 2 >= 0) {  	if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  	 {  		break;  	}  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾   {  	break;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd.Count < 4)//返回命令的最小长度是4   {  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	//EditEventStatusValue(RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady' "ok");  	break;  case 0x7:  	//EditEventStatusValue(RFIDEventType.RMU_getVersioin' true);  	//RMUStatus.Set();  	//StopSeeing(RFIDEventType.RMU_getVersioin);  	string strVersion = null;  	if (bytesCmd.Count >= 11) {  		strVersion = bytesCmd [11].ToString ();  	}  	HandleEventInNewThread (RFIDEventType.RMU_getVersioin' strVersion);  	break;  case 0x10:  	//EditEventStatusValue(RFIDEventType.RMU_Inventory' true);  	//StopSeeing(RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	//EditEventStatusValue(RFIDEventType.RMU_InventoryAnti' true);  	//StopSeeing(RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_ReadData' true);  		//StopSeeing(RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	//EditEventStatusValue(RFIDEventType.RMU_InventorySingle' true);  	//StopSeeing(RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	//EditEventStatusValue(RFIDEventType.RMU_LockMem' true);  	//StopSeeing(RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	//EditEventStatusValue(RFIDEventType.RMU_SingleReadData' true);  	//StopSeeing(RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		//EditEventStatusValue(RFIDEventType.RMU_SingleWriteData' true);  		//StopSeeing(RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		//EditEventStatusValue(RFIDEventType.RMU_WriteData' true);  		//StopSeeing(RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd.Count >= 11) {  	strVersion = bytesCmd [11].ToString ();  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd.Count >= 11) {  	strVersion = bytesCmd [11].ToString ();  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: strVersion = bytesCmd [11].ToString ();  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 1) {  	//_bExistCardAround = false;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory_noTag);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 1) {  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti_noTag' "ok");  	Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] > 0) {  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle_noTag);  	Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] > 0) {  	HandleEventInNewThread (RFIDEventType.RMU_LockMem_fail);  	Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  	Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData_fail);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int uiiLen = 14;  	byte[] bUII = new byte[uiiLen];  	bytesCmd.CopyTo (4' bUII' 0' uiiLen);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  	Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int uiiLen = 14;  	byte[] bUII = new byte[uiiLen];  	bytesCmd.CopyTo (4' bUII' 0' uiiLen);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  	Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int uiiLen = 14;  	byte[] bUII = new byte[uiiLen];  	bytesCmd.CopyTo (4' bUII' 0' uiiLen);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  	Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData_fail);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' uiiLen);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	string sT = "OK";  	HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  	Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_WriteData_fail);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	//strinfo = "销毁标签成功";  }  else {  	//strinfo = "销毁标签失败";  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,WriteData,The following statement contains a magic number: i += 2
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,WriteData,The following statement contains a magic number: str2 = value.Substring (i' 2);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,GetEPCFormUII,The following statement contains a magic number: if (uii == null || uii.Length < 4) {  	return null;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,GetEPCFormUII,The following statement contains a magic number: return uii.Substring (4);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,GetFormatEPC,The following statement contains a magic number: epc = epc.Substring (0' 12);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: if (nFindex != -1) {  	strID = epc.Substring (4' nFindex - 4);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: if (nFindex != -1) {  	strID = epc.Substring (4' nFindex - 4);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: strID = epc.Substring (4' nFindex - 4);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: strID = epc.Substring (4' nFindex - 4);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,PwdCheck,The following statement contains a magic number: return strR.Substring (0' 8);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuReadDataCommandComposer,The following statement contains a magic number: switch ((int)commandtype) {  case (int)RMU_CommandType.RMU_SingleReadData:  	commandR = "aa0920" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + "55";  	break;  case (int)RMU_CommandType.RMU_ReadData:  	if (null == strUii || !Regex.IsMatch (strUii' "[0-9a-zA-Z]{14}")) {  		return commandR;  	}  	int nLength = 1 + 1 + 4 + 1 + 1 + 1 + 14;  	commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55";  	break;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuReadDataCommandComposer,The following statement contains a magic number: switch ((int)commandtype) {  case (int)RMU_CommandType.RMU_SingleReadData:  	commandR = "aa0920" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + "55";  	break;  case (int)RMU_CommandType.RMU_ReadData:  	if (null == strUii || !Regex.IsMatch (strUii' "[0-9a-zA-Z]{14}")) {  		return commandR;  	}  	int nLength = 1 + 1 + 4 + 1 + 1 + 1 + 14;  	commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55";  	break;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,passwordFormat,The following statement contains a magic number: return strCommand.Substring (0' 8);  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	//string str1' str2;  	//str1 = "";  	////循环每两位检查，发现 ff 或者 aa 或者 55 ，则前面加 ff 作为转义标记  	//for (int j = 2; j < strCmd.Length - 2; j += 2)  	//{  	//    str2 = strCmd.Substring(j' 2);  	//    if (str2 == "FF" || str2 == "AA" || str2 == "55")  	//        str2 = "FF" + str2;  	//    str1 += str2;  	//}  	//strCmd = "AA" + str1 + "55";  	commandList.Add (strCmd);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	//string str1' str2;  	//str1 = "";  	////循环每两位检查，发现 ff 或者 aa 或者 55 ，则前面加 ff 作为转义标记  	//for (int j = 2; j < strCmd.Length - 2; j += 2)  	//{  	//    str2 = strCmd.Substring(j' 2);  	//    if (str2 == "FF" || str2 == "AA" || str2 == "55")  	//        str2 = "FF" + str2;  	//    str1 += str2;  	//}  	//strCmd = "AA" + str1 + "55";  	commandList.Add (strCmd);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	//string str1' str2;  	//str1 = "";  	////循环每两位检查，发现 ff 或者 aa 或者 55 ，则前面加 ff 作为转义标记  	//for (int j = 2; j < strCmd.Length - 2; j += 2)  	//{  	//    str2 = strCmd.Substring(j' 2);  	//    if (str2 == "FF" || str2 == "AA" || str2 == "55")  	//        str2 = "FF" + str2;  	//    str1 += str2;  	//}  	//strCmd = "AA" + str1 + "55";  	commandList.Add (strCmd);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	//string str1' str2;  	//str1 = "";  	////循环每两位检查，发现 ff 或者 aa 或者 55 ，则前面加 ff 作为转义标记  	//for (int j = 2; j < strCmd.Length - 2; j += 2)  	//{  	//    str2 = strCmd.Substring(j' 2);  	//    if (str2 == "FF" || str2 == "AA" || str2 == "55")  	//        str2 = "FF" + str2;  	//    str1 += str2;  	//}  	//strCmd = "AA" + str1 + "55";  	commandList.Add (strCmd);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	//string str1' str2;  	//str1 = "";  	////循环每两位检查，发现 ff 或者 aa 或者 55 ，则前面加 ff 作为转义标记  	//for (int j = 2; j < strCmd.Length - 2; j += 2)  	//{  	//    str2 = strCmd.Substring(j' 2);  	//    if (str2 == "FF" || str2 == "AA" || str2 == "55")  	//        str2 = "FF" + str2;  	//    str1 += str2;  	//}  	//strCmd = "AA" + str1 + "55";  	commandList.Add (strCmd);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	//string str1' str2;  	//str1 = "";  	////循环每两位检查，发现 ff 或者 aa 或者 55 ，则前面加 ff 作为转义标记  	//for (int j = 2; j < strCmd.Length - 2; j += 2)  	//{  	//    str2 = strCmd.Substring(j' 2);  	//    if (str2 == "FF" || str2 == "AA" || str2 == "55")  	//        str2 = "FF" + str2;  	//    str1 += str2;  	//}  	//strCmd = "AA" + str1 + "55";  	commandList.Add (strCmd);  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: i += 4
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: switch ((int)commandType) {  case (int)RMU_CommandType.RMU_SingleWriteData:  	strCmd += "21";  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		if (null == strUii) {  			return commandList;  		}  		nLength += 14;  		// strUii.Length / 2;// 加上uii的长度  		strCmd += "14";  	}  	break;  }  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: nLength += 14;  
Magic Number,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0)//只要还有数据就不停的查找  	 {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (0' IsFF);  		if (nEndIndex == -1) {  			return;  		}  		while (nEndIndex != -1) {  			Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  			// 22 23  			if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  			 {  				if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  				 {  					if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  					 {  						break;  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  				if (nEndIndex == -1) {  					return;  					//没找到一个完整的命令字符串，无法继续处理，直接返回  				}  			}  			else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  			 {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  		maxbuf.RemoveRange (0' nEndIndex + 2);  		//将取出的命令从源中清除  		string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  		int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  		List<byte> address = bytesCmd.GetRange (2' 8);  		string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  		int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  		string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  		int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  		string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  		int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  		Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  		if (this.eventZigInfo != null) {  			this.eventZigInfo (id' nodeID' Humidity' temperature);  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("zigbeeHelper Parse Exception -> {0}"' ex.Message));  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0)//只要还有数据就不停的查找   {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  ->  = {0}"' "while loop"));  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (0' IsFF);  	if (nEndIndex == -1) {  		return;  	}  	while (nEndIndex != -1) {  		Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  		// 22 23  		if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  		 {  			if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  			 {  				if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  				 {  					break;  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  			if (nEndIndex == -1) {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  		 {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (nEndIndex - 22' 24);  	maxbuf.RemoveRange (0' nEndIndex + 2);  	//将取出的命令从源中清除  	string strID = BytesToHexStringWithNospace (bytesCmd.GetRange (0' 2).ToArray ());  	int id = Int32.Parse (strID' NumberStyles.AllowHexSpecifier);  	List<byte> address = bytesCmd.GetRange (2' 8);  	string strNodeID = BytesToHexStringWithNospace (bytesCmd.GetRange (10' 2).ToArray ());  	int nodeID = Int32.Parse (strNodeID' NumberStyles.AllowHexSpecifier);  	string strHumidity = BytesToHexStringWithNospace (bytesCmd.GetRange (12' 2).ToArray ());  	int Humidity = Int32.Parse (strHumidity' NumberStyles.AllowHexSpecifier);  	string strTemp = BytesToHexStringWithNospace (bytesCmd.GetRange (14' 2).ToArray ());  	int temperature = Int32.Parse (strTemp' NumberStyles.AllowHexSpecifier);  	Debug.WriteLine (string.Format ("zigbeeHelper Parse -> id = {0}'nodeID = {1} Humidity = {2} temperature = {3} "' id.ToString ()' nodeID.ToString ()' Humidity.ToString ()' temperature.ToString ()));  	if (this.eventZigInfo != null) {  		this.eventZigInfo (id' nodeID' Humidity' temperature);  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: while (nEndIndex != -1) {  	Debug.WriteLine (string.Format ("ZigbeeHelper.Parse  -> while loop 2 = {0}   {1}"' nEndIndex.ToString ()' maxbuf.Count.ToString ()));  	// 22 23  	if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组  	 {  		if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  		 {  			if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  			 {  				break;  			}  		}  	}  	if (nEndIndex + 1 < maxbuf.Count) {  		nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsFF);  		if (nEndIndex == -1) {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	else//当 nEndIndex = 22 maxbuf.Count = 23时，会死循环，必须返回  	 {  		return;  		//没找到一个完整的命令字符串，无法继续处理，直接返回  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex > 0)// 此时找到的是形如 xxxFFFF 的数组   {  	if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾  	 {  		if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  		 {  			break;  		}  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex + 1 < maxbuf.Count && IsFF (maxbuf [nEndIndex + 1]))//如果这个ff的后面还是ff，那说明这真是结尾   {  	if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头  	 {  		break;  	}  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: if ((nEndIndex >= 22))// 往前数22 是标识 00 的包头   {  	break;  }  
Magic Number,LogisTechBase,ZigbeeHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\zigbeeHelper.cs,Parse,The following statement contains a magic number: maxbuf.RemoveRange (0' nEndIndex + 2);  
Missing Default,FactorySystem,frmProducedList,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\frmProducedList.cs,chaxun_Click,The following switch statement is missing a default case: switch (indexcontxt) {  case "产品编码":  	index.num = 1;  	break;  case "产品名称":  	index.num = 2;  	break;  case "产品类别":  	index.num = 3;  	break;  case "生产车间":  	index.num = 4;  	break;  }  
Missing Default,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuReadDataCommandComposer,The following switch statement is missing a default case: switch ((int)commandtype) {  case (int)RMU_CommandType.RMU_SingleReadData:  	commandR = "aa0920" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + "55";  	break;  case (int)RMU_CommandType.RMU_ReadData:  	if (null == strUii || !Regex.IsMatch (strUii' "[0-9a-zA-Z]{14}")) {  		return commandR;  	}  	int nLength = 1 + 1 + 4 + 1 + 1 + 1 + 14;  	commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55";  	break;  }  
Missing Default,RfidReader,Rmu900RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\智能生产管理子系统\FactorySystem\public\rfidOperate\Rmu900RFIDHelper.cs,RmuWriteDataCommandCompose,The following switch statement is missing a default case: switch ((int)commandType) {  case (int)RMU_CommandType.RMU_SingleWriteData:  	strCmd += "21";  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		if (null == strUii) {  			return commandList;  		}  		nLength += 14;  		// strUii.Length / 2;// 加上uii的长度  		strCmd += "14";  	}  	break;  }  
