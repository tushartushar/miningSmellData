Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,Cyclomatic complexity of the method is 13
Complex Method,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,DetectPadding,Cyclomatic complexity of the method is 13
Long Parameter List,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The method has 9 parameters.
Long Parameter List,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteImageBlock,The method has 6 parameters.
Long Parameter List,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The method has 5 parameters.
Long Parameter List,BumpKit,UnsafeBitmapContext,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\UnsafeBitmapContext.cs,SetPixel,The method has 6 parameters.
Long Statement,BumpKit,ColorExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,EqualsColor,The length of the statement  "	return (color.A == 0 && pixel.Alpha == 0) || (color.A == pixel.Alpha && color.R == pixel.Red && color.G == pixel.Green && color.B == pixel.Blue); " is 145.
Long Statement,BumpKit,ColorExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The length of the statement  "	return Color.FromArgb ((int)Math.Min (255' Math.Max (0' from.A + (to.A - from.A) * fade))' (int)Math.Min (255' Math.Max (0' from.R + (to.R - from.R) * fade))' (int)Math.Min (255' Math.Max (0' from.G + (to.G - from.G) * fade))' (int)Math.Min (255' Math.Max (0' from.B + (to.B - from.B) * fade))); " is 295.
Long Statement,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The length of the statement  "	var colors = borderColors.Select ((c' i) => new KeyValuePair<float' Color> (colorOffsets [i]' c)).OrderBy (c => c.Key).ToArray (); " is 130.
Long Statement,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The length of the statement  "			path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault); " is 177.
Long Statement,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The length of the statement  "	var scaleRatio = mode == ScalingMode.Overflow ? Math.Max (widthRatio' heightRatio) : Math.Min (widthRatio' heightRatio); " is 120.
Long Statement,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The length of the statement  "		gfx.DrawImage (image' (float)((newImage.Width - width) / 2)' (float)((newImage.Height - height) / 2)' (float)width' (float)height); " is 131.
Long Statement,BumpKit,UnsafeBitmapContext,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\UnsafeBitmapContext.cs,LockBits,The length of the statement  "	_lockData = _bitmap.LockBits (new Rectangle (0' 0' _bitmap.Width' _bitmap.Height)' ImageLockMode.ReadWrite' PixelFormat.Format32bppArgb); " is 137.
Complex Conditional,BumpKit,UnsafeBitmapContext,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\UnsafeBitmapContext.cs,Pointer,The conditional expression  "x >= Width || x < 0 || y >= Height || y < 0"  is complex.
Magic Number,BumpKit,ColorExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb ((int)Math.Min (255' Math.Max (0' from.A + (to.A - from.A) * fade))' (int)Math.Min (255' Math.Max (0' from.R + (to.R - from.R) * fade))' (int)Math.Min (255' Math.Max (0' from.G + (to.G - from.G) * fade))' (int)Math.Min (255' Math.Max (0' from.B + (to.B - from.B) * fade)));  
Magic Number,BumpKit,ColorExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb ((int)Math.Min (255' Math.Max (0' from.A + (to.A - from.A) * fade))' (int)Math.Min (255' Math.Max (0' from.R + (to.R - from.R) * fade))' (int)Math.Min (255' Math.Max (0' from.G + (to.G - from.G) * fade))' (int)Math.Min (255' Math.Max (0' from.B + (to.B - from.B) * fade)));  
Magic Number,BumpKit,ColorExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb ((int)Math.Min (255' Math.Max (0' from.A + (to.A - from.A) * fade))' (int)Math.Min (255' Math.Max (0' from.R + (to.R - from.R) * fade))' (int)Math.Min (255' Math.Max (0' from.G + (to.G - from.G) * fade))' (int)Math.Min (255' Math.Max (0' from.B + (to.B - from.B) * fade)));  
Magic Number,BumpKit,ColorExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb ((int)Math.Min (255' Math.Max (0' from.A + (to.A - from.A) * fade))' (int)Math.Min (255' Math.Max (0' from.R + (to.R - from.R) * fade))' (int)Math.Min (255' Math.Max (0' from.G + (to.G - from.G) * fade))' (int)Math.Min (255' Math.Max (0' from.B + (to.B - from.B) * fade)));  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,MeasureStringBoundaries,The following statement contains a magic number: return new RectangleF (0' 0' (measure.Width / pathOffset + border * 2) / pathOffset' measure.Height + border * 2);  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,MeasureStringBoundaries,The following statement contains a magic number: return new RectangleF (0' 0' (measure.Width / pathOffset + border * 2) / pathOffset' measure.Height + border * 2);  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var workImage = new Bitmap ((int)measure.Width' (int)measure.Height))  	using (var gfxWork = Graphics.FromImage (workImage)) {  		gfxWork.PageUnit = GraphicsUnit.Point;  		gfxWork.SmoothingMode = gfx.SmoothingMode;  		var path = new GraphicsPath ();  		path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  		// Fade the border from outer to inner.  		for (var b = border; b > 0; b--) {  			var colorIndex = (float)1 / border * b;  			var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  			var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  			var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  			var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  			const float lineWidthOffset = (float).65;  			// This is approximate  			using (var pen = new Pen (color' b / lineWidthOffset) {  				LineJoin = LineJoin.Round  			})  				gfxWork.DrawPath (pen' path);  		}  		// Draw the text  		gfxWork.FillPath (brush' path);  		var bounds = workImage.DetectPadding ();  		var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  		// Apply the generated image  		gfx.DrawImage (workImage' x + offsetX' y);  	}  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var workImage = new Bitmap ((int)measure.Width' (int)measure.Height))  	using (var gfxWork = Graphics.FromImage (workImage)) {  		gfxWork.PageUnit = GraphicsUnit.Point;  		gfxWork.SmoothingMode = gfx.SmoothingMode;  		var path = new GraphicsPath ();  		path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  		// Fade the border from outer to inner.  		for (var b = border; b > 0; b--) {  			var colorIndex = (float)1 / border * b;  			var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  			var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  			var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  			var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  			const float lineWidthOffset = (float).65;  			// This is approximate  			using (var pen = new Pen (color' b / lineWidthOffset) {  				LineJoin = LineJoin.Round  			})  				gfxWork.DrawPath (pen' path);  		}  		// Draw the text  		gfxWork.FillPath (brush' path);  		var bounds = workImage.DetectPadding ();  		var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  		// Apply the generated image  		gfx.DrawImage (workImage' x + offsetX' y);  	}  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var workImage = new Bitmap ((int)measure.Width' (int)measure.Height))  	using (var gfxWork = Graphics.FromImage (workImage)) {  		gfxWork.PageUnit = GraphicsUnit.Point;  		gfxWork.SmoothingMode = gfx.SmoothingMode;  		var path = new GraphicsPath ();  		path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  		// Fade the border from outer to inner.  		for (var b = border; b > 0; b--) {  			var colorIndex = (float)1 / border * b;  			var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  			var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  			var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  			var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  			const float lineWidthOffset = (float).65;  			// This is approximate  			using (var pen = new Pen (color' b / lineWidthOffset) {  				LineJoin = LineJoin.Round  			})  				gfxWork.DrawPath (pen' path);  		}  		// Draw the text  		gfxWork.FillPath (brush' path);  		var bounds = workImage.DetectPadding ();  		var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  		// Apply the generated image  		gfx.DrawImage (workImage' x + offsetX' y);  	}  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var workImage = new Bitmap ((int)measure.Width' (int)measure.Height))  	using (var gfxWork = Graphics.FromImage (workImage)) {  		gfxWork.PageUnit = GraphicsUnit.Point;  		gfxWork.SmoothingMode = gfx.SmoothingMode;  		var path = new GraphicsPath ();  		path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  		// Fade the border from outer to inner.  		for (var b = border; b > 0; b--) {  			var colorIndex = (float)1 / border * b;  			var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  			var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  			var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  			var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  			const float lineWidthOffset = (float).65;  			// This is approximate  			using (var pen = new Pen (color' b / lineWidthOffset) {  				LineJoin = LineJoin.Round  			})  				gfxWork.DrawPath (pen' path);  		}  		// Draw the text  		gfxWork.FillPath (brush' path);  		var bounds = workImage.DetectPadding ();  		var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  		// Apply the generated image  		gfx.DrawImage (workImage' x + offsetX' y);  	}  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var workImage = new Bitmap ((int)measure.Width' (int)measure.Height))  	using (var gfxWork = Graphics.FromImage (workImage)) {  		gfxWork.PageUnit = GraphicsUnit.Point;  		gfxWork.SmoothingMode = gfx.SmoothingMode;  		var path = new GraphicsPath ();  		path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  		// Fade the border from outer to inner.  		for (var b = border; b > 0; b--) {  			var colorIndex = (float)1 / border * b;  			var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  			var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  			var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  			var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  			const float lineWidthOffset = (float).65;  			// This is approximate  			using (var pen = new Pen (color' b / lineWidthOffset) {  				LineJoin = LineJoin.Round  			})  				gfxWork.DrawPath (pen' path);  		}  		// Draw the text  		gfxWork.FillPath (brush' path);  		var bounds = workImage.DetectPadding ();  		var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  		// Apply the generated image  		gfx.DrawImage (workImage' x + offsetX' y);  	}  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var gfxWork = Graphics.FromImage (workImage)) {  	gfxWork.PageUnit = GraphicsUnit.Point;  	gfxWork.SmoothingMode = gfx.SmoothingMode;  	var path = new GraphicsPath ();  	path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  	// Fade the border from outer to inner.  	for (var b = border; b > 0; b--) {  		var colorIndex = (float)1 / border * b;  		var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  		var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  		var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  		var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  		const float lineWidthOffset = (float).65;  		// This is approximate  		using (var pen = new Pen (color' b / lineWidthOffset) {  			LineJoin = LineJoin.Round  		})  			gfxWork.DrawPath (pen' path);  	}  	// Draw the text  	gfxWork.FillPath (brush' path);  	var bounds = workImage.DetectPadding ();  	var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  	// Apply the generated image  	gfx.DrawImage (workImage' x + offsetX' y);  }  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var gfxWork = Graphics.FromImage (workImage)) {  	gfxWork.PageUnit = GraphicsUnit.Point;  	gfxWork.SmoothingMode = gfx.SmoothingMode;  	var path = new GraphicsPath ();  	path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  	// Fade the border from outer to inner.  	for (var b = border; b > 0; b--) {  		var colorIndex = (float)1 / border * b;  		var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  		var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  		var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  		var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  		const float lineWidthOffset = (float).65;  		// This is approximate  		using (var pen = new Pen (color' b / lineWidthOffset) {  			LineJoin = LineJoin.Round  		})  			gfxWork.DrawPath (pen' path);  	}  	// Draw the text  	gfxWork.FillPath (brush' path);  	var bounds = workImage.DetectPadding ();  	var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  	// Apply the generated image  	gfx.DrawImage (workImage' x + offsetX' y);  }  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var gfxWork = Graphics.FromImage (workImage)) {  	gfxWork.PageUnit = GraphicsUnit.Point;  	gfxWork.SmoothingMode = gfx.SmoothingMode;  	var path = new GraphicsPath ();  	path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  	// Fade the border from outer to inner.  	for (var b = border; b > 0; b--) {  		var colorIndex = (float)1 / border * b;  		var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  		var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  		var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  		var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  		const float lineWidthOffset = (float).65;  		// This is approximate  		using (var pen = new Pen (color' b / lineWidthOffset) {  			LineJoin = LineJoin.Round  		})  			gfxWork.DrawPath (pen' path);  	}  	// Draw the text  	gfxWork.FillPath (brush' path);  	var bounds = workImage.DetectPadding ();  	var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  	// Apply the generated image  	gfx.DrawImage (workImage' x + offsetX' y);  }  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var gfxWork = Graphics.FromImage (workImage)) {  	gfxWork.PageUnit = GraphicsUnit.Point;  	gfxWork.SmoothingMode = gfx.SmoothingMode;  	var path = new GraphicsPath ();  	path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  	// Fade the border from outer to inner.  	for (var b = border; b > 0; b--) {  		var colorIndex = (float)1 / border * b;  		var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  		var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  		var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  		var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  		const float lineWidthOffset = (float).65;  		// This is approximate  		using (var pen = new Pen (color' b / lineWidthOffset) {  			LineJoin = LineJoin.Round  		})  			gfxWork.DrawPath (pen' path);  	}  	// Draw the text  	gfxWork.FillPath (brush' path);  	var bounds = workImage.DetectPadding ();  	var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  	// Apply the generated image  	gfx.DrawImage (workImage' x + offsetX' y);  }  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: using (var gfxWork = Graphics.FromImage (workImage)) {  	gfxWork.PageUnit = GraphicsUnit.Point;  	gfxWork.SmoothingMode = gfx.SmoothingMode;  	var path = new GraphicsPath ();  	path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  	// Fade the border from outer to inner.  	for (var b = border; b > 0; b--) {  		var colorIndex = (float)1 / border * b;  		var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  		var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  		var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  		var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  		const float lineWidthOffset = (float).65;  		// This is approximate  		using (var pen = new Pen (color' b / lineWidthOffset) {  			LineJoin = LineJoin.Round  		})  			gfxWork.DrawPath (pen' path);  	}  	// Draw the text  	gfxWork.FillPath (brush' path);  	var bounds = workImage.DetectPadding ();  	var offsetX = ((measure.Width - bounds.Right) - bounds.X) / 2;  	// Apply the generated image  	gfx.DrawImage (workImage' x + offsetX' y);  }  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: path.AddString (text' font.FontFamily' (int)font.Style' font.Size' new PointF ((border - offset.X) * (float).75' (border - offset.Y) * (float).75)' StringFormat.GenericDefault);  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: for (var b = border; b > 0; b--) {  	var colorIndex = (float)1 / border * b;  	var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  	var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  	var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  	var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  	const float lineWidthOffset = (float).65;  	// This is approximate  	using (var pen = new Pen (color' b / lineWidthOffset) {  		LineJoin = LineJoin.Round  	})  		gfxWork.DrawPath (pen' path);  }  
Magic Number,BumpKit,FontEffects,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: for (var b = border; b > 0; b--) {  	var colorIndex = (float)1 / border * b;  	var colorStart = colors.Length > 1 ? colors.Last (c => c.Key <= colorIndex) : colors.First ();  	var colorEnd = colors.Length > 1 ? colors.First (c => c.Key >= colorIndex) : colors.First ();  	var colorOffset = 1 / Math.Max ((float).0000001' colorEnd.Key - colorStart.Key) * (colorIndex - colorStart.Key);  	var color = colorStart.Value.FadeTo (colorEnd.Value' colorOffset);  	const float lineWidthOffset = (float).65;  	// This is approximate  	using (var pen = new Pen (color' b / lineWidthOffset) {  		LineJoin = LineJoin.Round  	})  		gfxWork.DrawPath (pen' path);  }  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,InitHeader,The following statement contains a magic number: WriteByte (3);  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteGraphicControlBlock,The following statement contains a magic number: WriteByte (blockhead [3] & 0xf7 | 0x08);  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteGraphicControlBlock,The following statement contains a magic number: WriteShort (Convert.ToInt32 (frameDelay.TotalMilliseconds / 10));  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteGraphicControlBlock,The following statement contains a magic number: WriteByte (blockhead [6]);  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteImageBlock,The following statement contains a magic number: if (includeColorTable)// If first frame' use global color table - else use local   {  	sourceGif.Position = SourceGlobalColorInfoPosition;  	WriteByte (sourceGif.ReadByte () & 0x3f | 0x80);  	// Enabling local color table  	WriteColorTable (sourceGif);  } else {  	WriteByte (header [9] & 0x07 | 0x07);  	// Disabling local color table  }  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteImageBlock,The following statement contains a magic number: WriteByte (header [9] & 0x07 | 0x07);  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteImageBlock,The following statement contains a magic number: WriteByte (header [10]);  
Magic Number,BumpKit,GifEncoder,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteShort,The following statement contains a magic number: _stream.WriteByte (Convert.ToByte ((value >> 8) & 0xff));  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The following statement contains a magic number: using (var gfx = Graphics.FromImage (newImage)) {  	if (!backgroundColor.IsEmpty)  		gfx.Clear (backgroundColor);  	gfx.DrawImage (image' (float)((newImage.Width - width) / 2)' (float)((newImage.Height - height) / 2)' (float)width' (float)height);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The following statement contains a magic number: using (var gfx = Graphics.FromImage (newImage)) {  	if (!backgroundColor.IsEmpty)  		gfx.Clear (backgroundColor);  	gfx.DrawImage (image' (float)((newImage.Width - width) / 2)' (float)((newImage.Height - height) / 2)' (float)width' (float)height);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The following statement contains a magic number: gfx.DrawImage (image' (float)((newImage.Width - width) / 2)' (float)((newImage.Height - height) / 2)' (float)width' (float)height);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The following statement contains a magic number: gfx.DrawImage (image' (float)((newImage.Width - width) / 2)' (float)((newImage.Height - height) / 2)' (float)width' (float)height);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: if (mode == ScalingMode.FitContent) {  	var o = angle % 180;  	var d = Math.Sqrt (Math.Pow (image.Width' 2) + Math.Pow (image.Height' 2));  	var a = (Math.Atan ((double)image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	height = (int)(Math.Sin (a * Math.PI / 180) * d);  	a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  	width = (int)(Math.Cos (a * Math.PI / 180) * d);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: height = (int)(Math.Sin (a * Math.PI / 180) * d);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: a = (Math.Atan ((double)-image.Height / image.Width) * 180 / Math.PI) + (o > 90 ? 180 - o : o);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: width = (int)(Math.Cos (a * Math.PI / 180) * d);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: using (var gfx = Graphics.FromImage (newImage)) {  	gfx.TranslateTransform (-image.Width / (float)2' -image.Height / (float)2' MatrixOrder.Prepend);  	gfx.RotateTransform ((float)angle' MatrixOrder.Append);  	gfx.TranslateTransform (newImage.Width / (float)2' newImage.Height / (float)2' MatrixOrder.Append);  	gfx.DrawImage (image' 0' 0);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: using (var gfx = Graphics.FromImage (newImage)) {  	gfx.TranslateTransform (-image.Width / (float)2' -image.Height / (float)2' MatrixOrder.Prepend);  	gfx.RotateTransform ((float)angle' MatrixOrder.Append);  	gfx.TranslateTransform (newImage.Width / (float)2' newImage.Height / (float)2' MatrixOrder.Append);  	gfx.DrawImage (image' 0' 0);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: using (var gfx = Graphics.FromImage (newImage)) {  	gfx.TranslateTransform (-image.Width / (float)2' -image.Height / (float)2' MatrixOrder.Prepend);  	gfx.RotateTransform ((float)angle' MatrixOrder.Append);  	gfx.TranslateTransform (newImage.Width / (float)2' newImage.Height / (float)2' MatrixOrder.Append);  	gfx.DrawImage (image' 0' 0);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: using (var gfx = Graphics.FromImage (newImage)) {  	gfx.TranslateTransform (-image.Width / (float)2' -image.Height / (float)2' MatrixOrder.Prepend);  	gfx.RotateTransform ((float)angle' MatrixOrder.Append);  	gfx.TranslateTransform (newImage.Width / (float)2' newImage.Height / (float)2' MatrixOrder.Append);  	gfx.DrawImage (image' 0' 0);  }  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform (-image.Width / (float)2' -image.Height / (float)2' MatrixOrder.Prepend);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform (-image.Width / (float)2' -image.Height / (float)2' MatrixOrder.Prepend);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform (newImage.Width / (float)2' newImage.Height / (float)2' MatrixOrder.Append);  
Magic Number,BumpKit,ImageExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform (newImage.Width / (float)2' newImage.Height / (float)2' MatrixOrder.Append);  
Magic Number,BumpKit,PointExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\PointExtensions.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt (Math.Pow (plot.X' 2) + Math.Pow (plot.Y' 2));  
Magic Number,BumpKit,PointExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\PointExtensions.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt (Math.Pow (plot.X' 2) + Math.Pow (plot.Y' 2));  
Magic Number,BumpKit,PointExtensions,F:\newReposMay17\DataDink_Bumpkit\BumpKit\BumpKit\PointExtensions.cs,GetAngle,The following statement contains a magic number: return Math.Atan (plot.Y / plot.X) * 180 / Math.PI;  
