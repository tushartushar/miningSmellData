Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,Cyclomatic complexity of the method is 10
Complex Method,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,DetectPadding,Cyclomatic complexity of the method is 10
Long Parameter List,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The method has 9 parameters. Parameters: gfx' text' font' brush' x' y' border' borderColors' colorOffsets
Long Parameter List,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteImageBlock,The method has 6 parameters. Parameters: sourceGif' includeColorTable' x' y' h' w
Long Parameter List,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The method has 5 parameters. Parameters: image' size' backgroundColor' dispose' mode
Long Parameter List,BumpKit,UnsafeBitmapContext,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\UnsafeBitmapContext.cs,SetPixel,The method has 6 parameters. Parameters: x' y' alpha' red' green' blue
Long Identifier,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,,The length of the parameter ApplicationExtensionBlockIdentifier is 35.
Long Identifier,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,,The length of the parameter GraphicControlExtensionBlockIdentifier is 38.
Long Identifier,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,,The length of the parameter GraphicControlExtensionBlockSize is 32.
Long Identifier,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,,The length of the parameter SourceGraphicControlExtensionPosition is 37.
Long Identifier,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,,The length of the parameter SourceGraphicControlExtensionLength is 35.
Long Statement,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The length of the statement  "                path.AddString(text' font.FontFamily' (int) font.Style' font.Size' new PointF((border-offset.X)*(float).75' (border-offset.Y)*(float).75)' StringFormat.GenericDefault); " is 168.
Long Statement,BumpKit,UnsafeBitmapContext,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\UnsafeBitmapContext.cs,LockBits,The length of the statement  "            _lockData = _bitmap.LockBits(new Rectangle(0' 0' _bitmap.Width' _bitmap.Height)' ImageLockMode.ReadWrite' PixelFormat.Format32bppArgb); " is 135.
Complex Conditional,BumpKit,UnsafeBitmapContext,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\UnsafeBitmapContext.cs,Pointer,The conditional expression  "x >= Width || x < 0 || y >= Height || y < 0"  is complex.
Magic Number,BumpKit,ColorExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb((int) Math.Min(255' Math.Max(0' from.A + (to.A - from.A)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.R + (to.R - from.R)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.G + (to.G - from.G)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.B + (to.B - from.B)*fade)));
Magic Number,BumpKit,ColorExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb((int) Math.Min(255' Math.Max(0' from.A + (to.A - from.A)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.R + (to.R - from.R)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.G + (to.G - from.G)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.B + (to.B - from.B)*fade)));
Magic Number,BumpKit,ColorExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb((int) Math.Min(255' Math.Max(0' from.A + (to.A - from.A)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.R + (to.R - from.R)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.G + (to.G - from.G)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.B + (to.B - from.B)*fade)));
Magic Number,BumpKit,ColorExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ColorExtensions.cs,FadeTo,The following statement contains a magic number: return Color.FromArgb((int) Math.Min(255' Math.Max(0' from.A + (to.A - from.A)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.R + (to.R - from.R)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.G + (to.G - from.G)*fade))'                                    (int) Math.Min(255' Math.Max(0' from.B + (to.B - from.B)*fade)));
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,MeasureStringBoundaries,The following statement contains a magic number: const float pathOffset = (float)0.97389271333939476;
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,MeasureStringBoundaries,The following statement contains a magic number: return new RectangleF(0' 0' (measure.Width/pathOffset + border*2)/pathOffset' measure.Height + border*2);
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,MeasureStringBoundaries,The following statement contains a magic number: return new RectangleF(0' 0' (measure.Width/pathOffset + border*2)/pathOffset' measure.Height + border*2);
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: path.AddString(text' font.FontFamily' (int) font.Style' font.Size' new PointF((border-offset.X)*(float).75' (border-offset.Y)*(float).75)' StringFormat.GenericDefault);
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: path.AddString(text' font.FontFamily' (int) font.Style' font.Size' new PointF((border-offset.X)*(float).75' (border-offset.Y)*(float).75)' StringFormat.GenericDefault);
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: var colorOffset = 1/Math.Max((float).0000001' colorEnd.Key - colorStart.Key)*(colorIndex - colorStart.Key);
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: const float lineWidthOffset = (float) .65;
Magic Number,BumpKit,FontEffects,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\FontEffects.cs,DrawString,The following statement contains a magic number: var offsetX = ((measure.Width - bounds.Right) - bounds.X)/2;
Magic Number,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,InitHeader,The following statement contains a magic number: WriteByte(3);
Magic Number,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteGraphicControlBlock,The following statement contains a magic number: WriteByte(blockhead[3] & 0xf7 | 0x08);
Magic Number,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteGraphicControlBlock,The following statement contains a magic number: WriteShort(Convert.ToInt32(frameDelay.TotalMilliseconds / 10));
Magic Number,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteGraphicControlBlock,The following statement contains a magic number: WriteByte(blockhead[6]);
Magic Number,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteImageBlock,The following statement contains a magic number: WriteByte(header[10]);
Magic Number,BumpKit,GifEncoder,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\GifEncoder.cs,WriteShort,The following statement contains a magic number: _stream.WriteByte(Convert.ToByte((value >> 8) & 0xff));
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The following statement contains a magic number: gfx.DrawImage(image'                       (float)((newImage.Width - width) / 2)' (float)((newImage.Height - height) / 2)'                      (float)width' (float)height);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,ScaleToFit,The following statement contains a magic number: gfx.DrawImage(image'                       (float)((newImage.Width - width) / 2)' (float)((newImage.Height - height) / 2)'                      (float)width' (float)height);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: var o = angle%180;
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: var d = Math.Sqrt(Math.Pow(image.Width' 2) + Math.Pow(image.Height' 2));
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: var d = Math.Sqrt(Math.Pow(image.Width' 2) + Math.Pow(image.Height' 2));
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: var a = (Math.Atan((double) image.Height/image.Width)*180/Math.PI) + (o > 90 ? 180 - o : o);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: var a = (Math.Atan((double) image.Height/image.Width)*180/Math.PI) + (o > 90 ? 180 - o : o);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: var a = (Math.Atan((double) image.Height/image.Width)*180/Math.PI) + (o > 90 ? 180 - o : o);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: height = (int)(Math.Sin(a * Math.PI / 180) * d);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: a = (Math.Atan((double) -image.Height/image.Width)*180/Math.PI) + (o > 90 ? 180 - o : o);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: a = (Math.Atan((double) -image.Height/image.Width)*180/Math.PI) + (o > 90 ? 180 - o : o);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: a = (Math.Atan((double) -image.Height/image.Width)*180/Math.PI) + (o > 90 ? 180 - o : o);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: width = (int)(Math.Cos(a * Math.PI / 180) * d);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform(-image.Width/(float)2' -image.Height/(float)2' MatrixOrder.Prepend);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform(-image.Width/(float)2' -image.Height/(float)2' MatrixOrder.Prepend);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform(newImage.Width/(float)2' newImage.Height/(float)2' MatrixOrder.Append);
Magic Number,BumpKit,ImageExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\ImageExtensions.cs,Rotate,The following statement contains a magic number: gfx.TranslateTransform(newImage.Width/(float)2' newImage.Height/(float)2' MatrixOrder.Append);
Magic Number,BumpKit,PointExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\PointExtensions.cs,Plot,The following statement contains a magic number: var radians = Math.PI/180*angle;
Magic Number,BumpKit,PointExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\PointExtensions.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(plot.X' 2) + Math.Pow(plot.Y' 2));
Magic Number,BumpKit,PointExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\PointExtensions.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(plot.X' 2) + Math.Pow(plot.Y' 2));
Magic Number,BumpKit,PointExtensions,D:\research\architectureSmells\repos\DataDink_Bumpkit\BumpKit\BumpKit\PointExtensions.cs,GetAngle,The following statement contains a magic number: return Math.Atan(plot.Y/plot.X)*180/Math.PI;
