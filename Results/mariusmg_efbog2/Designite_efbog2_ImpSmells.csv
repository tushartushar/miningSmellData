Implementation smell,Namespace,Class,File,Method,Description
Long Method,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The method has 165 lines of code.
Complex Method,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,Cyclomatic complexity of the method is 11
Complex Method,voidsoft,Utils,C:\repos\mariusmg_efbog2\Utils.cs,GetDbType,Cyclomatic complexity of the method is 9
Complex Method,voidsoft.efbog,Program,C:\repos\mariusmg_efbog2\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Parameter List,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,IsEnumType,The method has 5 parameters.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append ("            public " + t.Name + "BusinessObject" + "(" + context.ContextName + " c)" + Environment.NewLine); " is 125.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append (context.ContextName + " c = Activator.CreateInstance<" + context.ContextName + ">();" + Environment.NewLine); " is 125.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append ("            public IQueryable<" + t.Name + "> Find(Expression<Func<" + t.Name + "' bool>> predicate)" + Environment.NewLine); " is 142.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append ("                            throw new ArgumentException(" + GetEscapedQuote () + "Invalid key" + GetEscapedQuote () + ");" + Environment.NewLine); " is 163.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append ("                var query = from currentEntity in context." + t.Name + " select currentEntity;" + Environment.NewLine); " is 136.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append (t.Name + "[] entities = qr.Execute<" + context.ContextName + "'" + t.Name + ">(context' (DbQuery<" + t.Name + ">)query' false);" + Environment.NewLine); " is 168.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "		builder.Append ("             " + t.Name + "[] entities = qr.Execute<" + context.ContextName + "'" + t.Name + ">(context'(DbQuery<" + t.Name + ">)query' false);" + Environment.NewLine); " is 185.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	//builder.Append("                " + t.Entity.Name + " entity = Get" + t.Entity.Name + "(key' queryContext);" + Environment.NewLine); " is 134.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	//builder.Append("                throw new ArgumentException(" + GetEscapedQuote() + "Invalid key" + GetEscapedQuote() + "); " + Environment.NewLine); " is 151.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append ("                var query = from currentEntity in context." + t.Name + " where currentEntity." + t.PrimaryKeyFieldName + " == key select currentEntity;" + Environment.NewLine); " is 193.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	builder.Append ("            " + t.Name + "[] entities = qr.Execute<" + context.ContextName + "'" + t.Name + ">(context' (DbQuery<" + t.Name + ">)query' false);" + Environment.NewLine); " is 185.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	//	builder.Append("                var query = from entity in context." + t.Entity.Name + " orderby entity." + fieldName + " ascending select new { entity." + t.PrimaryKeyFieldName + "' entity." + fieldName + " };" + Environment.NewLine); " is 238.
Long Statement,voidsoft.efbog,BusinessObjectGenerator,C:\repos\mariusmg_efbog2\Generators\RepositoryObjectGenerator.cs,GenerateBusinessObject,The length of the statement  "	//	builder.Append("                Dictionary<int'string> result = qr.GetLookupData<" + context.ContextName + ">(context' (ObjectQuery)query'" + GetEscapedQuote() + t.PrimaryKeyFieldName + GetEscapedQuote() + "'" + GetEscapedQuote() + fieldName + GetEscapedQuote() + "' false);" + Environment.NewLine); " is 302.
Long Statement,voidsoft.efbog,EntityFrameworkTypeReflector,C:\repos\mariusmg_efbog2\EntityFrameworkTypeReflector.cs,GetProperties,The length of the statement  "		EdmScalarPropertyAttribute[] attributes = (EdmScalarPropertyAttribute[])info.GetCustomAttributes (typeof(EdmScalarPropertyAttribute)' false); " is 141.
Empty Catch Block,voidsoft.efbog,EntityFrameworkTypeReflector,C:\repos\mariusmg_efbog2\EntityFrameworkTypeReflector.cs,ReflectAndGenerate,The method has an empty catch block.
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: foreach (var line in strings) {  	try {  		string[] split = line.Split (new[] {  			"||"  		}' StringSplitOptions.RemoveEmptyEntries);  		if (split.Length != 3) {  			continue;  		}  		var a = new ColumnAnnotation (context);  		a.EntityName = split [0];  		a.PropertyName = split [1];  		string lastPart = split [2].ToLower ();  		if (lastPart == "file") {  			a.HoldsFile = true;  		}  		if (lastPart.StartsWith ("enum")) {  			//remove the start  			lastPart = lastPart.Substring (6);  			string[] enumParts = lastPart.Split (new[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (var s in enumParts) {  				try {  					string[] pieces = s.Split (''');  					if (pieces.Length == 2) {  						a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  					}  				}  				catch {  					continue;  				}  			}  		}  		if (lastPart.StartsWith ("length")) {  			string[] length = lastPart.Split (new[] {  				"="  			}' StringSplitOptions.RemoveEmptyEntries);  			a.FieldLength = Convert.ToInt32 (length [1]);  		}  		list.Add (a);  	}  	catch {  		continue;  	}  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: foreach (var line in strings) {  	try {  		string[] split = line.Split (new[] {  			"||"  		}' StringSplitOptions.RemoveEmptyEntries);  		if (split.Length != 3) {  			continue;  		}  		var a = new ColumnAnnotation (context);  		a.EntityName = split [0];  		a.PropertyName = split [1];  		string lastPart = split [2].ToLower ();  		if (lastPart == "file") {  			a.HoldsFile = true;  		}  		if (lastPart.StartsWith ("enum")) {  			//remove the start  			lastPart = lastPart.Substring (6);  			string[] enumParts = lastPart.Split (new[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (var s in enumParts) {  				try {  					string[] pieces = s.Split (''');  					if (pieces.Length == 2) {  						a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  					}  				}  				catch {  					continue;  				}  			}  		}  		if (lastPart.StartsWith ("length")) {  			string[] length = lastPart.Split (new[] {  				"="  			}' StringSplitOptions.RemoveEmptyEntries);  			a.FieldLength = Convert.ToInt32 (length [1]);  		}  		list.Add (a);  	}  	catch {  		continue;  	}  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: foreach (var line in strings) {  	try {  		string[] split = line.Split (new[] {  			"||"  		}' StringSplitOptions.RemoveEmptyEntries);  		if (split.Length != 3) {  			continue;  		}  		var a = new ColumnAnnotation (context);  		a.EntityName = split [0];  		a.PropertyName = split [1];  		string lastPart = split [2].ToLower ();  		if (lastPart == "file") {  			a.HoldsFile = true;  		}  		if (lastPart.StartsWith ("enum")) {  			//remove the start  			lastPart = lastPart.Substring (6);  			string[] enumParts = lastPart.Split (new[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (var s in enumParts) {  				try {  					string[] pieces = s.Split (''');  					if (pieces.Length == 2) {  						a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  					}  				}  				catch {  					continue;  				}  			}  		}  		if (lastPart.StartsWith ("length")) {  			string[] length = lastPart.Split (new[] {  				"="  			}' StringSplitOptions.RemoveEmptyEntries);  			a.FieldLength = Convert.ToInt32 (length [1]);  		}  		list.Add (a);  	}  	catch {  		continue;  	}  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: foreach (var line in strings) {  	try {  		string[] split = line.Split (new[] {  			"||"  		}' StringSplitOptions.RemoveEmptyEntries);  		if (split.Length != 3) {  			continue;  		}  		var a = new ColumnAnnotation (context);  		a.EntityName = split [0];  		a.PropertyName = split [1];  		string lastPart = split [2].ToLower ();  		if (lastPart == "file") {  			a.HoldsFile = true;  		}  		if (lastPart.StartsWith ("enum")) {  			//remove the start  			lastPart = lastPart.Substring (6);  			string[] enumParts = lastPart.Split (new[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (var s in enumParts) {  				try {  					string[] pieces = s.Split (''');  					if (pieces.Length == 2) {  						a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  					}  				}  				catch {  					continue;  				}  			}  		}  		if (lastPart.StartsWith ("length")) {  			string[] length = lastPart.Split (new[] {  				"="  			}' StringSplitOptions.RemoveEmptyEntries);  			a.FieldLength = Convert.ToInt32 (length [1]);  		}  		list.Add (a);  	}  	catch {  		continue;  	}  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: try {  	string[] split = line.Split (new[] {  		"||"  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3) {  		continue;  	}  	var a = new ColumnAnnotation (context);  	a.EntityName = split [0];  	a.PropertyName = split [1];  	string lastPart = split [2].ToLower ();  	if (lastPart == "file") {  		a.HoldsFile = true;  	}  	if (lastPart.StartsWith ("enum")) {  		//remove the start  		lastPart = lastPart.Substring (6);  		string[] enumParts = lastPart.Split (new[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var s in enumParts) {  			try {  				string[] pieces = s.Split (''');  				if (pieces.Length == 2) {  					a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  				}  			}  			catch {  				continue;  			}  		}  	}  	if (lastPart.StartsWith ("length")) {  		string[] length = lastPart.Split (new[] {  			"="  		}' StringSplitOptions.RemoveEmptyEntries);  		a.FieldLength = Convert.ToInt32 (length [1]);  	}  	list.Add (a);  }  catch {  	continue;  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: try {  	string[] split = line.Split (new[] {  		"||"  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3) {  		continue;  	}  	var a = new ColumnAnnotation (context);  	a.EntityName = split [0];  	a.PropertyName = split [1];  	string lastPart = split [2].ToLower ();  	if (lastPart == "file") {  		a.HoldsFile = true;  	}  	if (lastPart.StartsWith ("enum")) {  		//remove the start  		lastPart = lastPart.Substring (6);  		string[] enumParts = lastPart.Split (new[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var s in enumParts) {  			try {  				string[] pieces = s.Split (''');  				if (pieces.Length == 2) {  					a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  				}  			}  			catch {  				continue;  			}  		}  	}  	if (lastPart.StartsWith ("length")) {  		string[] length = lastPart.Split (new[] {  			"="  		}' StringSplitOptions.RemoveEmptyEntries);  		a.FieldLength = Convert.ToInt32 (length [1]);  	}  	list.Add (a);  }  catch {  	continue;  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: try {  	string[] split = line.Split (new[] {  		"||"  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3) {  		continue;  	}  	var a = new ColumnAnnotation (context);  	a.EntityName = split [0];  	a.PropertyName = split [1];  	string lastPart = split [2].ToLower ();  	if (lastPart == "file") {  		a.HoldsFile = true;  	}  	if (lastPart.StartsWith ("enum")) {  		//remove the start  		lastPart = lastPart.Substring (6);  		string[] enumParts = lastPart.Split (new[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var s in enumParts) {  			try {  				string[] pieces = s.Split (''');  				if (pieces.Length == 2) {  					a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  				}  			}  			catch {  				continue;  			}  		}  	}  	if (lastPart.StartsWith ("length")) {  		string[] length = lastPart.Split (new[] {  			"="  		}' StringSplitOptions.RemoveEmptyEntries);  		a.FieldLength = Convert.ToInt32 (length [1]);  	}  	list.Add (a);  }  catch {  	continue;  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: try {  	string[] split = line.Split (new[] {  		"||"  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3) {  		continue;  	}  	var a = new ColumnAnnotation (context);  	a.EntityName = split [0];  	a.PropertyName = split [1];  	string lastPart = split [2].ToLower ();  	if (lastPart == "file") {  		a.HoldsFile = true;  	}  	if (lastPart.StartsWith ("enum")) {  		//remove the start  		lastPart = lastPart.Substring (6);  		string[] enumParts = lastPart.Split (new[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var s in enumParts) {  			try {  				string[] pieces = s.Split (''');  				if (pieces.Length == 2) {  					a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  				}  			}  			catch {  				continue;  			}  		}  	}  	if (lastPart.StartsWith ("length")) {  		string[] length = lastPart.Split (new[] {  			"="  		}' StringSplitOptions.RemoveEmptyEntries);  		a.FieldLength = Convert.ToInt32 (length [1]);  	}  	list.Add (a);  }  catch {  	continue;  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: if (split.Length != 3) {  	continue;  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: if (lastPart.StartsWith ("enum")) {  	//remove the start  	lastPart = lastPart.Substring (6);  	string[] enumParts = lastPart.Split (new[] {  		"'"  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var s in enumParts) {  		try {  			string[] pieces = s.Split (''');  			if (pieces.Length == 2) {  				a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  			}  		}  		catch {  			continue;  		}  	}  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: if (lastPart.StartsWith ("enum")) {  	//remove the start  	lastPart = lastPart.Substring (6);  	string[] enumParts = lastPart.Split (new[] {  		"'"  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var s in enumParts) {  		try {  			string[] pieces = s.Split (''');  			if (pieces.Length == 2) {  				a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  			}  		}  		catch {  			continue;  		}  	}  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: lastPart = lastPart.Substring (6);  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: foreach (var s in enumParts) {  	try {  		string[] pieces = s.Split (''');  		if (pieces.Length == 2) {  			a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  		}  	}  	catch {  		continue;  	}  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: try {  	string[] pieces = s.Split (''');  	if (pieces.Length == 2) {  		a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  	}  }  catch {  	continue;  }  
Magic Number,voidsoft,ColumnAnnotation,C:\repos\mariusmg_efbog2\ColumnAnnotation.cs,ParseAnnotations,The following statement contains a magic number: if (pieces.Length == 2) {  	a.EnumValues.Add (Convert.ToInt32 (pieces [0])' pieces [1]);  }  
