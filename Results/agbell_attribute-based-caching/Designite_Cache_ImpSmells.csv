Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CacheAspect.Attributes,Cacheable,C:\repos\agbell_attribute-based-caching\Cache\Attributes\Cacheable.cs,CompileTimeInitialize,The length of the statement  "                KeyBuilder.MethodName = string.Format("{0}.{1}"' method.DeclaringType != null ? method.DeclaringType.FullName : string.Empty' method.Name); " is 139.
Magic Number,CacheAspect,BTreeCache,C:\repos\agbell_attribute-based-caching\Cache\Implementations\BTreeCache.cs,LoadCache,The following statement contains a magic number: if (treeCache == null)              {                  if (File.Exists(treefile) && File.Exists(datafile))                  {                      treeCache = new SerializedTree(hBplusTreeBytes.ReOpen(treefile' datafile));                  }                  else                  {                      treeCache = new SerializedTree(hBplusTreeBytes.Initialize(treefile' datafile' 500));                  }                  treeCache.SetFootPrintLimit(10);              }
Magic Number,CacheAspect,BTreeCache,C:\repos\agbell_attribute-based-caching\Cache\Implementations\BTreeCache.cs,LoadCache,The following statement contains a magic number: if (treeCache == null)              {                  if (File.Exists(treefile) && File.Exists(datafile))                  {                      treeCache = new SerializedTree(hBplusTreeBytes.ReOpen(treefile' datafile));                  }                  else                  {                      treeCache = new SerializedTree(hBplusTreeBytes.Initialize(treefile' datafile' 500));                  }                  treeCache.SetFootPrintLimit(10);              }
Missing Default,CacheAspect,KeyBuilder,C:\repos\agbell_attribute-based-caching\Cache\Supporting\KeyBuilder.cs,BuildCacheKey,The following switch statement is missing a default case: switch (Settings)              {                  case CacheSettings.IgnoreParameters:                      return cacheKeyBuilder.ToString();                  case CacheSettings.UseId:                      argIndex = GetArgumentIndexByName("Id");                      cacheKeyBuilder.Append(arguments.GetArgument(argIndex) ?? "Null");                      break;                  case CacheSettings.UseProperty:                      argIndex = GetArgumentIndexByName(ParameterProperty);                      cacheKeyBuilder.Append(arguments.GetArgument(argIndex) ?? "Null");                      break;                  case CacheSettings.Default:                      for (var i = 0; i < arguments.Count; i++)                      {                          BuildDefaultKey(arguments.GetArgument(i)' cacheKeyBuilder);                      }                      break;              }
