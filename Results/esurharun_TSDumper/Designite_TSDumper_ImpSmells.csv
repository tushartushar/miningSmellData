Implementation smell,Namespace,Class,File,Method,Description
Long Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,doAnalysis,The method has 117 lines of code.
Long Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,decodeTable,The method has 142 lines of code.
Long Method,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,doDump,The method has 103 lines of code.
Complex Method,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,ValidateForm,Cyclomatic complexity of the method is 10
Complex Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,doAnalysis,Cyclomatic complexity of the method is 17
Complex Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,Cyclomatic complexity of the method is 8
Complex Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,Cyclomatic complexity of the method is 10
Complex Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,processResults,Cyclomatic complexity of the method is 13
Complex Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,decodePid,Cyclomatic complexity of the method is 40
Complex Method,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,decodeTable,Cyclomatic complexity of the method is 83
Complex Method,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,ChangeControlStatus,Cyclomatic complexity of the method is 10
Complex Method,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,doDump,Cyclomatic complexity of the method is 15
Complex Method,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,Cyclomatic complexity of the method is 8
Complex Method,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,Cyclomatic complexity of the method is 8
Complex Method,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,cellValueNeeded,Cyclomatic complexity of the method is 17
Complex Method,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,Cyclomatic complexity of the method is 23
Long Parameter List,TSDumper,INIFile,C:\repos\esurharun_TSDumper\TSDumper\INIFile.cs,GetPrivateProfileString,The method has 6 parameters.
Long Statement,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,Process,The length of the statement  "	Satellite.Load (Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("TuningParameters"' "dvbs")) + Path.DirectorySeparatorChar); " is 135.
Long Statement,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,Process,The length of the statement  "	TerrestrialProvider.Load (Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("TuningParameters"' "dvbt")) + Path.DirectorySeparatorChar); " is 145.
Long Statement,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,Process,The length of the statement  "	CableProvider.Load (Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("TuningParameters"' "dvbc")) + Path.DirectorySeparatorChar); " is 139.
Long Statement,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,Process,The length of the statement  "	AtscProvider.Load (Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("TuningParameters"' "atsc")) + Path.DirectorySeparatorChar); " is 138.
Long Statement,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,Process,The length of the statement  "	ClearQamProvider.Load (Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("TuningParameters"' "clear QAM")) + Path.DirectorySeparatorChar); " is 147.
Long Statement,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,Process,The length of the statement  "	ISDBSatelliteProvider.Load (Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("TuningParameters"' "isdbs")) + Path.DirectorySeparatorChar); " is 148.
Long Statement,TSDumper,FrequencySelectionControl,C:\repos\esurharun_TSDumper\TSDumper\FrequencySelectionControl.cs,Process,The length of the statement  "	ISDBTerrestrialProvider.Load (Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("TuningParameters"' "isdbt")) + Path.DirectorySeparatorChar); " is 150.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// This class implements the 'CodeDomProvider' class as its base. All of the current .Net languages (at least Microsoft ones) " is 125.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// come with thier own implemtation' thus you can allow the user to use the language of thier choice (though i recommend that " is 125.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// Saves us from deleting the Dll when we are done with it' though you could set this to false and save start-up time by next time by not having to re-compile " is 158.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// And set any others you want' there a quite a few' take some time to look through them all and decide which fit your application best! " is 136.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// Add any references you want the users to be able to access' be warned that giving them access to some classes can allow " is 122.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// harmful code to be written and executed. I recommend that you write your own Class library that is the only reference it allows " is 130.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// (though things like "System.Xml.dll" can be useful' just need to provide a way users can read a file to pass in to it) " is 121.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// Just to avoid bloatin this example to much' we will just add THIS program to its references' that way we don't need another " is 126.
Long Statement,TSDumper,ScriptRunner,C:\repos\esurharun_TSDumper\TSDumper\ScriptRunner.cs,CompileCode,The length of the statement  "	// project to store the interfaces that both this class and the other uses. Just remember' this will expose ALL public classes to " is 129.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,cmdScan_Click,The length of the statement  "		Logger.Instance.Write ("Analysis started for provider " + analysisParameters.ScanningFrequency.Provider.Name + " frequency " + analysisParameters.ScanningFrequency.ToString ()); " is 177.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,doAnalysis,The length of the statement  "		BDAGraph graph = BDAGraph.FindTuner (analysisParameters.Tuners' tunerNodeType' tuningSpec' currentTuner' analysisParameters.RepeatDiseqc' analysisParameters.SwitchAfterPlay); " is 174.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,doAnalysis,The length of the statement  "			frequencySelectionControl.Invoke (new ShowMessage (showMessage)' "No tuner able to tune frequency " + analysisParameters.ScanningFrequency.ToString ()' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 196.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,doAnalysis,The length of the statement  "							frequencySelectionControl.Invoke (new ShowMessage (showMessage)' "Simulation Data Provider failed." + Environment.NewLine + Environment.NewLine + providerReply' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 205.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,doAnalysis,The length of the statement  "					frequencySelectionControl.Invoke (new ShowMessage (showMessage)' "Failed to process dump file." + Environment.NewLine + Environment.NewLine + ex.Message' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 198.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The length of the statement  "			Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength); " is 153.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The length of the statement  "	while ((DateTime.Now - startTime).TotalSeconds < analysisParameters.DataCollectionTimeout && !worker.CancellationPending) { " is 123.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The length of the statement  "				Logger.Instance.Write ("Analysis resetting pid after " + packetCount + " packets (errors = " + errorPackets + " null = " + nullPackets + ")"); " is 142.
Long Statement,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,runWorkerCompleted,The length of the statement  "	MessageBox.Show ("The transport stream analysis has been completed."' "TSDumper"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 132.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,cmdScan_Click,The length of the statement  "			string val = ScriptRunner.run_after_finish (last_dump_parameters.FileName' get_active_tuner_idx ()' after_recording_complete_script_path.Text); " is 143.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,doDump,The length of the statement  "		BDAGraph graph = BDAGraph.FindTuner (dumpParameters.Tuners' tunerNodeType' tuningSpec' currentTuner' dumpParameters.RepeatDiseqc' dumpParameters.SwitchAfterPlay' dumpParameters.FileName); " is 187.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,doDump,The length of the statement  "			frequencySelectionControl.Invoke (new ShowMessage (showMessage)' "No tuner able to tune frequency " + dumpParameters.ScanningFrequency.ToString ()' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 192.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,doDump,The length of the statement  "					frequencySelectionControl.Invoke (new ShowMessage (showMessage)' "Failed to create dump file." + Environment.NewLine + Environment.NewLine + ex.Message' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 197.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The length of the statement  "			Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength); " is 153.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getDumpParameters,The length of the statement  "	string newFilePath = string.Format ("{0}\\tsdump-{1}.ts"' Path.GetPathRoot (txtOutputFile.Text)' DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond); " is 148.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getDumpParameters,The length of the statement  "			string val = ScriptRunner.run_before_start (newFilePath' get_active_tuner_idx ()' before_recording_complete_script_path.Text); " is 126.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The length of the statement  "				string val = ScriptRunner.run_after_finish (last_dump_parameters.FileName' get_active_tuner_idx ()' after_recording_complete_script_path.Text); " is 143.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,save_settings,The length of the statement  "		inifile.Write ("default"' "selected_satellite"' string.Format ("{0}"' frequencySelectionControl.selected_satellite_index)); " is 123.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,save_settings,The length of the statement  "		inifile.Write ("default"' "selected_frequency"' string.Format ("{0}"' frequencySelectionControl.selected_frequency_index)); " is 123.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,save_settings,The length of the statement  "		inifile.Write ("default"' "LNBHighBandFrequency"' string.Format ("{0}"' frequencySelectionControl.LNBHighBandFrequency)); " is 121.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,save_settings,The length of the statement  "		inifile.Write ("default"' "UseSignalPresent"' frequencySelectionControl.UseSignalPresent ? bool.TrueString : bool.FalseString); " is 127.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,save_settings,The length of the statement  "		inifile.Write ("default"' "SwitchAfterPlay"' frequencySelectionControl.SwitchAfterPlay ? bool.TrueString : bool.FalseString); " is 125.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,load_settings,The length of the statement  "			frequencySelectionControl.selected_satellite_index = Int32.Parse (inifile.Read ("default"' "selected_satellite")' NumberStyles.Integer); " is 136.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,load_settings,The length of the statement  "			frequencySelectionControl.selected_frequency_index = Int32.Parse (inifile.Read ("default"' "selected_frequency")' NumberStyles.Integer); " is 136.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,load_settings,The length of the statement  "			frequencySelectionControl.LNBLowBandFrequency = Int32.Parse (inifile.Read ("default"' "LNBLowBandFrequency")' NumberStyles.Integer); " is 132.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,load_settings,The length of the statement  "			frequencySelectionControl.LNBHighBandFrequency = Int32.Parse (inifile.Read ("default"' "LNBHighBandFrequency")' NumberStyles.Integer); " is 134.
Long Statement,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,load_settings,The length of the statement  "			frequencySelectionControl.LNBSwitchFrequency = Int32.Parse (inifile.Read ("default"' "LNBSwitchFrequency")' NumberStyles.Integer); " is 130.
Long Statement,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,checkLine,The length of the statement  "			if (lineEntry.Time.Contains (filterString.Trim ()) || lineEntry.Type.Contains (filterString.Trim ()) || lineEntry.Detail.Contains (filterString.Trim ())) " is 153.
Long Statement,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,checkLine,The length of the statement  "			if (lineEntry.Time.ToUpper ().Contains (upperFilterString) || lineEntry.Type.ToUpper ().Contains (upperFilterString) || lineEntry.Detail.ToUpper ().Contains (upperFilterString)) " is 177.
Complex Conditional,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The conditional expression  "timePresent && editedLine.Length > 17 && editedLine [13] == '<' && editedLine [15] == '>'"  is complex.
Empty Catch Block,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The method has an empty catch block.
Empty Catch Block,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,Process,The method has an empty catch block.
Magic Number,TSDumper,MainWindow,C:\repos\esurharun_TSDumper\TSDumper\MainWindow.cs,MainWindow,The following statement contains a magic number: if (Tuner.TunerCollection.Count == 0) {  	MessageBox.Show ("There are no tuners installed on this machine."' "TSDumper"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	Environment.Exit (10);  }  
Magic Number,TSDumper,MainWindow,C:\repos\esurharun_TSDumper\TSDumper\MainWindow.cs,MainWindow,The following statement contains a magic number: Environment.Exit (10);  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,Process,The following statement contains a magic number: nudSignalLockTimeout.Value = 10;  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,Process,The following statement contains a magic number: nudDataCollectionTimeout.Value = 60;  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,btTimeoutDefaults_Click,The following statement contains a magic number: nudSignalLockTimeout.Value = 10;  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,btTimeoutDefaults_Click,The following statement contains a magic number: nudDataCollectionTimeout.Value = 60;  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,cmdScan_Click,The following statement contains a magic number: if (cmdScan.Text == "Stop Analysis") {  	Logger.Instance.Write ("Stop analysis requested");  	workerAnalyze.CancelAsync ();  	resetEvent.WaitOne (new TimeSpan (0' 0' 45));  	cmdScan.Text = "Start Analysis";  	lblScanning.Visible = false;  	pbarProgress.Visible = false;  	pbarProgress.Enabled = false;  	return;  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,cmdScan_Click,The following statement contains a magic number: resetEvent.WaitOne (new TimeSpan (0' 0' 45));  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending) {  		Logger.Instance.Write ("Analysis abandoned by user");  		return (null);  	}  	locked = graph.SignalLocked;  	if (!locked) {  		int signalQuality = graph.SignalQuality;  		if (signalQuality > 0) {  			Logger.Instance.Write ("Signal not locked but signal quality > 0");  			locked = true;  			done = true;  		}  		else {  			if (!analysisParameters.UseSignalPresent) {  				Logger.Instance.Write ("Signal not locked and signal quality not > 0");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  			}  			else {  				bool signalPresent = graph.SignalPresent;  				if (signalPresent) {  					Logger.Instance.Write ("Signal present");  					locked = true;  					done = true;  				}  				else {  					Logger.Instance.Write ("Signal not present");  					Thread.Sleep (1000);  					timeout = timeout.Add (new TimeSpan (0' 0' 1));  					done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  				}  			}  			if (done) {  				done = (frequencyRetries == 2);  				if (done)  					Logger.Instance.Write ("<e> Failed to acquire signal");  				else {  					Logger.Instance.Write ("Retrying frequency");  					timeout = new TimeSpan ();  					frequencyRetries++;  				}  			}  		}  	}  	else {  		Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  		done = true;  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending) {  		Logger.Instance.Write ("Analysis abandoned by user");  		return (null);  	}  	locked = graph.SignalLocked;  	if (!locked) {  		int signalQuality = graph.SignalQuality;  		if (signalQuality > 0) {  			Logger.Instance.Write ("Signal not locked but signal quality > 0");  			locked = true;  			done = true;  		}  		else {  			if (!analysisParameters.UseSignalPresent) {  				Logger.Instance.Write ("Signal not locked and signal quality not > 0");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  			}  			else {  				bool signalPresent = graph.SignalPresent;  				if (signalPresent) {  					Logger.Instance.Write ("Signal present");  					locked = true;  					done = true;  				}  				else {  					Logger.Instance.Write ("Signal not present");  					Thread.Sleep (1000);  					timeout = timeout.Add (new TimeSpan (0' 0' 1));  					done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  				}  			}  			if (done) {  				done = (frequencyRetries == 2);  				if (done)  					Logger.Instance.Write ("<e> Failed to acquire signal");  				else {  					Logger.Instance.Write ("Retrying frequency");  					timeout = new TimeSpan ();  					frequencyRetries++;  				}  			}  		}  	}  	else {  		Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  		done = true;  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending) {  		Logger.Instance.Write ("Analysis abandoned by user");  		return (null);  	}  	locked = graph.SignalLocked;  	if (!locked) {  		int signalQuality = graph.SignalQuality;  		if (signalQuality > 0) {  			Logger.Instance.Write ("Signal not locked but signal quality > 0");  			locked = true;  			done = true;  		}  		else {  			if (!analysisParameters.UseSignalPresent) {  				Logger.Instance.Write ("Signal not locked and signal quality not > 0");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  			}  			else {  				bool signalPresent = graph.SignalPresent;  				if (signalPresent) {  					Logger.Instance.Write ("Signal present");  					locked = true;  					done = true;  				}  				else {  					Logger.Instance.Write ("Signal not present");  					Thread.Sleep (1000);  					timeout = timeout.Add (new TimeSpan (0' 0' 1));  					done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  				}  			}  			if (done) {  				done = (frequencyRetries == 2);  				if (done)  					Logger.Instance.Write ("<e> Failed to acquire signal");  				else {  					Logger.Instance.Write ("Retrying frequency");  					timeout = new TimeSpan ();  					frequencyRetries++;  				}  			}  		}  	}  	else {  		Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  		done = true;  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (!locked) {  	int signalQuality = graph.SignalQuality;  	if (signalQuality > 0) {  		Logger.Instance.Write ("Signal not locked but signal quality > 0");  		locked = true;  		done = true;  	}  	else {  		if (!analysisParameters.UseSignalPresent) {  			Logger.Instance.Write ("Signal not locked and signal quality not > 0");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  		}  		else {  			bool signalPresent = graph.SignalPresent;  			if (signalPresent) {  				Logger.Instance.Write ("Signal present");  				locked = true;  				done = true;  			}  			else {  				Logger.Instance.Write ("Signal not present");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  			}  		}  		if (done) {  			done = (frequencyRetries == 2);  			if (done)  				Logger.Instance.Write ("<e> Failed to acquire signal");  			else {  				Logger.Instance.Write ("Retrying frequency");  				timeout = new TimeSpan ();  				frequencyRetries++;  			}  		}  	}  }  else {  	Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  	done = true;  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (!locked) {  	int signalQuality = graph.SignalQuality;  	if (signalQuality > 0) {  		Logger.Instance.Write ("Signal not locked but signal quality > 0");  		locked = true;  		done = true;  	}  	else {  		if (!analysisParameters.UseSignalPresent) {  			Logger.Instance.Write ("Signal not locked and signal quality not > 0");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  		}  		else {  			bool signalPresent = graph.SignalPresent;  			if (signalPresent) {  				Logger.Instance.Write ("Signal present");  				locked = true;  				done = true;  			}  			else {  				Logger.Instance.Write ("Signal not present");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  			}  		}  		if (done) {  			done = (frequencyRetries == 2);  			if (done)  				Logger.Instance.Write ("<e> Failed to acquire signal");  			else {  				Logger.Instance.Write ("Retrying frequency");  				timeout = new TimeSpan ();  				frequencyRetries++;  			}  		}  	}  }  else {  	Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  	done = true;  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (!locked) {  	int signalQuality = graph.SignalQuality;  	if (signalQuality > 0) {  		Logger.Instance.Write ("Signal not locked but signal quality > 0");  		locked = true;  		done = true;  	}  	else {  		if (!analysisParameters.UseSignalPresent) {  			Logger.Instance.Write ("Signal not locked and signal quality not > 0");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  		}  		else {  			bool signalPresent = graph.SignalPresent;  			if (signalPresent) {  				Logger.Instance.Write ("Signal present");  				locked = true;  				done = true;  			}  			else {  				Logger.Instance.Write ("Signal not present");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  			}  		}  		if (done) {  			done = (frequencyRetries == 2);  			if (done)  				Logger.Instance.Write ("<e> Failed to acquire signal");  			else {  				Logger.Instance.Write ("Retrying frequency");  				timeout = new TimeSpan ();  				frequencyRetries++;  			}  		}  	}  }  else {  	Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  	done = true;  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (signalQuality > 0) {  	Logger.Instance.Write ("Signal not locked but signal quality > 0");  	locked = true;  	done = true;  }  else {  	if (!analysisParameters.UseSignalPresent) {  		Logger.Instance.Write ("Signal not locked and signal quality not > 0");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  	}  	else {  		bool signalPresent = graph.SignalPresent;  		if (signalPresent) {  			Logger.Instance.Write ("Signal present");  			locked = true;  			done = true;  		}  		else {  			Logger.Instance.Write ("Signal not present");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  		}  	}  	if (done) {  		done = (frequencyRetries == 2);  		if (done)  			Logger.Instance.Write ("<e> Failed to acquire signal");  		else {  			Logger.Instance.Write ("Retrying frequency");  			timeout = new TimeSpan ();  			frequencyRetries++;  		}  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (signalQuality > 0) {  	Logger.Instance.Write ("Signal not locked but signal quality > 0");  	locked = true;  	done = true;  }  else {  	if (!analysisParameters.UseSignalPresent) {  		Logger.Instance.Write ("Signal not locked and signal quality not > 0");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  	}  	else {  		bool signalPresent = graph.SignalPresent;  		if (signalPresent) {  			Logger.Instance.Write ("Signal present");  			locked = true;  			done = true;  		}  		else {  			Logger.Instance.Write ("Signal not present");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  		}  	}  	if (done) {  		done = (frequencyRetries == 2);  		if (done)  			Logger.Instance.Write ("<e> Failed to acquire signal");  		else {  			Logger.Instance.Write ("Retrying frequency");  			timeout = new TimeSpan ();  			frequencyRetries++;  		}  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (signalQuality > 0) {  	Logger.Instance.Write ("Signal not locked but signal quality > 0");  	locked = true;  	done = true;  }  else {  	if (!analysisParameters.UseSignalPresent) {  		Logger.Instance.Write ("Signal not locked and signal quality not > 0");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  	}  	else {  		bool signalPresent = graph.SignalPresent;  		if (signalPresent) {  			Logger.Instance.Write ("Signal present");  			locked = true;  			done = true;  		}  		else {  			Logger.Instance.Write ("Signal not present");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  		}  	}  	if (done) {  		done = (frequencyRetries == 2);  		if (done)  			Logger.Instance.Write ("<e> Failed to acquire signal");  		else {  			Logger.Instance.Write ("Retrying frequency");  			timeout = new TimeSpan ();  			frequencyRetries++;  		}  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (!analysisParameters.UseSignalPresent) {  	Logger.Instance.Write ("Signal not locked and signal quality not > 0");  	Thread.Sleep (1000);  	timeout = timeout.Add (new TimeSpan (0' 0' 1));  	done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  }  else {  	bool signalPresent = graph.SignalPresent;  	if (signalPresent) {  		Logger.Instance.Write ("Signal present");  		locked = true;  		done = true;  	}  	else {  		Logger.Instance.Write ("Signal not present");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (!analysisParameters.UseSignalPresent) {  	Logger.Instance.Write ("Signal not locked and signal quality not > 0");  	Thread.Sleep (1000);  	timeout = timeout.Add (new TimeSpan (0' 0' 1));  	done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  }  else {  	bool signalPresent = graph.SignalPresent;  	if (signalPresent) {  		Logger.Instance.Write ("Signal present");  		locked = true;  		done = true;  	}  	else {  		Logger.Instance.Write ("Signal not present");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (signalPresent) {  	Logger.Instance.Write ("Signal present");  	locked = true;  	done = true;  }  else {  	Logger.Instance.Write ("Signal not present");  	Thread.Sleep (1000);  	timeout = timeout.Add (new TimeSpan (0' 0' 1));  	done = (timeout.TotalSeconds == analysisParameters.SignalLockTimeout);  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: if (done) {  	done = (frequencyRetries == 2);  	if (done)  		Logger.Instance.Write ("<e> Failed to acquire signal");  	else {  		Logger.Instance.Write ("Retrying frequency");  		timeout = new TimeSpan ();  		frequencyRetries++;  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,checkTuning,The following statement contains a magic number: done = (frequencyRetries == 2);  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: while ((DateTime.Now - startTime).TotalSeconds < analysisParameters.DataCollectionTimeout && !worker.CancellationPending) {  	if (currentOffset >= dataProvider.BufferSpaceUsed) {  		Thread.Sleep (2000);  		if (currentOffset >= dataProvider.BufferSpaceUsed) {  			Logger.Instance.Write ("Analysis resetting pid after " + packetCount + " packets (errors = " + errorPackets + " null = " + nullPackets + ")");  			dataProvider.ChangePidMapping (new int[] {  				-1  			});  			currentOffset = 0;  		}  	}  	else {  		IntPtr currentPointer = new IntPtr (memoryPointer.ToInt64 () + currentOffset + 136);  		Marshal.Copy (currentPointer' buffer' 0' 188);  		packetCount++;  		/*if (dumpCount < 10000)                     {                         Logger.Instance.Dump("atsc " + dumpCount' buffer' buffer.Length);                         dumpCount++;                     }*/TransportPacket transportPacket = new TransportPacket ();  		try {  			transportPacket.Process (buffer);  			if (transportPacket.ErrorIndicator)  				errorPackets++;  			if (transportPacket.IsNullPacket)  				nullPackets++;  			if (!transportPacket.ErrorIndicator) {  				bool ignorePid = checkPid (transportPacket.PID' stations);  				if (!ignorePid) {  					PidSpec pidSpec = findPidSpec (pidList' transportPacket.PID);  					if (pidSpec == null) {  						pidSpec = new PidSpec (transportPacket.PID);  						addPid (pidList' new PidSpec (transportPacket.PID));  					}  					pidSpec.ProcessPacket (buffer' transportPacket);  				}  			}  			else  				Logger.Instance.Write ("Transport packet error in packet " + packetCount);  		}  		catch (ArgumentOutOfRangeException) {  			Logger.Instance.Write ("Failed to parse packet " + packetCount);  		}  		currentOffset += buffer.Length;  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: while ((DateTime.Now - startTime).TotalSeconds < analysisParameters.DataCollectionTimeout && !worker.CancellationPending) {  	if (currentOffset >= dataProvider.BufferSpaceUsed) {  		Thread.Sleep (2000);  		if (currentOffset >= dataProvider.BufferSpaceUsed) {  			Logger.Instance.Write ("Analysis resetting pid after " + packetCount + " packets (errors = " + errorPackets + " null = " + nullPackets + ")");  			dataProvider.ChangePidMapping (new int[] {  				-1  			});  			currentOffset = 0;  		}  	}  	else {  		IntPtr currentPointer = new IntPtr (memoryPointer.ToInt64 () + currentOffset + 136);  		Marshal.Copy (currentPointer' buffer' 0' 188);  		packetCount++;  		/*if (dumpCount < 10000)                     {                         Logger.Instance.Dump("atsc " + dumpCount' buffer' buffer.Length);                         dumpCount++;                     }*/TransportPacket transportPacket = new TransportPacket ();  		try {  			transportPacket.Process (buffer);  			if (transportPacket.ErrorIndicator)  				errorPackets++;  			if (transportPacket.IsNullPacket)  				nullPackets++;  			if (!transportPacket.ErrorIndicator) {  				bool ignorePid = checkPid (transportPacket.PID' stations);  				if (!ignorePid) {  					PidSpec pidSpec = findPidSpec (pidList' transportPacket.PID);  					if (pidSpec == null) {  						pidSpec = new PidSpec (transportPacket.PID);  						addPid (pidList' new PidSpec (transportPacket.PID));  					}  					pidSpec.ProcessPacket (buffer' transportPacket);  				}  			}  			else  				Logger.Instance.Write ("Transport packet error in packet " + packetCount);  		}  		catch (ArgumentOutOfRangeException) {  			Logger.Instance.Write ("Failed to parse packet " + packetCount);  		}  		currentOffset += buffer.Length;  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: while ((DateTime.Now - startTime).TotalSeconds < analysisParameters.DataCollectionTimeout && !worker.CancellationPending) {  	if (currentOffset >= dataProvider.BufferSpaceUsed) {  		Thread.Sleep (2000);  		if (currentOffset >= dataProvider.BufferSpaceUsed) {  			Logger.Instance.Write ("Analysis resetting pid after " + packetCount + " packets (errors = " + errorPackets + " null = " + nullPackets + ")");  			dataProvider.ChangePidMapping (new int[] {  				-1  			});  			currentOffset = 0;  		}  	}  	else {  		IntPtr currentPointer = new IntPtr (memoryPointer.ToInt64 () + currentOffset + 136);  		Marshal.Copy (currentPointer' buffer' 0' 188);  		packetCount++;  		/*if (dumpCount < 10000)                     {                         Logger.Instance.Dump("atsc " + dumpCount' buffer' buffer.Length);                         dumpCount++;                     }*/TransportPacket transportPacket = new TransportPacket ();  		try {  			transportPacket.Process (buffer);  			if (transportPacket.ErrorIndicator)  				errorPackets++;  			if (transportPacket.IsNullPacket)  				nullPackets++;  			if (!transportPacket.ErrorIndicator) {  				bool ignorePid = checkPid (transportPacket.PID' stations);  				if (!ignorePid) {  					PidSpec pidSpec = findPidSpec (pidList' transportPacket.PID);  					if (pidSpec == null) {  						pidSpec = new PidSpec (transportPacket.PID);  						addPid (pidList' new PidSpec (transportPacket.PID));  					}  					pidSpec.ProcessPacket (buffer' transportPacket);  				}  			}  			else  				Logger.Instance.Write ("Transport packet error in packet " + packetCount);  		}  		catch (ArgumentOutOfRangeException) {  			Logger.Instance.Write ("Failed to parse packet " + packetCount);  		}  		currentOffset += buffer.Length;  	}  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: if (currentOffset >= dataProvider.BufferSpaceUsed) {  	Thread.Sleep (2000);  	if (currentOffset >= dataProvider.BufferSpaceUsed) {  		Logger.Instance.Write ("Analysis resetting pid after " + packetCount + " packets (errors = " + errorPackets + " null = " + nullPackets + ")");  		dataProvider.ChangePidMapping (new int[] {  			-1  		});  		currentOffset = 0;  	}  }  else {  	IntPtr currentPointer = new IntPtr (memoryPointer.ToInt64 () + currentOffset + 136);  	Marshal.Copy (currentPointer' buffer' 0' 188);  	packetCount++;  	/*if (dumpCount < 10000)                     {                         Logger.Instance.Dump("atsc " + dumpCount' buffer' buffer.Length);                         dumpCount++;                     }*/TransportPacket transportPacket = new TransportPacket ();  	try {  		transportPacket.Process (buffer);  		if (transportPacket.ErrorIndicator)  			errorPackets++;  		if (transportPacket.IsNullPacket)  			nullPackets++;  		if (!transportPacket.ErrorIndicator) {  			bool ignorePid = checkPid (transportPacket.PID' stations);  			if (!ignorePid) {  				PidSpec pidSpec = findPidSpec (pidList' transportPacket.PID);  				if (pidSpec == null) {  					pidSpec = new PidSpec (transportPacket.PID);  					addPid (pidList' new PidSpec (transportPacket.PID));  				}  				pidSpec.ProcessPacket (buffer' transportPacket);  			}  		}  		else  			Logger.Instance.Write ("Transport packet error in packet " + packetCount);  	}  	catch (ArgumentOutOfRangeException) {  		Logger.Instance.Write ("Failed to parse packet " + packetCount);  	}  	currentOffset += buffer.Length;  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: if (currentOffset >= dataProvider.BufferSpaceUsed) {  	Thread.Sleep (2000);  	if (currentOffset >= dataProvider.BufferSpaceUsed) {  		Logger.Instance.Write ("Analysis resetting pid after " + packetCount + " packets (errors = " + errorPackets + " null = " + nullPackets + ")");  		dataProvider.ChangePidMapping (new int[] {  			-1  		});  		currentOffset = 0;  	}  }  else {  	IntPtr currentPointer = new IntPtr (memoryPointer.ToInt64 () + currentOffset + 136);  	Marshal.Copy (currentPointer' buffer' 0' 188);  	packetCount++;  	/*if (dumpCount < 10000)                     {                         Logger.Instance.Dump("atsc " + dumpCount' buffer' buffer.Length);                         dumpCount++;                     }*/TransportPacket transportPacket = new TransportPacket ();  	try {  		transportPacket.Process (buffer);  		if (transportPacket.ErrorIndicator)  			errorPackets++;  		if (transportPacket.IsNullPacket)  			nullPackets++;  		if (!transportPacket.ErrorIndicator) {  			bool ignorePid = checkPid (transportPacket.PID' stations);  			if (!ignorePid) {  				PidSpec pidSpec = findPidSpec (pidList' transportPacket.PID);  				if (pidSpec == null) {  					pidSpec = new PidSpec (transportPacket.PID);  					addPid (pidList' new PidSpec (transportPacket.PID));  				}  				pidSpec.ProcessPacket (buffer' transportPacket);  			}  		}  		else  			Logger.Instance.Write ("Transport packet error in packet " + packetCount);  	}  	catch (ArgumentOutOfRangeException) {  		Logger.Instance.Write ("Failed to parse packet " + packetCount);  	}  	currentOffset += buffer.Length;  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: if (currentOffset >= dataProvider.BufferSpaceUsed) {  	Thread.Sleep (2000);  	if (currentOffset >= dataProvider.BufferSpaceUsed) {  		Logger.Instance.Write ("Analysis resetting pid after " + packetCount + " packets (errors = " + errorPackets + " null = " + nullPackets + ")");  		dataProvider.ChangePidMapping (new int[] {  			-1  		});  		currentOffset = 0;  	}  }  else {  	IntPtr currentPointer = new IntPtr (memoryPointer.ToInt64 () + currentOffset + 136);  	Marshal.Copy (currentPointer' buffer' 0' 188);  	packetCount++;  	/*if (dumpCount < 10000)                     {                         Logger.Instance.Dump("atsc " + dumpCount' buffer' buffer.Length);                         dumpCount++;                     }*/TransportPacket transportPacket = new TransportPacket ();  	try {  		transportPacket.Process (buffer);  		if (transportPacket.ErrorIndicator)  			errorPackets++;  		if (transportPacket.IsNullPacket)  			nullPackets++;  		if (!transportPacket.ErrorIndicator) {  			bool ignorePid = checkPid (transportPacket.PID' stations);  			if (!ignorePid) {  				PidSpec pidSpec = findPidSpec (pidList' transportPacket.PID);  				if (pidSpec == null) {  					pidSpec = new PidSpec (transportPacket.PID);  					addPid (pidList' new PidSpec (transportPacket.PID));  				}  				pidSpec.ProcessPacket (buffer' transportPacket);  			}  		}  		else  			Logger.Instance.Write ("Transport packet error in packet " + packetCount);  	}  	catch (ArgumentOutOfRangeException) {  		Logger.Instance.Write ("Failed to parse packet " + packetCount);  	}  	currentOffset += buffer.Length;  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,getData,The following statement contains a magic number: Marshal.Copy (currentPointer' buffer' 0' 188);  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,processResults,The following statement contains a magic number: foreach (PidSpec pidSpec in pidList) {  	DataGridViewRow row = new DataGridViewRow ();  	row.Height = 16;  	DataGridViewCell frequencyCell = new DataGridViewTextBoxCell ();  	if (firstPid) {  		frequencyCell.Value = analysisParameters.ScanningFrequency.ToString ();  		firstPid = false;  	}  	else  		frequencyCell.Value = string.Empty;  	row.Cells.Add (frequencyCell);  	DataGridViewCell pidCell = new DataGridViewTextBoxCell ();  	pidCell.Value = decodePid (pidSpec.Pid);  	row.Cells.Add (pidCell);  	if (pidSpec.Tables.Count != 0) {  		StringBuilder tableString = new StringBuilder ();  		bool multipleAdded = false;  		foreach (int table in pidSpec.Tables) {  			if (pidSpec.Pid != 0x300 && pidSpec.Pid != 0x441) {  				if (tableString.Length != 0)  					tableString.Append ("; ");  				tableString.Append (decodeTable (pidSpec.Pid' table));  			}  			else {  				if (table > 0x80 && table < 0xa5) {  					if (!multipleAdded) {  						if (tableString.Length != 0)  							tableString.Append ("; ");  						tableString.Append (decodeTable (pidSpec.Pid' table));  						multipleAdded = true;  					}  				}  				else {  					if (tableString.Length != 0)  						tableString.Append ("; ");  					tableString.Append (decodeTable (pidSpec.Pid' table));  				}  			}  		}  		DataGridViewCell tableCell = new DataGridViewTextBoxCell ();  		tableCell.Value = tableString.ToString ();  		row.Cells.Add (tableCell);  		Logger.Instance.Write ("PID: " + decodePid (pidSpec.Pid) + " Tables: " + tableString.ToString ());  	}  	else  		Logger.Instance.Write ("PID: " + decodePid (pidSpec.Pid) + " Tables: N/A");  	dgViewResults.Rows.Add (row);  }  
Magic Number,TSDumper,TransportStreamAnalyzeControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamAnalyzeControl.cs,processResults,The following statement contains a magic number: row.Height = 16;  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,Process,The following statement contains a magic number: nudSignalLockTimeout.Value = 10;  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,Process,The following statement contains a magic number: nudDataCollectionTimeout.Value = 60;  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,btTimeoutDefaults_Click,The following statement contains a magic number: nudSignalLockTimeout.Value = 10;  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,btTimeoutDefaults_Click,The following statement contains a magic number: nudDataCollectionTimeout.Value = 60;  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,cmdScan_Click,The following statement contains a magic number: if (cmdScan.Text == "Stop Dump") {  	Logger.Instance.Write ("Stop dump requested");  	workerDump.CancelAsync ();  	resetEvent.WaitOne (new TimeSpan (0' 0' 45));  	cmdScan.Text = "Start Dump";  	lblScanning.Visible = false;  	pbarProgress.Visible = false;  	pbarProgress.Enabled = false;  	if (last_dump_parameters != null) {  		string val = ScriptRunner.run_after_finish (last_dump_parameters.FileName' get_active_tuner_idx ()' after_recording_complete_script_path.Text);  	}  	ChangeControlStatus (true);  	return;  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,cmdScan_Click,The following statement contains a magic number: resetEvent.WaitOne (new TimeSpan (0' 0' 45));  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending) {  		Logger.Instance.Write ("Dump abandoned by user");  		return (null);  	}  	locked = graph.SignalLocked;  	if (!locked) {  		int signalQuality = graph.SignalQuality;  		if (signalQuality > 0) {  			Logger.Instance.Write ("Signal not locked but signal quality > 0");  			locked = true;  			done = true;  		}  		else {  			if (!dumpParameters.UseSignalPresent) {  				Logger.Instance.Write ("Signal not locked and signal quality not > 0");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  			}  			else {  				bool signalPresent = graph.SignalPresent;  				if (signalPresent) {  					Logger.Instance.Write ("Signal present");  					locked = true;  					done = true;  				}  				else {  					Logger.Instance.Write ("Signal not present");  					Thread.Sleep (1000);  					timeout = timeout.Add (new TimeSpan (0' 0' 1));  					done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  				}  			}  			if (done) {  				done = (frequencyRetries == 2);  				if (done)  					Logger.Instance.Write ("<e> Failed to acquire signal");  				else {  					Logger.Instance.Write ("Retrying frequency");  					timeout = new TimeSpan ();  					frequencyRetries++;  				}  			}  		}  	}  	else {  		Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  		done = true;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending) {  		Logger.Instance.Write ("Dump abandoned by user");  		return (null);  	}  	locked = graph.SignalLocked;  	if (!locked) {  		int signalQuality = graph.SignalQuality;  		if (signalQuality > 0) {  			Logger.Instance.Write ("Signal not locked but signal quality > 0");  			locked = true;  			done = true;  		}  		else {  			if (!dumpParameters.UseSignalPresent) {  				Logger.Instance.Write ("Signal not locked and signal quality not > 0");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  			}  			else {  				bool signalPresent = graph.SignalPresent;  				if (signalPresent) {  					Logger.Instance.Write ("Signal present");  					locked = true;  					done = true;  				}  				else {  					Logger.Instance.Write ("Signal not present");  					Thread.Sleep (1000);  					timeout = timeout.Add (new TimeSpan (0' 0' 1));  					done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  				}  			}  			if (done) {  				done = (frequencyRetries == 2);  				if (done)  					Logger.Instance.Write ("<e> Failed to acquire signal");  				else {  					Logger.Instance.Write ("Retrying frequency");  					timeout = new TimeSpan ();  					frequencyRetries++;  				}  			}  		}  	}  	else {  		Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  		done = true;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending) {  		Logger.Instance.Write ("Dump abandoned by user");  		return (null);  	}  	locked = graph.SignalLocked;  	if (!locked) {  		int signalQuality = graph.SignalQuality;  		if (signalQuality > 0) {  			Logger.Instance.Write ("Signal not locked but signal quality > 0");  			locked = true;  			done = true;  		}  		else {  			if (!dumpParameters.UseSignalPresent) {  				Logger.Instance.Write ("Signal not locked and signal quality not > 0");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  			}  			else {  				bool signalPresent = graph.SignalPresent;  				if (signalPresent) {  					Logger.Instance.Write ("Signal present");  					locked = true;  					done = true;  				}  				else {  					Logger.Instance.Write ("Signal not present");  					Thread.Sleep (1000);  					timeout = timeout.Add (new TimeSpan (0' 0' 1));  					done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  				}  			}  			if (done) {  				done = (frequencyRetries == 2);  				if (done)  					Logger.Instance.Write ("<e> Failed to acquire signal");  				else {  					Logger.Instance.Write ("Retrying frequency");  					timeout = new TimeSpan ();  					frequencyRetries++;  				}  			}  		}  	}  	else {  		Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  		done = true;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (!locked) {  	int signalQuality = graph.SignalQuality;  	if (signalQuality > 0) {  		Logger.Instance.Write ("Signal not locked but signal quality > 0");  		locked = true;  		done = true;  	}  	else {  		if (!dumpParameters.UseSignalPresent) {  			Logger.Instance.Write ("Signal not locked and signal quality not > 0");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  		}  		else {  			bool signalPresent = graph.SignalPresent;  			if (signalPresent) {  				Logger.Instance.Write ("Signal present");  				locked = true;  				done = true;  			}  			else {  				Logger.Instance.Write ("Signal not present");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  			}  		}  		if (done) {  			done = (frequencyRetries == 2);  			if (done)  				Logger.Instance.Write ("<e> Failed to acquire signal");  			else {  				Logger.Instance.Write ("Retrying frequency");  				timeout = new TimeSpan ();  				frequencyRetries++;  			}  		}  	}  }  else {  	Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  	done = true;  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (!locked) {  	int signalQuality = graph.SignalQuality;  	if (signalQuality > 0) {  		Logger.Instance.Write ("Signal not locked but signal quality > 0");  		locked = true;  		done = true;  	}  	else {  		if (!dumpParameters.UseSignalPresent) {  			Logger.Instance.Write ("Signal not locked and signal quality not > 0");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  		}  		else {  			bool signalPresent = graph.SignalPresent;  			if (signalPresent) {  				Logger.Instance.Write ("Signal present");  				locked = true;  				done = true;  			}  			else {  				Logger.Instance.Write ("Signal not present");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  			}  		}  		if (done) {  			done = (frequencyRetries == 2);  			if (done)  				Logger.Instance.Write ("<e> Failed to acquire signal");  			else {  				Logger.Instance.Write ("Retrying frequency");  				timeout = new TimeSpan ();  				frequencyRetries++;  			}  		}  	}  }  else {  	Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  	done = true;  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (!locked) {  	int signalQuality = graph.SignalQuality;  	if (signalQuality > 0) {  		Logger.Instance.Write ("Signal not locked but signal quality > 0");  		locked = true;  		done = true;  	}  	else {  		if (!dumpParameters.UseSignalPresent) {  			Logger.Instance.Write ("Signal not locked and signal quality not > 0");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  		}  		else {  			bool signalPresent = graph.SignalPresent;  			if (signalPresent) {  				Logger.Instance.Write ("Signal present");  				locked = true;  				done = true;  			}  			else {  				Logger.Instance.Write ("Signal not present");  				Thread.Sleep (1000);  				timeout = timeout.Add (new TimeSpan (0' 0' 1));  				done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  			}  		}  		if (done) {  			done = (frequencyRetries == 2);  			if (done)  				Logger.Instance.Write ("<e> Failed to acquire signal");  			else {  				Logger.Instance.Write ("Retrying frequency");  				timeout = new TimeSpan ();  				frequencyRetries++;  			}  		}  	}  }  else {  	Logger.Instance.Write ("Signal acquired: lock is " + graph.SignalLocked + " quality is " + graph.SignalQuality + " strength is " + graph.SignalStrength);  	done = true;  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (signalQuality > 0) {  	Logger.Instance.Write ("Signal not locked but signal quality > 0");  	locked = true;  	done = true;  }  else {  	if (!dumpParameters.UseSignalPresent) {  		Logger.Instance.Write ("Signal not locked and signal quality not > 0");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  	}  	else {  		bool signalPresent = graph.SignalPresent;  		if (signalPresent) {  			Logger.Instance.Write ("Signal present");  			locked = true;  			done = true;  		}  		else {  			Logger.Instance.Write ("Signal not present");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  		}  	}  	if (done) {  		done = (frequencyRetries == 2);  		if (done)  			Logger.Instance.Write ("<e> Failed to acquire signal");  		else {  			Logger.Instance.Write ("Retrying frequency");  			timeout = new TimeSpan ();  			frequencyRetries++;  		}  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (signalQuality > 0) {  	Logger.Instance.Write ("Signal not locked but signal quality > 0");  	locked = true;  	done = true;  }  else {  	if (!dumpParameters.UseSignalPresent) {  		Logger.Instance.Write ("Signal not locked and signal quality not > 0");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  	}  	else {  		bool signalPresent = graph.SignalPresent;  		if (signalPresent) {  			Logger.Instance.Write ("Signal present");  			locked = true;  			done = true;  		}  		else {  			Logger.Instance.Write ("Signal not present");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  		}  	}  	if (done) {  		done = (frequencyRetries == 2);  		if (done)  			Logger.Instance.Write ("<e> Failed to acquire signal");  		else {  			Logger.Instance.Write ("Retrying frequency");  			timeout = new TimeSpan ();  			frequencyRetries++;  		}  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (signalQuality > 0) {  	Logger.Instance.Write ("Signal not locked but signal quality > 0");  	locked = true;  	done = true;  }  else {  	if (!dumpParameters.UseSignalPresent) {  		Logger.Instance.Write ("Signal not locked and signal quality not > 0");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  	}  	else {  		bool signalPresent = graph.SignalPresent;  		if (signalPresent) {  			Logger.Instance.Write ("Signal present");  			locked = true;  			done = true;  		}  		else {  			Logger.Instance.Write ("Signal not present");  			Thread.Sleep (1000);  			timeout = timeout.Add (new TimeSpan (0' 0' 1));  			done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  		}  	}  	if (done) {  		done = (frequencyRetries == 2);  		if (done)  			Logger.Instance.Write ("<e> Failed to acquire signal");  		else {  			Logger.Instance.Write ("Retrying frequency");  			timeout = new TimeSpan ();  			frequencyRetries++;  		}  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (!dumpParameters.UseSignalPresent) {  	Logger.Instance.Write ("Signal not locked and signal quality not > 0");  	Thread.Sleep (1000);  	timeout = timeout.Add (new TimeSpan (0' 0' 1));  	done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  }  else {  	bool signalPresent = graph.SignalPresent;  	if (signalPresent) {  		Logger.Instance.Write ("Signal present");  		locked = true;  		done = true;  	}  	else {  		Logger.Instance.Write ("Signal not present");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (!dumpParameters.UseSignalPresent) {  	Logger.Instance.Write ("Signal not locked and signal quality not > 0");  	Thread.Sleep (1000);  	timeout = timeout.Add (new TimeSpan (0' 0' 1));  	done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  }  else {  	bool signalPresent = graph.SignalPresent;  	if (signalPresent) {  		Logger.Instance.Write ("Signal present");  		locked = true;  		done = true;  	}  	else {  		Logger.Instance.Write ("Signal not present");  		Thread.Sleep (1000);  		timeout = timeout.Add (new TimeSpan (0' 0' 1));  		done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (signalPresent) {  	Logger.Instance.Write ("Signal present");  	locked = true;  	done = true;  }  else {  	Logger.Instance.Write ("Signal not present");  	Thread.Sleep (1000);  	timeout = timeout.Add (new TimeSpan (0' 0' 1));  	done = (timeout.TotalSeconds == dumpParameters.SignalLockTimeout);  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: if (done) {  	done = (frequencyRetries == 2);  	if (done)  		Logger.Instance.Write ("<e> Failed to acquire signal");  	else {  		Logger.Instance.Write ("Retrying frequency");  		timeout = new TimeSpan ();  		frequencyRetries++;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,checkTuning,The following statement contains a magic number: done = (frequencyRetries == 2);  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: while (!worker.CancellationPending) {  	Thread.Sleep (100);  	int increment = 5;  	if (dumpParameters.PidList != null && dumpParameters.PidList.Count != 0)  		increment = 1;  	int buffer_space = graph.BufferSpaceUsed / (1024 * 1024);  	if (buffer_space > 40) {  		graph.clear_buffer ();  	}  	int size = graph.DumpFileSize / (1024 * 1024);  	if (size >= lastSize + increment) {  		Logger.Instance.Write ("Record/Buffer sizes: (" + size + "/" + buffer_space + ")");  		worker.ReportProgress ((int)size);  		lastSize = size;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: while (!worker.CancellationPending) {  	Thread.Sleep (100);  	int increment = 5;  	if (dumpParameters.PidList != null && dumpParameters.PidList.Count != 0)  		increment = 1;  	int buffer_space = graph.BufferSpaceUsed / (1024 * 1024);  	if (buffer_space > 40) {  		graph.clear_buffer ();  	}  	int size = graph.DumpFileSize / (1024 * 1024);  	if (size >= lastSize + increment) {  		Logger.Instance.Write ("Record/Buffer sizes: (" + size + "/" + buffer_space + ")");  		worker.ReportProgress ((int)size);  		lastSize = size;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: while (!worker.CancellationPending) {  	Thread.Sleep (100);  	int increment = 5;  	if (dumpParameters.PidList != null && dumpParameters.PidList.Count != 0)  		increment = 1;  	int buffer_space = graph.BufferSpaceUsed / (1024 * 1024);  	if (buffer_space > 40) {  		graph.clear_buffer ();  	}  	int size = graph.DumpFileSize / (1024 * 1024);  	if (size >= lastSize + increment) {  		Logger.Instance.Write ("Record/Buffer sizes: (" + size + "/" + buffer_space + ")");  		worker.ReportProgress ((int)size);  		lastSize = size;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: while (!worker.CancellationPending) {  	Thread.Sleep (100);  	int increment = 5;  	if (dumpParameters.PidList != null && dumpParameters.PidList.Count != 0)  		increment = 1;  	int buffer_space = graph.BufferSpaceUsed / (1024 * 1024);  	if (buffer_space > 40) {  		graph.clear_buffer ();  	}  	int size = graph.DumpFileSize / (1024 * 1024);  	if (size >= lastSize + increment) {  		Logger.Instance.Write ("Record/Buffer sizes: (" + size + "/" + buffer_space + ")");  		worker.ReportProgress ((int)size);  		lastSize = size;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: while (!worker.CancellationPending) {  	Thread.Sleep (100);  	int increment = 5;  	if (dumpParameters.PidList != null && dumpParameters.PidList.Count != 0)  		increment = 1;  	int buffer_space = graph.BufferSpaceUsed / (1024 * 1024);  	if (buffer_space > 40) {  		graph.clear_buffer ();  	}  	int size = graph.DumpFileSize / (1024 * 1024);  	if (size >= lastSize + increment) {  		Logger.Instance.Write ("Record/Buffer sizes: (" + size + "/" + buffer_space + ")");  		worker.ReportProgress ((int)size);  		lastSize = size;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: while (!worker.CancellationPending) {  	Thread.Sleep (100);  	int increment = 5;  	if (dumpParameters.PidList != null && dumpParameters.PidList.Count != 0)  		increment = 1;  	int buffer_space = graph.BufferSpaceUsed / (1024 * 1024);  	if (buffer_space > 40) {  		graph.clear_buffer ();  	}  	int size = graph.DumpFileSize / (1024 * 1024);  	if (size >= lastSize + increment) {  		Logger.Instance.Write ("Record/Buffer sizes: (" + size + "/" + buffer_space + ")");  		worker.ReportProgress ((int)size);  		lastSize = size;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: while (!worker.CancellationPending) {  	Thread.Sleep (100);  	int increment = 5;  	if (dumpParameters.PidList != null && dumpParameters.PidList.Count != 0)  		increment = 1;  	int buffer_space = graph.BufferSpaceUsed / (1024 * 1024);  	if (buffer_space > 40) {  		graph.clear_buffer ();  	}  	int size = graph.DumpFileSize / (1024 * 1024);  	if (size >= lastSize + increment) {  		Logger.Instance.Write ("Record/Buffer sizes: (" + size + "/" + buffer_space + ")");  		worker.ReportProgress ((int)size);  		lastSize = size;  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,getData,The following statement contains a magic number: if (buffer_space > 40) {  	graph.clear_buffer ();  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The following statement contains a magic number: if (cmdScan.Text == "Stop Dump") {  	string current_time = DateTime.Now.ToString ("HHmmss");  	if (restart_times.IndexOf (current_time) != -1) {  		Logger.Instance.Write ("Stop dump requested");  		workerDump.CancelAsync ();  		resetEvent.WaitOne (new TimeSpan (0' 0' 45));  		Thread.Sleep (1000);  		if (last_dump_parameters != null) {  			string val = ScriptRunner.run_after_finish (last_dump_parameters.FileName' get_active_tuner_idx ()' after_recording_complete_script_path.Text);  		}  		start_dump ();  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The following statement contains a magic number: if (cmdScan.Text == "Stop Dump") {  	string current_time = DateTime.Now.ToString ("HHmmss");  	if (restart_times.IndexOf (current_time) != -1) {  		Logger.Instance.Write ("Stop dump requested");  		workerDump.CancelAsync ();  		resetEvent.WaitOne (new TimeSpan (0' 0' 45));  		Thread.Sleep (1000);  		if (last_dump_parameters != null) {  			string val = ScriptRunner.run_after_finish (last_dump_parameters.FileName' get_active_tuner_idx ()' after_recording_complete_script_path.Text);  		}  		start_dump ();  	}  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The following statement contains a magic number: if (restart_times.IndexOf (current_time) != -1) {  	Logger.Instance.Write ("Stop dump requested");  	workerDump.CancelAsync ();  	resetEvent.WaitOne (new TimeSpan (0' 0' 45));  	Thread.Sleep (1000);  	if (last_dump_parameters != null) {  		string val = ScriptRunner.run_after_finish (last_dump_parameters.FileName' get_active_tuner_idx ()' after_recording_complete_script_path.Text);  	}  	start_dump ();  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The following statement contains a magic number: if (restart_times.IndexOf (current_time) != -1) {  	Logger.Instance.Write ("Stop dump requested");  	workerDump.CancelAsync ();  	resetEvent.WaitOne (new TimeSpan (0' 0' 45));  	Thread.Sleep (1000);  	if (last_dump_parameters != null) {  		string val = ScriptRunner.run_after_finish (last_dump_parameters.FileName' get_active_tuner_idx ()' after_recording_complete_script_path.Text);  	}  	start_dump ();  }  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The following statement contains a magic number: resetEvent.WaitOne (new TimeSpan (0' 0' 45));  
Magic Number,TSDumper,TransportStreamDumpControl,C:\repos\esurharun_TSDumper\TSDumper\TransportStreamDumpControl.cs,timer1_Tick,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,cellValueNeeded,The following statement contains a magic number: dgViewLog.Rows [e.RowIndex].Height = 16;  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: if (editedLine [0] >= '0' && editedLine [0] <= '9') {  	lineEntry.Time = editedLine.Substring (0' 12);  	timePresent = true;  }  else  	lineEntry.Time = "";  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: lineEntry.Time = editedLine.Substring (0' 12);  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: if (timePresent && editedLine.Length > 17 && editedLine [13] == '<' && editedLine [15] == '>') {  	detailOffset = 17;  	switch (editedLine [14]) {  	case 'e':  		lineEntry.Type = errorText;  		break;  	case 'E':  		lineEntry.Type = exceptionText;  		break;  	case 'I':  		lineEntry.Type = informationText;  		break;  	case 'C':  		lineEntry.Type = completedText;  		break;  	case 'S':  		lineEntry.Type = summaryText;  		break;  	default:  		lineEntry.Type = informationText;  		break;  	}  }  else  	lineEntry.Type = "Information";  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: if (timePresent && editedLine.Length > 17 && editedLine [13] == '<' && editedLine [15] == '>') {  	detailOffset = 17;  	switch (editedLine [14]) {  	case 'e':  		lineEntry.Type = errorText;  		break;  	case 'E':  		lineEntry.Type = exceptionText;  		break;  	case 'I':  		lineEntry.Type = informationText;  		break;  	case 'C':  		lineEntry.Type = completedText;  		break;  	case 'S':  		lineEntry.Type = summaryText;  		break;  	default:  		lineEntry.Type = informationText;  		break;  	}  }  else  	lineEntry.Type = "Information";  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: if (timePresent && editedLine.Length > 17 && editedLine [13] == '<' && editedLine [15] == '>') {  	detailOffset = 17;  	switch (editedLine [14]) {  	case 'e':  		lineEntry.Type = errorText;  		break;  	case 'E':  		lineEntry.Type = exceptionText;  		break;  	case 'I':  		lineEntry.Type = informationText;  		break;  	case 'C':  		lineEntry.Type = completedText;  		break;  	case 'S':  		lineEntry.Type = summaryText;  		break;  	default:  		lineEntry.Type = informationText;  		break;  	}  }  else  	lineEntry.Type = "Information";  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: if (timePresent && editedLine.Length > 17 && editedLine [13] == '<' && editedLine [15] == '>') {  	detailOffset = 17;  	switch (editedLine [14]) {  	case 'e':  		lineEntry.Type = errorText;  		break;  	case 'E':  		lineEntry.Type = exceptionText;  		break;  	case 'I':  		lineEntry.Type = informationText;  		break;  	case 'C':  		lineEntry.Type = completedText;  		break;  	case 'S':  		lineEntry.Type = summaryText;  		break;  	default:  		lineEntry.Type = informationText;  		break;  	}  }  else  	lineEntry.Type = "Information";  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: if (timePresent && editedLine.Length > 17 && editedLine [13] == '<' && editedLine [15] == '>') {  	detailOffset = 17;  	switch (editedLine [14]) {  	case 'e':  		lineEntry.Type = errorText;  		break;  	case 'E':  		lineEntry.Type = exceptionText;  		break;  	case 'I':  		lineEntry.Type = informationText;  		break;  	case 'C':  		lineEntry.Type = completedText;  		break;  	case 'S':  		lineEntry.Type = summaryText;  		break;  	default:  		lineEntry.Type = informationText;  		break;  	}  }  else  	lineEntry.Type = "Information";  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: detailOffset = 17;  
Magic Number,TSDumper,ViewLogControl,C:\repos\esurharun_TSDumper\TSDumper\ViewLogControl.cs,processLine,The following statement contains a magic number: switch (editedLine [14]) {  case 'e':  	lineEntry.Type = errorText;  	break;  case 'E':  	lineEntry.Type = exceptionText;  	break;  case 'I':  	lineEntry.Type = informationText;  	break;  case 'C':  	lineEntry.Type = completedText;  	break;  case 'S':  	lineEntry.Type = summaryText;  	break;  default:  	lineEntry.Type = informationText;  	break;  }  
