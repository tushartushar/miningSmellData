Implementation smell,Namespace,Class,File,Method,Description
Long Method,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The method has 102 lines of code.
Long Method,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The method has 172 lines of code.
Long Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The method has 164 lines of code.
Long Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The method has 114 lines of code.
Long Method,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The method has 110 lines of code.
Long Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The method has 111 lines of code.
Complex Method,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getExtendedTextData,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,processEventInformationTable,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,FinishFrequency,Cyclomatic complexity of the method is 11
Complex Method,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,LogCategoryUsage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,CompareForSorting,Cyclomatic complexity of the method is 24
Complex Method,DVBServices,RatingRegion,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\RatingRegion.cs,LogMessage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,processDescriptor,Cyclomatic complexity of the method is 46
Complex Method,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,Cyclomatic complexity of the method is 13
Complex Method,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,LogCategoryUsage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,CompareForSorting,Cyclomatic complexity of the method is 18
Complex Method,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,Cyclomatic complexity of the method is 11
Complex Method,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getStarRating,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetStationData,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetTimeOffsetSections,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,processTimeOffsetSections,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,FindCategoryDescription,Cyclomatic complexity of the method is 18
Complex Method,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,CompareForSorting,Cyclomatic complexity of the method is 24
Complex Method,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,Cyclomatic complexity of the method is 52
Complex Method,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,processDescriptor,Cyclomatic complexity of the method is 39
Complex Method,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,Cyclomatic complexity of the method is 23
Complex Method,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,LogCategoryUsage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,CompareForSorting,Cyclomatic complexity of the method is 18
Complex Method,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,Cyclomatic complexity of the method is 11
Complex Method,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getEventCategory,Cyclomatic complexity of the method is 10
Complex Method,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getStarRating,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,LogContentUsage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,CompareForSorting,Cyclomatic complexity of the method is 18
Complex Method,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,ProcessBouquetSections,Cyclomatic complexity of the method is 14
Complex Method,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,FinishFrequency,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,Cyclomatic complexity of the method is 19
Complex Method,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,decodeData,Cyclomatic complexity of the method is 26
Complex Method,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,Cyclomatic complexity of the method is 14
Complex Method,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,processDescriptor,Cyclomatic complexity of the method is 34
Complex Method,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,Cyclomatic complexity of the method is 15
Complex Method,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getTitleSections,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,Cyclomatic complexity of the method is 10
Complex Method,DVBServices,MediaHighwayProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayProgramCategory.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,MediaHighwayProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayProgramCategory.cs,CompareForSorting,Cyclomatic complexity of the method is 24
Complex Method,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,Cyclomatic complexity of the method is 23
Complex Method,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getTitleSections,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,FinishFrequency,Cyclomatic complexity of the method is 12
Complex Method,DVBServices,BIOPDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPDescriptor.cs,Create,Cyclomatic complexity of the method is 14
Complex Method,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,LogMessage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,Cyclomatic complexity of the method is 14
Complex Method,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,Cyclomatic complexity of the method is 13
Complex Method,DVBServices,DescriptorBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DescriptorBase.cs,Instance,Cyclomatic complexity of the method is 55
Complex Method,DVBServices,DescriptorBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DescriptorBase.cs,AtscInstance,Cyclomatic complexity of the method is 21
Complex Method,DVBServices,DescriptorBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DescriptorBase.cs,DishNetworkInstance,Cyclomatic complexity of the method is 24
Complex Method,DVBServices,DescriptorBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DescriptorBase.cs,BellTVInstance,Cyclomatic complexity of the method is 18
Complex Method,DVBServices,DSMCCMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCMessage.cs,CreateInstance,Cyclomatic complexity of the method is 14
Complex Method,DVBServices,DSMCCModule,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCModule.cs,checkComplete,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,ProcessBouquetSections,Cyclomatic complexity of the method is 13
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,getDSMCCSections,Cyclomatic complexity of the method is 15
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkAllDataLoaded,Cyclomatic complexity of the method is 14
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,FinishFrequency,Cyclomatic complexity of the method is 12
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforNZL,Cyclomatic complexity of the method is 22
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processDSMCCEPGFile,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,Cyclomatic complexity of the method is 53
Complex Method,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,Cyclomatic complexity of the method is 27
Complex Method,DVBServices,DSMCCTransactionID,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCTransactionID.cs,DSMCCTransactionID,Cyclomatic complexity of the method is 12
Complex Method,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,ProcessBouquetSections,Cyclomatic complexity of the method is 11
Complex Method,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,getEITSections,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,FinishFrequency,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,processDescriptor,Cyclomatic complexity of the method is 46
Complex Method,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,processExtendedEventDescriptor,Cyclomatic complexity of the method is 12
Complex Method,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,Cyclomatic complexity of the method is 22
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getCollector,Cyclomatic complexity of the method is 42
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createDuplicatedChannels,Cyclomatic complexity of the method is 10
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,loadExportedData,Cyclomatic complexity of the method is 22
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createWMCChannelInfo,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processStation,Cyclomatic complexity of the method is 13
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkWMCRecordings,Cyclomatic complexity of the method is 12
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkCollectionData,Cyclomatic complexity of the method is 12
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,Cyclomatic complexity of the method is 17
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,Cyclomatic complexity of the method is 15
Complex Method,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,Cyclomatic complexity of the method is 10
Complex Method,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findDvbStations,Cyclomatic complexity of the method is 20
Complex Method,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processPATSections,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processServiceDescriptionSection,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processProgramInfo,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processNITSections,Cyclomatic complexity of the method is 12
Complex Method,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findAtscStations,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,AddChannel,Cyclomatic complexity of the method is 15
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,Cyclomatic complexity of the method is 31
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getAudioQuality,Cyclomatic complexity of the method is 11
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSeasonEpisode,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat3,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat4,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat5,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getExtendedRatings,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZLCast,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getTitleSections,Cyclomatic complexity of the method is 11
Complex Method,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getSummarySections,Cyclomatic complexity of the method is 9
Complex Method,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,ProcessBouquetSections,Cyclomatic complexity of the method is 13
Complex Method,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,processSummarySections,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,FinishFrequency,Cyclomatic complexity of the method is 32
Complex Method,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,addEntry,Cyclomatic complexity of the method is 16
Complex Method,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,DecodeData,Cyclomatic complexity of the method is 10
Complex Method,DVBServices,OpenTVRecordBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVRecordBase.cs,Instance,Cyclomatic complexity of the method is 15
Complex Method,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,LogCategoryUsage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,CompareForSorting,Cyclomatic complexity of the method is 24
Complex Method,DVBServices,ServiceGatewayInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\ServiceGatewayInfo.cs,LogMessage,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processChannelSections,Cyclomatic complexity of the method is 8
Complex Method,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,FinishFrequency,Cyclomatic complexity of the method is 23
Complex Method,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,Cyclomatic complexity of the method is 32
Long Parameter List,DVBServices,CategoryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CategoryEntry.cs,CategoryEntry,The method has 6 parameters.
Long Parameter List,DVBServices,CategoryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CategoryEntry.cs,CategoryEntry,The method has 7 parameters.
Long Parameter List,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The method has 5 parameters.
Long Parameter List,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,updateCategoryEntries,The method has 6 parameters.
Long Parameter List,DVBServices,OpenTVTitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleData.cs,Process,The method has 6 parameters.
Long Parameter List,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,Process,The method has 5 parameters.
Long Statement,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP AC3 AUDIO DESCRIPTOR: Sample rate: " + sampleRateCode + " BSID: " + bsid + " Bit rate: " + bitRateCode + " Surround mode: " + surroundMode + " BSMOD: " + bsmod + " No. channels: " + numberOfChannels + " Full svc: " + fullServiceFlag + " Lang code: " + languageCode + " Lang code2: " + languageCode2 + " Main ID: " + mainID + " Priority: " + priority + " ASVC flags: " + asvcFlags + " Desc: " + descriptionString + " Language: " + languageString + " Language2: " + languageString2 + " Additional info: " + additionalInfoString); " is 586.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,Process,The length of the statement  "	bool referenceTablesLoaded = MultiTreeDictionaryEntry.Load (Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary ATSC PSIP T1.cfg")' Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary ATSC PSIP T2.cfg")); " is 230.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getVirtualChannelData,The length of the statement  "	Logger.Instance.Write ("Virtual Channel Data: Channel count: " + VirtualChannelTable.Channels.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 157.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getRatingRegionData,The length of the statement  "	Logger.Instance.Write ("Rating Region Data: Regions: " + RatingRegionTable.Regions.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 146.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getExtendedTextData,The length of the statement  "	Logger.Instance.Write ("Extended Text Data: Entry count: " + ExtendedTextTable.TextEntries.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 154.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getEventInformationData,The length of the statement  "	Logger.Instance.Write ("Event Information Data: EPG count: " + VirtualChannelTable.EPGCount + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 149.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,FinishFrequency,The length of the statement  "		TVStation station = TVStation.FindStation (channel.CollectionFrequency' channel.MajorChannelNumber' channel.MinorChannelNumber); " is 128.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,FinishFrequency,The length of the statement  "					titleLogger.Write (epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + epgEntry.EventName); " is 232.
Long Statement,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,FinishFrequency,The length of the statement  "					descriptionLogger.Write (epgEntry.ServiceID + " " + " Evt ID " + epgEntry.EventID + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + epgEntry.ShortDescription); " is 277.
Long Statement,DVBServices,CaptionServiceDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\CaptionServiceDescriptorEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP CAPTION SERVICE DESCRIPTOR ENTRY: Language: " + languageCode + " DigitalCC: " + digitalCC + " Line21 field: " + line21Field + " Caption svc no.: " + captionServiceNumber + " Easy rdr: " + easyReader + " Wide asp ratio: " + wideAspectRatio); " is 299.
Long Statement,DVBServices,ContentAdvisoryRatingDimension,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ContentAdvisoryRatingDimension.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP CONTENT ADVISORY RATING DIMENSION: Dimension: " + dimension + " Rating value: " + ratingValue); " is 154.
Long Statement,DVBServices,ContentAdvisoryRatingRegion,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ContentAdvisoryRatingRegion.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP CONTENT ADVISORY RATING REGION: Region: " + region + " Desc: " + descriptionString); " is 143.
Long Statement,DVBServices,EventInformationTable,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTable.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "EVENT INFORMATION TABLE: Source ID: " + sourceID + " Protocol version: " + protocolVersion); " is 146.
Long Statement,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The length of the statement  "		startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond); " is 155.
Long Statement,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The length of the statement  "		duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond); " is 156.
Long Statement,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "EVENT INFORMATION TABLE ENTRY: Event ID: " + eventID + " Start time: " + startTime + " ETM loc: " + etmLocation + " Duration: " + duration); " is 194.
Long Statement,DVBServices,ExtendedChannelNameDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedChannelNameDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP EXTENDED CHANNEL NAME DESCRIPTOR: Long name: " + longNameString); " is 124.
Long Statement,DVBServices,ExtendedTextTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedTextTableEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "EXTENDED TEXT TABLE ENTRY: Source ID: " + sourceID + " Event ID: " + eventID); " is 132.
Long Statement,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MASTER GUIDE TABLE ENTRY: Table type: " + tableType + " PID: " + pid + " Version: " + version + " Byte ct: " + byteCount); " is 176.
Long Statement,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,Load,The length of the statement  "		if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,LogCategoryUsage,The length of the statement  "					Logger.Instance.Write ("Category " + category.CategoryID + ": " + category.Description + " Used: " + category.UsedCount + " Sample Event: " + category.SampleEvent); " is 164.
Long Statement,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,LogCategoryUsage,The length of the statement  "			Logger.Instance.Write ("Category " + category.CategoryID + ": " + " Count: " + category.UsedCount + " Sample Event: " + category.Description); " is 142.
Long Statement,DVBServices,RatingRegionDimension,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\RatingRegionDimension.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP RATING REGION DIMENSION: Name: " + nameString + " Graduated scale: " + graduatedScale); " is 146.
Long Statement,DVBServices,RatingRegionValue,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\RatingRegionValue.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP RATING REGION VALUE: Abbrev text: " + abbreviatedTextString + " Full text: " + fullTextString); " is 154.
Long Statement,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "PSIP SERVICE LOCATION DESCRIPTOR ENTRY: Stream type: " + streamType + " Elementary PID: " + elementaryPid + " Language: " + languageCode); " is 192.
Long Statement,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,AddEPGEntry,The length of the statement  "			if (newEntry.StartTime > oldEntry.StartTime && (newEntry.StartTime + newEntry.Duration) <= (oldEntry.StartTime + oldEntry.Duration)) " is 132.
Long Statement,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "VIRTUAL CHANNEL: Name: " + shortName + " Major ch: " + majorChannelNumber + " Minor ch: " + minorChannelNumber + " Modulation: " + modulationMode + " Frequency: " + frequency + " TSID: " + transportStreamID + " Prog no: " + programNumber + " ETM loc: " + etmLocation + " Access ctrl: " + accessControlled + " Hidden: " + hidden + " Path sel: " + pathSelect + " Out of band: " + outOfBand + " Hide guide: " + hideGuide + " Service type: " + serviceType + " Source ID: " + sourceID); " is 535.
Long Statement,DVBServices,BellTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVController.cs,FinishFrequency,The length of the statement  "			station.ChannelID = station.OriginalNetworkID + ":" + station.TransportStreamID + ":" + station.ServiceID + ":" + station.Name; " is 127.
Long Statement,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BELL TV EXTENDED EVENT DESCRIPTOR: Descriptor no: " + descriptorNumber + " Language code: " + languageCode + " Item lth: " + itemLength + " Description: " + originalDescription); " is 232.
Long Statement,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The length of the statement  "		if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,AddUndefinedCategory,The length of the statement  "					undefinedCategories.Insert (undefinedCategories.IndexOf (category)' new BellTVProgramCategory (categoryID' subCategoryID' description)); " is 136.
Long Statement,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,AddUndefinedCategory,The length of the statement  "				undefinedCategories.Insert (undefinedCategories.IndexOf (category)' new BellTVProgramCategory (categoryID' subCategoryID' description)); " is 136.
Long Statement,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,LogCategoryUsage,The length of the statement  "					Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + ": " + category.Description + " Used: " + category.UsedCount + " Sample Event: " + category.SampleEvent); " is 194.
Long Statement,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,LogCategoryUsage,The length of the statement  "					Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + ": " + category.Description + " Used: " + category.UsedCount); " is 151.
Long Statement,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,LogCategoryUsage,The length of the statement  "				Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + " Used: " + category.UsedCount + " Sample Event: " + category.SampleEvent); " is 164.
Long Statement,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,LogCategoryUsage,The length of the statement  "				Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + " Used: " + category.UsedCount); " is 121.
Long Statement,DVBServices,BellTVRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVRatingDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BELL TV RATING DESCRIPTOR: Star rating: " + starRating + " Parental rating: " + parentalRating + " Advisory rating: " + advisoryRating); " is 190.
Long Statement,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,The length of the statement  "	bool newSection = tvStation.AddMapEntry (mpeg2Header.TableID' mpeg2Header.SectionNumber' lastTableID' mpeg2Header.LastSectionNumber' segmentLastSectionNumber); " is 159.
Long Statement,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,The length of the statement  "		epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' bellTVEntry.ContentType' bellTVEntry.ContentSubType); " is 143.
Long Statement,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,logTitle,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title + " " + episodeInfo); " is 304.
Long Statement,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,logDescription,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + description); " is 290.
Long Statement,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BELL TV SECTION: ONID: " + originalNetworkID + " TSID: " + transportStreamID + " SID: " + serviceID); " is 155.
Long Statement,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,Process,The length of the statement  "	series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06; " is 150.
Long Statement,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BELL TV SERIES DESCRIPTOR: Entry type: " + entryType + " Series: " + series + " Episode: " + episode + " Original air date: " + startDate + " " + originalAirDate); " is 217.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetStationData,The length of the statement  "			TVStation existingStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID); " is 130.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,checkChannelFilters,The length of the statement  "	ChannelFilterEntry filterEntry = ChannelFilterEntry.FindEntry (station.OriginalNetworkID' station.TransportStreamID' station.ServiceID); " is 136.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetBouquetSections,The length of the statement  "	Logger.Instance.Write ("Channel count: " + OpenTVChannel.Channels.Count + " buffer space used: " + dataProvider.BufferSpaceUsed + " discontinuities: " + bouquetReader.Discontinuities); " is 184.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetTimeOffsetSections,The length of the statement  "		Logger.Instance.Write ("Time offset: " + timeOffsetEntry.CountryCode + " region " + timeOffsetEntry.Region + " offset " + timeOffsetEntry.TimeOffset + " next offset: " + timeOffsetEntry.NextTimeOffset + " date: " + timeOffsetEntry.ChangeTime); " is 243.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetTimeOffsetSections,The length of the statement  "	Logger.Instance.Write ("Time zone count: " + TimeOffsetEntry.TimeOffsets.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 136.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,setTimeOffset,The length of the statement  "		Logger.Instance.Write ("Local time offset set to " + TimeOffsetEntry.TimeOffsets [0].TimeOffset + " for country " + TimeOffsetEntry.TimeOffsets [0].CountryCode + " region " + TimeOffsetEntry.TimeOffsets [0].Region); " is 215.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,setTimeOffset,The length of the statement  "		Logger.Instance.Write ("Time offset will change to " + TimeOffsetEntry.TimeOffsets [0].NextTimeOffset + " at " + TimeOffsetEntry.TimeOffsets [0].ChangeTime); " is 157.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,setTimeOffset,The length of the statement  "		TimeOffsetEntry offsetEntry = TimeOffsetEntry.FindEntry (RunParameters.Instance.CountryCode' RunParameters.Instance.Region); " is 124.
Long Statement,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,setTimeOffset,The length of the statement  "			Logger.Instance.Write ("Local time offset set to " + offsetEntry.TimeOffset + " for country " + offsetEntry.CountryCode + " region " + offsetEntry.Region); " is 155.
Long Statement,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,Load,The length of the statement  "		if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DVBServices,DishNetworkController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkController.cs,Process,The length of the statement  "	SingleTreeDictionaryEntry.Load (Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary Dish Network 128.cfg")' 1); " is 124.
Long Statement,DVBServices,DishNetworkController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkController.cs,Process,The length of the statement  "	SingleTreeDictionaryEntry.Load (Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary Dish Network 255.cfg")' 2); " is 124.
Long Statement,DVBServices,DishNetworkController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkController.cs,FinishFrequency,The length of the statement  "			station.ChannelID = station.OriginalNetworkID + ":" + station.TransportStreamID + ":" + station.ServiceID + ":" + station.Name; " is 127.
Long Statement,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DISH NETWORK EXTENDED EVENT DESCRIPTOR: Huffman table: " + huffmanTable + " Compressed lth: " + compressedLength + " Decompressed lth: " + decompressedLength + " Start bytes: " + Utils.ConvertToHex (startBytes) + " Start index: " + loggedStartIndex + " Description: " + eventDescription); " is 342.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The length of the statement  "		if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,AddCategory,The length of the statement  "					categories.Insert (categories.IndexOf (category)' new DishNetworkProgramCategory (categoryID' subCategoryID' description)); " is 123.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,AddCategory,The length of the statement  "				categories.Insert (categories.IndexOf (category)' new DishNetworkProgramCategory (categoryID' subCategoryID' description)); " is 123.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,AddUndefinedCategory,The length of the statement  "					undefinedCategories.Insert (undefinedCategories.IndexOf (category)' new DishNetworkProgramCategory (categoryID' subCategoryID' description)); " is 141.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,AddUndefinedCategory,The length of the statement  "				undefinedCategories.Insert (undefinedCategories.IndexOf (category)' new DishNetworkProgramCategory (categoryID' subCategoryID' description)); " is 141.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,LogCategoryUsage,The length of the statement  "					Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + ": " + category.Description + " Used: " + category.UsedCount + " Sample Event: " + category.SampleEvent); " is 194.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,LogCategoryUsage,The length of the statement  "					Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + ": " + category.Description + " Used: " + category.UsedCount); " is 151.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,LogCategoryUsage,The length of the statement  "				Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + " Used: " + category.UsedCount + " Sample Event: " + category.SampleEvent); " is 164.
Long Statement,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,LogCategoryUsage,The length of the statement  "				Logger.Instance.Write ("Content " + category.CategoryID + "'" + category.SubCategoryID + " Used: " + category.UsedCount); " is 121.
Long Statement,DVBServices,DishNetworkSupplementaryDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSupplementaryDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DISH SUPPLEMENTARY DESCRIPTOR: Huffman table: " + huffmanTable + " Compressed lth: " + compressedLength + " Decompressed lth: " + decompressedLength + " Start bytes: " + Utils.ConvertToHex (startBytes) + " Start index: " + loggedStartIndex + " Info: " + supplementaryInformation); " is 334.
Long Statement,DVBServices,DishNetworkRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkRatingDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DISH NETWORK RATING DESCRIPTOR: Star rating: " + starRating + " Parental rating: " + parentalRating + " Advisory rating: " + advisoryRating); " is 195.
Long Statement,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,The length of the statement  "	bool newSection = tvStation.AddMapEntry (mpeg2Header.TableID' mpeg2Header.SectionNumber' lastTableID' mpeg2Header.LastSectionNumber' segmentLastSectionNumber); " is 159.
Long Statement,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,The length of the statement  "		epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' dishNetworkEntry.ContentType' dishNetworkEntry.ContentSubType); " is 153.
Long Statement,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getEventCategory,The length of the statement  "	string combinedDescription = mainCategoryEntry.DishNetworkDescription + " - " + subCategoryEntry.DishNetworkDescription + "=" + mainCategoryEntry.WMCDescription + "'" + subCategoryEntry.WMCDescription + "=" + mainCategoryEntry.DVBLogicDescription + "=" + mainCategoryEntry.DVBViewerDescription; " is 294.
Long Statement,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getEventCategory,The length of the statement  "	DishNetworkProgramCategory generatedCategory = new DishNetworkProgramCategory (contentType' contentSubType' combinedDescription); " is 129.
Long Statement,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,logTitle,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title + " " + episodeInfo); " is 304.
Long Statement,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,logDescription,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + description); " is 290.
Long Statement,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DISH NETWORK SECTION: ONID: " + originalNetworkID + " TSID: " + transportStreamID + " SID: " + serviceID); " is 160.
Long Statement,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,Process,The length of the statement  "	series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06; " is 150.
Long Statement,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DISH NETWORK SERIES DESCRIPTOR: Entry type: " + entryType + " Series: " + series + " Episode: " + episode + " Original air date: " + startDate + " " + originalAirDate); " is 222.
Long Statement,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DISH SHORT EVENT DESCRIPTOR: Huffman table: " + huffmanTable + " Compressed lth: " + compressedLength + " Decompressed lth: " + decompressedLength + " Start bytes: " + Utils.ConvertToHex (startBytes) + " Start index: " + loggedStartIndex + " Name: " + eventName); " is 317.
Long Statement,DVBServices,DishNetworkVCHIPDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkVCHIPDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DISH NETWORK VCHIP DESCRIPTOR: VCHIP rating: " + vchipRating + " Content advisory: " + contentAdvisory); " is 158.
Long Statement,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB CABLE DELIVERY DESCRIPTOR: Frequency: " + Frequency + " outer fec: " + outerFec + " modulation: " + modulation + " symbol rate: " + symbolRate + " inner fec: " + innerFec); " is 230.
Long Statement,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB SATELLITE DELIVERY DESCRIPTOR: Frequency: " + Frequency + " orbital posn: " + orbitalPosition + " east flag: " + eastFlag + " polarization: " + polarization + " roll off: " + rollOff + " s2 flag: " + s2Flag + " mod type: " + modulationType + " symbol rate: " + symbolRate + " inner fec: " + innerFec); " is 359.
Long Statement,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB TERRESTRIAL DELIVERY DESCRIPTOR: Frequency: " + Frequency + " bandwidth: " + bandWidth + " priority: " + priorityFlag + " timeslice: " + timeSliceIndicator + " fec ind: " + fecIndicator + " constellation: " + constellation + " hierachy: " + hierarchyInformation + " hp rate: " + hpCodeRate + " lp rate: " + lpCodeRate + " guard: " + guardInterval + " trans mode: " + transmissionMode + " other freq: " + otherFrequencyFlag); " is 482.
Long Statement,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The length of the statement  "		if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,AddUndefinedContent,The length of the statement  "					undefinedContents.Insert (undefinedContents.IndexOf (content)' new EITProgramContent (contentID' subContentID' description)); " is 125.
Long Statement,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,AddUndefinedContent,The length of the statement  "				undefinedContents.Insert (undefinedContents.IndexOf (content)' new EITProgramContent (contentID' subContentID' description)); " is 125.
Long Statement,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,LogContentUsage,The length of the statement  "					Logger.Instance.Write ("Content " + content.ContentID + "'" + content.SubContentID + ": " + content.Description + " Used: " + content.UsedCount + " Sample Event: " + content.SampleEvent); " is 187.
Long Statement,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,LogContentUsage,The length of the statement  "					Logger.Instance.Write ("Content " + content.ContentID + "'" + content.SubContentID + ": " + content.Description + " Used: " + content.UsedCount); " is 145.
Long Statement,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,LogContentUsage,The length of the statement  "				Logger.Instance.Write ("Content " + content.ContentID + "'" + content.SubContentID + " Used: " + content.UsedCount + " Sample Event: " + content.SampleEvent); " is 158.
Long Statement,DVBServices,EITChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITChannelInfoEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "Service ID: " + serviceID + " User No: " + userNumber + " Flags: " + Utils.ConvertToHex (flags)); " is 151.
Long Statement,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "FREESAT CHANNEL INFO ENTRY: Service ID: " + serviceID + " Det lth: " + detailLength + " User No: " + userNumber + " Unknown1: " + unknown1String + " Unknown2: " + unknown2String); " is 233.
Long Statement,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,Process,The length of the statement  "	MultiTreeDictionaryEntry.Load (Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary FreeSat T1.cfg")' Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary FreeSat T2.cfg")); " is 197.
Long Statement,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,Process,The length of the statement  "	/*GetStationData(dataProvider' worker' new int[] { 0xbba' 0xc1e' 0xf01 });*/GetStationData (dataProvider' worker' new int[] { " is 125.
Long Statement,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,Process,The length of the statement  "	if (RunParameters.Instance.ChannelBouquet != -1 || RunParameters.Instance.Options.Contains ("USECHANNELID") || RunParameters.Instance.Options.Contains ("USELCN") || RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") || RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")) { " is 292.
Long Statement,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,Process,The length of the statement  "		/*GetBouquetSections(dataProvider' worker' new int[] { 0xbba' oxc1e' oxf01 } );*/GetBouquetSections (dataProvider' worker' new int[] { " is 134.
Long Statement,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,logChannelInfo,The length of the statement  "	if (RunParameters.Instance.ChannelBouquet == -1 && !RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")) " is 294.
Long Statement,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,logChannelInfo,The length of the statement  "			Logger.Instance.Write ("Bouquet: " + bouquet.BouquetID + " - " + bouquet.Name + " Region: " + region.Code + " (channels = " + region.Channels.Count + ")"); " is 155.
Long Statement,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,processDescriptor,The length of the statement  "		if (RunParameters.Instance.InputLanguage == null || shortEventDescriptor.LanguageCode == RunParameters.Instance.InputLanguage) { " is 128.
Long Statement,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The length of the statement  "	bool newSection = tvStation.AddMapEntry (mpeg2Header.TableID' mpeg2Header.SectionNumber' lastTableID' mpeg2Header.LastSectionNumber' segmentLastSectionNumber); " is 159.
Long Statement,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The length of the statement  "		epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' freeSatEntry.ContentType' freeSatEntry.ContentSubType); " is 145.
Long Statement,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,logTitle,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title + " " + episodeInfo); " is 304.
Long Statement,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,logDescription,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + description); " is 290.
Long Statement,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "FREESAT Section: ONID: " + originalNetworkID + " TSID: " + transportStreamID + " SID: " + serviceID); " is 155.
Long Statement,DVBServices,DVBContentIdentifierDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBContentIdentifierDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB CONTENT IDENTIFIER DESCRIPTOR: Type: " + contentType + " Location: " + contentLocation + " Reference: " + referenceString); " is 181.
Long Statement,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,getRepeatTime,The length of the statement  "		throw (new ArgumentOutOfRangeException ("The MediaHighway1 replay start time element(s) result in a start time that is out of range")); " is 135.
Long Statement,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHW1 REPLAY DATA: Channel: " + channel + " Replay time: " + replayTime + " Subtitled: " + subtitled); " is 155.
Long Statement,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getChannelSections,The length of the statement  "	Logger.Instance.Write ("Channel count: " + Channel.Channels.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 123.
Long Statement,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getCategorySections,The length of the statement  "	Logger.Instance.Write ("Category count: " + MediaHighwayProgramCategory.Categories.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 146.
Long Statement,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getSummarySections,The length of the statement  "	Logger.Instance.Write ("Summary count: " + MediaHighwaySummary.Summaries.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 136.
Long Statement,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,processChannelSections,The length of the statement  "		MediaHighway2ChannelSection channelSection = MediaHighway2ChannelSection.ProcessMediaHighwayChannelTable (section.Data); " is 120.
Long Statement,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,processCategorySections,The length of the statement  "		MediaHighway2CategorySection categorySection = MediaHighway2CategorySection.ProcessMediaHighwayCategoryTable (section.Data); " is 124.
Long Statement,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,processSummarySections,The length of the statement  "		MediaHighway2SummarySection summarySection = MediaHighway2SummarySection.ProcessMediaHighwaySummaryTable (section.Data); " is 120.
Long Statement,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHW2 SUMMARY DATA: Event ID: " + eventID + " Unknown: " + Utils.ConvertToHex (unknown) + " Short desc: " + shortDescription); " is 179.
Long Statement,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHW2 TITLE DATA: Channel ID: " + channelID + " Unknown0: " + Utils.ConvertToHex (unknown0) + " Unknown1: " + Utils.ConvertToHex (unknown1) + " Main cat: " + mainCategory + " Base date: " + baseDate + " Hours: " + hours + " Minutes: " + minutes + " Unknown2: " + Utils.ConvertToHex (unknown2) + " Duration: " + duration + " Event name: " + eventName + " Sub cat: " + mainCategory + " Event ID: " + eventID); " is 460.
Long Statement,DVBServices,MediaHighway2TitleSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleSection.cs,Process,The length of the statement  "                return (false);*//*Logger.Instance.Dump("Title Section"' byteData' byteData.Length);*/unknown = Utils.GetBytes (byteData' lastIndex' 15); " is 137.
Long Statement,DVBServices,MediaHighwayProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayProgramCategory.cs,LoadFromFrequency,The length of the statement  "		if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DVBServices,MediaHighwayProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayProgramCategory.cs,LoadFromFrequency,The length of the statement  "		fileName = Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("Program Categories"' "MHW" + protocol + " Categories " + frequency + ".cfg")); " is 149.
Long Statement,DVBServices,MediaHighwayCategoryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayCategoryEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHW CATEGORY ENTRY: Number: " + number + " Description: " + description); " is 127.
Long Statement,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The length of the statement  "				titleLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " Cat ID " + title.CategoryID.ToString ("00") + " Summary " + title.SummaryAvailable + ":" + (summary != null) + " " + " Orig Day " + title.LogDay + " Orig Hours " + title.LogHours + " YDay " + title.LogYesterday + " Day " + title.Day + " Hours " + title.Hours + " Mins " + title.Minutes + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title.EventName); " is 624.
Long Statement,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The length of the statement  "				titleLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " Cat ID " + title.CategoryID.ToString ("000") + " Main cat " + title.MainCategory + " Sub cat " + title.SubCategory + " Summary " + title.SummaryAvailable + ":" + (summary != null) + " Unknown " + Utils.ConvertToHex (title.Unknown) + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title.EventName); " is 569.
Long Statement,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The length of the statement  "				descriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " Rpts: " + summary.ReplayCount + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + summary.ShortDescription); " is 383.
Long Statement,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The length of the statement  "				descriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " " + " Unknown " + Utils.ConvertToHex (summary.Unknown) + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + summary.ShortDescription); " is 408.
Long Statement,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ToString,The length of the statement  "	return ("ONID " + OriginalNetworkID + " TSID " + TransportStreamID + " SID " + ServiceID + " Channel ID: " + ChannelID + " Unknown: " + unknownString + " Name: " + channelName + " Station: " + stationName); " is 206.
Long Statement,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHW CHANNEL INFO ENTRY: ONID: " + originalNetworkID + " TSID: " + transportStreamID + " SID: " + serviceID + " Name: " + name + " Unknown: " + unknownString); " is 212.
Long Statement,DVBServices,MediaHighway1SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1SummaryData.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHW1 SUMMARY DATA: Event ID: " + eventID + " Unknown: " + Utils.ConvertToHex (unknown) + " Replays: " + replayCount + " Short desc: " + shortDescription); " is 208.
Long Statement,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHW1 TITLE DATA: Channel ID: " + channelID + " Category ID: " + categoryID + " Day: " + logDay + " Hours: " + logHours + " Minutes: " + minutes + " Start: " + startTime + " Summary: " + summaryAvailable + " Unknown1: " + Utils.ConvertToHex (unknown1) + " Duration: " + duration + " Event name: " + eventName + " PPV ID: " + payPerViewID + " Event ID: " + eventID + " Unknown2: " + Utils.ConvertToHex (unknown2)); " is 466.
Long Statement,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getChannelSections,The length of the statement  "	Logger.Instance.Write ("Channel count: " + Channel.Channels.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 123.
Long Statement,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getCategorySections,The length of the statement  "	Logger.Instance.Write ("Category count: " + MediaHighwayProgramCategory.Categories.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 146.
Long Statement,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getSummarySections,The length of the statement  "	Logger.Instance.Write ("Summary count: " + MediaHighwaySummary.Summaries.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 136.
Long Statement,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,processChannelSections,The length of the statement  "		MediaHighway1ChannelSection channelSection = MediaHighway1ChannelSection.ProcessMediaHighwayChannelTable (section.Data); " is 120.
Long Statement,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,processCategorySections,The length of the statement  "		MediaHighway1CategorySection categorySection = MediaHighway1CategorySection.ProcessMediaHighwayCategoryTable (section.Data); " is 124.
Long Statement,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,processSummarySections,The length of the statement  "		MediaHighway1SummarySection summarySection = MediaHighway1SummarySection.ProcessMediaHighwaySummaryTable (section.Data); " is 120.
Long Statement,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,FinishFrequency,The length of the statement  "						Logger.Instance.Write ("Replay: ch" + replay.Channel + " " + title.Title.EventName + " " + title.Title.StartTime + " " + title.Title.Duration + " " + replay.ReplayTime); " is 169.
Long Statement,DVBServices,BIOPLiteComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPLiteComponent.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP LITE COMPONENT: Component ID tag: " + Utils.ConvertToHex (componentIDTag) + " Data lth: " + dataLength + " Data: " + Utils.ConvertToHex (data)); " is 203.
Long Statement,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP MESSAGE: Magic: " + Utils.ConvertToHex (magic) + " Major vers: " + Utils.ConvertToHex (majorVersion) + " Minor vers: " + Utils.ConvertToHex (minorVersion) + " Byte order: " + Utils.ConvertToHex (byteOrder) + " Msg type: " + Utils.ConvertToHex (messageType) + " Msg size: " + messageSize + " Obj key lth: " + objectKeyLength + " Obj key : " + Utils.ConvertToHex (objectKeyData) + " Obj kind lth: " + objectKindLength + " Obj kind data: " + Utils.ConvertToHex (objectKindData) + " Obj info lth: " + objectInfoLength); " is 574.
Long Statement,DVBServices,BIOPBinding,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPBinding.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP BINDING: Name count: " + nameCount + " Binding type: " + bindingType + " Obj info lth: " + objectInfoLength + " Object info: : " + Utils.ConvertToHex (objectInfo)); " is 223.
Long Statement,DVBServices,BIOPDirectoryMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPDirectoryMessage.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP DIRECTORY MESSAGE: Obj info data: " + Utils.ConvertToHex (ObjectInfoData) + " Svc ctxt ct: " + serviceContextCount + " Msg body lth: " + messageBodyLength + " Bindings ct: " + bindingsCount); " is 250.
Long Statement,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP FILE MESSAGE: File content size: " + fileContentSize + " Service ctxt ct: " + serviceContextCount + " Msg body lth: " + messageBodyLength + " Content lth: " + contentLength + " Content data: " + Utils.ConvertToHex (contentData' contentLogSize)); " is 304.
Long Statement,DVBServices,BIOPLiteOptionsProfileBody,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPLiteOptionsProfileBody.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP LITE OPTIONS PROFILE BODY: Component ct: " + componentsCount); " is 121.
Long Statement,DVBServices,BIOPModuleInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPModuleInfo.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP MODULE INFO: Mod t/0: " + moduleTimeout + " Block timeout: " + blockTimeout + " Min block time: " + minimumBlockTime + " Taps count: " + tapsCount + " User info lth: " + userInfoLength); " is 245.
Long Statement,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP OBJECTLOCATION: Component ID tag: " + Utils.ConvertToHex (componentIDTag) + " Data lth: " + dataLength + " Carousel ID: " + Utils.ConvertToHex (carouselID) + " Module ID: " + Utils.ConvertToHex (moduleID) + " Major ver: " + Utils.ConvertToHex (majorVersion) + " Minor ver: " + Utils.ConvertToHex (minorVersion) + " Obj key lth: " + objectKeyLength + " Obj key data: " + Utils.ConvertToHex (objectKeyData)); " is 465.
Long Statement,DVBServices,BIOPProfileBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBase.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP PROFILE BASE: Profile ID: " + Utils.ConvertToHex (profileIDTag) + " Data lth: " + dataLength + " Byte order: " + Utils.ConvertToHex (byteOrder)); " is 204.
Long Statement,DVBServices,BIOPServiceContext,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceContext.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP SERVICE CONTEXT: Context ID: " + contextID + " Data length: " + dataLength); " is 135.
Long Statement,DVBServices,BIOPServiceGatewayMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceGatewayMessage.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP SERVICE GATEWAY MESSAGE: Svc ctxt ct: " + serviceContextCount + " Msg body lth: " + messageBodyLength + " Bindings ct: " + bindingsCount); " is 197.
Long Statement,DVBServices,BIOPTapSelector,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTapSelector.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP TAP SELECTOR: Sel type: " + Utils.ConvertToHex (selectorType) + " Trans ID: " + Utils.ConvertToHex (transactionID.Value) + " Timeout: " + timeout); " is 206.
Long Statement,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB COMPONENT DESCRIPTOR: Stream content: " + streamContent + " Comp type video: " + componentTypeVideo + " Comp type audio: " + componentTypeAudio + " Comp type subtitles: " + componentTypeSubtitles + " Comp tag: " + componentTag + " Lang code: " + Utils.ConvertToHex (languageCode) + " Text: " + textString); " is 364.
Long Statement,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB CONTENT DESCRIPTOR: Content types: " + contentTypeString + " Content subtypes: " + contentSubTypeString + " User types: " + userTypeString); " is 198.
Long Statement,DVBServices,BIOPTap,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTap.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "BIOP TAP: Identity: " + Utils.ConvertToHex (identity) + " Use: " + Utils.ConvertToHex (use) + " Assoc tag: " + Utils.ConvertToHex (associationTag) + " Selector lth: " + selectorLength + " Selector data: " + Utils.ConvertToHex (selectorData)); " is 296.
Long Statement,DVBServices,CosNameComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNameComponent.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "COS NAME COMPONENT: Identity lth: " + identityLength + " Identity: " + Utils.ConvertToHex (identity) + " Kind lth: " + kindLength + " Kind: " + Utils.ConvertToHex (kind) + " Init ctxt lth: " + initialContextLength + " Init ctxt: " + Utils.ConvertToHex (initialContext)); " is 324.
Long Statement,DVBServices,DescriptorBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DescriptorBase.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB GENERIC DESCRIPTOR: Tag: " + Utils.ConvertToHex (tag) + " Length: " + length); " is 136.
Long Statement,DVBServices,DSMCCCompatibilityDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DSMCC COMPATIBILITY DESCRIPTOR: Descr lth: " + descriptorLength + " Descr count: " + descriptorCount); " is 156.
Long Statement,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DSMCC COMPATIBILITY DESCRIPTOR ENTRY: Descr TYPE: " + Utils.ConvertToHex (descriptorType) + " Descr lth: " + descriptorLength + " Spec type: " + Utils.ConvertToHex (specifierType) + " Spec data: " + Utils.ConvertToHex (specifierData) + " Model: " + Utils.ConvertToHex (model) + " Version: " + Utils.ConvertToHex (version) + " Sub desc ct: " + subDescriptorCount); " is 417.
Long Statement,DVBServices,DSMCCCompatibilityDescriptorSubDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorSubDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DSMCC COMPATIBILITY DESCRIPTOR SUB DESCRIPTOR: Descr TYPE: " + Utils.ConvertToHex (descriptorType) + " Add info lth: " + additionalInfoLength); " is 197.
Long Statement,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DOWNLOAD CANCEL: Download ID: " + Utils.ConvertToHex (downloadID) + " Module ID: " + Utils.ConvertToHex (moduleID) + " Block no: " + blockNumber + " Cancel rsn: " + Utils.ConvertToHex (downloadCancelReason) + " Reserved1: " + Utils.ConvertToHex (reserved1) + " Priv data lth: " + privateDataLength + " Priv data: " + Utils.ConvertToHex (privateData)); " is 405.
Long Statement,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DOWNLOAD DATA BLOCK: Module ID: " + moduleID + " Module ver: " + Utils.ConvertToHex (moduleVersion) + " Reserved: " + Utils.ConvertToHex (reserved1) + " Block no: " + blockNumber + " Data size: " + dataSize + " Initial data: " + Utils.ConvertToHex (data' logDataSize)); " is 323.
Long Statement,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DOWNLOAD INFO INDICATION: Download ID: " + Utils.ConvertToHex (downloadID) + " Blk size: " + blockSize + " Win size: " + windowSize + " Ack per: " + ackPeriod + " TC dwn win: " + tcDownloadWindow + " TC dwn scn: " + tcDownloadScenario + " Compat lth: " + compatibilityDescriptorLength + " Priv data lth: " + privateDataLength + " No. mods: " + numberOfModules); " is 415.
Long Statement,DVBServices,DSMCCDownloadInfoIndicationModule,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndicationModule.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DSMCC DOWNLOAD INFO INDICATION MODULE: Module ID: " + moduleID + " Module size: " + moduleSize + " Module ver: " + moduleVersion + " Info lth: " + moduleInfoLength); " is 219.
Long Statement,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DOWNLOAD SERVER INITIATE: Server ID: " + Utils.ConvertToHex (serverID) + " Compat descr lth: " + compatabilityDescriptorLength + " Compat descr: " + Utils.ConvertToHex (compatabilityDescriptor) + " Priv data lth: " + privateDataLength + " Priv data: " + Utils.ConvertToHex (privateDataLength)); " is 348.
Long Statement,DVBServices,DSMCCHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCHeader.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write ("DSMCC HEADER: Prot. dis: " + Utils.ConvertToHex (protocolDiscriminator) + " Type: " + Utils.ConvertToHex (dsmccType) + " Message ID: " + Utils.ConvertToHex (messageID) + " Trans ID: " + Utils.ConvertToHex (transactionID.Value) + " Reserved: " + Utils.ConvertToHex (reserved1) + " Adapt lth: " + adaptionLength + " Msg lth: " + messageLength); " is 372.
Long Statement,DVBServices,DSMCCModule,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCModule.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DSMCC MODULE: Module ID: " + Utils.ConvertToHex (moduleID) + " Vers no: " + Utils.ConvertToHex (version) + " Size: " + size + " Orig size: " + originalSize + " Complete: " + Complete); " is 238.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,Process,The length of the statement  "	if (RunParameters.Instance.ChannelBouquet != -1 || RunParameters.Instance.Options.Contains ("USECHANNELID") || RunParameters.Instance.Options.Contains ("USELCN") || RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") || RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")) { " is 292.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,getDSMCCSections,The length of the statement  "	Logger.Instance.Write ("Stopping reader for frequency " + dataProvider.Frequency + " PID 0x" + pid.ToString ("X").ToLowerInvariant ()); " is 135.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,getDSMCCSections,The length of the statement  "	Logger.Instance.Write ("Data blocks: " + totalBlocks + " buffer space used: " + dataProvider.BufferSpaceUsed + " discontinuities: " + dsmccReader.Discontinuities); " is 163.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,addDIIMessage,The length of the statement  "						Logger.ProtocolLogger.Write ("DII Message version change (" + oldMessage.DSMCCHeader.TransactionID.Version + " -> " + newMessage.DSMCCHeader.TransactionID.Version + ") - removing modules"); " is 189.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkAddModule,The length of the statement  "					DSMCCModule replaceModule = new DSMCCModule (module.ModuleID' module.ModuleVersion' module.ModuleSize' module.OriginalSize); " is 124.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkAddModule,The length of the statement  "				DSMCCModule insertModule = new DSMCCModule (module.ModuleID' module.ModuleVersion' module.ModuleSize' module.OriginalSize); " is 123.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkAddModule,The length of the statement  "	DSMCCModule newModule = new DSMCCModule (module.ModuleID' module.ModuleVersion' module.ModuleSize' module.OriginalSize); " is 120.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforNZL,The length of the statement  "	int serviceGatewayModuleID = dsiMessage.ServiceGatewayInfo.IOPIOR.TaggedProfiles [0].ProfileBody.ObjectLocation.ModuleID; " is 121.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforNZL,The length of the statement  "	byte[] serviceGatewayObjectKey = dsiMessage.ServiceGatewayInfo.IOPIOR.TaggedProfiles [0].ProfileBody.ObjectLocation.ObjectKeyData; " is 130.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforNZL,The length of the statement  "	BIOPServiceGatewayMessage serviceGateway = findObject (serviceGatewayModuleID' serviceGatewayObjectKey) as BIOPServiceGatewayMessage; " is 133.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforNZL,The length of the statement  "								string outFile = RunParameters.DataDirectory + Path.DirectorySeparatorChar + "Images" + Path.DirectorySeparatorChar + pngBinding.Names [0].Identity; " is 148.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforAUS,The length of the statement  "	int serviceGatewayModuleID = dsiMessage.ServiceGatewayInfo.IOPIOR.TaggedProfiles [0].ProfileBody.ObjectLocation.ModuleID; " is 121.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforAUS,The length of the statement  "	byte[] serviceGatewayObjectKey = dsiMessage.ServiceGatewayInfo.IOPIOR.TaggedProfiles [0].ProfileBody.ObjectLocation.ObjectKeyData; " is 130.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGforAUS,The length of the statement  "	BIOPServiceGatewayMessage serviceGateway = findObject (serviceGatewayModuleID' serviceGatewayObjectKey) as BIOPServiceGatewayMessage; " is 133.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processStation,The length of the statement  "		Logger.Instance.Write ("Station " + station.Name + " (" + station.FullID + ") not in service info file - data cannot be processed"); " is 132.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,createServiceEntries,The length of the statement  "		ServiceEntry serviceEntry = new ServiceEntry (Utils.GetAsciiString (contentFields [entryIndex])' Utils.GetAsciiString (contentFields [entryIndex + 1])' Utils.GetAsciiString (contentFields [entryIndex + 2])' Utils.GetAsciiString (contentFields [entryIndex + 3])); " is 262.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,findServiceEntry,The length of the statement  "		if (serviceEntry.OriginalNetworkID == station.OriginalNetworkID && serviceEntry.TransportStreamID == station.TransportStreamID && serviceEntry.ServiceID == station.ServiceID) " is 174.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,logDirectoryStructure,The length of the statement  "				Logger.Instance.Write ("Searching for module 0x" + moduleID.ToString ("X") + " object key " + Utils.ConvertToHex (objectKey)); " is 126.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The length of the statement  "				throw (new IndexOutOfRangeException ("MHEG format error - count of header fields is incorrect - expected " + expectedHeaderFieldCount + " got " + headerFields.Count)); " is 167.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The length of the statement  "						epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber]))))); " is 138.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The length of the statement  "						epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime); " is 156.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The length of the statement  "								throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count)); " is 191.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The length of the statement  "                logger.Dump("DSMCC Parser data - File Entry"' fileData' fileData.Length);*/if (RunParameters.Instance.TraceIDs.Contains ("DSMCCFILE")) " is 134.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The length of the statement  "                rootCRIDFieldNumber = 0;*/int endTimeFieldNumber = MHEGParserParameters.GetField (MHEGParserParameters.FieldName.EndTime); " is 122.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The length of the statement  "					epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber]))))); " is 138.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The length of the statement  "					epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime); " is 156.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The length of the statement  "					string parentalRating = Utils.GetAsciiString (dataFields [parentalRatingFieldNumber]).Replace ("("' "").Replace (")"' ""); " is 122.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,logTitle,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title); " is 284.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,logDescription,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + description); " is 290.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkChannelMapping,The length of the statement  "	if (RunParameters.Instance.ChannelBouquet == -1 && !RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN")) " is 164.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkChannelMapping,The length of the statement  "					if (channel.OriginalNetworkID == tvStation.OriginalNetworkID && channel.TransportStreamID == tvStation.TransportStreamID && channel.ServiceID == tvStation.ServiceID && tvStation.LogicalChannelNumber == -1) " is 205.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,logChannelInfo,The length of the statement  "	if (RunParameters.Instance.ChannelBouquet == -1 && !RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")) " is 294.
Long Statement,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,logChannelInfo,The length of the statement  "			Logger.Instance.Write ("Bouquet: " + bouquet.BouquetID + " - " + bouquet.Name + " Region: " + region.Code + " (channels = " + region.Channels.Count + ")"); " is 155.
Long Statement,DVBServices,DSMConnBinder,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMConnBinder.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DSM CONN BINDER: Component ID tag: " + Utils.ConvertToHex (componentIDTag) + " Data lth: " + dataLength + " Taps ct: " + tapsCount); " is 186.
Long Statement,DVBServices,DSMServiceLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMServiceLocation.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DSM SERVICE LOCATION: Component ID tag: " + Utils.ConvertToHex (componentIDTag) + " Component data lth: " + componentDataLength + " Service domain lth: " + serviceDomainLength + " Service domain: " + Utils.ConvertToHex (serviceDomain)); " is 290.
Long Statement,DVBServices,DVBCompressedModuleDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DVBCompressedModuleDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB COMPRESSED MODULE DESCRIPTOR: Tag: " + Utils.ConvertToHex (tag) + " Length: " + length + " Compression method: " + Utils.ConvertToHex (compressionMethod) + " Orig size: " + originalSize); " is 245.
Long Statement,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The length of the statement  "			entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0); " is 122.
Long Statement,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,LogMessage,The length of the statement  "		Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "    DVB LOCAL TIME OFFSET ENTRY:" + " Country code: " + entry.CountryCode + " Region: " + entry.Region + " Polarity: " + entry.OffsetPositive + " Time offset: " + entry.TimeOffset + " Change time: " + entry.ChangeTime + " Next time offset: " + entry.NextTimeOffset); " is 320.
Long Statement,DVBServices,DVBServiceDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB SERVICE DESCRIPTOR: Svc type: " + serviceType + " Prov name: " + providerName + " Svc name: " + serviceName); " is 167.
Long Statement,DVBServices,ServiceListEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceListEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB SERVICE LIST ENTRY: Service ID : " + serviceID + " Service type: " + serviceType); " is 140.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,Process,The length of the statement  "		MultiTreeDictionaryEntry.Load (Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary FreeSat T1.cfg")' Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary FreeSat T2.cfg")); " is 197.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,Process,The length of the statement  "	if (RunParameters.Instance.ChannelBouquet != -1 || RunParameters.Instance.Options.Contains ("USECHANNELID") || RunParameters.Instance.Options.Contains ("USELCN") || RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") || RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")) { " is 292.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,checkBouquetNeeded,The length of the statement  "	if (!RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")) " is 247.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,ProcessBouquetSections,The length of the statement  "									processFreeviewInfoDescriptor (freeviewInfoDescriptor' transportStream.OriginalNetworkID' transportStream.TransportStreamID' bouquetSection.BouquetID); " is 151.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,ProcessBouquetSections,The length of the statement  "										processOpenTVInfoDescriptor (openTVInfoDescriptor' transportStream.OriginalNetworkID' transportStream.TransportStreamID' bouquetSection.BouquetID); " is 147.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,getEITSections,The length of the statement  "	Logger.Instance.Write ("EPG count: " + TVStation.EPGCount + " buffer space used: " + dataProvider.BufferSpaceUsed + " discontinuities: " + eitReader.Discontinuities); " is 166.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,logChannelInfo,The length of the statement  "	if (RunParameters.Instance.ChannelBouquet == -1 && !RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")) " is 294.
Long Statement,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,logChannelInfo,The length of the statement  "			Logger.Instance.Write ("Bouquet: " + bouquet.BouquetID + " - " + bouquet.Name + " Region: " + region.Code + " (channels = " + region.Channels.Count + ")"); " is 155.
Long Statement,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The length of the statement  "	if (byteData [index] == 0xff && byteData [index + 1] == 0xff && byteData [index + 2] == 0xff && byteData [index + 3] == 0xff && byteData [index + 4] == 0xff) { " is 159.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The length of the statement  "	bool newSection = tvStation.AddMapEntry (mpeg2Header.TableID' mpeg2Header.SectionNumber' lastTableID' mpeg2Header.LastSectionNumber' segmentLastSectionNumber); " is 159.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The length of the statement  "				epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType); " is 132.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The length of the statement  "				epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ()); " is 139.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The length of the statement  "				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ()); " is 147.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,logTitle,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + "Content: " + eitEntry.ContentType + "/" + eitEntry.ContentSubType + " " + title); " is 359.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,logDescription,The length of the statement  "	logger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + "Content: " + eitEntry.ContentType + "/" + eitEntry.ContentSubType + " " + description); " is 365.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,updateCategoryEntries,The length of the statement  "	CategoryEntry newEntry = new CategoryEntry (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID' eitEntry.StartTime' eitEntry.EventName' eitEntry.ContentType' eitEntry.ContentSubType); " is 210.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,updateCategoryEntries,The length of the statement  "		if (oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime == newEntry.StartTime) " is 193.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,updateCategoryEntries,The length of the statement  "		if (oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID > newEntry.ServiceID) { " is 150.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,updateCategoryEntries,The length of the statement  "		if (oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime > newEntry.StartTime) { " is 194.
Long Statement,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "EIT Section: ONID: " + originalNetworkID + " TSID: " + transportStreamID + " SID: " + serviceID); " is 151.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,epgWorkerDoWork,The length of the statement  "	Logger.Instance.Write ("Sample stats: Sync byte searches: " + parameters.DataProvider.SyncByteSearches + " Samples dropped: " + parameters.DataProvider.SamplesDropped + " Max sample size: " + parameters.DataProvider.MaximumSampleSize); " is 235.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createDuplicatedChannels,The length of the statement  "					Logger.Instance.Write ("Generating data for " + station.Name + " (" + station.FullID + ") from " + currentStation.Name + "(" + currentStation.FullID + ")"); " is 156.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,loadWMCData,The length of the statement  "	if (RunParameters.Instance.Options.Contains ("WMCIMPORT") || RunParameters.Instance.Options.Contains ("CHECKFORREPEATS")) { " is 123.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkWMCInstalled,The length of the statement  "	string mcStorePath = Path.Combine (Environment.GetEnvironmentVariable ("windir")' Path.Combine ("ehome"' "mcstore.dll")); " is 121.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createWMCChannelInfo,The length of the statement  "		if (!station.Excluded && station.EPGCollection.Count != 0 && station.WMCUniqueID == null && station.WMCMatchName == null) " is 121.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createWMCChannelInfo,The length of the statement  "		Logger.Instance.Write ("Station " + station.Name + " (" + station.FullID + ") match name not set - use WMC Edit Channel to link EPG to channel "); " is 146.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processStation,The length of the statement  "				if (station.OriginalNetworkID == dvbTuningInfo.ONID && station.TransportStreamID == dvbTuningInfo.TSID && station.ServiceID == dvbTuningInfo.SID) { " is 147.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processStation,The length of the statement  "					if (station.OriginalNetworkID == atscTuningInfo.Frequency && station.TransportStreamID == atscTuningInfo.MajorChannel && station.ServiceID == atscTuningInfo.MinorChannel) { " is 172.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processStation,The length of the statement  "                if (station.OriginalNetworkID == matchSpec.OriginalNetworkID && station.TransportStreamID == matchSpec.TransportStreamID && station.ServiceID == matchSpec.ServiceID)" is 165.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,setWMCStationInfo,The length of the statement  "	Logger.Instance.Write ("Station " + station.Name + " (" + station.FullID + ") unique ID " + uniqueID + " match name " + matchName + " set using " + matchMethod); " is 161.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkWMCRecordings,The length of the statement  "		Logger.Instance.Write ("Recorded program: Title: " + recordedProgram.Title + " Description: " + recordedProgram.Description + " Date: " + recordedProgram.Date); " is 160.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkCollectionData,The length of the statement  "						EPGEntryKey entryKey = new EPGEntryKey (removePhrases (epgEntry.EventName)' removePhrases (epgEntry.ShortDescription)' epgEntry.StartTime); " is 139.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processOffsetChannel,The length of the statement  "	Logger.Instance.Write ("Processing time shift channel " + timeOffsetChannel.SourceChannel.Name + " to " + timeOffsetChannel.DestinationChannel.Name); " is 149.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processOffsetChannel,The length of the statement  "	TVStation sourceStation = TVStation.FindStation (timeOffsetChannel.SourceChannel.OriginalNetworkID' timeOffsetChannel.SourceChannel.TransportStreamID' timeOffsetChannel.SourceChannel.ServiceID); " is 194.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processOffsetChannel,The length of the statement  "	TVStation destinationStation = TVStation.FindStation (timeOffsetChannel.DestinationChannel.OriginalNetworkID' timeOffsetChannel.DestinationChannel.TransportStreamID' timeOffsetChannel.DestinationChannel.ServiceID); " is 214.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,processOffsetChannel,The length of the statement  "	Logger.Instance.Write ("Created time shifted channel " + timeOffsetChannel.DestinationChannel.Name + " with " + destinationStation.EPGCollection.Count + " EPG entries"); " is 169.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,produceCategoryAnalysis,The length of the statement  "			addEITCategoryEntry (categoryReference' eitCategoryEntry.Category' eitCategoryEntry.SubCategory' eitCategoryEntry.EventName); " is 125.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,findEITCategoryEntry,The length of the statement  "		if (categoryEntry.NetworkID == openTVCategoryEntry.NetworkID && categoryEntry.TransportStreamID == openTVCategoryEntry.TransportStreamID && categoryEntry.ServiceID == openTVCategoryEntry.ServiceID && categoryEntry.StartTime == openTVCategoryEntry.StartTime) " is 257.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The length of the statement  "						if (satelliteEntry.OrbitalPosition == satelliteDescriptor.OrbitalPosition && satelliteEntry.East == satelliteDescriptor.EastFlag) { " is 131.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The length of the statement  "		string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini"); " is 131.
Long Statement,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The length of the statement  "				streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType); " is 214.
Long Statement,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB EXTENDED EVENT DESCRIPTOR: Descr no.: " + descriptorNumber + " Last descr no.: " + lastDescriptorNumber + " Lang code: " + languageCode + " Text: " + text); " is 214.
Long Statement,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,LogMessage,The length of the statement  "			Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "    Item description: " + itemDescription + " Value: " + items [itemDescriptions.IndexOf (itemDescription)]); " is 163.
Long Statement,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findDvbStations,The length of the statement  "			ServiceDescriptionSection serviceDescriptionSection = ServiceDescriptionSection.ProcessServiceDescriptionTable (section.Data); " is 126.
Long Statement,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findDvbStations,The length of the statement  "	Logger.Instance.Write ("Stations: " + tvStations.Count + " buffer space used: " + bufferSpaceUsed + " discontinuities: " + stationReader.Discontinuities); " is 154.
Long Statement,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processPATSections,The length of the statement  "			ProgramAssociationSection programAssociationSection = ProgramAssociationSection.ProcessProgramAssociationTable (section.Data); " is 126.
Long Statement,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processServiceDescriptionSection,The length of the statement  "				tvStation.Frequency = NetworkInformationSection.GetFrequency (serviceDescriptionSection.OriginalNetworkID' serviceDescriptionSection.TransportStreamID) * 10; " is 157.
Long Statement,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,addStation,The length of the statement  "		if (oldStation.OriginalNetworkID == newStation.OriginalNetworkID && oldStation.TransportStreamID == newStation.TransportStreamID && oldStation.ServiceID == newStation.ServiceID) { " is 179.
Long Statement,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processNITSections,The length of the statement  "			NetworkInformationSection networkInformationSection = NetworkInformationSection.ProcessNetworkInformationTable (section.Data); " is 126.
Long Statement,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "IOPIOR: Type ID lth: " + typeIDLength + " Type ID: " + typeID + " Profiles count: " + taggedProfilesCount); " is 161.
Long Statement,DVBServices,FreeviewChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeviewChannelInfoEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "FREEVIEW CHANNEL INFO ENTRY: Service ID: " + serviceID + " User No: " + userNumber + " Flags: " + Utils.ConvertToHex (flags)); " is 180.
Long Statement,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The length of the statement  "		ParserParameter parserParameter = new ParserParameter ((FieldName)Enum.Parse (typeof(FieldName)' parameters [0]' true)' Int32.Parse (parameters [1].Trim ())); " is 158.
Long Statement,DVBServices,MHPCachingPriorityDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHPCachingPriorityDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHP CACHING PRIORITY DESCRIPTOR: Tag: " + Utils.ConvertToHex (tag) + " Length: " + length + " Priority: " + priority + " Transparency lev: " + transparencyLevel); " is 216.
Long Statement,DVBServices,MHPContentTypeDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHPContentTypeDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHP CONTENT TYPE DESCRIPTOR: Tag: " + tag + " Content length: " + contentLength + " Content type: " + Utils.ConvertToHex (contentType)); " is 190.
Long Statement,DVBServices,MHPLabelDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHPLabelDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "MHP LABEL DESCRIPTOR Tag: " + tag + " Label length: " + labelLength + " Label: " + Utils.ConvertToHex (label)); " is 165.
Long Statement,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB PARENTAL RATING DESCRIPTOR: Parental ratings: " + ratings.ToString ()); " is 129.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,AddChannel,The length of the statement  "		Logger.Instance.Write ("Adding channel: ONID " + newChannel.OriginalNetworkID + " TSID " + newChannel.TransportStreamID + " SID " + newChannel.ServiceID + " Channel ID: " + newChannel.ChannelID + " User Channel: " + newChannel.UserChannel + " Type: " + newChannel.Type + " Flags: " + flagsString + " Bqt ID: " + newChannel.BouquetID + " Bqt name: " + bouquetName + " Region: " + newChannel.Region); " is 398.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,AddChannel,The length of the statement  "		if (oldChannel.OriginalNetworkID == newChannel.OriginalNetworkID && oldChannel.TransportStreamID == newChannel.TransportStreamID && oldChannel.ServiceID == newChannel.ServiceID && oldChannel.ChannelID == newChannel.ChannelID) { " is 227.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "			titleLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Cat ID " + titleData.CategoryID.ToString ("000 ") + " Flags " + Utils.ConvertToHex (titleData.Flags) + " SLink " + seriesLink + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + titleData.EventName); " is 439.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "			descriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + summary.ShortDescription); " is 314.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "				extendedDescriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + extendedDescription); " is 317.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "						undefinedRecordLogger.Write ("Title records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + titleData.EventName + " Tag: " + record.Tag.ToString ("X") + " Data: " + Utils.ConvertToHex (record.Data)); " is 419.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "						undefinedRecordLogger.Write ("Title records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + titleData.EventName + " Tag: 0x" + record.Tag.ToString ("X") + " Data: No data"); " is 393.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "							undefinedRecordLogger.Write ("Summary records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " Tag: " + record.Tag.ToString ("X") + " Data: " + Utils.ConvertToHex (record.Data)); " is 393.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "							undefinedRecordLogger.Write ("Summary records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " Tag: ox" + record.Tag.ToString ("X") + " Data: No data"); " is 367.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The length of the statement  "			updateCategoryEntries (OriginalNetworkID' TransportStreamID' ServiceID' epgEntry.StartTime' epgEntry.EventName' titleData.CategoryID); " is 134.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getParentalRating,The length of the statement  "	epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "OPENTV"' (titleData.Flags [1] & 0x0f).ToString ()); " is 141.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getParentalRating,The length of the statement  "	epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "OPENTV"' (titleData.Flags [1] & 0x0f).ToString ()); " is 149.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getParentalRating,The length of the statement  "	epgEntry.ParentalRatingSystem = ParentalRating.FindSystem (RunParameters.Instance.CountryCode' "OPENTV"' (titleData.Flags [1] & 0x0f).ToString ()); " is 147.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The length of the statement  "	while (index3 < epgEntry.ShortDescription.Length && epgEntry.ShortDescription [index3] >= '0' && epgEntry.ShortDescription [index3] <= '9') " is 139.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat4,The length of the statement  "	while (index3 < epgEntry.ShortDescription.Length && (epgEntry.ShortDescription [index3] >= '0' && epgEntry.ShortDescription [index3] <= '9')) " is 141.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZLDirector,The length of the statement  "	while (stopIndex < epgEntry.ShortDescription.Length && epgEntry.ShortDescription [stopIndex] != '.' && epgEntry.ShortDescription [stopIndex] != '(') " is 148.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZLDirector,The length of the statement  "	epgEntry.Directors.Add (epgEntry.ShortDescription.Substring (startIndex + searchString.Length' stopIndex - (startIndex + searchString.Length))); " is 144.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,addCastName,The length of the statement  "	while (castStopIndex < description.Length && description [castStopIndex] != '.' && description [castStopIndex] != ''' && description [castStopIndex] != '(') " is 156.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,addCastName,The length of the statement  "	bool done = (castStopIndex == description.Length || description [castStopIndex] == '.' || description [castStopIndex] == '('); " is 126.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,updateCategoryEntries,The length of the statement  "		if (oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime == newEntry.StartTime) " is 193.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,updateCategoryEntries,The length of the statement  "		if (oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID > newEntry.ServiceID) { " is 150.
Long Statement,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,updateCategoryEntries,The length of the statement  "		if (oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime > newEntry.StartTime) { " is 194.
Long Statement,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV CHANNEL INFO ENTRY: Service ID: " + serviceID + " Type: " + type + " Channel ID: " + channelID + " User ID: " + userNumber + " Flags: " + Utils.ConvertToHex (flags)); " is 227.
Long Statement,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,Process,The length of the statement  "	bool referenceTablesLoaded = SingleTreeDictionaryEntry.Load (Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary " + RunParameters.Instance.CountryCode.Trim () + ".cfg")); " is 184.
Long Statement,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getTitleSections,The length of the statement  "	Logger.Instance.Write ("Title count: " + titleDataCount + " buffer space used: " + dataProvider.BufferSpaceUsed + " discontinuities: " + titleReader.Discontinuities); " is 166.
Long Statement,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getSummarySections,The length of the statement  "	Logger.Instance.Write ("Summary count: " + summaryCount + " buffer space used: " + dataProvider.BufferSpaceUsed + " discontinuities: " + titleReader.Discontinuities); " is 166.
Long Statement,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,processTitleSections,The length of the statement  "		/*Logger.Instance.Dump("Title Section"' section.Data' section.Length);*/OpenTVTitleSection titleSection = OpenTVTitleSection.ProcessOpenTVTitleTable (section.Data' section.PID' section.Table); " is 192.
Long Statement,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,FinishFrequency,The length of the statement  "				channel.ProcessChannelForEPG (station' titleLogger' descriptionLogger' extendedDescriptionLogger' undefinedRecordLogger); " is 121.
Long Statement,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,FinishFrequency,The length of the statement  "				Logger.Instance.Write ("Bouquet: " + bouquet.BouquetID + " - " + bouquet.Name + " Region: " + region.Code + " (channels = " + region.Channels.Count + ")"); " is 155.
Long Statement,DVBServices,OpenTVExtendedDescriptionRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVExtendedDescriptionRecord.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV EXTENDED DESCRIPTION RECORD: Description: " + Utils.ConvertToHex (description)); " is 141.
Long Statement,DVBServices,OpenTVRecordBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVRecordBase.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV GENERIC RECORD: Tag: " + Utils.ConvertToHex (tag) + " Length: " + length); " is 135.
Long Statement,DVBServices,OpenTVShortDescriptionRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVShortDescriptionRecord.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV SHORT DESCRIPTION RECORD: Description: " + Utils.ConvertToHex (description)); " is 138.
Long Statement,DVBServices,OpenTVSummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryData.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV SUMMARY DATA: Event ID: " + eventID + " Length: " + length); " is 121.
Long Statement,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV SUMMARY HEADER: Channel ID: " + channelID + " Base date : " + baseDate); " is 133.
Long Statement,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,LoadFromCode,The length of the statement  "		if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,LoadFromCode,The length of the statement  "		fileName = Path.Combine (RunParameters.ConfigDirectory' Path.Combine ("Program Categories"' "OpenTV Categories " + openTVCode + ".cfg")); " is 137.
Long Statement,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,LogCategoryUsage,The length of the statement  "					Logger.Instance.Write ("Category " + category.CategoryID + ": " + category.Description + " Used: " + category.UsedCount + " Sample Event: " + category.SampleEvent); " is 164.
Long Statement,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,LogCategoryUsage,The length of the statement  "			Logger.Instance.Write ("Category " + category.CategoryID + ": " + " Count: " + category.UsedCount + " Sample Event: " + category.Description); " is 142.
Long Statement,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV TITLE DATA RECORD: " + "Start time: " + startTimeOffset + " Duration: " + duration + " Category: " + categoryID + " Unknown: " + Utils.ConvertToHex (flags) + " Name: " + Utils.ConvertToHex (eventName)); " is 263.
Long Statement,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "OPENTV TITLE HEADER: Channel ID: " + channelID + " Base date : " + baseDate); " is 131.
Long Statement,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "SERVICE DESCRIPTION: Service ID: " + serviceID + " EIT Sched: " + eitSchedule + " EIT Now/next: " + eitPresentFollowing + " Running status: " + runningStatus + " Scrambled: " + scrambled); " is 242.
Long Statement,DVBServices,ServiceDescriptionSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescriptionSection.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "SERVICE DESCRIPTION SECTION: TSID: " + transportStreamID + " ONID: " + originalNetworkID); " is 144.
Long Statement,DVBServices,ServiceGatewayInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\ServiceGatewayInfo.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "SERVER GATEWAY INFO: Taps count: " + tapsCount + " Service context count: " + serviceContextCount + " UserInfo lth: " + userInfoLength + " User info: " + Utils.ConvertToHex (userInfo)); " is 239.
Long Statement,DVBServices,DVBShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBShortEventDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "DVB SHORT EVENT DESCRIPTOR: Lang code: " + languageCode + " Event name: " + eventName + " Short desc: " + shortDescription); " is 178.
Long Statement,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "TRANSPORT STREAM: TSID: " + transportStreamID + " ONID: " + originalNetworkID); " is 133.
Long Statement,DVBServices,ServiceChannelDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ServiceChannelDescriptor.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "SERVICE CHANNEL DESCRIPTOR: Channel no: " + channelNumber + " Undefined: " + undefinedDataString); " is 152.
Long Statement,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getChannelSections,The length of the statement  "	Logger.Instance.Write ("Section count: " + SiehFernInfoChannelSection.Sections.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 142.
Long Statement,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getEPGSections,The length of the statement  "	Logger.Instance.Write ("Section count: " + SiehFernInfoEPGSection.Sections.Count + " buffer space used: " + dataProvider.BufferSpaceUsed); " is 138.
Long Statement,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processChannelSections,The length of the statement  "							Logger.Instance.Dump ("Siehfern Info Block Type 0x" + mpeg2Header.TableIDExtension.ToString ("X")' section.Data' section.Data.Length); " is 134.
Long Statement,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processEPGSections,The length of the statement  "							Logger.Instance.Dump ("Siehfern Info Block Type 0x" + mpeg2Header.TableIDExtension.ToString ("X")' section.Data' section.Data.Length); " is 134.
Long Statement,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The length of the statement  "			station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime); " is 153.
Long Statement,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The length of the statement  "		titleLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + epgEntry.EventName + " " + epgText); " is 318.
Long Statement,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramDescription,The length of the statement  "		descriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + epgEntry.ShortDescription + " " + epgText); " is 331.
Long Statement,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,LogMessage,The length of the statement  "	Logger.ProtocolLogger.Write (Logger.ProtocolIndent + "SIEHFERN INFO EPG SECTION: Seq no:" + sequenceNumber + " Max seq no: " + maximumSequenceNumber + " Unknown: " + Utils.ConvertToHex (unknown)); " is 196.
Complex Conditional,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,Process,The conditional expression  "RunParameters.Instance.ChannelBouquet != -1 || RunParameters.Instance.Options.Contains ("USECHANNELID") || RunParameters.Instance.Options.Contains ("USELCN") || RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") || RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")"  is complex.
Complex Conditional,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,logChannelInfo,The conditional expression  "RunParameters.Instance.ChannelBouquet == -1 && !RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")"  is complex.
Complex Conditional,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,Process,The conditional expression  "RunParameters.Instance.ChannelBouquet != -1 || RunParameters.Instance.Options.Contains ("USECHANNELID") || RunParameters.Instance.Options.Contains ("USELCN") || RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") || RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")"  is complex.
Complex Conditional,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkChannelMapping,The conditional expression  "channel.OriginalNetworkID == tvStation.OriginalNetworkID && channel.TransportStreamID == tvStation.TransportStreamID && channel.ServiceID == tvStation.ServiceID && tvStation.LogicalChannelNumber == -1"  is complex.
Complex Conditional,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,logChannelInfo,The conditional expression  "RunParameters.Instance.ChannelBouquet == -1 && !RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")"  is complex.
Complex Conditional,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,Process,The conditional expression  "RunParameters.Instance.ChannelBouquet != -1 || RunParameters.Instance.Options.Contains ("USECHANNELID") || RunParameters.Instance.Options.Contains ("USELCN") || RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") || RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")"  is complex.
Complex Conditional,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,checkBouquetNeeded,The conditional expression  "!RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")"  is complex.
Complex Conditional,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,logChannelInfo,The conditional expression  "RunParameters.Instance.ChannelBouquet == -1 && !RunParameters.Instance.Options.Contains ("USECHANNELID") && !RunParameters.Instance.Options.Contains ("USELCN") && !RunParameters.Instance.Options.Contains ("CREATEBRCHANNELS") && !RunParameters.Instance.Options.Contains ("CREATEARCHANNELS")"  is complex.
Complex Conditional,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The conditional expression  "byteData [index] == 0xff && byteData [index + 1] == 0xff && byteData [index + 2] == 0xff && byteData [index + 3] == 0xff && byteData [index + 4] == 0xff"  is complex.
Complex Conditional,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,updateCategoryEntries,The conditional expression  "oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime == newEntry.StartTime"  is complex.
Complex Conditional,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,updateCategoryEntries,The conditional expression  "oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime > newEntry.StartTime"  is complex.
Complex Conditional,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createWMCChannelInfo,The conditional expression  "!station.Excluded && station.EPGCollection.Count != 0 && station.WMCUniqueID == null && station.WMCMatchName == null"  is complex.
Complex Conditional,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,findEITCategoryEntry,The conditional expression  "categoryEntry.NetworkID == openTVCategoryEntry.NetworkID && categoryEntry.TransportStreamID == openTVCategoryEntry.TransportStreamID && categoryEntry.ServiceID == openTVCategoryEntry.ServiceID && categoryEntry.StartTime == openTVCategoryEntry.StartTime"  is complex.
Complex Conditional,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,AddChannel,The conditional expression  "oldChannel.OriginalNetworkID == newChannel.OriginalNetworkID && oldChannel.TransportStreamID == newChannel.TransportStreamID && oldChannel.ServiceID == newChannel.ServiceID && oldChannel.ChannelID == newChannel.ChannelID"  is complex.
Complex Conditional,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,updateCategoryEntries,The conditional expression  "oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime == newEntry.StartTime"  is complex.
Complex Conditional,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,updateCategoryEntries,The conditional expression  "oldEntry.NetworkID == newEntry.NetworkID && oldEntry.TransportStreamID == newEntry.TransportStreamID && oldEntry.ServiceID == newEntry.ServiceID && oldEntry.StartTime > newEntry.StartTime"  is complex.
Empty Catch Block,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The method has an empty catch block.
Empty Catch Block,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBRSeasonEpisode,The method has an empty catch block.
Empty Catch Block,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramDescription,The method has an empty catch block.
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: try {  	sampleRateCode = byteData [lastIndex] >> 5;  	bsid = byteData [lastIndex] & 0x1f;  	lastIndex++;  	bitRateCode = byteData [lastIndex] >> 2;  	surroundMode = byteData [lastIndex] & 0x03;  	lastIndex++;  	bsmod = byteData [lastIndex] >> 5;  	numberOfChannels = (byteData [lastIndex] >> 1) & 0x0f;  	fullServiceFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	languageCode = (int)byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (numberOfChannels == 0) {  		languageCode2 = (int)byteData [lastIndex];  		lastIndex++;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	if (bsmod < 2) {  		mainID = byteData [lastIndex] >> 5;  		priority = (byteData [lastIndex] >> 3) & 0x03;  	}  	else  		asvcFlags = byteData [lastIndex];  	lastIndex++;  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	int descriptionLength = byteData [lastIndex] >> 1;  	bool descriptionCode = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	if (descriptionLength != 0) {  		if (descriptionCode)  			description = Utils.GetString (byteData' lastIndex' descriptionLength);  		else  			description = Utils.GetUnicodeString (byteData' lastIndex' descriptionLength);  		lastIndex += descriptionLength;  	}  	if (lastIndex - index == Length) {  		Validate ();  		return;  	}  	bool languageFlag = ((byteData [lastIndex] >> 7) != 0);  	bool languageFlag2 = (((byteData [lastIndex] >> 6) & 0x01) != 0);  	lastIndex++;  	if (languageFlag) {  		language = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	if (languageFlag2) {  		language2 = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  	}  	additionalInfo = null;  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP AC3 Audio Descriptor message is short"));  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: sampleRateCode = byteData [lastIndex] >> 5;  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: bitRateCode = byteData [lastIndex] >> 2;  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: bsmod = byteData [lastIndex] >> 5;  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: if (bsmod < 2) {  	mainID = byteData [lastIndex] >> 5;  	priority = (byteData [lastIndex] >> 3) & 0x03;  }  else  	asvcFlags = byteData [lastIndex];  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: if (bsmod < 2) {  	mainID = byteData [lastIndex] >> 5;  	priority = (byteData [lastIndex] >> 3) & 0x03;  }  else  	asvcFlags = byteData [lastIndex];  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: if (bsmod < 2) {  	mainID = byteData [lastIndex] >> 5;  	priority = (byteData [lastIndex] >> 3) & 0x03;  }  else  	asvcFlags = byteData [lastIndex];  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: mainID = byteData [lastIndex] >> 5;  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: priority = (byteData [lastIndex] >> 3) & 0x03;  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: if (languageFlag) {  	language = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: if (languageFlag) {  	language = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: language = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: if (languageFlag2) {  	language2 = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: if (languageFlag2) {  	language2 = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  }  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: language2 = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,AC3AudioDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AC3AudioDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getMasterGuideData,The following statement contains a magic number: guideReader = new TSStreamReader (0xc7' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getMasterGuideData,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0) {  		processMasterGuideTable (sections);  		done = true;  	}  	else  		done = (repeats == RunParameters.Instance.Repeats);  }  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getMasterGuideData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getVirtualChannelData,The following statement contains a magic number: guideReader = new TSStreamReader (tables' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getVirtualChannelData,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processVirtualChannelTable (sections' dataProvider.Frequency.Frequency);  	done = VirtualChannelTable.Complete;  	if (!done) {  		repeats++;  		done = (repeats == RunParameters.Instance.Repeats);  	}  }  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getVirtualChannelData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getRatingRegionData,The following statement contains a magic number: guideReader = new TSStreamReader (0xca' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getRatingRegionData,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processRatingRegionTable (sections);  	if (RatingRegionTable.CheckComplete (masterGuideTable.GetRRTRegions ())) {  		repeats++;  		done = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  }  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getRatingRegionData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getExtendedTextData,The following statement contains a magic number: guideReader = new TSStreamReader (0xcc' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getExtendedTextData,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processExtendedTextTable (sections);  	if (ExtendedTextTable.TextEntries.Count == lastCount) {  		repeats++;  		done = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = ExtendedTextTable.TextEntries.Count;  }  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getExtendedTextData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getEventInformationData,The following statement contains a magic number: guideReader = new TSStreamReader (0xcb' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getEventInformationData,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processEventInformationTable (sections' dataProvider.Frequency.Frequency);  	if (VirtualChannelTable.EPGCount == lastCount) {  		repeats++;  		done = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = VirtualChannelTable.EPGCount;  }  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,getEventInformationData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,processEvent,The following statement contains a magic number: if (eventEntry.ETMLocation == 1 || eventEntry.ETMLocation == 2) {  	ExtendedTextTableEntry textEntry = ExtendedTextTable.FindEntry (sourceID' eventEntry.EventID);  	if (textEntry != null)  		epgEntry.ShortDescription = textEntry.Text.ToString ().Replace ("\0"' "");  }  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,FinishFrequency,The following statement contains a magic number: foreach (VirtualChannel channel in VirtualChannelTable.Channels) {  	TVStation station = TVStation.FindStation (channel.CollectionFrequency' channel.MajorChannelNumber' channel.MinorChannelNumber);  	if (station == null) {  		station = new TVStation (channel.ShortName);  		station.OriginalNetworkID = channel.CollectionFrequency;  		station.TransportStreamID = channel.MajorChannelNumber;  		station.ServiceID = channel.MinorChannelNumber;  		station.ChannelID = channel.MajorChannelNumber + ":" + channel.MinorChannelNumber + ":" + channel.ShortName;  		TVStation.AddStation (station);  	}  	station.Name = channel.ShortName;  	if (station.LogicalChannelNumber == -1)  		station.LogicalChannelNumber = (channel.MajorChannelNumber * 100) + channel.MinorChannelNumber;  	station.MinorChannelNumber = channel.MinorChannelNumber;  	if (station.EPGCollection.Count == 0) {  		foreach (EPGEntry epgEntry in channel.EPGCollection) {  			station.EPGCollection.Add (epgEntry);  			if (titleLogger != null)  				titleLogger.Write (epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + epgEntry.EventName);  			if (descriptionLogger != null && epgEntry.ShortDescription != null)  				descriptionLogger.Write (epgEntry.ServiceID + " " + " Evt ID " + epgEntry.EventID + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + epgEntry.ShortDescription);  		}  	}  }  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,FinishFrequency,The following statement contains a magic number: if (station.LogicalChannelNumber == -1)  	station.LogicalChannelNumber = (channel.MajorChannelNumber * 100) + channel.MinorChannelNumber;  
Magic Number,DVBServices,AtscPsipController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipController.cs,FinishFrequency,The following statement contains a magic number: station.LogicalChannelNumber = (channel.MajorChannelNumber * 100) + channel.MinorChannelNumber;  
Magic Number,DVBServices,CaptionServiceDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\CaptionServiceDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	digitalCC = ((byteData [lastIndex] & 0x80) != 0);  	if (digitalCC)  		line21Field = ((byteData [lastIndex] & 0x01) != 0);  	else  		captionServiceNumber = byteData [lastIndex] & 0x3f;  	lastIndex++;  	easyReader = ((byteData [lastIndex] & 0x80) != 0);  	wideAspectRatio = ((byteData [lastIndex] & 0x40) != 0);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Caption Service Descriptor Entry message is short"));  }  
Magic Number,DVBServices,CaptionServiceDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\CaptionServiceDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	digitalCC = ((byteData [lastIndex] & 0x80) != 0);  	if (digitalCC)  		line21Field = ((byteData [lastIndex] & 0x01) != 0);  	else  		captionServiceNumber = byteData [lastIndex] & 0x3f;  	lastIndex++;  	easyReader = ((byteData [lastIndex] & 0x80) != 0);  	wideAspectRatio = ((byteData [lastIndex] & 0x40) != 0);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Caption Service Descriptor Entry message is short"));  }  
Magic Number,DVBServices,CaptionServiceDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\CaptionServiceDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	digitalCC = ((byteData [lastIndex] & 0x80) != 0);  	if (digitalCC)  		line21Field = ((byteData [lastIndex] & 0x01) != 0);  	else  		captionServiceNumber = byteData [lastIndex] & 0x3f;  	lastIndex++;  	easyReader = ((byteData [lastIndex] & 0x80) != 0);  	wideAspectRatio = ((byteData [lastIndex] & 0x40) != 0);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Caption Service Descriptor Entry message is short"));  }  
Magic Number,DVBServices,CaptionServiceDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\CaptionServiceDescriptorEntry.cs,Process,The following statement contains a magic number: languageCode = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,CaptionServiceDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\CaptionServiceDescriptorEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,CaptionServiceDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\CaptionServiceDescriptorEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: try {  	eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  	lastIndex += 4;  	etmLocation = (byteData [lastIndex] & 0x30) >> 4;  	duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  	lastIndex += 3;  	int titleLength = (int)byteData [lastIndex];  	lastIndex++;  	if (titleLength != 0) {  		eventName = new MultipleString ();  		eventName.Process (byteData' lastIndex);  		lastIndex += titleLength;  	}  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Event Information Table entry message is short"));  }  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: eventID = ((byteData [lastIndex] & 0x3f) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: startTime = new DateTime (1980' 1' 6' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan (Utils.Convert4BytesToInt (byteData' lastIndex) * TimeSpan.TicksPerSecond);  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: etmLocation = (byteData [lastIndex] & 0x30) >> 4;  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: duration = new TimeSpan (((byteData [lastIndex] & 0x0f) * 16384) + ((byteData [lastIndex + 1] * 256) + byteData [lastIndex + 2]) * TimeSpan.TicksPerSecond);  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,EventInformationTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\EventInformationTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ExtendedTextTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedTextTableEntry.cs,Process,The following statement contains a magic number: try {  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex) >> 2;  	lastIndex += 2;  	text = new MultipleString ();  	text.Process (byteData' lastIndex);  	lastIndex = text.Index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Extended Text Table entry message is short"));  }  
Magic Number,DVBServices,ExtendedTextTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedTextTableEntry.cs,Process,The following statement contains a magic number: try {  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex) >> 2;  	lastIndex += 2;  	text = new MultipleString ();  	text.Process (byteData' lastIndex);  	lastIndex = text.Index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Extended Text Table entry message is short"));  }  
Magic Number,DVBServices,ExtendedTextTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedTextTableEntry.cs,Process,The following statement contains a magic number: try {  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex) >> 2;  	lastIndex += 2;  	text = new MultipleString ();  	text.Process (byteData' lastIndex);  	lastIndex = text.Index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Extended Text Table entry message is short"));  }  
Magic Number,DVBServices,ExtendedTextTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedTextTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ExtendedTextTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedTextTableEntry.cs,Process,The following statement contains a magic number: eventID = Utils.Convert2BytesToInt (byteData' lastIndex) >> 2;  
Magic Number,DVBServices,ExtendedTextTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ExtendedTextTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MasterGuideTable,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTable.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MasterGuideTable,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTable.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: try {  	tableType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	version = byteData [lastIndex] & 0x01f;  	lastIndex++;  	byteCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 11;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Master Guide Table entry message is short"));  }  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: try {  	tableType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	version = byteData [lastIndex] & 0x01f;  	lastIndex++;  	byteCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 11;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Master Guide Table entry message is short"));  }  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: try {  	tableType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	version = byteData [lastIndex] & 0x01f;  	lastIndex++;  	byteCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 11;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Master Guide Table entry message is short"));  }  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: try {  	tableType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	version = byteData [lastIndex] & 0x01f;  	lastIndex++;  	byteCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 11;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Master Guide Table entry message is short"));  }  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: try {  	tableType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	version = byteData [lastIndex] & 0x01f;  	lastIndex++;  	byteCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 11;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Master Guide Table entry message is short"));  }  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: try {  	tableType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	version = byteData [lastIndex] & 0x01f;  	lastIndex++;  	byteCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 11;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Master Guide Table entry message is short"));  }  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: try {  	tableType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	version = byteData [lastIndex] & 0x01f;  	lastIndex++;  	byteCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 11;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Master Guide Table entry message is short"));  }  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MasterGuideTableEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\MasterGuideTableEntry.cs,Process,The following statement contains a magic number: totalLength = descriptorLoopLength + 11;  
Magic Number,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				int number = Int32.Parse (parts [0]);  				AddCategory (number' line.Substring (parts [0].Length + 1));  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,Load,The following statement contains a magic number: if (line != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			int number = Int32.Parse (parts [0]);  			AddCategory (number' line.Substring (parts [0].Length + 1));  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,AtscPsipProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\AtscPsipProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		int number = Int32.Parse (parts [0]);  		AddCategory (number' line.Substring (parts [0].Length + 1));  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,RatingRegion,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\RatingRegion.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ServiceLocationDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptor.cs,Process,The following statement contains a magic number: try {  	pcrPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  	lastIndex += 2;  	int locationCount = byteData [lastIndex];  	lastIndex++;  	if (locationCount != 0) {  		locations = new Collection<ServiceLocationDescriptorEntry> ();  		while (locationCount != 0) {  			ServiceLocationDescriptorEntry location = new ServiceLocationDescriptorEntry ();  			location.Process (byteData' lastIndex);  			locations.Add (location);  			lastIndex = location.Index;  			locationCount--;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Service Location Descriptor message is short"));  }  
Magic Number,DVBServices,ServiceLocationDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptor.cs,Process,The following statement contains a magic number: try {  	pcrPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  	lastIndex += 2;  	int locationCount = byteData [lastIndex];  	lastIndex++;  	if (locationCount != 0) {  		locations = new Collection<ServiceLocationDescriptorEntry> ();  		while (locationCount != 0) {  			ServiceLocationDescriptorEntry location = new ServiceLocationDescriptorEntry ();  			location.Process (byteData' lastIndex);  			locations.Add (location);  			lastIndex = location.Index;  			locationCount--;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Service Location Descriptor message is short"));  }  
Magic Number,DVBServices,ServiceLocationDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptor.cs,Process,The following statement contains a magic number: pcrPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  
Magic Number,DVBServices,ServiceLocationDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	streamType = byteData [lastIndex];  	lastIndex++;  	elementaryPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  	lastIndex += 2;  	if (byteData [lastIndex] != 0x00)  		languageCode = Utils.GetString (byteData' lastIndex' 3);  	else  		languageCode = "n/a";  	lastIndex += 3;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Service Location Descriptor Entry message is short"));  }  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	streamType = byteData [lastIndex];  	lastIndex++;  	elementaryPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  	lastIndex += 2;  	if (byteData [lastIndex] != 0x00)  		languageCode = Utils.GetString (byteData' lastIndex' 3);  	else  		languageCode = "n/a";  	lastIndex += 3;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Service Location Descriptor Entry message is short"));  }  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	streamType = byteData [lastIndex];  	lastIndex++;  	elementaryPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  	lastIndex += 2;  	if (byteData [lastIndex] != 0x00)  		languageCode = Utils.GetString (byteData' lastIndex' 3);  	else  		languageCode = "n/a";  	lastIndex += 3;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Service Location Descriptor Entry message is short"));  }  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	streamType = byteData [lastIndex];  	lastIndex++;  	elementaryPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  	lastIndex += 2;  	if (byteData [lastIndex] != 0x00)  		languageCode = Utils.GetString (byteData' lastIndex' 3);  	else  		languageCode = "n/a";  	lastIndex += 3;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The PSIP Service Location Descriptor Entry message is short"));  }  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: elementaryPid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex];  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: if (byteData [lastIndex] != 0x00)  	languageCode = Utils.GetString (byteData' lastIndex' 3);  else  	languageCode = "n/a";  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: languageCode = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,ServiceLocationDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\ServiceLocationDescriptorEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,VirtualChannelTable,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannelTable.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: try {  	shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  	lastIndex += 14;  	majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  	minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  	lastIndex += 3;  	modulationMode = (int)byteData [lastIndex];  	lastIndex++;  	frequency = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	etmLocation = byteData [lastIndex] >> 6;  	accessControlled = ((byteData [lastIndex] & 0x20) != 0);  	hidden = ((byteData [lastIndex] & 0x10) != 0);  	if (isCable) {  		pathSelect = ((byteData [lastIndex] & 0x08) != 0);  		outOfBand = ((byteData [lastIndex] & 0x04) != 0);  	}  	hideGuide = ((byteData [lastIndex] & 0x02) != 0);  	lastIndex++;  	serviceType = byteData [lastIndex] & 0x03f;  	lastIndex++;  	sourceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x03) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = (lastIndex - index) + descriptorLoopLength;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.AtscInstance (byteData' lastIndex);  			descriptors.Add (descriptor);  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Virtual Channel Table entry message is short"));  }  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: shortName = Utils.GetUnicodeString (byteData' lastIndex' 14).Replace ((char)0x00' '?').Replace ("?"' "");  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: lastIndex += 14;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: majorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 18) & 0x3ff;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: minorChannelNumber = (Utils.Convert4BytesToInt (byteData' lastIndex) >> 8) & 0x3ff;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: etmLocation = byteData [lastIndex] >> 6;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,VirtualChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ATSC PSIP\VirtualChannel.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BellShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellShortEventDescriptor.cs,getEventName,The following statement contains a magic number: if (eventName.StartsWith ("HD-"))  	return (eventName.Substring (3));  else {  	if (eventName.StartsWith ("HD - "))  		return (eventName.Substring (5));  	else  		return (eventName);  }  
Magic Number,DVBServices,BellShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellShortEventDescriptor.cs,getEventName,The following statement contains a magic number: if (eventName.StartsWith ("HD-"))  	return (eventName.Substring (3));  else {  	if (eventName.StartsWith ("HD - "))  		return (eventName.Substring (5));  	else  		return (eventName);  }  
Magic Number,DVBServices,BellShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellShortEventDescriptor.cs,getEventName,The following statement contains a magic number: return (eventName.Substring (3));  
Magic Number,DVBServices,BellShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellShortEventDescriptor.cs,getEventName,The following statement contains a magic number: if (eventName.StartsWith ("HD - "))  	return (eventName.Substring (5));  else  	return (eventName);  
Magic Number,DVBServices,BellShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellShortEventDescriptor.cs,getEventName,The following statement contains a magic number: return (eventName.Substring (5));  
Magic Number,DVBServices,BellTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVController.cs,getBellTVData,The following statement contains a magic number: bellTVReader = new TSStreamReader (2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,BellTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVController.cs,getBellTVData,The following statement contains a magic number: while (!bellTVSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	bellTVReader.Lock ("LoadMessages");  	if (bellTVReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in bellTVReader.Sections)  			sections.Add (section);  		bellTVReader.Sections.Clear ();  	}  	bellTVReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processSections (sections);  	if (TVStation.EPGCount == lastCount) {  		repeats++;  		bellTVSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = TVStation.EPGCount;  }  
Magic Number,DVBServices,BellTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVController.cs,getBellTVData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.BellTVInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV message is short"));  }  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.BellTVInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV message is short"));  }  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.BellTVInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV message is short"));  }  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.BellTVInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV message is short"));  }  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.BellTVInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV message is short"));  }  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.BellTVInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV message is short"));  }  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.BellTVInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV message is short"));  }  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: lastIndex += 5;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: runningStatus = (int)(byteData [lastIndex] >> 5);  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,getStartTime,The following statement contains a magic number: year = year + 1900 + adjust;  
Magic Number,DVBServices,BellTVEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVEntry.cs,getStartTime,The following statement contains a magic number: month = month - 1 - (adjust * 12);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,Process,The following statement contains a magic number: languageCode = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: if (closedCaptions)  	eventDescription = eventDescription = eventDescription.Remove (closedCaptionsIndex' 5);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: eventDescription = eventDescription = eventDescription.Remove (closedCaptionsIndex' 5);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: if (stereo)  	eventDescription = eventDescription.Remove (stereoIndex' 9);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: eventDescription = eventDescription.Remove (stereoIndex' 9);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: if (dateIndex != -1) {  	date = eventDescription.Substring (dateIndex + 2' 4);  	eventDescription = eventDescription.Remove (dateIndex' 7);  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: if (dateIndex != -1) {  	date = eventDescription.Substring (dateIndex + 2' 4);  	eventDescription = eventDescription.Remove (dateIndex' 7);  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: if (dateIndex != -1) {  	date = eventDescription.Substring (dateIndex + 2' 4);  	eventDescription = eventDescription.Remove (dateIndex' 7);  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: date = eventDescription.Substring (dateIndex + 2' 4);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: date = eventDescription.Substring (dateIndex + 2' 4);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: eventDescription = eventDescription.Remove (dateIndex' 7);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: if (newIndex != -1)  	eventDescription = eventDescription.Remove (newIndex' 5);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: eventDescription = eventDescription.Remove (newIndex' 5);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,processEventDescription,The following statement contains a magic number: if (castParts.Length > 2) {  	cast = getCast (castParts [0]);  	eventDescription = eventDescription.Remove (0' castParts [0].Length + 1).Trim ();  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 6);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 6);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 7);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 7);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 5);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 5);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 9);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 9);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 10);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 10);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 7);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 7);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 6);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 6);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 10);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 10);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 8);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 8);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 5);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 5);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 7);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 7);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: if (categoryIndex != -1) {  	processCategory (categoryIndex' 2);  	return;  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,extractCategory,The following statement contains a magic number: processCategory (categoryIndex' 2);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: foreach (string castMember in castParts) {  	string name = castMember.Trim ();  	if (name.StartsWith ("Voice of: "))  		cast.Add (name.Substring (10));  	else {  		if (name.Length > 2 && name.Length < 21) {  			if (name [0] >= 'A' && name [0] <= 'Z')  				cast.Add (name);  			else  				return (null);  		}  		else  			return (null);  	}  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: foreach (string castMember in castParts) {  	string name = castMember.Trim ();  	if (name.StartsWith ("Voice of: "))  		cast.Add (name.Substring (10));  	else {  		if (name.Length > 2 && name.Length < 21) {  			if (name [0] >= 'A' && name [0] <= 'Z')  				cast.Add (name);  			else  				return (null);  		}  		else  			return (null);  	}  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: foreach (string castMember in castParts) {  	string name = castMember.Trim ();  	if (name.StartsWith ("Voice of: "))  		cast.Add (name.Substring (10));  	else {  		if (name.Length > 2 && name.Length < 21) {  			if (name [0] >= 'A' && name [0] <= 'Z')  				cast.Add (name);  			else  				return (null);  		}  		else  			return (null);  	}  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.StartsWith ("Voice of: "))  	cast.Add (name.Substring (10));  else {  	if (name.Length > 2 && name.Length < 21) {  		if (name [0] >= 'A' && name [0] <= 'Z')  			cast.Add (name);  		else  			return (null);  	}  	else  		return (null);  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.StartsWith ("Voice of: "))  	cast.Add (name.Substring (10));  else {  	if (name.Length > 2 && name.Length < 21) {  		if (name [0] >= 'A' && name [0] <= 'Z')  			cast.Add (name);  		else  			return (null);  	}  	else  		return (null);  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.StartsWith ("Voice of: "))  	cast.Add (name.Substring (10));  else {  	if (name.Length > 2 && name.Length < 21) {  		if (name [0] >= 'A' && name [0] <= 'Z')  			cast.Add (name);  		else  			return (null);  	}  	else  		return (null);  }  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: cast.Add (name.Substring (10));  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.Length > 2 && name.Length < 21) {  	if (name [0] >= 'A' && name [0] <= 'Z')  		cast.Add (name);  	else  		return (null);  }  else  	return (null);  
Magic Number,DVBServices,BellTVExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.Length > 2 && name.Length < 21) {  	if (name [0] >= 'A' && name [0] <= 'Z')  		cast.Add (name);  	else  		return (null);  }  else  	return (null);  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line.Trim () != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				string[] numbers = parts [0].Split (new char[] {  					'''  				});  				if (numbers.Length != 2)  					Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  				else {  					int categoryID = Int32.Parse (numbers [0].Trim ());  					int subCategoryID = Int32.Parse (numbers [1].Trim ());  					AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  				}  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line.Trim () != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				string[] numbers = parts [0].Split (new char[] {  					'''  				});  				if (numbers.Length != 2)  					Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  				else {  					int categoryID = Int32.Parse (numbers [0].Trim ());  					int subCategoryID = Int32.Parse (numbers [1].Trim ());  					AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  				}  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: if (line.Trim () != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			string[] numbers = parts [0].Split (new char[] {  				'''  			});  			if (numbers.Length != 2)  				Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  			else {  				int categoryID = Int32.Parse (numbers [0].Trim ());  				int subCategoryID = Int32.Parse (numbers [1].Trim ());  				AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  			}  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: if (line.Trim () != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			string[] numbers = parts [0].Split (new char[] {  				'''  			});  			if (numbers.Length != 2)  				Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  			else {  				int categoryID = Int32.Parse (numbers [0].Trim ());  				int subCategoryID = Int32.Parse (numbers [1].Trim ());  				AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  			}  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		string[] numbers = parts [0].Split (new char[] {  			'''  		});  		if (numbers.Length != 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			int categoryID = Int32.Parse (numbers [0].Trim ());  			int subCategoryID = Int32.Parse (numbers [1].Trim ());  			AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  		}  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		string[] numbers = parts [0].Split (new char[] {  			'''  		});  		if (numbers.Length != 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			int categoryID = Int32.Parse (numbers [0].Trim ());  			int subCategoryID = Int32.Parse (numbers [1].Trim ());  			AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  		}  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: try {  	string[] numbers = parts [0].Split (new char[] {  		'''  	});  	if (numbers.Length != 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		int categoryID = Int32.Parse (numbers [0].Trim ());  		int subCategoryID = Int32.Parse (numbers [1].Trim ());  		AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  	}  }  catch (FormatException) {  	Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  }  catch (ArithmeticException) {  	Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  }  
Magic Number,DVBServices,BellTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVProgramCategory.cs,Load,The following statement contains a magic number: if (numbers.Length != 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	int categoryID = Int32.Parse (numbers [0].Trim ());  	int subCategoryID = Int32.Parse (numbers [1].Trim ());  	AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  }  
Magic Number,DVBServices,BellTVRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVRatingDescriptor.cs,Process,The following statement contains a magic number: if (Length < 2)  	return;  
Magic Number,DVBServices,BellTVRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVRatingDescriptor.cs,Process,The following statement contains a magic number: starRating = byteData [lastIndex] >> 5;  
Magic Number,DVBServices,BellTVRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVRatingDescriptor.cs,Process,The following statement contains a magic number: parentalRating = ((byteData [lastIndex] >> 2) & 0x07);  
Magic Number,DVBServices,BellTVRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVRatingDescriptor.cs,Process,The following statement contains a magic number: advisoryRating = ((byteData [lastIndex] & 0x03) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	segmentLastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastTableID = (int)byteData [lastIndex];  	lastIndex++;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV section is short"));  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	segmentLastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastTableID = (int)byteData [lastIndex];  	lastIndex++;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Bell TV section is short"));  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	BellTVEntry bellTVEntry = new BellTVEntry ();  	bellTVEntry.Process (byteData' lastIndex' mpeg2Header.TableID);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.BellTV;  	if (bellTVEntry.HighDefinition)  		epgEntry.VideoQuality = "HDTV";  	if (bellTVEntry.ClosedCaptions)  		epgEntry.SubTitles = "teletext";  	if (bellTVEntry.Stereo)  		epgEntry.AudioQuality = "stereo";  	epgEntry.Duration = Utils.RoundTime (bellTVEntry.Duration);  	epgEntry.EventID = bellTVEntry.EventID;  	epgEntry.EventName = bellTVEntry.EventName;  	getParentalRating (epgEntry' bellTVEntry);  	epgEntry.RunningStatus = bellTVEntry.RunningStatus;  	epgEntry.Scrambled = bellTVEntry.Scrambled;  	epgEntry.ShortDescription = bellTVEntry.ShortDescription;  	if (bellTVEntry.SubTitle != bellTVEntry.EventName)  		epgEntry.EventSubTitle = bellTVEntry.SubTitle;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (bellTVEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' bellTVEntry.ContentType' bellTVEntry.ContentSubType);  	epgEntry.StarRating = getStarRating (bellTVEntry);  	epgEntry.Date = bellTVEntry.Date;  	epgEntry.Cast = bellTVEntry.Cast;  	getSeriesEpisode (epgEntry' bellTVEntry.Series' bellTVEntry.Episode);  	epgEntry.HasGraphicLanguage = bellTVEntry.HasStrongLanguage;  	epgEntry.HasStrongSexualContent = bellTVEntry.HasSexualContent;  	epgEntry.HasGraphicViolence = bellTVEntry.HasViolence;  	epgEntry.HasNudity = bellTVEntry.HasNudity;  	epgEntry.PreviousPlayDate = bellTVEntry.OriginalAirDate;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (bellTVEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null) {  		if (!RunParameters.Instance.DebugIDs.Contains ("LOGORIGINAL"))  			logDescription (bellTVEntry.ShortDescription' epgEntry' descriptionLogger);  		else  			logDescription (bellTVEntry.OriginalDescription' epgEntry' descriptionLogger);  	}  	lastIndex = bellTVEntry.Index;  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getEventCategory,The following statement contains a magic number: if (contentType == 0 && contentSubType == 255)  	return (getCustomCategory (title' description));  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,BellTVSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,Process,The following statement contains a magic number: series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06;  
Magic Number,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,Process,The following statement contains a magic number: series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06;  
Magic Number,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,Process,The following statement contains a magic number: series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06;  
Magic Number,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,Process,The following statement contains a magic number: episode = (byteData [lastIndex] & 0x3f << 08) | byteData [lastIndex + 1];  
Magic Number,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BellTVSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Bell TV\BellTVSeriesDescriptor.cs,getOriginalAirDate,The following statement contains a magic number: try {  	DateTime utcStartTime = new DateTime (1970' 1' 1).AddSeconds (((double)seconds));  	return (utcStartTime.ToLocalTime ());  }  catch (ArgumentOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The start time element(s) are out of range"));  }  catch (ArgumentException) {  	throw (new ArgumentOutOfRangeException ("The start time element(s) result in a start time that is out of range"));  }  
Magic Number,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetBouquetSections,The following statement contains a magic number: bouquetReader = new TSStreamReader (0x4a' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetBouquetSections,The following statement contains a magic number: while (!bouquetSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	bouquetReader.Lock ("ProcessOpenTVSections");  	if (bouquetReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in bouquetReader.Sections)  			sections.Add (section);  		bouquetReader.Sections.Clear ();  	}  	bouquetReader.Release ("ProcessOpenTVSections");  	if (sections.Count != 0)  		ProcessBouquetSections (sections);  	if (OpenTVChannel.Channels.Count == lastCount) {  		repeats++;  		bouquetSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = OpenTVChannel.Channels.Count;  }  
Magic Number,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetBouquetSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetTimeOffsetSections,The following statement contains a magic number: timeOffsetReader = new TSStreamReader (0x73' 50000' dataProvider.BufferAddress);  
Magic Number,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetTimeOffsetSections,The following statement contains a magic number: while (!timeOffsetSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	timeOffsetReader.Lock ("ProcessOpenTVSections");  	if (timeOffsetReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in timeOffsetReader.Sections)  			sections.Add (section);  		timeOffsetReader.Sections.Clear ();  	}  	timeOffsetReader.Release ("ProcessOpenTVSections");  	if (sections.Count != 0)  		processTimeOffsetSections (sections);  	timeOffsetSectionsDone = (TimeOffsetEntry.TimeOffsets.Count != 0);  }  
Magic Number,DVBServices,ControllerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ControllerBase.cs,GetTimeOffsetSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,FindCategoryDescription,The following statement contains a magic number: foreach (CustomProgramCategory category in categories) {  	if (category.CategoryTag.StartsWith ("<")) {  		if (category.CategoryTag.EndsWith (">")) {  			matchMethod = matchMode.anywhere;  			matchString = category.CategoryTag.Substring (1' category.CategoryTag.Length - 2).ToLowerInvariant ();  		}  		else {  			matchMethod = matchMode.start;  			matchString = category.CategoryTag.Substring (1).ToLowerInvariant ();  		}  	}  	else {  		if (category.CategoryTag.EndsWith (">")) {  			matchMethod = matchMode.end;  			matchString = category.CategoryTag.Substring (0' category.CategoryTag.Length - 1).ToLowerInvariant ();  		}  		else {  			matchMethod = matchMode.all;  			matchString = category.CategoryTag.ToLowerInvariant ();  		}  	}  	switch (matchMethod) {  	case matchMode.all:  		if (lowerCaseInputString == matchString)  			return (category.Description);  		break;  	case matchMode.anywhere:  		if (lowerCaseInputString.Contains (matchString))  			return (category.Description);  		break;  	case matchMode.start:  		if (lowerCaseInputString.StartsWith (matchString))  			return (category.Description);  		break;  	case matchMode.end:  		if (lowerCaseInputString.EndsWith (matchString))  			return (category.Description);  		break;  	default:  		break;  	}  }  
Magic Number,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,FindCategoryDescription,The following statement contains a magic number: if (category.CategoryTag.StartsWith ("<")) {  	if (category.CategoryTag.EndsWith (">")) {  		matchMethod = matchMode.anywhere;  		matchString = category.CategoryTag.Substring (1' category.CategoryTag.Length - 2).ToLowerInvariant ();  	}  	else {  		matchMethod = matchMode.start;  		matchString = category.CategoryTag.Substring (1).ToLowerInvariant ();  	}  }  else {  	if (category.CategoryTag.EndsWith (">")) {  		matchMethod = matchMode.end;  		matchString = category.CategoryTag.Substring (0' category.CategoryTag.Length - 1).ToLowerInvariant ();  	}  	else {  		matchMethod = matchMode.all;  		matchString = category.CategoryTag.ToLowerInvariant ();  	}  }  
Magic Number,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,FindCategoryDescription,The following statement contains a magic number: if (category.CategoryTag.EndsWith (">")) {  	matchMethod = matchMode.anywhere;  	matchString = category.CategoryTag.Substring (1' category.CategoryTag.Length - 2).ToLowerInvariant ();  }  else {  	matchMethod = matchMode.start;  	matchString = category.CategoryTag.Substring (1).ToLowerInvariant ();  }  
Magic Number,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,FindCategoryDescription,The following statement contains a magic number: matchString = category.CategoryTag.Substring (1' category.CategoryTag.Length - 2).ToLowerInvariant ();  
Magic Number,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else  			AddCategory (parts [0].Trim ()' line.Substring (parts [0].Length + 1));  	}  }  
Magic Number,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,Load,The following statement contains a magic number: if (line != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else  		AddCategory (parts [0].Trim ()' line.Substring (parts [0].Length + 1));  }  
Magic Number,DVBServices,CustomProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\CustomProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else  	AddCategory (parts [0].Trim ()' line.Substring (parts [0].Length + 1));  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: for (current = 0; current < byteArray.Length; current++) {  	uint staticWindow = 0;  	uint dynamicWindow = window;  	switch (byteArray [current]) {  	case sq0:  	case sq1:  	case sq2:  	case sq3:  	case sq4:  	case sq5:  	case sq6:  	case sq7:  		if (current < (byteArray.Length - 1)) {  			dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  			current++;  			if (byteArray [current] < 128) {  				uint temp = byteArray [current] + staticOffset [staticWindow];  				builder.Append ((char)temp);  				_character++;  			}  			else {  				uint temp = (uint)(byteArray [current]);  				temp -= 0x80;  				temp += dynamicOffset [dynamicWindow];  				if (temp < (1 << 16)) {  					builder.Append ((char)temp);  					_character++;  				}  				else {  					temp -= 0x10000;  					builder.Append ((char)(0xD800 + (temp >> 10)));  					_character++;  					builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  					_character++;  				}  			}  		}  		break;  	case sdx:  		current += 2;  		if (current < byteArray.Length)  			defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  		break;  	case sd0:  	case sd1:  	case sd2:  	case sd3:  	case sd4:  	case sd5:  	case sd6:  	case sd7:  		current++;  		if (current < byteArray.Length)  			defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  		break;  	case sc0:  	case sc1:  	case sc2:  	case sc3:  	case sc4:  	case sc5:  	case sc6:  	case sc7:  		window = (uint)(byteArray [current] - sc0);  		break;  	case scu:  		current = expandUnicode (byteArray' current + 1' builder);  		break;  	case squ:  		current += 2;  		if (current < byteArray.Length) {  			char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  			builder.Append ((char)temp);  			_character++;  		}  		break;  	case srs:  		throw (new ArgumentException ("SCSU Decompressor failed"));  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: for (current = 0; current < byteArray.Length; current++) {  	uint staticWindow = 0;  	uint dynamicWindow = window;  	switch (byteArray [current]) {  	case sq0:  	case sq1:  	case sq2:  	case sq3:  	case sq4:  	case sq5:  	case sq6:  	case sq7:  		if (current < (byteArray.Length - 1)) {  			dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  			current++;  			if (byteArray [current] < 128) {  				uint temp = byteArray [current] + staticOffset [staticWindow];  				builder.Append ((char)temp);  				_character++;  			}  			else {  				uint temp = (uint)(byteArray [current]);  				temp -= 0x80;  				temp += dynamicOffset [dynamicWindow];  				if (temp < (1 << 16)) {  					builder.Append ((char)temp);  					_character++;  				}  				else {  					temp -= 0x10000;  					builder.Append ((char)(0xD800 + (temp >> 10)));  					_character++;  					builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  					_character++;  				}  			}  		}  		break;  	case sdx:  		current += 2;  		if (current < byteArray.Length)  			defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  		break;  	case sd0:  	case sd1:  	case sd2:  	case sd3:  	case sd4:  	case sd5:  	case sd6:  	case sd7:  		current++;  		if (current < byteArray.Length)  			defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  		break;  	case sc0:  	case sc1:  	case sc2:  	case sc3:  	case sc4:  	case sc5:  	case sc6:  	case sc7:  		window = (uint)(byteArray [current] - sc0);  		break;  	case scu:  		current = expandUnicode (byteArray' current + 1' builder);  		break;  	case squ:  		current += 2;  		if (current < byteArray.Length) {  			char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  			builder.Append ((char)temp);  			_character++;  		}  		break;  	case srs:  		throw (new ArgumentException ("SCSU Decompressor failed"));  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: for (current = 0; current < byteArray.Length; current++) {  	uint staticWindow = 0;  	uint dynamicWindow = window;  	switch (byteArray [current]) {  	case sq0:  	case sq1:  	case sq2:  	case sq3:  	case sq4:  	case sq5:  	case sq6:  	case sq7:  		if (current < (byteArray.Length - 1)) {  			dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  			current++;  			if (byteArray [current] < 128) {  				uint temp = byteArray [current] + staticOffset [staticWindow];  				builder.Append ((char)temp);  				_character++;  			}  			else {  				uint temp = (uint)(byteArray [current]);  				temp -= 0x80;  				temp += dynamicOffset [dynamicWindow];  				if (temp < (1 << 16)) {  					builder.Append ((char)temp);  					_character++;  				}  				else {  					temp -= 0x10000;  					builder.Append ((char)(0xD800 + (temp >> 10)));  					_character++;  					builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  					_character++;  				}  			}  		}  		break;  	case sdx:  		current += 2;  		if (current < byteArray.Length)  			defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  		break;  	case sd0:  	case sd1:  	case sd2:  	case sd3:  	case sd4:  	case sd5:  	case sd6:  	case sd7:  		current++;  		if (current < byteArray.Length)  			defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  		break;  	case sc0:  	case sc1:  	case sc2:  	case sc3:  	case sc4:  	case sc5:  	case sc6:  	case sc7:  		window = (uint)(byteArray [current] - sc0);  		break;  	case scu:  		current = expandUnicode (byteArray' current + 1' builder);  		break;  	case squ:  		current += 2;  		if (current < byteArray.Length) {  			char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  			builder.Append ((char)temp);  			_character++;  		}  		break;  	case srs:  		throw (new ArgumentException ("SCSU Decompressor failed"));  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: for (current = 0; current < byteArray.Length; current++) {  	uint staticWindow = 0;  	uint dynamicWindow = window;  	switch (byteArray [current]) {  	case sq0:  	case sq1:  	case sq2:  	case sq3:  	case sq4:  	case sq5:  	case sq6:  	case sq7:  		if (current < (byteArray.Length - 1)) {  			dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  			current++;  			if (byteArray [current] < 128) {  				uint temp = byteArray [current] + staticOffset [staticWindow];  				builder.Append ((char)temp);  				_character++;  			}  			else {  				uint temp = (uint)(byteArray [current]);  				temp -= 0x80;  				temp += dynamicOffset [dynamicWindow];  				if (temp < (1 << 16)) {  					builder.Append ((char)temp);  					_character++;  				}  				else {  					temp -= 0x10000;  					builder.Append ((char)(0xD800 + (temp >> 10)));  					_character++;  					builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  					_character++;  				}  			}  		}  		break;  	case sdx:  		current += 2;  		if (current < byteArray.Length)  			defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  		break;  	case sd0:  	case sd1:  	case sd2:  	case sd3:  	case sd4:  	case sd5:  	case sd6:  	case sd7:  		current++;  		if (current < byteArray.Length)  			defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  		break;  	case sc0:  	case sc1:  	case sc2:  	case sc3:  	case sc4:  	case sc5:  	case sc6:  	case sc7:  		window = (uint)(byteArray [current] - sc0);  		break;  	case scu:  		current = expandUnicode (byteArray' current + 1' builder);  		break;  	case squ:  		current += 2;  		if (current < byteArray.Length) {  			char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  			builder.Append ((char)temp);  			_character++;  		}  		break;  	case srs:  		throw (new ArgumentException ("SCSU Decompressor failed"));  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: for (current = 0; current < byteArray.Length; current++) {  	uint staticWindow = 0;  	uint dynamicWindow = window;  	switch (byteArray [current]) {  	case sq0:  	case sq1:  	case sq2:  	case sq3:  	case sq4:  	case sq5:  	case sq6:  	case sq7:  		if (current < (byteArray.Length - 1)) {  			dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  			current++;  			if (byteArray [current] < 128) {  				uint temp = byteArray [current] + staticOffset [staticWindow];  				builder.Append ((char)temp);  				_character++;  			}  			else {  				uint temp = (uint)(byteArray [current]);  				temp -= 0x80;  				temp += dynamicOffset [dynamicWindow];  				if (temp < (1 << 16)) {  					builder.Append ((char)temp);  					_character++;  				}  				else {  					temp -= 0x10000;  					builder.Append ((char)(0xD800 + (temp >> 10)));  					_character++;  					builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  					_character++;  				}  			}  		}  		break;  	case sdx:  		current += 2;  		if (current < byteArray.Length)  			defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  		break;  	case sd0:  	case sd1:  	case sd2:  	case sd3:  	case sd4:  	case sd5:  	case sd6:  	case sd7:  		current++;  		if (current < byteArray.Length)  			defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  		break;  	case sc0:  	case sc1:  	case sc2:  	case sc3:  	case sc4:  	case sc5:  	case sc6:  	case sc7:  		window = (uint)(byteArray [current] - sc0);  		break;  	case scu:  		current = expandUnicode (byteArray' current + 1' builder);  		break;  	case squ:  		current += 2;  		if (current < byteArray.Length) {  			char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  			builder.Append ((char)temp);  			_character++;  		}  		break;  	case srs:  		throw (new ArgumentException ("SCSU Decompressor failed"));  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: switch (byteArray [current]) {  case sq0:  case sq1:  case sq2:  case sq3:  case sq4:  case sq5:  case sq6:  case sq7:  	if (current < (byteArray.Length - 1)) {  		dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  		current++;  		if (byteArray [current] < 128) {  			uint temp = byteArray [current] + staticOffset [staticWindow];  			builder.Append ((char)temp);  			_character++;  		}  		else {  			uint temp = (uint)(byteArray [current]);  			temp -= 0x80;  			temp += dynamicOffset [dynamicWindow];  			if (temp < (1 << 16)) {  				builder.Append ((char)temp);  				_character++;  			}  			else {  				temp -= 0x10000;  				builder.Append ((char)(0xD800 + (temp >> 10)));  				_character++;  				builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  				_character++;  			}  		}  	}  	break;  case sdx:  	current += 2;  	if (current < byteArray.Length)  		defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  	break;  case sd0:  case sd1:  case sd2:  case sd3:  case sd4:  case sd5:  case sd6:  case sd7:  	current++;  	if (current < byteArray.Length)  		defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  	break;  case sc0:  case sc1:  case sc2:  case sc3:  case sc4:  case sc5:  case sc6:  case sc7:  	window = (uint)(byteArray [current] - sc0);  	break;  case scu:  	current = expandUnicode (byteArray' current + 1' builder);  	break;  case squ:  	current += 2;  	if (current < byteArray.Length) {  		char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  		builder.Append ((char)temp);  		_character++;  	}  	break;  case srs:  	throw (new ArgumentException ("SCSU Decompressor failed"));  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: switch (byteArray [current]) {  case sq0:  case sq1:  case sq2:  case sq3:  case sq4:  case sq5:  case sq6:  case sq7:  	if (current < (byteArray.Length - 1)) {  		dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  		current++;  		if (byteArray [current] < 128) {  			uint temp = byteArray [current] + staticOffset [staticWindow];  			builder.Append ((char)temp);  			_character++;  		}  		else {  			uint temp = (uint)(byteArray [current]);  			temp -= 0x80;  			temp += dynamicOffset [dynamicWindow];  			if (temp < (1 << 16)) {  				builder.Append ((char)temp);  				_character++;  			}  			else {  				temp -= 0x10000;  				builder.Append ((char)(0xD800 + (temp >> 10)));  				_character++;  				builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  				_character++;  			}  		}  	}  	break;  case sdx:  	current += 2;  	if (current < byteArray.Length)  		defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  	break;  case sd0:  case sd1:  case sd2:  case sd3:  case sd4:  case sd5:  case sd6:  case sd7:  	current++;  	if (current < byteArray.Length)  		defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  	break;  case sc0:  case sc1:  case sc2:  case sc3:  case sc4:  case sc5:  case sc6:  case sc7:  	window = (uint)(byteArray [current] - sc0);  	break;  case scu:  	current = expandUnicode (byteArray' current + 1' builder);  	break;  case squ:  	current += 2;  	if (current < byteArray.Length) {  		char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  		builder.Append ((char)temp);  		_character++;  	}  	break;  case srs:  	throw (new ArgumentException ("SCSU Decompressor failed"));  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: switch (byteArray [current]) {  case sq0:  case sq1:  case sq2:  case sq3:  case sq4:  case sq5:  case sq6:  case sq7:  	if (current < (byteArray.Length - 1)) {  		dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  		current++;  		if (byteArray [current] < 128) {  			uint temp = byteArray [current] + staticOffset [staticWindow];  			builder.Append ((char)temp);  			_character++;  		}  		else {  			uint temp = (uint)(byteArray [current]);  			temp -= 0x80;  			temp += dynamicOffset [dynamicWindow];  			if (temp < (1 << 16)) {  				builder.Append ((char)temp);  				_character++;  			}  			else {  				temp -= 0x10000;  				builder.Append ((char)(0xD800 + (temp >> 10)));  				_character++;  				builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  				_character++;  			}  		}  	}  	break;  case sdx:  	current += 2;  	if (current < byteArray.Length)  		defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  	break;  case sd0:  case sd1:  case sd2:  case sd3:  case sd4:  case sd5:  case sd6:  case sd7:  	current++;  	if (current < byteArray.Length)  		defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  	break;  case sc0:  case sc1:  case sc2:  case sc3:  case sc4:  case sc5:  case sc6:  case sc7:  	window = (uint)(byteArray [current] - sc0);  	break;  case scu:  	current = expandUnicode (byteArray' current + 1' builder);  	break;  case squ:  	current += 2;  	if (current < byteArray.Length) {  		char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  		builder.Append ((char)temp);  		_character++;  	}  	break;  case srs:  	throw (new ArgumentException ("SCSU Decompressor failed"));  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: switch (byteArray [current]) {  case sq0:  case sq1:  case sq2:  case sq3:  case sq4:  case sq5:  case sq6:  case sq7:  	if (current < (byteArray.Length - 1)) {  		dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  		current++;  		if (byteArray [current] < 128) {  			uint temp = byteArray [current] + staticOffset [staticWindow];  			builder.Append ((char)temp);  			_character++;  		}  		else {  			uint temp = (uint)(byteArray [current]);  			temp -= 0x80;  			temp += dynamicOffset [dynamicWindow];  			if (temp < (1 << 16)) {  				builder.Append ((char)temp);  				_character++;  			}  			else {  				temp -= 0x10000;  				builder.Append ((char)(0xD800 + (temp >> 10)));  				_character++;  				builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  				_character++;  			}  		}  	}  	break;  case sdx:  	current += 2;  	if (current < byteArray.Length)  		defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  	break;  case sd0:  case sd1:  case sd2:  case sd3:  case sd4:  case sd5:  case sd6:  case sd7:  	current++;  	if (current < byteArray.Length)  		defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  	break;  case sc0:  case sc1:  case sc2:  case sc3:  case sc4:  case sc5:  case sc6:  case sc7:  	window = (uint)(byteArray [current] - sc0);  	break;  case scu:  	current = expandUnicode (byteArray' current + 1' builder);  	break;  case squ:  	current += 2;  	if (current < byteArray.Length) {  		char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  		builder.Append ((char)temp);  		_character++;  	}  	break;  case srs:  	throw (new ArgumentException ("SCSU Decompressor failed"));  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: switch (byteArray [current]) {  case sq0:  case sq1:  case sq2:  case sq3:  case sq4:  case sq5:  case sq6:  case sq7:  	if (current < (byteArray.Length - 1)) {  		dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  		current++;  		if (byteArray [current] < 128) {  			uint temp = byteArray [current] + staticOffset [staticWindow];  			builder.Append ((char)temp);  			_character++;  		}  		else {  			uint temp = (uint)(byteArray [current]);  			temp -= 0x80;  			temp += dynamicOffset [dynamicWindow];  			if (temp < (1 << 16)) {  				builder.Append ((char)temp);  				_character++;  			}  			else {  				temp -= 0x10000;  				builder.Append ((char)(0xD800 + (temp >> 10)));  				_character++;  				builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  				_character++;  			}  		}  	}  	break;  case sdx:  	current += 2;  	if (current < byteArray.Length)  		defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  	break;  case sd0:  case sd1:  case sd2:  case sd3:  case sd4:  case sd5:  case sd6:  case sd7:  	current++;  	if (current < byteArray.Length)  		defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  	break;  case sc0:  case sc1:  case sc2:  case sc3:  case sc4:  case sc5:  case sc6:  case sc7:  	window = (uint)(byteArray [current] - sc0);  	break;  case scu:  	current = expandUnicode (byteArray' current + 1' builder);  	break;  case squ:  	current += 2;  	if (current < byteArray.Length) {  		char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  		builder.Append ((char)temp);  		_character++;  	}  	break;  case srs:  	throw (new ArgumentException ("SCSU Decompressor failed"));  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (current < (byteArray.Length - 1)) {  	dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  	current++;  	if (byteArray [current] < 128) {  		uint temp = byteArray [current] + staticOffset [staticWindow];  		builder.Append ((char)temp);  		_character++;  	}  	else {  		uint temp = (uint)(byteArray [current]);  		temp -= 0x80;  		temp += dynamicOffset [dynamicWindow];  		if (temp < (1 << 16)) {  			builder.Append ((char)temp);  			_character++;  		}  		else {  			temp -= 0x10000;  			builder.Append ((char)(0xD800 + (temp >> 10)));  			_character++;  			builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  			_character++;  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (current < (byteArray.Length - 1)) {  	dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  	current++;  	if (byteArray [current] < 128) {  		uint temp = byteArray [current] + staticOffset [staticWindow];  		builder.Append ((char)temp);  		_character++;  	}  	else {  		uint temp = (uint)(byteArray [current]);  		temp -= 0x80;  		temp += dynamicOffset [dynamicWindow];  		if (temp < (1 << 16)) {  			builder.Append ((char)temp);  			_character++;  		}  		else {  			temp -= 0x10000;  			builder.Append ((char)(0xD800 + (temp >> 10)));  			_character++;  			builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  			_character++;  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (current < (byteArray.Length - 1)) {  	dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  	current++;  	if (byteArray [current] < 128) {  		uint temp = byteArray [current] + staticOffset [staticWindow];  		builder.Append ((char)temp);  		_character++;  	}  	else {  		uint temp = (uint)(byteArray [current]);  		temp -= 0x80;  		temp += dynamicOffset [dynamicWindow];  		if (temp < (1 << 16)) {  			builder.Append ((char)temp);  			_character++;  		}  		else {  			temp -= 0x10000;  			builder.Append ((char)(0xD800 + (temp >> 10)));  			_character++;  			builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  			_character++;  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (byteArray [current] < 128) {  	uint temp = byteArray [current] + staticOffset [staticWindow];  	builder.Append ((char)temp);  	_character++;  }  else {  	uint temp = (uint)(byteArray [current]);  	temp -= 0x80;  	temp += dynamicOffset [dynamicWindow];  	if (temp < (1 << 16)) {  		builder.Append ((char)temp);  		_character++;  	}  	else {  		temp -= 0x10000;  		builder.Append ((char)(0xD800 + (temp >> 10)));  		_character++;  		builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  		_character++;  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (byteArray [current] < 128) {  	uint temp = byteArray [current] + staticOffset [staticWindow];  	builder.Append ((char)temp);  	_character++;  }  else {  	uint temp = (uint)(byteArray [current]);  	temp -= 0x80;  	temp += dynamicOffset [dynamicWindow];  	if (temp < (1 << 16)) {  		builder.Append ((char)temp);  		_character++;  	}  	else {  		temp -= 0x10000;  		builder.Append ((char)(0xD800 + (temp >> 10)));  		_character++;  		builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  		_character++;  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (byteArray [current] < 128) {  	uint temp = byteArray [current] + staticOffset [staticWindow];  	builder.Append ((char)temp);  	_character++;  }  else {  	uint temp = (uint)(byteArray [current]);  	temp -= 0x80;  	temp += dynamicOffset [dynamicWindow];  	if (temp < (1 << 16)) {  		builder.Append ((char)temp);  		_character++;  	}  	else {  		temp -= 0x10000;  		builder.Append ((char)(0xD800 + (temp >> 10)));  		_character++;  		builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  		_character++;  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (temp < (1 << 16)) {  	builder.Append ((char)temp);  	_character++;  }  else {  	temp -= 0x10000;  	builder.Append ((char)(0xD800 + (temp >> 10)));  	_character++;  	builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  	_character++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: if (temp < (1 << 16)) {  	builder.Append ((char)temp);  	_character++;  }  else {  	temp -= 0x10000;  	builder.Append ((char)(0xD800 + (temp >> 10)));  	_character++;  	builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  	_character++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: builder.Append ((char)(0xD800 + (temp >> 10)));  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: current += 2;  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following statement contains a magic number: current += 2;  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineExtendedWindow,The following statement contains a magic number: window = character >> 13;  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineExtendedWindow,The following statement contains a magic number: dynamicOffset [window] = ((character & 0x1fff) << 7) + (1 << 16);  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineExtendedWindow,The following statement contains a magic number: dynamicOffset [window] = ((character & 0x1fff) << 7) + (1 << 16);  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,charFromTwoBytes,The following statement contains a magic number: return (char)(temp + (char)((high) << 8));  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineWindow,The following statement contains a magic number: if (tempOffset == 0)  	throw (new InvalidOperationException ("SCSU Decompressor failed"));  else {  	if (tempOffset < gapThreshold)  		dynamicOffset [window] = tempOffset << 7;  	else {  		if (tempOffset < reservedStart)  			dynamicOffset [window] = (tempOffset << 7) + gapOffset;  		else {  			if (tempOffset < fixedThreshold)  				throw (new InvalidOperationException ("SCSU Decompressor failed"));  			else  				dynamicOffset [window] = fixedOffset [tempOffset - fixedThreshold];  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineWindow,The following statement contains a magic number: if (tempOffset == 0)  	throw (new InvalidOperationException ("SCSU Decompressor failed"));  else {  	if (tempOffset < gapThreshold)  		dynamicOffset [window] = tempOffset << 7;  	else {  		if (tempOffset < reservedStart)  			dynamicOffset [window] = (tempOffset << 7) + gapOffset;  		else {  			if (tempOffset < fixedThreshold)  				throw (new InvalidOperationException ("SCSU Decompressor failed"));  			else  				dynamicOffset [window] = fixedOffset [tempOffset - fixedThreshold];  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineWindow,The following statement contains a magic number: if (tempOffset < gapThreshold)  	dynamicOffset [window] = tempOffset << 7;  else {  	if (tempOffset < reservedStart)  		dynamicOffset [window] = (tempOffset << 7) + gapOffset;  	else {  		if (tempOffset < fixedThreshold)  			throw (new InvalidOperationException ("SCSU Decompressor failed"));  		else  			dynamicOffset [window] = fixedOffset [tempOffset - fixedThreshold];  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineWindow,The following statement contains a magic number: if (tempOffset < gapThreshold)  	dynamicOffset [window] = tempOffset << 7;  else {  	if (tempOffset < reservedStart)  		dynamicOffset [window] = (tempOffset << 7) + gapOffset;  	else {  		if (tempOffset < fixedThreshold)  			throw (new InvalidOperationException ("SCSU Decompressor failed"));  		else  			dynamicOffset [window] = fixedOffset [tempOffset - fixedThreshold];  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineWindow,The following statement contains a magic number: dynamicOffset [window] = tempOffset << 7;  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineWindow,The following statement contains a magic number: if (tempOffset < reservedStart)  	dynamicOffset [window] = (tempOffset << 7) + gapOffset;  else {  	if (tempOffset < fixedThreshold)  		throw (new InvalidOperationException ("SCSU Decompressor failed"));  	else  		dynamicOffset [window] = fixedOffset [tempOffset - fixedThreshold];  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,defineWindow,The following statement contains a magic number: dynamicOffset [window] = (tempOffset << 7) + gapOffset;  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: for (; current < (input.Length - 1); current += 2) {  	byte temp = input [current];  	if (temp >= uc0 && temp <= uc7) {  		window = (uint)(temp - uc0);  		return current;  	}  	else {  		if (temp >= ud0 && temp <= ud7) {  			defineWindow ((uint)(temp - ud0)' input [current + 1]);  			return current + 1;  		}  		else {  			if (temp == udx) {  				if (current >= (input.Length - 2))  					break;  				defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  				return current + 2;  			}  			else {  				if (temp == uqu) {  					if (current >= (input.Length - 2))  						break;  					current++;  				}  			}  		}  	}  	char character = charFromTwoBytes (input [current]' input [current + 1]);  	builder.Append (character);  	_character++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: for (; current < (input.Length - 1); current += 2) {  	byte temp = input [current];  	if (temp >= uc0 && temp <= uc7) {  		window = (uint)(temp - uc0);  		return current;  	}  	else {  		if (temp >= ud0 && temp <= ud7) {  			defineWindow ((uint)(temp - ud0)' input [current + 1]);  			return current + 1;  		}  		else {  			if (temp == udx) {  				if (current >= (input.Length - 2))  					break;  				defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  				return current + 2;  			}  			else {  				if (temp == uqu) {  					if (current >= (input.Length - 2))  						break;  					current++;  				}  			}  		}  	}  	char character = charFromTwoBytes (input [current]' input [current + 1]);  	builder.Append (character);  	_character++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: for (; current < (input.Length - 1); current += 2) {  	byte temp = input [current];  	if (temp >= uc0 && temp <= uc7) {  		window = (uint)(temp - uc0);  		return current;  	}  	else {  		if (temp >= ud0 && temp <= ud7) {  			defineWindow ((uint)(temp - ud0)' input [current + 1]);  			return current + 1;  		}  		else {  			if (temp == udx) {  				if (current >= (input.Length - 2))  					break;  				defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  				return current + 2;  			}  			else {  				if (temp == uqu) {  					if (current >= (input.Length - 2))  						break;  					current++;  				}  			}  		}  	}  	char character = charFromTwoBytes (input [current]' input [current + 1]);  	builder.Append (character);  	_character++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: for (; current < (input.Length - 1); current += 2) {  	byte temp = input [current];  	if (temp >= uc0 && temp <= uc7) {  		window = (uint)(temp - uc0);  		return current;  	}  	else {  		if (temp >= ud0 && temp <= ud7) {  			defineWindow ((uint)(temp - ud0)' input [current + 1]);  			return current + 1;  		}  		else {  			if (temp == udx) {  				if (current >= (input.Length - 2))  					break;  				defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  				return current + 2;  			}  			else {  				if (temp == uqu) {  					if (current >= (input.Length - 2))  						break;  					current++;  				}  			}  		}  	}  	char character = charFromTwoBytes (input [current]' input [current + 1]);  	builder.Append (character);  	_character++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: for (; current < (input.Length - 1); current += 2) {  	byte temp = input [current];  	if (temp >= uc0 && temp <= uc7) {  		window = (uint)(temp - uc0);  		return current;  	}  	else {  		if (temp >= ud0 && temp <= ud7) {  			defineWindow ((uint)(temp - ud0)' input [current + 1]);  			return current + 1;  		}  		else {  			if (temp == udx) {  				if (current >= (input.Length - 2))  					break;  				defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  				return current + 2;  			}  			else {  				if (temp == uqu) {  					if (current >= (input.Length - 2))  						break;  					current++;  				}  			}  		}  	}  	char character = charFromTwoBytes (input [current]' input [current + 1]);  	builder.Append (character);  	_character++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: current += 2
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= uc0 && temp <= uc7) {  	window = (uint)(temp - uc0);  	return current;  }  else {  	if (temp >= ud0 && temp <= ud7) {  		defineWindow ((uint)(temp - ud0)' input [current + 1]);  		return current + 1;  	}  	else {  		if (temp == udx) {  			if (current >= (input.Length - 2))  				break;  			defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  			return current + 2;  		}  		else {  			if (temp == uqu) {  				if (current >= (input.Length - 2))  					break;  				current++;  			}  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= uc0 && temp <= uc7) {  	window = (uint)(temp - uc0);  	return current;  }  else {  	if (temp >= ud0 && temp <= ud7) {  		defineWindow ((uint)(temp - ud0)' input [current + 1]);  		return current + 1;  	}  	else {  		if (temp == udx) {  			if (current >= (input.Length - 2))  				break;  			defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  			return current + 2;  		}  		else {  			if (temp == uqu) {  				if (current >= (input.Length - 2))  					break;  				current++;  			}  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= uc0 && temp <= uc7) {  	window = (uint)(temp - uc0);  	return current;  }  else {  	if (temp >= ud0 && temp <= ud7) {  		defineWindow ((uint)(temp - ud0)' input [current + 1]);  		return current + 1;  	}  	else {  		if (temp == udx) {  			if (current >= (input.Length - 2))  				break;  			defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  			return current + 2;  		}  		else {  			if (temp == uqu) {  				if (current >= (input.Length - 2))  					break;  				current++;  			}  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= uc0 && temp <= uc7) {  	window = (uint)(temp - uc0);  	return current;  }  else {  	if (temp >= ud0 && temp <= ud7) {  		defineWindow ((uint)(temp - ud0)' input [current + 1]);  		return current + 1;  	}  	else {  		if (temp == udx) {  			if (current >= (input.Length - 2))  				break;  			defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  			return current + 2;  		}  		else {  			if (temp == uqu) {  				if (current >= (input.Length - 2))  					break;  				current++;  			}  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= ud0 && temp <= ud7) {  	defineWindow ((uint)(temp - ud0)' input [current + 1]);  	return current + 1;  }  else {  	if (temp == udx) {  		if (current >= (input.Length - 2))  			break;  		defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  		return current + 2;  	}  	else {  		if (temp == uqu) {  			if (current >= (input.Length - 2))  				break;  			current++;  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= ud0 && temp <= ud7) {  	defineWindow ((uint)(temp - ud0)' input [current + 1]);  	return current + 1;  }  else {  	if (temp == udx) {  		if (current >= (input.Length - 2))  			break;  		defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  		return current + 2;  	}  	else {  		if (temp == uqu) {  			if (current >= (input.Length - 2))  				break;  			current++;  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= ud0 && temp <= ud7) {  	defineWindow ((uint)(temp - ud0)' input [current + 1]);  	return current + 1;  }  else {  	if (temp == udx) {  		if (current >= (input.Length - 2))  			break;  		defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  		return current + 2;  	}  	else {  		if (temp == uqu) {  			if (current >= (input.Length - 2))  				break;  			current++;  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp >= ud0 && temp <= ud7) {  	defineWindow ((uint)(temp - ud0)' input [current + 1]);  	return current + 1;  }  else {  	if (temp == udx) {  		if (current >= (input.Length - 2))  			break;  		defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  		return current + 2;  	}  	else {  		if (temp == uqu) {  			if (current >= (input.Length - 2))  				break;  			current++;  		}  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp == udx) {  	if (current >= (input.Length - 2))  		break;  	defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  	return current + 2;  }  else {  	if (temp == uqu) {  		if (current >= (input.Length - 2))  			break;  		current++;  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp == udx) {  	if (current >= (input.Length - 2))  		break;  	defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  	return current + 2;  }  else {  	if (temp == uqu) {  		if (current >= (input.Length - 2))  			break;  		current++;  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp == udx) {  	if (current >= (input.Length - 2))  		break;  	defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  	return current + 2;  }  else {  	if (temp == uqu) {  		if (current >= (input.Length - 2))  			break;  		current++;  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp == udx) {  	if (current >= (input.Length - 2))  		break;  	defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  	return current + 2;  }  else {  	if (temp == uqu) {  		if (current >= (input.Length - 2))  			break;  		current++;  	}  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (current >= (input.Length - 2))  	break;  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: defineExtendedWindow (charFromTwoBytes (input [current + 1]' input [current + 2]));  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: return current + 2;  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (temp == uqu) {  	if (current >= (input.Length - 2))  		break;  	current++;  }  
Magic Number,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,expandUnicode,The following statement contains a magic number: if (current >= (input.Length - 2))  	break;  
Magic Number,DVBServices,DishNetworkController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkController.cs,Process,The following statement contains a magic number: SingleTreeDictionaryEntry.Load (Path.Combine (RunParameters.ConfigDirectory' "Huffman Dictionary Dish Network 255.cfg")' 2);  
Magic Number,DVBServices,DishNetworkController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkController.cs,getDishNetworkData,The following statement contains a magic number: dishNetworkReader = new TSStreamReader (2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,DishNetworkController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkController.cs,getDishNetworkData,The following statement contains a magic number: while (!dishNetworkSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	dishNetworkReader.Lock ("LoadMessages");  	if (dishNetworkReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in dishNetworkReader.Sections)  			sections.Add (section);  		dishNetworkReader.Sections.Clear ();  	}  	dishNetworkReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processSections (sections);  	if (TVStation.EPGCount == lastCount) {  		repeats++;  		dishNetworkSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = TVStation.EPGCount;  }  
Magic Number,DVBServices,DishNetworkController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkController.cs,getDishNetworkData,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.DishNetworkInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network message is short"));  }  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.DishNetworkInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network message is short"));  }  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.DishNetworkInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network message is short"));  }  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.DishNetworkInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network message is short"));  }  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.DishNetworkInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network message is short"));  }  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.DishNetworkInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network message is short"));  }  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.DishNetworkInstance (byteData' lastIndex' table);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network message is short"));  }  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: lastIndex += 5;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: runningStatus = (int)(byteData [lastIndex] >> 5);  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,getStartTime,The following statement contains a magic number: year = year + 1900 + adjust;  
Magic Number,DVBServices,DishNetworkEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkEntry.cs,getStartTime,The following statement contains a magic number: month = month - 1 - (adjust * 12);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: startBytes = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex + 1] & 0xf8) == 0x80) {  	compressedLength = Length;  	if ((byteData [lastIndex] & 0x40) != 0)  		decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  	else  		decompressedLength = byteData [lastIndex] & 0x3f;  	startIndex = lastIndex + 2;  	loggedStartIndex = 2;  }  else {  	compressedLength = Length - 1;  	decompressedLength = byteData [lastIndex] & 0x7f;  	startIndex = lastIndex + 1;  	loggedStartIndex = 1;  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex + 1] & 0xf8) == 0x80) {  	compressedLength = Length;  	if ((byteData [lastIndex] & 0x40) != 0)  		decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  	else  		decompressedLength = byteData [lastIndex] & 0x3f;  	startIndex = lastIndex + 2;  	loggedStartIndex = 2;  }  else {  	compressedLength = Length - 1;  	decompressedLength = byteData [lastIndex] & 0x7f;  	startIndex = lastIndex + 1;  	loggedStartIndex = 1;  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex + 1] & 0xf8) == 0x80) {  	compressedLength = Length;  	if ((byteData [lastIndex] & 0x40) != 0)  		decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  	else  		decompressedLength = byteData [lastIndex] & 0x3f;  	startIndex = lastIndex + 2;  	loggedStartIndex = 2;  }  else {  	compressedLength = Length - 1;  	decompressedLength = byteData [lastIndex] & 0x7f;  	startIndex = lastIndex + 1;  	loggedStartIndex = 1;  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex] & 0x40) != 0)  	decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  else  	decompressedLength = byteData [lastIndex] & 0x3f;  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: startIndex = lastIndex + 2;  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: loggedStartIndex = 2;  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (Table <= 0x80)  	huffmanTable = 1;  else  	huffmanTable = 2;  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: huffmanTable = 2;  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (splitter != -1) {  	subTitle = originalDescription.Substring (0' splitter);  	eventDescription = originalDescription.Substring (splitter + 5' decompressedLength - subTitle.Length - 2);  }  else  	eventDescription = originalDescription.Substring (0' decompressedLength);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (splitter != -1) {  	subTitle = originalDescription.Substring (0' splitter);  	eventDescription = originalDescription.Substring (splitter + 5' decompressedLength - subTitle.Length - 2);  }  else  	eventDescription = originalDescription.Substring (0' decompressedLength);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = originalDescription.Substring (splitter + 5' decompressedLength - subTitle.Length - 2);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = originalDescription.Substring (splitter + 5' decompressedLength - subTitle.Length - 2);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (closedCaptions)  	eventDescription = eventDescription = eventDescription.Remove (closedCaptionsIndex' 5);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription = eventDescription.Remove (closedCaptionsIndex' 5);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (highDefinition)  	eventDescription = eventDescription.Remove (highDefinitionIndex' 5);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (highDefinitionIndex' 5);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (stereo)  	eventDescription = eventDescription.Remove (stereoIndex' 9);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (stereoIndex' 9);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (dateIndex != -1) {  	date = eventDescription.Substring (dateIndex + 2' 4);  	eventDescription = eventDescription.Remove (dateIndex' 7);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (dateIndex != -1) {  	date = eventDescription.Substring (dateIndex + 2' 4);  	eventDescription = eventDescription.Remove (dateIndex' 7);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (dateIndex != -1) {  	date = eventDescription.Substring (dateIndex + 2' 4);  	eventDescription = eventDescription.Remove (dateIndex' 7);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: date = eventDescription.Substring (dateIndex + 2' 4);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: date = eventDescription.Substring (dateIndex + 2' 4);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (dateIndex' 7);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Movie."))  	eventDescription = eventDescription.Remove (0' 6);  else {  	if (eventDescription.StartsWith ("Sports."))  		eventDescription = eventDescription.Remove (0' 7);  	else {  		if (eventDescription.StartsWith ("News/Business."))  			eventDescription = eventDescription.Remove (0' 14);  		else {  			if (eventDescription.StartsWith ("Family/Children."))  				eventDescription = eventDescription.Remove (0' 16);  			else {  				if (eventDescription.StartsWith ("Education."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Series/Special."))  						eventDescription = eventDescription.Remove (0' 15);  					else {  						if (eventDescription.StartsWith ("Music/Art."))  							eventDescription = eventDescription.Remove (0' 10);  						else {  							if (eventDescription.StartsWith ("Religious."))  								eventDescription = eventDescription.Remove (0' 10);  						}  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 6);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Sports."))  	eventDescription = eventDescription.Remove (0' 7);  else {  	if (eventDescription.StartsWith ("News/Business."))  		eventDescription = eventDescription.Remove (0' 14);  	else {  		if (eventDescription.StartsWith ("Family/Children."))  			eventDescription = eventDescription.Remove (0' 16);  		else {  			if (eventDescription.StartsWith ("Education."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Series/Special."))  					eventDescription = eventDescription.Remove (0' 15);  				else {  					if (eventDescription.StartsWith ("Music/Art."))  						eventDescription = eventDescription.Remove (0' 10);  					else {  						if (eventDescription.StartsWith ("Religious."))  							eventDescription = eventDescription.Remove (0' 10);  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Sports."))  	eventDescription = eventDescription.Remove (0' 7);  else {  	if (eventDescription.StartsWith ("News/Business."))  		eventDescription = eventDescription.Remove (0' 14);  	else {  		if (eventDescription.StartsWith ("Family/Children."))  			eventDescription = eventDescription.Remove (0' 16);  		else {  			if (eventDescription.StartsWith ("Education."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Series/Special."))  					eventDescription = eventDescription.Remove (0' 15);  				else {  					if (eventDescription.StartsWith ("Music/Art."))  						eventDescription = eventDescription.Remove (0' 10);  					else {  						if (eventDescription.StartsWith ("Religious."))  							eventDescription = eventDescription.Remove (0' 10);  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Sports."))  	eventDescription = eventDescription.Remove (0' 7);  else {  	if (eventDescription.StartsWith ("News/Business."))  		eventDescription = eventDescription.Remove (0' 14);  	else {  		if (eventDescription.StartsWith ("Family/Children."))  			eventDescription = eventDescription.Remove (0' 16);  		else {  			if (eventDescription.StartsWith ("Education."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Series/Special."))  					eventDescription = eventDescription.Remove (0' 15);  				else {  					if (eventDescription.StartsWith ("Music/Art."))  						eventDescription = eventDescription.Remove (0' 10);  					else {  						if (eventDescription.StartsWith ("Religious."))  							eventDescription = eventDescription.Remove (0' 10);  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Sports."))  	eventDescription = eventDescription.Remove (0' 7);  else {  	if (eventDescription.StartsWith ("News/Business."))  		eventDescription = eventDescription.Remove (0' 14);  	else {  		if (eventDescription.StartsWith ("Family/Children."))  			eventDescription = eventDescription.Remove (0' 16);  		else {  			if (eventDescription.StartsWith ("Education."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Series/Special."))  					eventDescription = eventDescription.Remove (0' 15);  				else {  					if (eventDescription.StartsWith ("Music/Art."))  						eventDescription = eventDescription.Remove (0' 10);  					else {  						if (eventDescription.StartsWith ("Religious."))  							eventDescription = eventDescription.Remove (0' 10);  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Sports."))  	eventDescription = eventDescription.Remove (0' 7);  else {  	if (eventDescription.StartsWith ("News/Business."))  		eventDescription = eventDescription.Remove (0' 14);  	else {  		if (eventDescription.StartsWith ("Family/Children."))  			eventDescription = eventDescription.Remove (0' 16);  		else {  			if (eventDescription.StartsWith ("Education."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Series/Special."))  					eventDescription = eventDescription.Remove (0' 15);  				else {  					if (eventDescription.StartsWith ("Music/Art."))  						eventDescription = eventDescription.Remove (0' 10);  					else {  						if (eventDescription.StartsWith ("Religious."))  							eventDescription = eventDescription.Remove (0' 10);  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Sports."))  	eventDescription = eventDescription.Remove (0' 7);  else {  	if (eventDescription.StartsWith ("News/Business."))  		eventDescription = eventDescription.Remove (0' 14);  	else {  		if (eventDescription.StartsWith ("Family/Children."))  			eventDescription = eventDescription.Remove (0' 16);  		else {  			if (eventDescription.StartsWith ("Education."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Series/Special."))  					eventDescription = eventDescription.Remove (0' 15);  				else {  					if (eventDescription.StartsWith ("Music/Art."))  						eventDescription = eventDescription.Remove (0' 10);  					else {  						if (eventDescription.StartsWith ("Religious."))  							eventDescription = eventDescription.Remove (0' 10);  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Sports."))  	eventDescription = eventDescription.Remove (0' 7);  else {  	if (eventDescription.StartsWith ("News/Business."))  		eventDescription = eventDescription.Remove (0' 14);  	else {  		if (eventDescription.StartsWith ("Family/Children."))  			eventDescription = eventDescription.Remove (0' 16);  		else {  			if (eventDescription.StartsWith ("Education."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Series/Special."))  					eventDescription = eventDescription.Remove (0' 15);  				else {  					if (eventDescription.StartsWith ("Music/Art."))  						eventDescription = eventDescription.Remove (0' 10);  					else {  						if (eventDescription.StartsWith ("Religious."))  							eventDescription = eventDescription.Remove (0' 10);  					}  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 7);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("News/Business."))  	eventDescription = eventDescription.Remove (0' 14);  else {  	if (eventDescription.StartsWith ("Family/Children."))  		eventDescription = eventDescription.Remove (0' 16);  	else {  		if (eventDescription.StartsWith ("Education."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Series/Special."))  				eventDescription = eventDescription.Remove (0' 15);  			else {  				if (eventDescription.StartsWith ("Music/Art."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Religious."))  						eventDescription = eventDescription.Remove (0' 10);  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("News/Business."))  	eventDescription = eventDescription.Remove (0' 14);  else {  	if (eventDescription.StartsWith ("Family/Children."))  		eventDescription = eventDescription.Remove (0' 16);  	else {  		if (eventDescription.StartsWith ("Education."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Series/Special."))  				eventDescription = eventDescription.Remove (0' 15);  			else {  				if (eventDescription.StartsWith ("Music/Art."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Religious."))  						eventDescription = eventDescription.Remove (0' 10);  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("News/Business."))  	eventDescription = eventDescription.Remove (0' 14);  else {  	if (eventDescription.StartsWith ("Family/Children."))  		eventDescription = eventDescription.Remove (0' 16);  	else {  		if (eventDescription.StartsWith ("Education."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Series/Special."))  				eventDescription = eventDescription.Remove (0' 15);  			else {  				if (eventDescription.StartsWith ("Music/Art."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Religious."))  						eventDescription = eventDescription.Remove (0' 10);  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("News/Business."))  	eventDescription = eventDescription.Remove (0' 14);  else {  	if (eventDescription.StartsWith ("Family/Children."))  		eventDescription = eventDescription.Remove (0' 16);  	else {  		if (eventDescription.StartsWith ("Education."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Series/Special."))  				eventDescription = eventDescription.Remove (0' 15);  			else {  				if (eventDescription.StartsWith ("Music/Art."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Religious."))  						eventDescription = eventDescription.Remove (0' 10);  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("News/Business."))  	eventDescription = eventDescription.Remove (0' 14);  else {  	if (eventDescription.StartsWith ("Family/Children."))  		eventDescription = eventDescription.Remove (0' 16);  	else {  		if (eventDescription.StartsWith ("Education."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Series/Special."))  				eventDescription = eventDescription.Remove (0' 15);  			else {  				if (eventDescription.StartsWith ("Music/Art."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Religious."))  						eventDescription = eventDescription.Remove (0' 10);  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("News/Business."))  	eventDescription = eventDescription.Remove (0' 14);  else {  	if (eventDescription.StartsWith ("Family/Children."))  		eventDescription = eventDescription.Remove (0' 16);  	else {  		if (eventDescription.StartsWith ("Education."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Series/Special."))  				eventDescription = eventDescription.Remove (0' 15);  			else {  				if (eventDescription.StartsWith ("Music/Art."))  					eventDescription = eventDescription.Remove (0' 10);  				else {  					if (eventDescription.StartsWith ("Religious."))  						eventDescription = eventDescription.Remove (0' 10);  				}  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 14);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Family/Children."))  	eventDescription = eventDescription.Remove (0' 16);  else {  	if (eventDescription.StartsWith ("Education."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Series/Special."))  			eventDescription = eventDescription.Remove (0' 15);  		else {  			if (eventDescription.StartsWith ("Music/Art."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Religious."))  					eventDescription = eventDescription.Remove (0' 10);  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Family/Children."))  	eventDescription = eventDescription.Remove (0' 16);  else {  	if (eventDescription.StartsWith ("Education."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Series/Special."))  			eventDescription = eventDescription.Remove (0' 15);  		else {  			if (eventDescription.StartsWith ("Music/Art."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Religious."))  					eventDescription = eventDescription.Remove (0' 10);  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Family/Children."))  	eventDescription = eventDescription.Remove (0' 16);  else {  	if (eventDescription.StartsWith ("Education."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Series/Special."))  			eventDescription = eventDescription.Remove (0' 15);  		else {  			if (eventDescription.StartsWith ("Music/Art."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Religious."))  					eventDescription = eventDescription.Remove (0' 10);  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Family/Children."))  	eventDescription = eventDescription.Remove (0' 16);  else {  	if (eventDescription.StartsWith ("Education."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Series/Special."))  			eventDescription = eventDescription.Remove (0' 15);  		else {  			if (eventDescription.StartsWith ("Music/Art."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Religious."))  					eventDescription = eventDescription.Remove (0' 10);  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Family/Children."))  	eventDescription = eventDescription.Remove (0' 16);  else {  	if (eventDescription.StartsWith ("Education."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Series/Special."))  			eventDescription = eventDescription.Remove (0' 15);  		else {  			if (eventDescription.StartsWith ("Music/Art."))  				eventDescription = eventDescription.Remove (0' 10);  			else {  				if (eventDescription.StartsWith ("Religious."))  					eventDescription = eventDescription.Remove (0' 10);  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 16);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Education."))  	eventDescription = eventDescription.Remove (0' 10);  else {  	if (eventDescription.StartsWith ("Series/Special."))  		eventDescription = eventDescription.Remove (0' 15);  	else {  		if (eventDescription.StartsWith ("Music/Art."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Religious."))  				eventDescription = eventDescription.Remove (0' 10);  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Education."))  	eventDescription = eventDescription.Remove (0' 10);  else {  	if (eventDescription.StartsWith ("Series/Special."))  		eventDescription = eventDescription.Remove (0' 15);  	else {  		if (eventDescription.StartsWith ("Music/Art."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Religious."))  				eventDescription = eventDescription.Remove (0' 10);  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Education."))  	eventDescription = eventDescription.Remove (0' 10);  else {  	if (eventDescription.StartsWith ("Series/Special."))  		eventDescription = eventDescription.Remove (0' 15);  	else {  		if (eventDescription.StartsWith ("Music/Art."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Religious."))  				eventDescription = eventDescription.Remove (0' 10);  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Education."))  	eventDescription = eventDescription.Remove (0' 10);  else {  	if (eventDescription.StartsWith ("Series/Special."))  		eventDescription = eventDescription.Remove (0' 15);  	else {  		if (eventDescription.StartsWith ("Music/Art."))  			eventDescription = eventDescription.Remove (0' 10);  		else {  			if (eventDescription.StartsWith ("Religious."))  				eventDescription = eventDescription.Remove (0' 10);  		}  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 10);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Series/Special."))  	eventDescription = eventDescription.Remove (0' 15);  else {  	if (eventDescription.StartsWith ("Music/Art."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Religious."))  			eventDescription = eventDescription.Remove (0' 10);  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Series/Special."))  	eventDescription = eventDescription.Remove (0' 15);  else {  	if (eventDescription.StartsWith ("Music/Art."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Religious."))  			eventDescription = eventDescription.Remove (0' 10);  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Series/Special."))  	eventDescription = eventDescription.Remove (0' 15);  else {  	if (eventDescription.StartsWith ("Music/Art."))  		eventDescription = eventDescription.Remove (0' 10);  	else {  		if (eventDescription.StartsWith ("Religious."))  			eventDescription = eventDescription.Remove (0' 10);  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 15);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Music/Art."))  	eventDescription = eventDescription.Remove (0' 10);  else {  	if (eventDescription.StartsWith ("Religious."))  		eventDescription = eventDescription.Remove (0' 10);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Music/Art."))  	eventDescription = eventDescription.Remove (0' 10);  else {  	if (eventDescription.StartsWith ("Religious."))  		eventDescription = eventDescription.Remove (0' 10);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 10);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (eventDescription.StartsWith ("Religious."))  	eventDescription = eventDescription.Remove (0' 10);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (0' 10);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (newIndex != -1)  	eventDescription = eventDescription.Remove (newIndex' 5);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: eventDescription = eventDescription.Remove (newIndex' 5);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (castParts.Length > 2) {  	if (!castParts [0].Trim ().StartsWith ("Scheduled: ")) {  		cast = getCast (castParts [0]);  		if (cast != null)  			eventDescription = eventDescription.Remove (0' castParts [0].Length + 1).Trim ();  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: foreach (string castMember in castParts) {  	string name = castMember.Trim ();  	if (name.StartsWith ("Voice of: "))  		cast.Add (name.Substring (10));  	else {  		if (name.Length > 2 && name.Length < 21) {  			if (name [0] >= 'A' && name [0] <= 'Z')  				cast.Add (name);  			else  				return (null);  		}  		else  			return (null);  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: foreach (string castMember in castParts) {  	string name = castMember.Trim ();  	if (name.StartsWith ("Voice of: "))  		cast.Add (name.Substring (10));  	else {  		if (name.Length > 2 && name.Length < 21) {  			if (name [0] >= 'A' && name [0] <= 'Z')  				cast.Add (name);  			else  				return (null);  		}  		else  			return (null);  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: foreach (string castMember in castParts) {  	string name = castMember.Trim ();  	if (name.StartsWith ("Voice of: "))  		cast.Add (name.Substring (10));  	else {  		if (name.Length > 2 && name.Length < 21) {  			if (name [0] >= 'A' && name [0] <= 'Z')  				cast.Add (name);  			else  				return (null);  		}  		else  			return (null);  	}  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.StartsWith ("Voice of: "))  	cast.Add (name.Substring (10));  else {  	if (name.Length > 2 && name.Length < 21) {  		if (name [0] >= 'A' && name [0] <= 'Z')  			cast.Add (name);  		else  			return (null);  	}  	else  		return (null);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.StartsWith ("Voice of: "))  	cast.Add (name.Substring (10));  else {  	if (name.Length > 2 && name.Length < 21) {  		if (name [0] >= 'A' && name [0] <= 'Z')  			cast.Add (name);  		else  			return (null);  	}  	else  		return (null);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.StartsWith ("Voice of: "))  	cast.Add (name.Substring (10));  else {  	if (name.Length > 2 && name.Length < 21) {  		if (name [0] >= 'A' && name [0] <= 'Z')  			cast.Add (name);  		else  			return (null);  	}  	else  		return (null);  }  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: cast.Add (name.Substring (10));  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.Length > 2 && name.Length < 21) {  	if (name [0] >= 'A' && name [0] <= 'Z')  		cast.Add (name);  	else  		return (null);  }  else  	return (null);  
Magic Number,DVBServices,DishNetworkExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkExtendedEventDescriptor.cs,getCast,The following statement contains a magic number: if (name.Length > 2 && name.Length < 21) {  	if (name [0] >= 'A' && name [0] <= 'Z')  		cast.Add (name);  	else  		return (null);  }  else  	return (null);  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line.Trim () != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				string[] numbers = parts [0].Split (new char[] {  					'''  				});  				if (numbers.Length != 2)  					Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  				else {  					int categoryID = Int32.Parse (numbers [0].Trim ());  					int subCategoryID = Int32.Parse (numbers [1].Trim ());  					AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  				}  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line.Trim () != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				string[] numbers = parts [0].Split (new char[] {  					'''  				});  				if (numbers.Length != 2)  					Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  				else {  					int categoryID = Int32.Parse (numbers [0].Trim ());  					int subCategoryID = Int32.Parse (numbers [1].Trim ());  					AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  				}  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: if (line.Trim () != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			string[] numbers = parts [0].Split (new char[] {  				'''  			});  			if (numbers.Length != 2)  				Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  			else {  				int categoryID = Int32.Parse (numbers [0].Trim ());  				int subCategoryID = Int32.Parse (numbers [1].Trim ());  				AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  			}  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: if (line.Trim () != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			string[] numbers = parts [0].Split (new char[] {  				'''  			});  			if (numbers.Length != 2)  				Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  			else {  				int categoryID = Int32.Parse (numbers [0].Trim ());  				int subCategoryID = Int32.Parse (numbers [1].Trim ());  				AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  			}  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		string[] numbers = parts [0].Split (new char[] {  			'''  		});  		if (numbers.Length != 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			int categoryID = Int32.Parse (numbers [0].Trim ());  			int subCategoryID = Int32.Parse (numbers [1].Trim ());  			AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  		}  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		string[] numbers = parts [0].Split (new char[] {  			'''  		});  		if (numbers.Length != 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			int categoryID = Int32.Parse (numbers [0].Trim ());  			int subCategoryID = Int32.Parse (numbers [1].Trim ());  			AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  		}  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: try {  	string[] numbers = parts [0].Split (new char[] {  		'''  	});  	if (numbers.Length != 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		int categoryID = Int32.Parse (numbers [0].Trim ());  		int subCategoryID = Int32.Parse (numbers [1].Trim ());  		AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  	}  }  catch (FormatException) {  	Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  }  catch (ArithmeticException) {  	Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  }  
Magic Number,DVBServices,DishNetworkProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkProgramCategory.cs,Load,The following statement contains a magic number: if (numbers.Length != 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	int categoryID = Int32.Parse (numbers [0].Trim ());  	int subCategoryID = Int32.Parse (numbers [1].Trim ());  	AddCategory (categoryID' subCategoryID' line.Substring (parts [0].Length + 1));  }  
Magic Number,DVBServices,DishNetworkSupplementaryDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSupplementaryDescriptor.cs,Process,The following statement contains a magic number: startBytes = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,DishNetworkSupplementaryDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSupplementaryDescriptor.cs,Process,The following statement contains a magic number: compressedLength = Length - 2;  
Magic Number,DVBServices,DishNetworkSupplementaryDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSupplementaryDescriptor.cs,Process,The following statement contains a magic number: startIndex = lastIndex + 2;  
Magic Number,DVBServices,DishNetworkSupplementaryDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSupplementaryDescriptor.cs,Process,The following statement contains a magic number: loggedStartIndex = 2;  
Magic Number,DVBServices,DishNetworkSupplementaryDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSupplementaryDescriptor.cs,Process,The following statement contains a magic number: if (Table <= 0x80)  	huffmanTable = 1;  else  	huffmanTable = 2;  
Magic Number,DVBServices,DishNetworkSupplementaryDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSupplementaryDescriptor.cs,Process,The following statement contains a magic number: huffmanTable = 2;  
Magic Number,DVBServices,DishNetworkRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkRatingDescriptor.cs,Process,The following statement contains a magic number: if (Length < 2)  	return;  
Magic Number,DVBServices,DishNetworkRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkRatingDescriptor.cs,Process,The following statement contains a magic number: starRating = byteData [lastIndex] >> 5;  
Magic Number,DVBServices,DishNetworkRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkRatingDescriptor.cs,Process,The following statement contains a magic number: parentalRating = ((byteData [lastIndex] >> 2) & 0x07);  
Magic Number,DVBServices,DishNetworkRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkRatingDescriptor.cs,Process,The following statement contains a magic number: advisoryRating = ((byteData [lastIndex] & 0x03) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	segmentLastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastTableID = (int)byteData [lastIndex];  	lastIndex++;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network section is short"));  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	segmentLastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastTableID = (int)byteData [lastIndex];  	lastIndex++;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Dish Network section is short"));  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DishNetworkEntry dishNetworkEntry = new DishNetworkEntry ();  	dishNetworkEntry.Process (byteData' lastIndex' mpeg2Header.TableID);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.DishNetwork;  	if (dishNetworkEntry.HighDefinition)  		epgEntry.VideoQuality = "HDTV";  	if (dishNetworkEntry.ClosedCaptions)  		epgEntry.SubTitles = "teletext";  	if (dishNetworkEntry.Stereo)  		epgEntry.AudioQuality = "stereo";  	epgEntry.Duration = Utils.RoundTime (dishNetworkEntry.Duration);  	epgEntry.EventID = dishNetworkEntry.EventID;  	epgEntry.EventName = dishNetworkEntry.EventName;  	getParentalRating (epgEntry' dishNetworkEntry);  	epgEntry.RunningStatus = dishNetworkEntry.RunningStatus;  	epgEntry.Scrambled = dishNetworkEntry.Scrambled;  	epgEntry.ShortDescription = dishNetworkEntry.ShortDescription;  	if (dishNetworkEntry.SubTitle != dishNetworkEntry.EventName)  		epgEntry.EventSubTitle = dishNetworkEntry.SubTitle;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (dishNetworkEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' dishNetworkEntry.ContentType' dishNetworkEntry.ContentSubType);  	epgEntry.StarRating = getStarRating (dishNetworkEntry);  	epgEntry.Date = dishNetworkEntry.Date;  	epgEntry.Cast = dishNetworkEntry.Cast;  	getSeriesEpisode (epgEntry' dishNetworkEntry.Series' dishNetworkEntry.Episode);  	epgEntry.HasGraphicLanguage = dishNetworkEntry.HasStrongLanguage;  	epgEntry.HasStrongSexualContent = dishNetworkEntry.HasSexualContent;  	epgEntry.HasGraphicViolence = dishNetworkEntry.HasViolence;  	epgEntry.HasNudity = dishNetworkEntry.HasNudity;  	epgEntry.PreviousPlayDate = dishNetworkEntry.OriginalAirDate;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (dishNetworkEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null) {  		if (!RunParameters.Instance.DebugIDs.Contains ("LOGORIGINAL"))  			logDescription (dishNetworkEntry.ShortDescription' epgEntry' descriptionLogger);  		else  			logDescription (dishNetworkEntry.OriginalDescription' epgEntry' descriptionLogger);  	}  	lastIndex = dishNetworkEntry.Index;  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,DishNetworkSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSection.cs,getStarRating,The following statement contains a magic number: switch (entry.StarRating) {  case 0:  	return (null);  case 1:  	return ("*");  case 2:  	return ("*+");  case 3:  	return ("**");  case 4:  	return ("**+");  case 5:  	return ("***");  case 6:  	return ("***+");  case 7:  	return ("****");  default:  	return (null);  }  
Magic Number,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,Process,The following statement contains a magic number: series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06;  
Magic Number,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,Process,The following statement contains a magic number: series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06;  
Magic Number,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,Process,The following statement contains a magic number: series = byteData [lastIndex] << 12 | byteData [lastIndex + 1] << 0x0a | byteData [lastIndex + 2] << 0x02 | (byteData [lastIndex + 3] & 0xc0) >> 0x06;  
Magic Number,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,Process,The following statement contains a magic number: episode = (byteData [lastIndex] & 0x3f << 08) | byteData [lastIndex + 1];  
Magic Number,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DishNetworkSeriesDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkSeriesDescriptor.cs,getOriginalAirDate,The following statement contains a magic number: try {  	DateTime utcStartTime = new DateTime (1970' 1' 1).AddSeconds (((double)seconds));  	return (utcStartTime.ToLocalTime ());  }  catch (ArgumentOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The start time element(s) are out of range"));  }  catch (ArgumentException) {  	throw (new ArgumentOutOfRangeException ("The start time element(s) result in a start time that is out of range"));  }  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: startBytes = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex + 1] & 0xf8) == 0x80) {  	compressedLength = Length;  	if ((byteData [lastIndex] & 0x40) != 0)  		decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  	else  		decompressedLength = byteData [lastIndex] & 0x3f;  	startIndex = lastIndex + 2;  	loggedStartIndex = 2;  }  else {  	compressedLength = Length - 1;  	decompressedLength = byteData [lastIndex] & 0x7f;  	startIndex = lastIndex + 1;  	loggedStartIndex = 1;  }  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex + 1] & 0xf8) == 0x80) {  	compressedLength = Length;  	if ((byteData [lastIndex] & 0x40) != 0)  		decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  	else  		decompressedLength = byteData [lastIndex] & 0x3f;  	startIndex = lastIndex + 2;  	loggedStartIndex = 2;  }  else {  	compressedLength = Length - 1;  	decompressedLength = byteData [lastIndex] & 0x7f;  	startIndex = lastIndex + 1;  	loggedStartIndex = 1;  }  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex + 1] & 0xf8) == 0x80) {  	compressedLength = Length;  	if ((byteData [lastIndex] & 0x40) != 0)  		decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  	else  		decompressedLength = byteData [lastIndex] & 0x3f;  	startIndex = lastIndex + 2;  	loggedStartIndex = 2;  }  else {  	compressedLength = Length - 1;  	decompressedLength = byteData [lastIndex] & 0x7f;  	startIndex = lastIndex + 1;  	loggedStartIndex = 1;  }  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: if ((byteData [lastIndex] & 0x40) != 0)  	decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  else  	decompressedLength = byteData [lastIndex] & 0x3f;  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: decompressedLength = (byteData [lastIndex] & 0x3f) | ((byteData [lastIndex + 1] << 6) & 0xff);  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: startIndex = lastIndex + 2;  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: loggedStartIndex = 2;  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: if (Table <= 0x80)  	huffmanTable = 1;  else  	huffmanTable = 2;  
Magic Number,DVBServices,DishNetworkShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkShortEventDescriptor.cs,Process,The following statement contains a magic number: huffmanTable = 2;  
Magic Number,DVBServices,DishNetworkVCHIPDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Dish Network\DishNetworkVCHIPDescriptor.cs,Process,The following statement contains a magic number: if (Length < 2)  	return;  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	outerFec = byteData [lastIndex + 1] & 0x17;  	lastIndex += 2;  	modulation = (int)byteData [lastIndex];  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Cable Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	outerFec = byteData [lastIndex + 1] & 0x17;  	lastIndex += 2;  	modulation = (int)byteData [lastIndex];  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Cable Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	outerFec = byteData [lastIndex + 1] & 0x17;  	lastIndex += 2;  	modulation = (int)byteData [lastIndex];  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Cable Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	outerFec = byteData [lastIndex + 1] & 0x17;  	lastIndex += 2;  	modulation = (int)byteData [lastIndex];  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Cable Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	outerFec = byteData [lastIndex + 1] & 0x17;  	lastIndex += 2;  	modulation = (int)byteData [lastIndex];  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Cable Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	outerFec = byteData [lastIndex + 1] & 0x17;  	lastIndex += 2;  	modulation = (int)byteData [lastIndex];  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Cable Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: innerFec = byteData [lastIndex + 3] & 0x17;  
Magic Number,DVBServices,DVBCableDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBCableDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BouquetAssociationSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\BouquetAssociationSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BouquetAssociationSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\BouquetAssociationSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  	lastIndex += 2;  	eastFlag = ((byteData [lastIndex] & 0x80) != 0);  	polarization = (byteData [lastIndex] >> 5) & 0x03;  	rollOff = (byteData [lastIndex] >> 3) & 0x03;  	s2Flag = ((byteData [lastIndex] & 0x04) != 0);  	modulationType = byteData [lastIndex] & 0x03;  	lastIndex++;  	symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  	innerFec = byteData [lastIndex + 3] & 0x17;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Satellite Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: orbitalPosition = Utils.ConvertBCDToInt (byteData' lastIndex' 4);  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: polarization = (byteData [lastIndex] >> 5) & 0x03;  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: rollOff = (byteData [lastIndex] >> 3) & 0x03;  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: symbolRate = Utils.ConvertBCDToInt (byteData' lastIndex' 7);  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: innerFec = byteData [lastIndex + 3] & 0x17;  
Magic Number,DVBServices,DVBSatelliteDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBSatelliteDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	bandWidth = byteData [lastIndex + 1] >> 5;  	priorityFlag = ((byteData [lastIndex] & 0x10) != 0);  	timeSliceIndicator = ((byteData [lastIndex] & 0x08) != 0);  	fecIndicator = ((byteData [lastIndex] & 0x04) != 0);  	lastIndex++;  	constellation = byteData [lastIndex] >> 6;  	hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  	hpCodeRate = byteData [lastIndex] & 0x07;  	lastIndex++;  	lpCodeRate = byteData [lastIndex] & 0xd0;  	guardInterval = (byteData [lastIndex] >> 3) & 0x03;  	transmissionMode = (byteData [lastIndex] >> 1) & 0x03;  	otherFrequencyFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Terrestrial Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	bandWidth = byteData [lastIndex + 1] >> 5;  	priorityFlag = ((byteData [lastIndex] & 0x10) != 0);  	timeSliceIndicator = ((byteData [lastIndex] & 0x08) != 0);  	fecIndicator = ((byteData [lastIndex] & 0x04) != 0);  	lastIndex++;  	constellation = byteData [lastIndex] >> 6;  	hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  	hpCodeRate = byteData [lastIndex] & 0x07;  	lastIndex++;  	lpCodeRate = byteData [lastIndex] & 0xd0;  	guardInterval = (byteData [lastIndex] >> 3) & 0x03;  	transmissionMode = (byteData [lastIndex] >> 1) & 0x03;  	otherFrequencyFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Terrestrial Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	bandWidth = byteData [lastIndex + 1] >> 5;  	priorityFlag = ((byteData [lastIndex] & 0x10) != 0);  	timeSliceIndicator = ((byteData [lastIndex] & 0x08) != 0);  	fecIndicator = ((byteData [lastIndex] & 0x04) != 0);  	lastIndex++;  	constellation = byteData [lastIndex] >> 6;  	hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  	hpCodeRate = byteData [lastIndex] & 0x07;  	lastIndex++;  	lpCodeRate = byteData [lastIndex] & 0xd0;  	guardInterval = (byteData [lastIndex] >> 3) & 0x03;  	transmissionMode = (byteData [lastIndex] >> 1) & 0x03;  	otherFrequencyFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Terrestrial Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	bandWidth = byteData [lastIndex + 1] >> 5;  	priorityFlag = ((byteData [lastIndex] & 0x10) != 0);  	timeSliceIndicator = ((byteData [lastIndex] & 0x08) != 0);  	fecIndicator = ((byteData [lastIndex] & 0x04) != 0);  	lastIndex++;  	constellation = byteData [lastIndex] >> 6;  	hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  	hpCodeRate = byteData [lastIndex] & 0x07;  	lastIndex++;  	lpCodeRate = byteData [lastIndex] & 0xd0;  	guardInterval = (byteData [lastIndex] >> 3) & 0x03;  	transmissionMode = (byteData [lastIndex] >> 1) & 0x03;  	otherFrequencyFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Terrestrial Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	bandWidth = byteData [lastIndex + 1] >> 5;  	priorityFlag = ((byteData [lastIndex] & 0x10) != 0);  	timeSliceIndicator = ((byteData [lastIndex] & 0x08) != 0);  	fecIndicator = ((byteData [lastIndex] & 0x04) != 0);  	lastIndex++;  	constellation = byteData [lastIndex] >> 6;  	hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  	hpCodeRate = byteData [lastIndex] & 0x07;  	lastIndex++;  	lpCodeRate = byteData [lastIndex] & 0xd0;  	guardInterval = (byteData [lastIndex] >> 3) & 0x03;  	transmissionMode = (byteData [lastIndex] >> 1) & 0x03;  	otherFrequencyFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Terrestrial Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	bandWidth = byteData [lastIndex + 1] >> 5;  	priorityFlag = ((byteData [lastIndex] & 0x10) != 0);  	timeSliceIndicator = ((byteData [lastIndex] & 0x08) != 0);  	fecIndicator = ((byteData [lastIndex] & 0x04) != 0);  	lastIndex++;  	constellation = byteData [lastIndex] >> 6;  	hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  	hpCodeRate = byteData [lastIndex] & 0x07;  	lastIndex++;  	lpCodeRate = byteData [lastIndex] & 0xd0;  	guardInterval = (byteData [lastIndex] >> 3) & 0x03;  	transmissionMode = (byteData [lastIndex] >> 1) & 0x03;  	otherFrequencyFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Terrestrial Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: try {  	Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  	lastIndex += 4;  	bandWidth = byteData [lastIndex + 1] >> 5;  	priorityFlag = ((byteData [lastIndex] & 0x10) != 0);  	timeSliceIndicator = ((byteData [lastIndex] & 0x08) != 0);  	fecIndicator = ((byteData [lastIndex] & 0x04) != 0);  	lastIndex++;  	constellation = byteData [lastIndex] >> 6;  	hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  	hpCodeRate = byteData [lastIndex] & 0x07;  	lastIndex++;  	lpCodeRate = byteData [lastIndex] & 0xd0;  	guardInterval = (byteData [lastIndex] >> 3) & 0x03;  	transmissionMode = (byteData [lastIndex] >> 1) & 0x03;  	otherFrequencyFlag = ((byteData [lastIndex] & 0x01) != 0);  	lastIndex++;  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Terrestrial Delivery Descriptor message is short"));  }  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: Frequency = Utils.ConvertBCDToInt (byteData' lastIndex' 8);  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: bandWidth = byteData [lastIndex + 1] >> 5;  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: constellation = byteData [lastIndex] >> 6;  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: hierarchyInformation = (byteData [lastIndex] >> 3) & 0x07;  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: guardInterval = (byteData [lastIndex] >> 3) & 0x03;  
Magic Number,DVBServices,DVBTerrestrialDeliverySystemDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBTerrestrialDeliverySystemDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,NetworkInformationSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\NetworkInformationSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,NetworkInformationSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\NetworkInformationSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line.Trim () != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				string[] numbers = parts [0].Split (new char[] {  					'''  				});  				if (numbers.Length != 2)  					Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  				else {  					int contentID = Int32.Parse (numbers [0].Trim ());  					int subContentID = Int32.Parse (numbers [1].Trim ());  					AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  				}  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line.Trim () != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				string[] numbers = parts [0].Split (new char[] {  					'''  				});  				if (numbers.Length != 2)  					Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  				else {  					int contentID = Int32.Parse (numbers [0].Trim ());  					int subContentID = Int32.Parse (numbers [1].Trim ());  					AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  				}  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: if (line.Trim () != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			string[] numbers = parts [0].Split (new char[] {  				'''  			});  			if (numbers.Length != 2)  				Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  			else {  				int contentID = Int32.Parse (numbers [0].Trim ());  				int subContentID = Int32.Parse (numbers [1].Trim ());  				AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  			}  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: if (line.Trim () != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			string[] numbers = parts [0].Split (new char[] {  				'''  			});  			if (numbers.Length != 2)  				Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  			else {  				int contentID = Int32.Parse (numbers [0].Trim ());  				int subContentID = Int32.Parse (numbers [1].Trim ());  				AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  			}  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		string[] numbers = parts [0].Split (new char[] {  			'''  		});  		if (numbers.Length != 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			int contentID = Int32.Parse (numbers [0].Trim ());  			int subContentID = Int32.Parse (numbers [1].Trim ());  			AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  		}  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		string[] numbers = parts [0].Split (new char[] {  			'''  		});  		if (numbers.Length != 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			int contentID = Int32.Parse (numbers [0].Trim ());  			int subContentID = Int32.Parse (numbers [1].Trim ());  			AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  		}  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: try {  	string[] numbers = parts [0].Split (new char[] {  		'''  	});  	if (numbers.Length != 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		int contentID = Int32.Parse (numbers [0].Trim ());  		int subContentID = Int32.Parse (numbers [1].Trim ());  		AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  	}  }  catch (FormatException) {  	Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  }  catch (ArithmeticException) {  	Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  }  
Magic Number,DVBServices,EITProgramContent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITProgramContent.cs,Load,The following statement contains a magic number: if (numbers.Length != 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	int contentID = Int32.Parse (numbers [0].Trim ());  	int subContentID = Int32.Parse (numbers [1].Trim ());  	AddContent (contentID' subContentID' line.Substring (parts [0].Length + 1));  }  
Magic Number,DVBServices,EITChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<EITChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			EITChannelInfoEntry channelInfoEntry = new EITChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,EITChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<EITChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			EITChannelInfoEntry channelInfoEntry = new EITChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,EITChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<EITChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		EITChannelInfoEntry channelInfoEntry = new EITChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,EITChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<EITChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		EITChannelInfoEntry channelInfoEntry = new EITChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,EITChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	flags = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex++;  	userNumber = (int)byteData [lastIndex];  	lastIndex++;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT Channel Info Entry message is short"));  }  
Magic Number,DVBServices,EITChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,FreeSatChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<FreeSatChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			FreeSatChannelInfoEntry channelInfoEntry = new FreeSatChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			if (channelInfoEntry.UserNumber != -1)  				channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<FreeSatChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			FreeSatChannelInfoEntry channelInfoEntry = new FreeSatChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			if (channelInfoEntry.UserNumber != -1)  				channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<FreeSatChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		FreeSatChannelInfoEntry channelInfoEntry = new FreeSatChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		if (channelInfoEntry.UserNumber != -1)  			channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,FreeSatChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<FreeSatChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		FreeSatChannelInfoEntry channelInfoEntry = new FreeSatChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		if (channelInfoEntry.UserNumber != -1)  			channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	detailLength = (int)byteData [lastIndex];  	lastIndex++;  	if (detailLength != 0) {  		unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  		lastIndex += detailLength;  		if (detailLength == 4 || detailLength == 8)  			userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  	}  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Entry message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	detailLength = (int)byteData [lastIndex];  	lastIndex++;  	if (detailLength != 0) {  		unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  		lastIndex += detailLength;  		if (detailLength == 4 || detailLength == 8)  			userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  	}  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Entry message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	detailLength = (int)byteData [lastIndex];  	lastIndex++;  	if (detailLength != 0) {  		unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  		lastIndex += detailLength;  		if (detailLength == 4 || detailLength == 8)  			userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  	}  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Entry message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	detailLength = (int)byteData [lastIndex];  	lastIndex++;  	if (detailLength != 0) {  		unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  		lastIndex += detailLength;  		if (detailLength == 4 || detailLength == 8)  			userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  	}  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Entry message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	detailLength = (int)byteData [lastIndex];  	lastIndex++;  	if (detailLength != 0) {  		unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  		lastIndex += detailLength;  		if (detailLength == 4 || detailLength == 8)  			userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  	}  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Entry message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	detailLength = (int)byteData [lastIndex];  	lastIndex++;  	if (detailLength != 0) {  		unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  		lastIndex += detailLength;  		if (detailLength == 4 || detailLength == 8)  			userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  	}  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat Channel Info Entry message is short"));  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: if (detailLength != 0) {  	unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  	lastIndex += detailLength;  	if (detailLength == 4 || detailLength == 8)  		userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: if (detailLength != 0) {  	unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  	lastIndex += detailLength;  	if (detailLength == 4 || detailLength == 8)  		userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: if (detailLength != 0) {  	unknown2 = Utils.GetBytes (byteData' lastIndex' detailLength);  	lastIndex += detailLength;  	if (detailLength == 4 || detailLength == 8)  		userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  }  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: if (detailLength == 4 || detailLength == 8)  	userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: if (detailLength == 4 || detailLength == 8)  	userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: if (detailLength == 4 || detailLength == 8)  	userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  
Magic Number,DVBServices,FreeSatChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatChannelInfoEntry.cs,Process,The following statement contains a magic number: userNumber = ((unknown2 [0] & 0x0f) * 256) + unknown2 [1];  
Magic Number,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,getFreeSatSections,The following statement contains a magic number: freeSatReader = new TSStreamReader (2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,getFreeSatSections,The following statement contains a magic number: while (!freeSatSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	freeSatReader.Lock ("LoadMessages");  	if (freeSatReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in freeSatReader.Sections)  			sections.Add (section);  		freeSatReader.Sections.Clear ();  	}  	freeSatReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processSections (sections);  	if (TVStation.EPGCount == lastCount) {  		repeats++;  		freeSatSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = TVStation.EPGCount;  }  
Magic Number,DVBServices,FreeSatController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatController.cs,getFreeSatSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && !line.StartsWith ("####")) {  		string[] parts = line.Split (new char[] {  			':'  		});  		if (parts.Length == 4) {  			int rootOffSet = (int)(resolveChar (parts [0]));  			if (roots [rootOffSet] == null)  				roots [rootOffSet] = new HuffmanEntry ();  			HuffmanEntry currentEntry = roots [rootOffSet];  			string pattern = parts [1];  			for (int index = 0; index < parts [1].Length; index++) {  				char patternChar = pattern [index];  				switch (patternChar) {  				case '0':  					if (currentEntry.P0 == null) {  						currentEntry.P0 = new HuffmanEntry ();  						currentEntry = currentEntry.P0;  						if (index == pattern.Length - 1)  							currentEntry.Value = resolveChar (parts [2]).ToString ();  					}  					else {  						currentEntry = currentEntry.P0;  						if (currentEntry.HoldsValue && index == pattern.Length - 1)  							Logger.Instance.Write ("Dictionary entry already set");  					}  					break;  				case '1':  					if (currentEntry.P1 == null) {  						currentEntry.P1 = new HuffmanEntry ();  						currentEntry = currentEntry.P1;  						if (index == pattern.Length - 1)  							currentEntry.Value = resolveChar (parts [2]).ToString ();  					}  					else {  						currentEntry = currentEntry.P1;  						if (currentEntry.HoldsValue && index == pattern.Length - 1)  							Logger.Instance.Write ("Dictionary entry already set: " + line);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && !line.StartsWith ("####")) {  		string[] parts = line.Split (new char[] {  			':'  		});  		if (parts.Length == 4) {  			int rootOffSet = (int)(resolveChar (parts [0]));  			if (roots [rootOffSet] == null)  				roots [rootOffSet] = new HuffmanEntry ();  			HuffmanEntry currentEntry = roots [rootOffSet];  			string pattern = parts [1];  			for (int index = 0; index < parts [1].Length; index++) {  				char patternChar = pattern [index];  				switch (patternChar) {  				case '0':  					if (currentEntry.P0 == null) {  						currentEntry.P0 = new HuffmanEntry ();  						currentEntry = currentEntry.P0;  						if (index == pattern.Length - 1)  							currentEntry.Value = resolveChar (parts [2]).ToString ();  					}  					else {  						currentEntry = currentEntry.P0;  						if (currentEntry.HoldsValue && index == pattern.Length - 1)  							Logger.Instance.Write ("Dictionary entry already set");  					}  					break;  				case '1':  					if (currentEntry.P1 == null) {  						currentEntry.P1 = new HuffmanEntry ();  						currentEntry = currentEntry.P1;  						if (index == pattern.Length - 1)  							currentEntry.Value = resolveChar (parts [2]).ToString ();  					}  					else {  						currentEntry = currentEntry.P1;  						if (currentEntry.HoldsValue && index == pattern.Length - 1)  							Logger.Instance.Write ("Dictionary entry already set: " + line);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && !line.StartsWith ("####")) {  		string[] parts = line.Split (new char[] {  			':'  		});  		if (parts.Length == 4) {  			int rootOffSet = (int)(resolveChar (parts [0]));  			if (roots [rootOffSet] == null)  				roots [rootOffSet] = new HuffmanEntry ();  			HuffmanEntry currentEntry = roots [rootOffSet];  			string pattern = parts [1];  			for (int index = 0; index < parts [1].Length; index++) {  				char patternChar = pattern [index];  				switch (patternChar) {  				case '0':  					if (currentEntry.P0 == null) {  						currentEntry.P0 = new HuffmanEntry ();  						currentEntry = currentEntry.P0;  						if (index == pattern.Length - 1)  							currentEntry.Value = resolveChar (parts [2]).ToString ();  					}  					else {  						currentEntry = currentEntry.P0;  						if (currentEntry.HoldsValue && index == pattern.Length - 1)  							Logger.Instance.Write ("Dictionary entry already set");  					}  					break;  				case '1':  					if (currentEntry.P1 == null) {  						currentEntry.P1 = new HuffmanEntry ();  						currentEntry = currentEntry.P1;  						if (index == pattern.Length - 1)  							currentEntry.Value = resolveChar (parts [2]).ToString ();  					}  					else {  						currentEntry = currentEntry.P1;  						if (currentEntry.HoldsValue && index == pattern.Length - 1)  							Logger.Instance.Write ("Dictionary entry already set: " + line);  					}  					break;  				default:  					break;  				}  			}  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (line != string.Empty && !line.StartsWith ("####")) {  	string[] parts = line.Split (new char[] {  		':'  	});  	if (parts.Length == 4) {  		int rootOffSet = (int)(resolveChar (parts [0]));  		if (roots [rootOffSet] == null)  			roots [rootOffSet] = new HuffmanEntry ();  		HuffmanEntry currentEntry = roots [rootOffSet];  		string pattern = parts [1];  		for (int index = 0; index < parts [1].Length; index++) {  			char patternChar = pattern [index];  			switch (patternChar) {  			case '0':  				if (currentEntry.P0 == null) {  					currentEntry.P0 = new HuffmanEntry ();  					currentEntry = currentEntry.P0;  					if (index == pattern.Length - 1)  						currentEntry.Value = resolveChar (parts [2]).ToString ();  				}  				else {  					currentEntry = currentEntry.P0;  					if (currentEntry.HoldsValue && index == pattern.Length - 1)  						Logger.Instance.Write ("Dictionary entry already set");  				}  				break;  			case '1':  				if (currentEntry.P1 == null) {  					currentEntry.P1 = new HuffmanEntry ();  					currentEntry = currentEntry.P1;  					if (index == pattern.Length - 1)  						currentEntry.Value = resolveChar (parts [2]).ToString ();  				}  				else {  					currentEntry = currentEntry.P1;  					if (currentEntry.HoldsValue && index == pattern.Length - 1)  						Logger.Instance.Write ("Dictionary entry already set: " + line);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (line != string.Empty && !line.StartsWith ("####")) {  	string[] parts = line.Split (new char[] {  		':'  	});  	if (parts.Length == 4) {  		int rootOffSet = (int)(resolveChar (parts [0]));  		if (roots [rootOffSet] == null)  			roots [rootOffSet] = new HuffmanEntry ();  		HuffmanEntry currentEntry = roots [rootOffSet];  		string pattern = parts [1];  		for (int index = 0; index < parts [1].Length; index++) {  			char patternChar = pattern [index];  			switch (patternChar) {  			case '0':  				if (currentEntry.P0 == null) {  					currentEntry.P0 = new HuffmanEntry ();  					currentEntry = currentEntry.P0;  					if (index == pattern.Length - 1)  						currentEntry.Value = resolveChar (parts [2]).ToString ();  				}  				else {  					currentEntry = currentEntry.P0;  					if (currentEntry.HoldsValue && index == pattern.Length - 1)  						Logger.Instance.Write ("Dictionary entry already set");  				}  				break;  			case '1':  				if (currentEntry.P1 == null) {  					currentEntry.P1 = new HuffmanEntry ();  					currentEntry = currentEntry.P1;  					if (index == pattern.Length - 1)  						currentEntry.Value = resolveChar (parts [2]).ToString ();  				}  				else {  					currentEntry = currentEntry.P1;  					if (currentEntry.HoldsValue && index == pattern.Length - 1)  						Logger.Instance.Write ("Dictionary entry already set: " + line);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (line != string.Empty && !line.StartsWith ("####")) {  	string[] parts = line.Split (new char[] {  		':'  	});  	if (parts.Length == 4) {  		int rootOffSet = (int)(resolveChar (parts [0]));  		if (roots [rootOffSet] == null)  			roots [rootOffSet] = new HuffmanEntry ();  		HuffmanEntry currentEntry = roots [rootOffSet];  		string pattern = parts [1];  		for (int index = 0; index < parts [1].Length; index++) {  			char patternChar = pattern [index];  			switch (patternChar) {  			case '0':  				if (currentEntry.P0 == null) {  					currentEntry.P0 = new HuffmanEntry ();  					currentEntry = currentEntry.P0;  					if (index == pattern.Length - 1)  						currentEntry.Value = resolveChar (parts [2]).ToString ();  				}  				else {  					currentEntry = currentEntry.P0;  					if (currentEntry.HoldsValue && index == pattern.Length - 1)  						Logger.Instance.Write ("Dictionary entry already set");  				}  				break;  			case '1':  				if (currentEntry.P1 == null) {  					currentEntry.P1 = new HuffmanEntry ();  					currentEntry = currentEntry.P1;  					if (index == pattern.Length - 1)  						currentEntry.Value = resolveChar (parts [2]).ToString ();  				}  				else {  					currentEntry = currentEntry.P1;  					if (currentEntry.HoldsValue && index == pattern.Length - 1)  						Logger.Instance.Write ("Dictionary entry already set: " + line);  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (parts.Length == 4) {  	int rootOffSet = (int)(resolveChar (parts [0]));  	if (roots [rootOffSet] == null)  		roots [rootOffSet] = new HuffmanEntry ();  	HuffmanEntry currentEntry = roots [rootOffSet];  	string pattern = parts [1];  	for (int index = 0; index < parts [1].Length; index++) {  		char patternChar = pattern [index];  		switch (patternChar) {  		case '0':  			if (currentEntry.P0 == null) {  				currentEntry.P0 = new HuffmanEntry ();  				currentEntry = currentEntry.P0;  				if (index == pattern.Length - 1)  					currentEntry.Value = resolveChar (parts [2]).ToString ();  			}  			else {  				currentEntry = currentEntry.P0;  				if (currentEntry.HoldsValue && index == pattern.Length - 1)  					Logger.Instance.Write ("Dictionary entry already set");  			}  			break;  		case '1':  			if (currentEntry.P1 == null) {  				currentEntry.P1 = new HuffmanEntry ();  				currentEntry = currentEntry.P1;  				if (index == pattern.Length - 1)  					currentEntry.Value = resolveChar (parts [2]).ToString ();  			}  			else {  				currentEntry = currentEntry.P1;  				if (currentEntry.HoldsValue && index == pattern.Length - 1)  					Logger.Instance.Write ("Dictionary entry already set: " + line);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (parts.Length == 4) {  	int rootOffSet = (int)(resolveChar (parts [0]));  	if (roots [rootOffSet] == null)  		roots [rootOffSet] = new HuffmanEntry ();  	HuffmanEntry currentEntry = roots [rootOffSet];  	string pattern = parts [1];  	for (int index = 0; index < parts [1].Length; index++) {  		char patternChar = pattern [index];  		switch (patternChar) {  		case '0':  			if (currentEntry.P0 == null) {  				currentEntry.P0 = new HuffmanEntry ();  				currentEntry = currentEntry.P0;  				if (index == pattern.Length - 1)  					currentEntry.Value = resolveChar (parts [2]).ToString ();  			}  			else {  				currentEntry = currentEntry.P0;  				if (currentEntry.HoldsValue && index == pattern.Length - 1)  					Logger.Instance.Write ("Dictionary entry already set");  			}  			break;  		case '1':  			if (currentEntry.P1 == null) {  				currentEntry.P1 = new HuffmanEntry ();  				currentEntry = currentEntry.P1;  				if (index == pattern.Length - 1)  					currentEntry.Value = resolveChar (parts [2]).ToString ();  			}  			else {  				currentEntry = currentEntry.P1;  				if (currentEntry.HoldsValue && index == pattern.Length - 1)  					Logger.Instance.Write ("Dictionary entry already set: " + line);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (parts.Length == 4) {  	int rootOffSet = (int)(resolveChar (parts [0]));  	if (roots [rootOffSet] == null)  		roots [rootOffSet] = new HuffmanEntry ();  	HuffmanEntry currentEntry = roots [rootOffSet];  	string pattern = parts [1];  	for (int index = 0; index < parts [1].Length; index++) {  		char patternChar = pattern [index];  		switch (patternChar) {  		case '0':  			if (currentEntry.P0 == null) {  				currentEntry.P0 = new HuffmanEntry ();  				currentEntry = currentEntry.P0;  				if (index == pattern.Length - 1)  					currentEntry.Value = resolveChar (parts [2]).ToString ();  			}  			else {  				currentEntry = currentEntry.P0;  				if (currentEntry.HoldsValue && index == pattern.Length - 1)  					Logger.Instance.Write ("Dictionary entry already set");  			}  			break;  		case '1':  			if (currentEntry.P1 == null) {  				currentEntry.P1 = new HuffmanEntry ();  				currentEntry = currentEntry.P1;  				if (index == pattern.Length - 1)  					currentEntry.Value = resolveChar (parts [2]).ToString ();  			}  			else {  				currentEntry = currentEntry.P1;  				if (currentEntry.HoldsValue && index == pattern.Length - 1)  					Logger.Instance.Write ("Dictionary entry already set: " + line);  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: for (int index = 0; index < parts [1].Length; index++) {  	char patternChar = pattern [index];  	switch (patternChar) {  	case '0':  		if (currentEntry.P0 == null) {  			currentEntry.P0 = new HuffmanEntry ();  			currentEntry = currentEntry.P0;  			if (index == pattern.Length - 1)  				currentEntry.Value = resolveChar (parts [2]).ToString ();  		}  		else {  			currentEntry = currentEntry.P0;  			if (currentEntry.HoldsValue && index == pattern.Length - 1)  				Logger.Instance.Write ("Dictionary entry already set");  		}  		break;  	case '1':  		if (currentEntry.P1 == null) {  			currentEntry.P1 = new HuffmanEntry ();  			currentEntry = currentEntry.P1;  			if (index == pattern.Length - 1)  				currentEntry.Value = resolveChar (parts [2]).ToString ();  		}  		else {  			currentEntry = currentEntry.P1;  			if (currentEntry.HoldsValue && index == pattern.Length - 1)  				Logger.Instance.Write ("Dictionary entry already set: " + line);  		}  		break;  	default:  		break;  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: for (int index = 0; index < parts [1].Length; index++) {  	char patternChar = pattern [index];  	switch (patternChar) {  	case '0':  		if (currentEntry.P0 == null) {  			currentEntry.P0 = new HuffmanEntry ();  			currentEntry = currentEntry.P0;  			if (index == pattern.Length - 1)  				currentEntry.Value = resolveChar (parts [2]).ToString ();  		}  		else {  			currentEntry = currentEntry.P0;  			if (currentEntry.HoldsValue && index == pattern.Length - 1)  				Logger.Instance.Write ("Dictionary entry already set");  		}  		break;  	case '1':  		if (currentEntry.P1 == null) {  			currentEntry.P1 = new HuffmanEntry ();  			currentEntry = currentEntry.P1;  			if (index == pattern.Length - 1)  				currentEntry.Value = resolveChar (parts [2]).ToString ();  		}  		else {  			currentEntry = currentEntry.P1;  			if (currentEntry.HoldsValue && index == pattern.Length - 1)  				Logger.Instance.Write ("Dictionary entry already set: " + line);  		}  		break;  	default:  		break;  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: switch (patternChar) {  case '0':  	if (currentEntry.P0 == null) {  		currentEntry.P0 = new HuffmanEntry ();  		currentEntry = currentEntry.P0;  		if (index == pattern.Length - 1)  			currentEntry.Value = resolveChar (parts [2]).ToString ();  	}  	else {  		currentEntry = currentEntry.P0;  		if (currentEntry.HoldsValue && index == pattern.Length - 1)  			Logger.Instance.Write ("Dictionary entry already set");  	}  	break;  case '1':  	if (currentEntry.P1 == null) {  		currentEntry.P1 = new HuffmanEntry ();  		currentEntry = currentEntry.P1;  		if (index == pattern.Length - 1)  			currentEntry.Value = resolveChar (parts [2]).ToString ();  	}  	else {  		currentEntry = currentEntry.P1;  		if (currentEntry.HoldsValue && index == pattern.Length - 1)  			Logger.Instance.Write ("Dictionary entry already set: " + line);  	}  	break;  default:  	break;  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: switch (patternChar) {  case '0':  	if (currentEntry.P0 == null) {  		currentEntry.P0 = new HuffmanEntry ();  		currentEntry = currentEntry.P0;  		if (index == pattern.Length - 1)  			currentEntry.Value = resolveChar (parts [2]).ToString ();  	}  	else {  		currentEntry = currentEntry.P0;  		if (currentEntry.HoldsValue && index == pattern.Length - 1)  			Logger.Instance.Write ("Dictionary entry already set");  	}  	break;  case '1':  	if (currentEntry.P1 == null) {  		currentEntry.P1 = new HuffmanEntry ();  		currentEntry = currentEntry.P1;  		if (index == pattern.Length - 1)  			currentEntry.Value = resolveChar (parts [2]).ToString ();  	}  	else {  		currentEntry = currentEntry.P1;  		if (currentEntry.HoldsValue && index == pattern.Length - 1)  			Logger.Instance.Write ("Dictionary entry already set: " + line);  	}  	break;  default:  	break;  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (currentEntry.P0 == null) {  	currentEntry.P0 = new HuffmanEntry ();  	currentEntry = currentEntry.P0;  	if (index == pattern.Length - 1)  		currentEntry.Value = resolveChar (parts [2]).ToString ();  }  else {  	currentEntry = currentEntry.P0;  	if (currentEntry.HoldsValue && index == pattern.Length - 1)  		Logger.Instance.Write ("Dictionary entry already set");  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (index == pattern.Length - 1)  	currentEntry.Value = resolveChar (parts [2]).ToString ();  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: currentEntry.Value = resolveChar (parts [2]).ToString ();  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (currentEntry.P1 == null) {  	currentEntry.P1 = new HuffmanEntry ();  	currentEntry = currentEntry.P1;  	if (index == pattern.Length - 1)  		currentEntry.Value = resolveChar (parts [2]).ToString ();  }  else {  	currentEntry = currentEntry.P1;  	if (currentEntry.HoldsValue && index == pattern.Length - 1)  		Logger.Instance.Write ("Dictionary entry already set: " + line);  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: if (index == pattern.Length - 1)  	currentEntry.Value = resolveChar (parts [2]).ToString ();  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,loadFile,The following statement contains a magic number: currentEntry.Value = resolveChar (parts [2]).ToString ();  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,DecodeData,The following statement contains a magic number: if (byteData [1] == 1)  	return (decodeData (byteData' table1Roots' 2));  else  	return (decodeData (byteData' table2Roots' 2));  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,DecodeData,The following statement contains a magic number: if (byteData [1] == 1)  	return (decodeData (byteData' table1Roots' 2));  else  	return (decodeData (byteData' table2Roots' 2));  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,DecodeData,The following statement contains a magic number: return (decodeData (byteData' table1Roots' 2));  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,DecodeData,The following statement contains a magic number: return (decodeData (byteData' table2Roots' 2));  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,decodeData,The following statement contains a magic number: for (int index = startIndex; index < byteData.Length && !finished; index++) {  	byte dataByte = byteData [index];  	while (mask > 0 && !finished) {  		if (currentEntry.HoldsValue) {  			switch ((int)currentEntry.Value [0]) {  			case stop:  				finished = true;  				break;  			case escape:  				byte encodedValue;  				do {  					encodedValue = 0x00;  					for (int bitCount = 0; bitCount < 8; bitCount++) {  						encodedValue = (byte)(encodedValue << 1);  						if ((dataByte & mask) != 0)  							encodedValue |= 0x01;  						mask = (byte)(mask >> 1);  						if (mask == 0) {  							index++;  							dataByte = byteData [index];  							mask = 0x80;  						}  					}  				}  				while ((encodedValue & 0x80) != 0);  				finished = ((int)encodedValue < 0x20);  				if (!finished) {  					outputString.Append ((char)encodedValue);  					currentEntry = roots [encodedValue];  					bitString = new StringBuilder ();  				}  				break;  			default:  				outputString.Append (currentEntry.Value);  				currentEntry = roots [(int)currentEntry.Value [0]];  				bitString = new StringBuilder ();  				break;  			}  		}  		if (!finished) {  			if ((dataByte & mask) == 0) {  				bitString.Append ("0");  				if (currentEntry.P0 != null)  					currentEntry = currentEntry.P0;  				else {  					Logger.Instance.Write (" ** DECOMPRESSION FAILED **");  					Logger.Instance.Write ("Original data: " + Utils.ConvertToHex (byteData));  					Logger.Instance.Write ("Decoded data: " + outputString.ToString ());  					Logger.Instance.Write ("Bit string: " + bitString.ToString ());  					return (outputString.ToString () + " ** DECOMPRESSION FAILED **");  				}  			}  			else {  				bitString.Append ("1");  				if (currentEntry.P1 != null)  					currentEntry = currentEntry.P1;  				else {  					Logger.Instance.Write (" ** DECOMPRESSION FAILED **");  					Logger.Instance.Write ("Original data: " + Utils.ConvertToHex (byteData));  					Logger.Instance.Write ("Decoded data: " + outputString.ToString ());  					Logger.Instance.Write ("Bit string: " + bitString.ToString ());  					return (outputString.ToString () + " ** DECOMPRESSION FAILED **");  				}  			}  			mask = (byte)(mask >> 1);  		}  	}  	mask = 0x80;  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,decodeData,The following statement contains a magic number: while (mask > 0 && !finished) {  	if (currentEntry.HoldsValue) {  		switch ((int)currentEntry.Value [0]) {  		case stop:  			finished = true;  			break;  		case escape:  			byte encodedValue;  			do {  				encodedValue = 0x00;  				for (int bitCount = 0; bitCount < 8; bitCount++) {  					encodedValue = (byte)(encodedValue << 1);  					if ((dataByte & mask) != 0)  						encodedValue |= 0x01;  					mask = (byte)(mask >> 1);  					if (mask == 0) {  						index++;  						dataByte = byteData [index];  						mask = 0x80;  					}  				}  			}  			while ((encodedValue & 0x80) != 0);  			finished = ((int)encodedValue < 0x20);  			if (!finished) {  				outputString.Append ((char)encodedValue);  				currentEntry = roots [encodedValue];  				bitString = new StringBuilder ();  			}  			break;  		default:  			outputString.Append (currentEntry.Value);  			currentEntry = roots [(int)currentEntry.Value [0]];  			bitString = new StringBuilder ();  			break;  		}  	}  	if (!finished) {  		if ((dataByte & mask) == 0) {  			bitString.Append ("0");  			if (currentEntry.P0 != null)  				currentEntry = currentEntry.P0;  			else {  				Logger.Instance.Write (" ** DECOMPRESSION FAILED **");  				Logger.Instance.Write ("Original data: " + Utils.ConvertToHex (byteData));  				Logger.Instance.Write ("Decoded data: " + outputString.ToString ());  				Logger.Instance.Write ("Bit string: " + bitString.ToString ());  				return (outputString.ToString () + " ** DECOMPRESSION FAILED **");  			}  		}  		else {  			bitString.Append ("1");  			if (currentEntry.P1 != null)  				currentEntry = currentEntry.P1;  			else {  				Logger.Instance.Write (" ** DECOMPRESSION FAILED **");  				Logger.Instance.Write ("Original data: " + Utils.ConvertToHex (byteData));  				Logger.Instance.Write ("Decoded data: " + outputString.ToString ());  				Logger.Instance.Write ("Bit string: " + bitString.ToString ());  				return (outputString.ToString () + " ** DECOMPRESSION FAILED **");  			}  		}  		mask = (byte)(mask >> 1);  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,decodeData,The following statement contains a magic number: if (currentEntry.HoldsValue) {  	switch ((int)currentEntry.Value [0]) {  	case stop:  		finished = true;  		break;  	case escape:  		byte encodedValue;  		do {  			encodedValue = 0x00;  			for (int bitCount = 0; bitCount < 8; bitCount++) {  				encodedValue = (byte)(encodedValue << 1);  				if ((dataByte & mask) != 0)  					encodedValue |= 0x01;  				mask = (byte)(mask >> 1);  				if (mask == 0) {  					index++;  					dataByte = byteData [index];  					mask = 0x80;  				}  			}  		}  		while ((encodedValue & 0x80) != 0);  		finished = ((int)encodedValue < 0x20);  		if (!finished) {  			outputString.Append ((char)encodedValue);  			currentEntry = roots [encodedValue];  			bitString = new StringBuilder ();  		}  		break;  	default:  		outputString.Append (currentEntry.Value);  		currentEntry = roots [(int)currentEntry.Value [0]];  		bitString = new StringBuilder ();  		break;  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,decodeData,The following statement contains a magic number: switch ((int)currentEntry.Value [0]) {  case stop:  	finished = true;  	break;  case escape:  	byte encodedValue;  	do {  		encodedValue = 0x00;  		for (int bitCount = 0; bitCount < 8; bitCount++) {  			encodedValue = (byte)(encodedValue << 1);  			if ((dataByte & mask) != 0)  				encodedValue |= 0x01;  			mask = (byte)(mask >> 1);  			if (mask == 0) {  				index++;  				dataByte = byteData [index];  				mask = 0x80;  			}  		}  	}  	while ((encodedValue & 0x80) != 0);  	finished = ((int)encodedValue < 0x20);  	if (!finished) {  		outputString.Append ((char)encodedValue);  		currentEntry = roots [encodedValue];  		bitString = new StringBuilder ();  	}  	break;  default:  	outputString.Append (currentEntry.Value);  	currentEntry = roots [(int)currentEntry.Value [0]];  	bitString = new StringBuilder ();  	break;  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,decodeData,The following statement contains a magic number: do {  	encodedValue = 0x00;  	for (int bitCount = 0; bitCount < 8; bitCount++) {  		encodedValue = (byte)(encodedValue << 1);  		if ((dataByte & mask) != 0)  			encodedValue |= 0x01;  		mask = (byte)(mask >> 1);  		if (mask == 0) {  			index++;  			dataByte = byteData [index];  			mask = 0x80;  		}  	}  }  while ((encodedValue & 0x80) != 0);  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,decodeData,The following statement contains a magic number: for (int bitCount = 0; bitCount < 8; bitCount++) {  	encodedValue = (byte)(encodedValue << 1);  	if ((dataByte & mask) != 0)  		encodedValue |= 0x01;  	mask = (byte)(mask >> 1);  	if (mask == 0) {  		index++;  		dataByte = byteData [index];  		mask = 0x80;  	}  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: switch (input.ToUpper ()) {  case "START":  	myChar = (char)0x00;  	break;  case "STOP":  	myChar = (char)0x02;  	break;  case "ESCAPE":  	myChar = (char)0x01;  	break;  default:  	try {  		if (input.Substring (0' 2) == "0x") {  			val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  			//ASCII for the input character  		}  		myChar = (char)val;  	}  	catch {  	}  	break;  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: switch (input.ToUpper ()) {  case "START":  	myChar = (char)0x00;  	break;  case "STOP":  	myChar = (char)0x02;  	break;  case "ESCAPE":  	myChar = (char)0x01;  	break;  default:  	try {  		if (input.Substring (0' 2) == "0x") {  			val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  			//ASCII for the input character  		}  		myChar = (char)val;  	}  	catch {  	}  	break;  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: switch (input.ToUpper ()) {  case "START":  	myChar = (char)0x00;  	break;  case "STOP":  	myChar = (char)0x02;  	break;  case "ESCAPE":  	myChar = (char)0x01;  	break;  default:  	try {  		if (input.Substring (0' 2) == "0x") {  			val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  			//ASCII for the input character  		}  		myChar = (char)val;  	}  	catch {  	}  	break;  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: try {  	if (input.Substring (0' 2) == "0x") {  		val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  		//ASCII for the input character  	}  	myChar = (char)val;  }  catch {  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: try {  	if (input.Substring (0' 2) == "0x") {  		val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  		//ASCII for the input character  	}  	myChar = (char)val;  }  catch {  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: try {  	if (input.Substring (0' 2) == "0x") {  		val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  		//ASCII for the input character  	}  	myChar = (char)val;  }  catch {  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: if (input.Substring (0' 2) == "0x") {  	val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  	//ASCII for the input character  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: if (input.Substring (0' 2) == "0x") {  	val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  	//ASCII for the input character  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: if (input.Substring (0' 2) == "0x") {  	val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  	//ASCII for the input character  }  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  
Magic Number,DVBServices,MultiTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\MultiTreeDictionaryEntry.cs,resolveChar,The following statement contains a magic number: val = int.Parse (input.Substring (2' input.Length - 2)' NumberStyles.AllowHexSpecifier);  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat message is short"));  }  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat message is short"));  }  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat message is short"));  }  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat message is short"));  }  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat message is short"));  }  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat message is short"));  }  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat message is short"));  }  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: lastIndex += 5;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: runningStatus = (int)(byteData [lastIndex] >> 5);  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,getStartTime,The following statement contains a magic number: year = year + 1900 + adjust;  
Magic Number,DVBServices,FreeSatEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatEntry.cs,getStartTime,The following statement contains a magic number: month = month - 1 - (adjust * 12);  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	segmentLastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastTableID = (int)byteData [lastIndex];  	lastIndex++;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat EIT section is short"));  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	segmentLastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastTableID = (int)byteData [lastIndex];  	lastIndex++;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The FreeSat EIT section is short"));  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	FreeSatEntry freeSatEntry = new FreeSatEntry ();  	freeSatEntry.Process (byteData' lastIndex);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.FreeSat;  	switch (freeSatEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (freeSatEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	epgEntry.Duration = Utils.RoundTime (freeSatEntry.Duration);  	epgEntry.EventID = freeSatEntry.EventID;  	epgEntry.EventName = freeSatEntry.EventName;  	if (freeSatEntry.ParentalRating > 11)  		epgEntry.ParentalRating = "AO";  	else {  		if (freeSatEntry.ParentalRating > 8)  			epgEntry.ParentalRating = "PGR";  		else  			epgEntry.ParentalRating = "G";  	}  	setSeriesEpisode (epgEntry' freeSatEntry);  	epgEntry.RunningStatus = freeSatEntry.RunningStatus;  	epgEntry.Scrambled = freeSatEntry.Scrambled;  	epgEntry.ShortDescription = freeSatEntry.ShortDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (freeSatEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' freeSatEntry.ContentType' freeSatEntry.ContentSubType);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (freeSatEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (freeSatEntry.ShortDescription' epgEntry' descriptionLogger);  	lastIndex = freeSatEntry.Index;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	FreeSatEntry freeSatEntry = new FreeSatEntry ();  	freeSatEntry.Process (byteData' lastIndex);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.FreeSat;  	switch (freeSatEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (freeSatEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	epgEntry.Duration = Utils.RoundTime (freeSatEntry.Duration);  	epgEntry.EventID = freeSatEntry.EventID;  	epgEntry.EventName = freeSatEntry.EventName;  	if (freeSatEntry.ParentalRating > 11)  		epgEntry.ParentalRating = "AO";  	else {  		if (freeSatEntry.ParentalRating > 8)  			epgEntry.ParentalRating = "PGR";  		else  			epgEntry.ParentalRating = "G";  	}  	setSeriesEpisode (epgEntry' freeSatEntry);  	epgEntry.RunningStatus = freeSatEntry.RunningStatus;  	epgEntry.Scrambled = freeSatEntry.Scrambled;  	epgEntry.ShortDescription = freeSatEntry.ShortDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (freeSatEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' freeSatEntry.ContentType' freeSatEntry.ContentSubType);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (freeSatEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (freeSatEntry.ShortDescription' epgEntry' descriptionLogger);  	lastIndex = freeSatEntry.Index;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	FreeSatEntry freeSatEntry = new FreeSatEntry ();  	freeSatEntry.Process (byteData' lastIndex);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.FreeSat;  	switch (freeSatEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (freeSatEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	epgEntry.Duration = Utils.RoundTime (freeSatEntry.Duration);  	epgEntry.EventID = freeSatEntry.EventID;  	epgEntry.EventName = freeSatEntry.EventName;  	if (freeSatEntry.ParentalRating > 11)  		epgEntry.ParentalRating = "AO";  	else {  		if (freeSatEntry.ParentalRating > 8)  			epgEntry.ParentalRating = "PGR";  		else  			epgEntry.ParentalRating = "G";  	}  	setSeriesEpisode (epgEntry' freeSatEntry);  	epgEntry.RunningStatus = freeSatEntry.RunningStatus;  	epgEntry.Scrambled = freeSatEntry.Scrambled;  	epgEntry.ShortDescription = freeSatEntry.ShortDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (freeSatEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' freeSatEntry.ContentType' freeSatEntry.ContentSubType);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (freeSatEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (freeSatEntry.ShortDescription' epgEntry' descriptionLogger);  	lastIndex = freeSatEntry.Index;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	FreeSatEntry freeSatEntry = new FreeSatEntry ();  	freeSatEntry.Process (byteData' lastIndex);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.FreeSat;  	switch (freeSatEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (freeSatEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	epgEntry.Duration = Utils.RoundTime (freeSatEntry.Duration);  	epgEntry.EventID = freeSatEntry.EventID;  	epgEntry.EventName = freeSatEntry.EventName;  	if (freeSatEntry.ParentalRating > 11)  		epgEntry.ParentalRating = "AO";  	else {  		if (freeSatEntry.ParentalRating > 8)  			epgEntry.ParentalRating = "PGR";  		else  			epgEntry.ParentalRating = "G";  	}  	setSeriesEpisode (epgEntry' freeSatEntry);  	epgEntry.RunningStatus = freeSatEntry.RunningStatus;  	epgEntry.Scrambled = freeSatEntry.Scrambled;  	epgEntry.ShortDescription = freeSatEntry.ShortDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (freeSatEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' freeSatEntry.ContentType' freeSatEntry.ContentSubType);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (freeSatEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (freeSatEntry.ShortDescription' epgEntry' descriptionLogger);  	lastIndex = freeSatEntry.Index;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	FreeSatEntry freeSatEntry = new FreeSatEntry ();  	freeSatEntry.Process (byteData' lastIndex);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.FreeSat;  	switch (freeSatEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (freeSatEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	epgEntry.Duration = Utils.RoundTime (freeSatEntry.Duration);  	epgEntry.EventID = freeSatEntry.EventID;  	epgEntry.EventName = freeSatEntry.EventName;  	if (freeSatEntry.ParentalRating > 11)  		epgEntry.ParentalRating = "AO";  	else {  		if (freeSatEntry.ParentalRating > 8)  			epgEntry.ParentalRating = "PGR";  		else  			epgEntry.ParentalRating = "G";  	}  	setSeriesEpisode (epgEntry' freeSatEntry);  	epgEntry.RunningStatus = freeSatEntry.RunningStatus;  	epgEntry.Scrambled = freeSatEntry.Scrambled;  	epgEntry.ShortDescription = freeSatEntry.ShortDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (freeSatEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' freeSatEntry.ContentType' freeSatEntry.ContentSubType);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (freeSatEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (freeSatEntry.ShortDescription' epgEntry' descriptionLogger);  	lastIndex = freeSatEntry.Index;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	FreeSatEntry freeSatEntry = new FreeSatEntry ();  	freeSatEntry.Process (byteData' lastIndex);  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.FreeSat;  	switch (freeSatEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (freeSatEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	epgEntry.Duration = Utils.RoundTime (freeSatEntry.Duration);  	epgEntry.EventID = freeSatEntry.EventID;  	epgEntry.EventName = freeSatEntry.EventName;  	if (freeSatEntry.ParentalRating > 11)  		epgEntry.ParentalRating = "AO";  	else {  		if (freeSatEntry.ParentalRating > 8)  			epgEntry.ParentalRating = "PGR";  		else  			epgEntry.ParentalRating = "G";  	}  	setSeriesEpisode (epgEntry' freeSatEntry);  	epgEntry.RunningStatus = freeSatEntry.RunningStatus;  	epgEntry.Scrambled = freeSatEntry.Scrambled;  	epgEntry.ShortDescription = freeSatEntry.ShortDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (freeSatEntry.StartTime));  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' freeSatEntry.ContentType' freeSatEntry.ContentSubType);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (freeSatEntry.EventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (freeSatEntry.ShortDescription' epgEntry' descriptionLogger);  	lastIndex = freeSatEntry.Index;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: switch (freeSatEntry.ComponentTypeAudio) {  case 3:  	epgEntry.AudioQuality = "stereo";  	break;  case 5:  	epgEntry.AudioQuality = "dolby digital";  	break;  default:  	break;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: switch (freeSatEntry.ComponentTypeAudio) {  case 3:  	epgEntry.AudioQuality = "stereo";  	break;  case 5:  	epgEntry.AudioQuality = "dolby digital";  	break;  default:  	break;  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: if (freeSatEntry.ComponentTypeVideo > 9)  	epgEntry.VideoQuality = "HDTV";  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: if (freeSatEntry.ParentalRating > 11)  	epgEntry.ParentalRating = "AO";  else {  	if (freeSatEntry.ParentalRating > 8)  		epgEntry.ParentalRating = "PGR";  	else  		epgEntry.ParentalRating = "G";  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: if (freeSatEntry.ParentalRating > 11)  	epgEntry.ParentalRating = "AO";  else {  	if (freeSatEntry.ParentalRating > 8)  		epgEntry.ParentalRating = "PGR";  	else  		epgEntry.ParentalRating = "G";  }  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,Process,The following statement contains a magic number: if (freeSatEntry.ParentalRating > 8)  	epgEntry.ParentalRating = "PGR";  else  	epgEntry.ParentalRating = "G";  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,processCRIDNumeric,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,FreeSatSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeSat\FreeSatSection.cs,processCRIDBSEPG,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 2;  
Magic Number,DVBServices,DVBContentIdentifierDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBContentIdentifierDescriptor.cs,Process,The following statement contains a magic number: try {  	contentType = (int)byteData [lastIndex] >> 2;  	contentLocation = (int)byteData [lastIndex] & 0x03;  	lastIndex++;  	int contentReferenceLength = (int)byteData [lastIndex];  	lastIndex++;  	if (contentReferenceLength != 0) {  		contentReference = Utils.GetString (byteData' lastIndex' contentReferenceLength);  		lastIndex += contentReferenceLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Content Identifier Descriptor message is short"));  }  
Magic Number,DVBServices,DVBContentIdentifierDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBContentIdentifierDescriptor.cs,Process,The following statement contains a magic number: contentType = (int)byteData [lastIndex] >> 2;  
Magic Number,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,Process,The following statement contains a magic number: try {  	channel = (int)byteData [lastIndex];  	lastIndex++;  	replayTime = getRepeatTime (byteData' lastIndex);  	lastIndex += 5;  	subtitled = (byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Replay data is short"));  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Replay data cause an overflow exception"));  }  catch (ArithmeticException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Replay data cause an arithmetic exception"));  }  
Magic Number,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,Process,The following statement contains a magic number: lastIndex += 5;  
Magic Number,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,getRepeatTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,getRepeatTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,getRepeatTime,The following statement contains a magic number: year = year + 1900 + adjust;  
Magic Number,DVBServices,MediaHighway1Replay,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Replay.cs,getRepeatTime,The following statement contains a magic number: month = month - 1 - (adjust * 12);  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: try {  	int p1 = 0;  	int p2 = 0;  	string themeName = null;  	for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  		p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  		for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  			p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  			MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  			categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  			if (descriptionIndex == 0) {  				themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  				categoryEntry.Description = themeName;  			}  			else  				categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			Categories.Add (categoryEntry);  		}  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int themeIndex = 0; themeIndex < categoryCount; themeIndex++) {  	p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  	for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  		p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  		if (descriptionIndex == 0) {  			themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  			categoryEntry.Description = themeName;  		}  		else  			categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		Categories.Add (categoryEntry);  	}  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p1 = ((byteData [lastIndex + (themeIndex * 2)] << 8) | byteData [lastIndex + 1 + (themeIndex * 2)]) + 3;  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  	p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  	if (descriptionIndex == 0) {  		themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		categoryEntry.Description = themeName;  	}  	else  		categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  	Categories.Add (categoryEntry);  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  	p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  	if (descriptionIndex == 0) {  		themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		categoryEntry.Description = themeName;  	}  	else  		categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  	Categories.Add (categoryEntry);  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  	p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  	if (descriptionIndex == 0) {  		themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		categoryEntry.Description = themeName;  	}  	else  		categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  	Categories.Add (categoryEntry);  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  	p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  	if (descriptionIndex == 0) {  		themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		categoryEntry.Description = themeName;  	}  	else  		categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  	Categories.Add (categoryEntry);  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  	p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  	if (descriptionIndex == 0) {  		themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		categoryEntry.Description = themeName;  	}  	else  		categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  	Categories.Add (categoryEntry);  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: for (int descriptionIndex = 0; descriptionIndex <= (byteData [p1] & 0x3f); descriptionIndex++) {  	p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  	if (descriptionIndex == 0) {  		themeName = Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  		categoryEntry.Description = themeName;  	}  	else  		categoryEntry.Description = themeName + " " + Utils.GetString (byteData' p2 + 1' byteData [p2] & 0x1f' true).Trim ();  	Categories.Add (categoryEntry);  }  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: p2 = ((byteData [p1 + 1 + (descriptionIndex * 2)] << 8) | byteData [p1 + 2 + (descriptionIndex * 2)] + 3);  
Magic Number,DVBServices,MediaHighway2CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2CategorySection.cs,Process,The following statement contains a magic number: categoryEntry.Number = ((themeIndex & 0x3f) << 6) | (descriptionIndex & 0x3f);  
Magic Number,DVBServices,MediaHighway2ChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2ChannelSection.cs,Process,The following statement contains a magic number: try {  	fillBytes = Utils.GetBytes (byteData' lastIndex' 117);  	lastIndex += fillBytes.Length;  	channelCount = (int)byteData [lastIndex];  	lastIndex++;  	int nameIndex = lastIndex + (8 * channelCount);  	while (Channels.Count < channelCount) {  		MediaHighwayChannelInfoEntry channelEntry = new MediaHighwayChannelInfoEntry ();  		channelEntry.Process (byteData' lastIndex' nameIndex);  		Channels.Add (channelEntry);  		lastIndex = channelEntry.Index;  		nameIndex = channelEntry.NameIndex;  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Channel Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2ChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2ChannelSection.cs,Process,The following statement contains a magic number: try {  	fillBytes = Utils.GetBytes (byteData' lastIndex' 117);  	lastIndex += fillBytes.Length;  	channelCount = (int)byteData [lastIndex];  	lastIndex++;  	int nameIndex = lastIndex + (8 * channelCount);  	while (Channels.Count < channelCount) {  		MediaHighwayChannelInfoEntry channelEntry = new MediaHighwayChannelInfoEntry ();  		channelEntry.Process (byteData' lastIndex' nameIndex);  		Channels.Add (channelEntry);  		lastIndex = channelEntry.Index;  		nameIndex = channelEntry.NameIndex;  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Channel Section message is short"));  }  
Magic Number,DVBServices,MediaHighway2ChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2ChannelSection.cs,Process,The following statement contains a magic number: fillBytes = Utils.GetBytes (byteData' lastIndex' 117);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getChannelSections,The following statement contains a magic number: channelReader = new TSStreamReader (0xc8' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getChannelSections,The following statement contains a magic number: while (!channelSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	channelReader.Lock ("ProcessMHW2Sections");  	if (channelReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in channelReader.Sections)  			sections.Add (section);  		channelReader.Sections.Clear ();  	}  	channelReader.Release ("ProcessMHW2Sections");  	if (sections.Count != 0)  		processChannelSections (sections);  	if (Channel.Channels.Count == lastCount) {  		repeats++;  		channelSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = Channel.Channels.Count;  }  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getChannelSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getCategorySections,The following statement contains a magic number: categoryReader = new TSStreamReader (0xc8' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getCategorySections,The following statement contains a magic number: while (!categorySectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	categoryReader.Lock ("ProcessMHW2Sections");  	if (categoryReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in categoryReader.Sections)  			sections.Add (section);  		categoryReader.Sections.Clear ();  	}  	categoryReader.Release ("ProcessMHW2Sections");  	if (sections.Count != 0)  		processCategorySections (sections);  	if (MediaHighwayProgramCategory.Categories.Count == lastCount) {  		repeats++;  		categorySectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = MediaHighwayProgramCategory.Categories.Count;  }  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getCategorySections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getTitleSections,The following statement contains a magic number: titleReader = new TSStreamReader (0xe6' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getTitleSections,The following statement contains a magic number: while (!titleSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (1000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	titleReader.Lock ("ProcessMHW2Sections");  	if (titleReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in titleReader.Sections)  			sections.Add (section);  		titleReader.Sections.Clear ();  	}  	titleReader.Release ("ProcessMHW2Sections");  	if (sections.Count != 0)  		processTitleSections (sections);  	titleDataCount = 0;  	foreach (MediaHighwayChannel channel in MediaHighwayChannel.Channels)  		titleDataCount += channel.Titles.Count;  	if (titleDataCount == lastCount) {  		repeats++;  		titleSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = titleDataCount;  }  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getTitleSections,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getSummarySections,The following statement contains a magic number: summaryReader = new TSStreamReader (0x96' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getSummarySections,The following statement contains a magic number: while (!summarySectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (1000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	summaryReader.Lock ("ProcessMHW2Sections");  	if (summaryReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in summaryReader.Sections)  			sections.Add (section);  		summaryReader.Sections.Clear ();  	}  	summaryReader.Release ("ProcessMHW2Sections");  	if (sections.Count != 0)  		processSummarySections (sections);  	if (MediaHighwaySummary.Summaries.Count == lastCount) {  		repeats++;  		summarySectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = MediaHighwaySummary.Summaries.Count;  }  
Magic Number,DVBServices,MediaHighway2Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2Controller.cs,getSummarySections,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 9);  	lastIndex += unknown.Length;  	if (unknown [1] != 0x00) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	if (unknown [2] != 0x00 && unknown [2] != 0x01) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	summaryLength = (int)byteData [lastIndex];  	lastIndex++;  	if (summaryLength == 0) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Summary Length Zero"' byteData' byteData.Length);  		}  		return (false);  	}  	shortDescription = Utils.GetString (byteData' lastIndex' summaryLength' true);  	lastIndex += summaryLength;  	lineCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	while (lineCount > 0) {  		lineLength = (int)byteData [lastIndex];  		lastIndex++;  		if (lineLength > 0) {  			shortDescription += " " + Utils.GetString (byteData' lastIndex' lineLength' true);  			lastIndex += lineLength;  		}  		lineCount--;  	}  	Validate ();  	return (true);  }  catch (IndexOutOfRangeException) {  	byte[] data = (Utils.GetBytes (byteData' 0' byteData.Length));  	Logger.Instance.Dump ("Exception Data"' data' data.Length);  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Summary Data message is short"));  }  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 9);  	lastIndex += unknown.Length;  	if (unknown [1] != 0x00) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	if (unknown [2] != 0x00 && unknown [2] != 0x01) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	summaryLength = (int)byteData [lastIndex];  	lastIndex++;  	if (summaryLength == 0) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Summary Length Zero"' byteData' byteData.Length);  		}  		return (false);  	}  	shortDescription = Utils.GetString (byteData' lastIndex' summaryLength' true);  	lastIndex += summaryLength;  	lineCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	while (lineCount > 0) {  		lineLength = (int)byteData [lastIndex];  		lastIndex++;  		if (lineLength > 0) {  			shortDescription += " " + Utils.GetString (byteData' lastIndex' lineLength' true);  			lastIndex += lineLength;  		}  		lineCount--;  	}  	Validate ();  	return (true);  }  catch (IndexOutOfRangeException) {  	byte[] data = (Utils.GetBytes (byteData' 0' byteData.Length));  	Logger.Instance.Dump ("Exception Data"' data' data.Length);  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Summary Data message is short"));  }  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 9);  	lastIndex += unknown.Length;  	if (unknown [1] != 0x00) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	if (unknown [2] != 0x00 && unknown [2] != 0x01) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	summaryLength = (int)byteData [lastIndex];  	lastIndex++;  	if (summaryLength == 0) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Summary Length Zero"' byteData' byteData.Length);  		}  		return (false);  	}  	shortDescription = Utils.GetString (byteData' lastIndex' summaryLength' true);  	lastIndex += summaryLength;  	lineCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	while (lineCount > 0) {  		lineLength = (int)byteData [lastIndex];  		lastIndex++;  		if (lineLength > 0) {  			shortDescription += " " + Utils.GetString (byteData' lastIndex' lineLength' true);  			lastIndex += lineLength;  		}  		lineCount--;  	}  	Validate ();  	return (true);  }  catch (IndexOutOfRangeException) {  	byte[] data = (Utils.GetBytes (byteData' 0' byteData.Length));  	Logger.Instance.Dump ("Exception Data"' data' data.Length);  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Summary Data message is short"));  }  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 9);  	lastIndex += unknown.Length;  	if (unknown [1] != 0x00) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	if (unknown [2] != 0x00 && unknown [2] != 0x01) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  		}  		return (false);  	}  	summaryLength = (int)byteData [lastIndex];  	lastIndex++;  	if (summaryLength == 0) {  		if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  			Logger.Instance.Write ("Index: " + index);  			Logger.Instance.Dump ("Summary Length Zero"' byteData' byteData.Length);  		}  		return (false);  	}  	shortDescription = Utils.GetString (byteData' lastIndex' summaryLength' true);  	lastIndex += summaryLength;  	lineCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	while (lineCount > 0) {  		lineLength = (int)byteData [lastIndex];  		lastIndex++;  		if (lineLength > 0) {  			shortDescription += " " + Utils.GetString (byteData' lastIndex' lineLength' true);  			lastIndex += lineLength;  		}  		lineCount--;  	}  	Validate ();  	return (true);  }  catch (IndexOutOfRangeException) {  	byte[] data = (Utils.GetBytes (byteData' 0' byteData.Length));  	Logger.Instance.Dump ("Exception Data"' data' data.Length);  	throw (new ArgumentOutOfRangeException ("The MediaHighway2 Summary Data message is short"));  }  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: unknown = Utils.GetBytes (byteData' lastIndex' 9);  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: if (unknown [2] != 0x00 && unknown [2] != 0x01) {  	if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  		Logger.Instance.Write ("Index: " + index);  		Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  	}  	return (false);  }  
Magic Number,DVBServices,MediaHighway2SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2SummaryData.cs,Process,The following statement contains a magic number: if (unknown [2] != 0x00 && unknown [2] != 0x01) {  	if (RunParameters.Instance.DebugIDs.Contains ("MHW2UNKNOWN")) {  		Logger.Instance.Write ("Index: " + index);  		Logger.Instance.Dump ("Unknown Data Block"' byteData' byteData.Length);  	}  	return (false);  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: try {  	unknown0 = Utils.GetBytes (byteData' 3' 15);  	channelID = (int)byteData [lastIndex] + 1;  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  	lastIndex += unknown1.Length;  	mainCategory = byteData [7] & 0x0f;  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  	lastIndex++;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex += unknown2.Length;  	int durationMinutes = (byteData [lastIndex] << 4) + (byteData [lastIndex + 1] >> 4);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	int eventNameLength = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventName = Utils.GetString (byteData' lastIndex' eventNameLength' true);  	lastIndex += eventNameLength;  	subCategory = byteData [lastIndex] & 0x3f;  	lastIndex++;  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: unknown0 = Utils.GetBytes (byteData' 3' 15);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: unknown0 = Utils.GetBytes (byteData' 3' 15);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: unknown1 = Utils.GetBytes (byteData' lastIndex' 10);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: mainCategory = byteData [7] & 0x0f;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: hours = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: minutes = ((byteData [lastIndex] >> 4) * 10) + (byteData [lastIndex] & 0x0f);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,MediaHighway2TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleData.cs,getDate,The following statement contains a magic number: j = m / 11;  
Magic Number,DVBServices,MediaHighway2TitleSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway2TitleSection.cs,Process,The following statement contains a magic number: unknown = Utils.GetBytes (byteData' lastIndex' 15);  
Magic Number,DVBServices,MediaHighwayProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				int number = Int32.Parse (parts [0]);  				AddCategory (number' line.Substring (parts [0].Length + 1));  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,MediaHighwayProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayProgramCategory.cs,Load,The following statement contains a magic number: if (line != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			int number = Int32.Parse (parts [0]);  			AddCategory (number' line.Substring (parts [0].Length + 1));  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,MediaHighwayProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		int number = Int32.Parse (parts [0]);  		AddCategory (number' line.Substring (parts [0].Length + 1));  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: try {  	while (descriptionIndex < byteData.Length) {  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		if (byteData [categoryID + 3] == categoryIndex) {  			categoryNumber = categoryID * 16;  			categoryID++;  		}  		categoryEntry.Number = categoryNumber;  		categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  		Categories.Add (categoryEntry);  		descriptionIndex += 15;  		categoryNumber++;  		categoryIndex++;  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: try {  	while (descriptionIndex < byteData.Length) {  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		if (byteData [categoryID + 3] == categoryIndex) {  			categoryNumber = categoryID * 16;  			categoryID++;  		}  		categoryEntry.Number = categoryNumber;  		categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  		Categories.Add (categoryEntry);  		descriptionIndex += 15;  		categoryNumber++;  		categoryIndex++;  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: try {  	while (descriptionIndex < byteData.Length) {  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		if (byteData [categoryID + 3] == categoryIndex) {  			categoryNumber = categoryID * 16;  			categoryID++;  		}  		categoryEntry.Number = categoryNumber;  		categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  		Categories.Add (categoryEntry);  		descriptionIndex += 15;  		categoryNumber++;  		categoryIndex++;  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: try {  	while (descriptionIndex < byteData.Length) {  		MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  		if (byteData [categoryID + 3] == categoryIndex) {  			categoryNumber = categoryID * 16;  			categoryID++;  		}  		categoryEntry.Number = categoryNumber;  		categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  		Categories.Add (categoryEntry);  		descriptionIndex += 15;  		categoryNumber++;  		categoryIndex++;  	}  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Category Section message is short"));  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: while (descriptionIndex < byteData.Length) {  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	if (byteData [categoryID + 3] == categoryIndex) {  		categoryNumber = categoryID * 16;  		categoryID++;  	}  	categoryEntry.Number = categoryNumber;  	categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  	Categories.Add (categoryEntry);  	descriptionIndex += 15;  	categoryNumber++;  	categoryIndex++;  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: while (descriptionIndex < byteData.Length) {  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	if (byteData [categoryID + 3] == categoryIndex) {  		categoryNumber = categoryID * 16;  		categoryID++;  	}  	categoryEntry.Number = categoryNumber;  	categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  	Categories.Add (categoryEntry);  	descriptionIndex += 15;  	categoryNumber++;  	categoryIndex++;  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: while (descriptionIndex < byteData.Length) {  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	if (byteData [categoryID + 3] == categoryIndex) {  		categoryNumber = categoryID * 16;  		categoryID++;  	}  	categoryEntry.Number = categoryNumber;  	categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  	Categories.Add (categoryEntry);  	descriptionIndex += 15;  	categoryNumber++;  	categoryIndex++;  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: while (descriptionIndex < byteData.Length) {  	MediaHighwayCategoryEntry categoryEntry = new MediaHighwayCategoryEntry ();  	if (byteData [categoryID + 3] == categoryIndex) {  		categoryNumber = categoryID * 16;  		categoryID++;  	}  	categoryEntry.Number = categoryNumber;  	categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  	Categories.Add (categoryEntry);  	descriptionIndex += 15;  	categoryNumber++;  	categoryIndex++;  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: if (byteData [categoryID + 3] == categoryIndex) {  	categoryNumber = categoryID * 16;  	categoryID++;  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: if (byteData [categoryID + 3] == categoryIndex) {  	categoryNumber = categoryID * 16;  	categoryID++;  }  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: categoryNumber = categoryID * 16;  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: categoryEntry.Description = Utils.GetString (byteData' descriptionIndex' 15' true).Trim ();  
Magic Number,DVBServices,MediaHighway1CategorySection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1CategorySection.cs,Process,The following statement contains a magic number: descriptionIndex += 15;  
Magic Number,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: foreach (MediaHighwayTitle title in Titles) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = OriginalNetworkID;  	epgEntry.TransportStreamID = TransportStreamID;  	epgEntry.ServiceID = ServiceID;  	epgEntry.EventID = title.EventID;  	processEventName (epgEntry' title.EventName);  	MediaHighwaySummary summary = null;  	if (title.SummaryAvailable) {  		summary = findSummary (title.EventID);  		if (summary != null)  			processShortDescription (epgEntry' summary.ShortDescription);  		else {  			if (RunParameters.Instance.DebugIDs.Contains ("MHW2SUMMARYMISSING"))  				Logger.Instance.Write ("Summary missing for event ID " + title.EventID);  		}  	}  	if (summary == null)  		epgEntry.ShortDescription = "No Synopsis Available";  	if (collectionType == CollectionType.MediaHighway1)  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (title.StartTime));  	else  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetAdjustedTime (title.StartTime));  	epgEntry.Duration = Utils.RoundTime (title.Duration);  	epgEntry.EventCategory = getEventCategory (epgEntry.EventName' epgEntry.ShortDescription' title.CategoryID);  	if (collectionType == CollectionType.MediaHighway1)  		epgEntry.EPGSource = EPGSource.MediaHighway1;  	else  		epgEntry.EPGSource = EPGSource.MediaHighway2;  	epgEntry.VideoQuality = getVideoQuality (epgEntry.EventName);  	epgEntry.PreviousPlayDate = title.PreviousPlayDate;  	station.AddEPGEntry (epgEntry);  	if (first) {  		expectedStartTime = new DateTime ();  		first = false;  	}  	else {  		if (epgEntry.StartTime < expectedStartTime) {  			if (titleLogger != null)  				titleLogger.Write (" ** Overlap In Schedule **");  		}  		else {  			if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  				if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  					if (titleLogger != null)  						titleLogger.Write (" ** Gap In Schedule **");  				}  			}  			else {  				if (epgEntry.StartTime > expectedStartTime) {  					if (titleLogger != null)  						titleLogger.Write (" ** Gap In Schedule **");  				}  			}  		}  	}  	expectedStartTime = epgEntry.StartTime + epgEntry.Duration;  	if (titleLogger != null) {  		if (collectionType == CollectionType.MediaHighway1)  			titleLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " Cat ID " + title.CategoryID.ToString ("00") + " Summary " + title.SummaryAvailable + ":" + (summary != null) + " " + " Orig Day " + title.LogDay + " Orig Hours " + title.LogHours + " YDay " + title.LogYesterday + " Day " + title.Day + " Hours " + title.Hours + " Mins " + title.Minutes + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title.EventName);  		else  			titleLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " Cat ID " + title.CategoryID.ToString ("000") + " Main cat " + title.MainCategory + " Sub cat " + title.SubCategory + " Summary " + title.SummaryAvailable + ":" + (summary != null) + " Unknown " + Utils.ConvertToHex (title.Unknown) + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + title.EventName);  	}  	if (descriptionLogger != null && summary != null) {  		if (collectionType == CollectionType.MediaHighway1)  			descriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " Rpts: " + summary.ReplayCount + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + summary.ShortDescription);  		else  			descriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Evt ID " + title.EventID + " " + " Unknown " + Utils.ConvertToHex (summary.Unknown) + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + summary.ShortDescription);  	}  	if (!RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  		if (epgEntry.StartTime.Second != 0) {  			if (titleLogger != null)  				titleLogger.Write ("** Suspect Start Time **");  		}  	}  }  
Magic Number,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (first) {  	expectedStartTime = new DateTime ();  	first = false;  }  else {  	if (epgEntry.StartTime < expectedStartTime) {  		if (titleLogger != null)  			titleLogger.Write (" ** Overlap In Schedule **");  	}  	else {  		if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  			if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  				if (titleLogger != null)  					titleLogger.Write (" ** Gap In Schedule **");  			}  		}  		else {  			if (epgEntry.StartTime > expectedStartTime) {  				if (titleLogger != null)  					titleLogger.Write (" ** Gap In Schedule **");  			}  		}  	}  }  
Magic Number,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (epgEntry.StartTime < expectedStartTime) {  	if (titleLogger != null)  		titleLogger.Write (" ** Overlap In Schedule **");  }  else {  	if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  		if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  			if (titleLogger != null)  				titleLogger.Write (" ** Gap In Schedule **");  		}  	}  	else {  		if (epgEntry.StartTime > expectedStartTime) {  			if (titleLogger != null)  				titleLogger.Write (" ** Gap In Schedule **");  		}  	}  }  
Magic Number,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  	if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  		if (titleLogger != null)  			titleLogger.Write (" ** Gap In Schedule **");  	}  }  else {  	if (epgEntry.StartTime > expectedStartTime) {  		if (titleLogger != null)  			titleLogger.Write (" ** Gap In Schedule **");  	}  }  
Magic Number,DVBServices,MediaHighwayChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  	if (titleLogger != null)  		titleLogger.Write (" ** Gap In Schedule **");  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	name = Utils.GetString (byteData' lastIndex' 16' true).Trim ();  	lastIndex += 16;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	name = Utils.GetString (byteData' lastIndex' 16' true).Trim ();  	lastIndex += 16;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	name = Utils.GetString (byteData' lastIndex' 16' true).Trim ();  	lastIndex += 16;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	name = Utils.GetString (byteData' lastIndex' 16' true).Trim ();  	lastIndex += 16;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	name = Utils.GetString (byteData' lastIndex' 16' true).Trim ();  	lastIndex += 16;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: name = Utils.GetString (byteData' lastIndex' 16' true).Trim ();  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 16;  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown.Length;  	int nameLength = (int)byteData [nameIndex] & 0x3f;  	nameIndex++;  	name = Utils.GetString (byteData' nameIndex' nameLength' true).Trim ();  	nameIndex += nameLength;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown.Length;  	int nameLength = (int)byteData [nameIndex] & 0x3f;  	nameIndex++;  	name = Utils.GetString (byteData' nameIndex' nameLength' true).Trim ();  	nameIndex += nameLength;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown.Length;  	int nameLength = (int)byteData [nameIndex] & 0x3f;  	nameIndex++;  	name = Utils.GetString (byteData' nameIndex' nameLength' true).Trim ();  	nameIndex += nameLength;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: try {  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	unknown = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown.Length;  	int nameLength = (int)byteData [nameIndex] & 0x3f;  	nameIndex++;  	name = Utils.GetString (byteData' nameIndex' nameLength' true).Trim ();  	nameIndex += nameLength;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway Channel Info Entry message is short"));  }  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighwayChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighwayChanneInfoEntry.cs,Process,The following statement contains a magic number: unknown = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,MediaHighway1SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1SummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	replayCount = (int)byteData [lastIndex];  	lastIndex++;  	if (replayCount != 0) {  		replays = new Collection<MediaHighway1Replay> ();  		int repeatLoop = 0;  		while (repeatLoop < replayCount) {  			MediaHighway1Replay replay = new MediaHighway1Replay ();  			replay.Process (byteData' lastIndex);  			replays.Add (replay);  			lastIndex = replay.Index;  			repeatLoop++;  		}  	}  	shortDescription = Utils.GetString (byteData' lastIndex' byteData.Length - lastIndex' true);  	lastIndex += (byteData.Length - lastIndex);  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message is short"));  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message cause an overflow exception"));  }  catch (ArithmeticException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message cause an arithmetic exception"));  }  
Magic Number,DVBServices,MediaHighway1SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1SummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	replayCount = (int)byteData [lastIndex];  	lastIndex++;  	if (replayCount != 0) {  		replays = new Collection<MediaHighway1Replay> ();  		int repeatLoop = 0;  		while (repeatLoop < replayCount) {  			MediaHighway1Replay replay = new MediaHighway1Replay ();  			replay.Process (byteData' lastIndex);  			replays.Add (replay);  			lastIndex = replay.Index;  			repeatLoop++;  		}  	}  	shortDescription = Utils.GetString (byteData' lastIndex' byteData.Length - lastIndex' true);  	lastIndex += (byteData.Length - lastIndex);  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message is short"));  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message cause an overflow exception"));  }  catch (ArithmeticException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message cause an arithmetic exception"));  }  
Magic Number,DVBServices,MediaHighway1SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1SummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	replayCount = (int)byteData [lastIndex];  	lastIndex++;  	if (replayCount != 0) {  		replays = new Collection<MediaHighway1Replay> ();  		int repeatLoop = 0;  		while (repeatLoop < replayCount) {  			MediaHighway1Replay replay = new MediaHighway1Replay ();  			replay.Process (byteData' lastIndex);  			replays.Add (replay);  			lastIndex = replay.Index;  			repeatLoop++;  		}  	}  	shortDescription = Utils.GetString (byteData' lastIndex' byteData.Length - lastIndex' true);  	lastIndex += (byteData.Length - lastIndex);  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message is short"));  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message cause an overflow exception"));  }  catch (ArithmeticException) {  	throw (new ArgumentOutOfRangeException ("The MediaHighway1 Summary Data message cause an arithmetic exception"));  }  
Magic Number,DVBServices,MediaHighway1SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1SummaryData.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,MediaHighway1SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1SummaryData.cs,Process,The following statement contains a magic number: unknown = Utils.GetBytes (byteData' lastIndex' 3);  
Magic Number,DVBServices,MediaHighway1SummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1SummaryData.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: try {  	channelID = (int)byteData [lastIndex];  	lastIndex++;  	if (channelID == 255) {  		empty = true;  		return;  	}  	categoryID = byteData [lastIndex];  	lastIndex++;  	day = byteData [lastIndex] >> 5;  	logDay = day;  	hours = byteData [lastIndex] & 0x1f;  	logHours = hours;  	lastIndex++;  	minutes = byteData [lastIndex] >> 2;  	DateTime yesterdayNow = DateTime.Now - new TimeSpan (1' 0' 0' 0);  	DateTime yesterday = new DateTime (yesterdayNow.Year' yesterdayNow.Month' yesterdayNow.Day);  	logYesterday = (int)yesterday.DayOfWeek;  	if (hours > 15)  		hours -= 4;  	else if (hours > 7)  		hours -= 2;  	else  		day++;  	if (day > 6)  		day -= 7;  	day -= (int)yesterday.DayOfWeek;  	if (day < 1)  		day = 7 + day;  	if (day == 1 && hours < 6)  		day = 8;  	startTime = yesterday + new TimeSpan (day' hours' minutes' 0);  	summaryAvailable = ((byteData [lastIndex] & 0x01) == 1);  	lastIndex++;  	unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += unknown1.Length;  	int durationMinutes = Utils.Convert2BytesToInt (byteData' lastIndex);  	duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  	lastIndex += 2;  	eventName = Utils.GetString (byteData' lastIndex' 23' true);  	lastIndex += 23;  	payPerViewID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	eventID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += unknown2.Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (channelID == 255) {  	empty = true;  	return;  }  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: day = byteData [lastIndex] >> 5;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: minutes = byteData [lastIndex] >> 2;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (hours > 15)  	hours -= 4;  else if (hours > 7)  	hours -= 2;  else  	day++;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (hours > 15)  	hours -= 4;  else if (hours > 7)  	hours -= 2;  else  	day++;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (hours > 15)  	hours -= 4;  else if (hours > 7)  	hours -= 2;  else  	day++;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (hours > 15)  	hours -= 4;  else if (hours > 7)  	hours -= 2;  else  	day++;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: hours -= 4;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (hours > 7)  	hours -= 2;  else  	day++;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (hours > 7)  	hours -= 2;  else  	day++;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: hours -= 2;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (day > 6)  	day -= 7;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (day > 6)  	day -= 7;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: day -= 7;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (day < 1)  	day = 7 + day;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: day = 7 + day;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (day == 1 && hours < 6)  	day = 8;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: if (day == 1 && hours < 6)  	day = 8;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: day = 8;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: unknown1 = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: duration = new TimeSpan (durationMinutes / 60' durationMinutes % 60' 0);  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: eventName = Utils.GetString (byteData' lastIndex' 23' true);  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: lastIndex += 23;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,MediaHighway1TitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1TitleData.cs,Process,The following statement contains a magic number: unknown2 = Utils.GetBytes (byteData' lastIndex' 4);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getChannelSections,The following statement contains a magic number: channelReader = new TSStreamReader (0x91' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getChannelSections,The following statement contains a magic number: while (!channelSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	channelReader.Lock ("ProcessMHW1Sections");  	if (channelReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in channelReader.Sections)  			sections.Add (section);  		channelReader.Sections.Clear ();  	}  	channelReader.Release ("ProcessMHW1Sections");  	if (sections.Count != 0)  		processChannelSections (sections);  	if (Channel.Channels.Count == lastCount) {  		repeats++;  		channelSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = Channel.Channels.Count;  }  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getChannelSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getCategorySections,The following statement contains a magic number: categoryReader = new TSStreamReader (0x92' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getCategorySections,The following statement contains a magic number: while (!categorySectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	categoryReader.Lock ("ProcessMHW1Sections");  	if (categoryReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in categoryReader.Sections)  			sections.Add (section);  		categoryReader.Sections.Clear ();  	}  	categoryReader.Release ("ProcessMHW1Sections");  	if (sections.Count != 0)  		processCategorySections (sections);  	if (MediaHighwayProgramCategory.Categories.Count == lastCount) {  		repeats++;  		categorySectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = MediaHighwayProgramCategory.Categories.Count;  }  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getCategorySections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getTitleSections,The following statement contains a magic number: titleReader = new TSStreamReader (0x90' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getTitleSections,The following statement contains a magic number: while (!titleSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (1000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	titleReader.Lock ("ProcessMHW1Sections");  	if (titleReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in titleReader.Sections)  			sections.Add (section);  		titleReader.Sections.Clear ();  	}  	titleReader.Release ("ProcessMHW1Sections");  	if (sections.Count != 0)  		processTitleSections (sections);  	titleDataCount = 0;  	foreach (MediaHighwayChannel channel in MediaHighwayChannel.Channels)  		titleDataCount += channel.Titles.Count;  	if (titleDataCount == lastCount) {  		repeats++;  		titleSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = titleDataCount;  }  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getTitleSections,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getSummarySections,The following statement contains a magic number: summaryReader = new TSStreamReader (0x90' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getSummarySections,The following statement contains a magic number: while (!summarySectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (1000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	summaryReader.Lock ("ProcessMHW1Sections");  	if (summaryReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in summaryReader.Sections)  			sections.Add (section);  		summaryReader.Sections.Clear ();  	}  	summaryReader.Release ("ProcessMHW1Sections");  	if (sections.Count != 0)  		processSummarySections (sections);  	if (MediaHighwaySummary.Summaries.Count == lastCount) {  		repeats++;  		summarySectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = MediaHighwaySummary.Summaries.Count;  }  
Magic Number,DVBServices,MediaHighway1Controller,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MediaHighway\MediaHighway1Controller.cs,getSummarySections,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DVBServices,BIOPLiteComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPLiteComponent.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	dataLength = (int)byteData [lastIndex];  	lastIndex++;  	if (dataLength != 0) {  		data = Utils.GetBytes (byteData' lastIndex' dataLength);  		lastIndex += dataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Lite Component message is short"));  }  
Magic Number,DVBServices,BIOPLiteComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPLiteComponent.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: try {  	magic = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	messageType = (int)byteData [lastIndex];  	lastIndex++;  	messageSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	objectKindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (objectKindLength != 0) {  		objectKindData = Utils.GetBytes (byteData' lastIndex' objectKindLength);  		lastIndex += objectKindLength;  	}  	objectInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (objectKindLength != 4)  		return;  	if (Utils.CompareBytes (objectKindData' biopFile)) {  		messageDetail = new BIOPFileMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopDirectory)) {  		messageDetail = new BIOPDirectoryMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopSRG)) {  		messageDetail = new BIOPServiceGatewayMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP message is short"));  }  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: try {  	magic = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	messageType = (int)byteData [lastIndex];  	lastIndex++;  	messageSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	objectKindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (objectKindLength != 0) {  		objectKindData = Utils.GetBytes (byteData' lastIndex' objectKindLength);  		lastIndex += objectKindLength;  	}  	objectInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (objectKindLength != 4)  		return;  	if (Utils.CompareBytes (objectKindData' biopFile)) {  		messageDetail = new BIOPFileMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopDirectory)) {  		messageDetail = new BIOPDirectoryMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopSRG)) {  		messageDetail = new BIOPServiceGatewayMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP message is short"));  }  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: try {  	magic = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	messageType = (int)byteData [lastIndex];  	lastIndex++;  	messageSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	objectKindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (objectKindLength != 0) {  		objectKindData = Utils.GetBytes (byteData' lastIndex' objectKindLength);  		lastIndex += objectKindLength;  	}  	objectInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (objectKindLength != 4)  		return;  	if (Utils.CompareBytes (objectKindData' biopFile)) {  		messageDetail = new BIOPFileMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopDirectory)) {  		messageDetail = new BIOPDirectoryMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopSRG)) {  		messageDetail = new BIOPServiceGatewayMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP message is short"));  }  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: try {  	magic = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	messageType = (int)byteData [lastIndex];  	lastIndex++;  	messageSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	objectKindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (objectKindLength != 0) {  		objectKindData = Utils.GetBytes (byteData' lastIndex' objectKindLength);  		lastIndex += objectKindLength;  	}  	objectInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (objectKindLength != 4)  		return;  	if (Utils.CompareBytes (objectKindData' biopFile)) {  		messageDetail = new BIOPFileMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopDirectory)) {  		messageDetail = new BIOPDirectoryMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopSRG)) {  		messageDetail = new BIOPServiceGatewayMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP message is short"));  }  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: try {  	magic = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	messageType = (int)byteData [lastIndex];  	lastIndex++;  	messageSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	objectKindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (objectKindLength != 0) {  		objectKindData = Utils.GetBytes (byteData' lastIndex' objectKindLength);  		lastIndex += objectKindLength;  	}  	objectInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (objectKindLength != 4)  		return;  	if (Utils.CompareBytes (objectKindData' biopFile)) {  		messageDetail = new BIOPFileMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopDirectory)) {  		messageDetail = new BIOPDirectoryMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopSRG)) {  		messageDetail = new BIOPServiceGatewayMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP message is short"));  }  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: try {  	magic = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	messageType = (int)byteData [lastIndex];  	lastIndex++;  	messageSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	objectKindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (objectKindLength != 0) {  		objectKindData = Utils.GetBytes (byteData' lastIndex' objectKindLength);  		lastIndex += objectKindLength;  	}  	objectInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (objectKindLength != 4)  		return;  	if (Utils.CompareBytes (objectKindData' biopFile)) {  		messageDetail = new BIOPFileMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopDirectory)) {  		messageDetail = new BIOPDirectoryMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	if (Utils.CompareBytes (objectKindData' biopSRG)) {  		messageDetail = new BIOPServiceGatewayMessage ();  		messageDetail.Process (byteData' lastIndex' objectInfoLength);  		return;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP message is short"));  }  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: magic = Utils.GetBytes (byteData' lastIndex' 4);  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPMessage.cs,Process,The following statement contains a magic number: if (objectKindLength != 4)  	return;  
Magic Number,DVBServices,BIOPBinding,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPBinding.cs,Process,The following statement contains a magic number: try {  	nameCount = (int)byteData [lastIndex];  	lastIndex++;  	if (nameCount != 0) {  		names = new Collection<BIOPName> ();  		while (names.Count != nameCount) {  			BIOPName name = new BIOPName ();  			name.Process (byteData' lastIndex);  			names.Add (name);  			lastIndex = name.Index;  		}  	}  	bindingType = (int)byteData [lastIndex];  	lastIndex++;  	iopIOR = new IOPIOR ();  	iopIOR.Process (byteData' lastIndex);  	lastIndex = iopIOR.Index;  	objectInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (objectInfoLength != 0) {  		objectInfo = Utils.GetBytes (byteData' lastIndex' objectInfoLength);  		lastIndex += objectInfoLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Binding message is short"));  }  
Magic Number,DVBServices,BIOPBinding,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPBinding.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPDirectoryMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPDirectoryMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength > 0) {  		objectInfoData = Utils.GetBytes (byteData' lastIndex' objectInfoLength);  		lastIndex += objectInfoLength;  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	bindingsCount = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (bindingsCount != 0) {  		bindings = new Collection<BIOPBinding> ();  		while (bindings.Count != bindingsCount) {  			BIOPBinding binding = new BIOPBinding ();  			binding.Process (byteData' lastIndex);  			bindings.Add (binding);  			lastIndex = binding.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Directory message is short"));  }  
Magic Number,DVBServices,BIOPDirectoryMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPDirectoryMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength > 0) {  		objectInfoData = Utils.GetBytes (byteData' lastIndex' objectInfoLength);  		lastIndex += objectInfoLength;  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	bindingsCount = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (bindingsCount != 0) {  		bindings = new Collection<BIOPBinding> ();  		while (bindings.Count != bindingsCount) {  			BIOPBinding binding = new BIOPBinding ();  			binding.Process (byteData' lastIndex);  			bindings.Add (binding);  			lastIndex = binding.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Directory message is short"));  }  
Magic Number,DVBServices,BIOPDirectoryMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPDirectoryMessage.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPDirectoryMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPDirectoryMessage.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength != 0) {  		fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  		lastIndex += 8;  		if (objectInfoLength > 8) {  			contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  			int workingLength = objectInfoLength - 8;  			while (workingLength != 0) {  				MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  				descriptor.Process (byteData' lastIndex);  				contentTypeDescriptors.Add (descriptor);  				workingLength = descriptor.Index - lastIndex;  				lastIndex = descriptor.Index;  			}  		}  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	contentLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (contentLength != 0) {  		contentData = Utils.GetBytes (byteData' lastIndex' contentLength);  		lastIndex += contentLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP File message is short"));  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength != 0) {  		fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  		lastIndex += 8;  		if (objectInfoLength > 8) {  			contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  			int workingLength = objectInfoLength - 8;  			while (workingLength != 0) {  				MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  				descriptor.Process (byteData' lastIndex);  				contentTypeDescriptors.Add (descriptor);  				workingLength = descriptor.Index - lastIndex;  				lastIndex = descriptor.Index;  			}  		}  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	contentLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (contentLength != 0) {  		contentData = Utils.GetBytes (byteData' lastIndex' contentLength);  		lastIndex += contentLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP File message is short"));  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength != 0) {  		fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  		lastIndex += 8;  		if (objectInfoLength > 8) {  			contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  			int workingLength = objectInfoLength - 8;  			while (workingLength != 0) {  				MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  				descriptor.Process (byteData' lastIndex);  				contentTypeDescriptors.Add (descriptor);  				workingLength = descriptor.Index - lastIndex;  				lastIndex = descriptor.Index;  			}  		}  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	contentLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (contentLength != 0) {  		contentData = Utils.GetBytes (byteData' lastIndex' contentLength);  		lastIndex += contentLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP File message is short"));  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength != 0) {  		fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  		lastIndex += 8;  		if (objectInfoLength > 8) {  			contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  			int workingLength = objectInfoLength - 8;  			while (workingLength != 0) {  				MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  				descriptor.Process (byteData' lastIndex);  				contentTypeDescriptors.Add (descriptor);  				workingLength = descriptor.Index - lastIndex;  				lastIndex = descriptor.Index;  			}  		}  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	contentLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (contentLength != 0) {  		contentData = Utils.GetBytes (byteData' lastIndex' contentLength);  		lastIndex += contentLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP File message is short"));  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength != 0) {  		fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  		lastIndex += 8;  		if (objectInfoLength > 8) {  			contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  			int workingLength = objectInfoLength - 8;  			while (workingLength != 0) {  				MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  				descriptor.Process (byteData' lastIndex);  				contentTypeDescriptors.Add (descriptor);  				workingLength = descriptor.Index - lastIndex;  				lastIndex = descriptor.Index;  			}  		}  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	contentLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (contentLength != 0) {  		contentData = Utils.GetBytes (byteData' lastIndex' contentLength);  		lastIndex += contentLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP File message is short"));  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: if (objectInfoLength != 0) {  	fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  	lastIndex += 8;  	if (objectInfoLength > 8) {  		contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  		int workingLength = objectInfoLength - 8;  		while (workingLength != 0) {  			MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  			descriptor.Process (byteData' lastIndex);  			contentTypeDescriptors.Add (descriptor);  			workingLength = descriptor.Index - lastIndex;  			lastIndex = descriptor.Index;  		}  	}  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: if (objectInfoLength != 0) {  	fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  	lastIndex += 8;  	if (objectInfoLength > 8) {  		contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  		int workingLength = objectInfoLength - 8;  		while (workingLength != 0) {  			MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  			descriptor.Process (byteData' lastIndex);  			contentTypeDescriptors.Add (descriptor);  			workingLength = descriptor.Index - lastIndex;  			lastIndex = descriptor.Index;  		}  	}  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: if (objectInfoLength != 0) {  	fileContentSize = Utils.Convert8BytesToLong (byteData' lastIndex);  	lastIndex += 8;  	if (objectInfoLength > 8) {  		contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  		int workingLength = objectInfoLength - 8;  		while (workingLength != 0) {  			MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  			descriptor.Process (byteData' lastIndex);  			contentTypeDescriptors.Add (descriptor);  			workingLength = descriptor.Index - lastIndex;  			lastIndex = descriptor.Index;  		}  	}  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: lastIndex += 8;  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: if (objectInfoLength > 8) {  	contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  	int workingLength = objectInfoLength - 8;  	while (workingLength != 0) {  		MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  		descriptor.Process (byteData' lastIndex);  		contentTypeDescriptors.Add (descriptor);  		workingLength = descriptor.Index - lastIndex;  		lastIndex = descriptor.Index;  	}  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: if (objectInfoLength > 8) {  	contentTypeDescriptors = new Collection<MHPContentTypeDescriptor> ();  	int workingLength = objectInfoLength - 8;  	while (workingLength != 0) {  		MHPContentTypeDescriptor descriptor = new MHPContentTypeDescriptor ();  		descriptor.Process (byteData' lastIndex);  		contentTypeDescriptors.Add (descriptor);  		workingLength = descriptor.Index - lastIndex;  		lastIndex = descriptor.Index;  	}  }  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,LogMessage,The following statement contains a magic number: if (contentData.Length < 16)  	contentLogSize = contentData.Length;  else  	contentLogSize = 16;  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,LogMessage,The following statement contains a magic number: if (contentData.Length < 16)  	contentLogSize = contentData.Length;  else  	contentLogSize = 16;  
Magic Number,DVBServices,BIOPFileMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPFileMessage.cs,LogMessage,The following statement contains a magic number: contentLogSize = 16;  
Magic Number,DVBServices,BIOPModuleInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPModuleInfo.cs,Process,The following statement contains a magic number: try {  	moduleTimeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockTimeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	minimumBlockTime = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tapsCount = (int)byteData [lastIndex];  	lastIndex++;  	if (tapsCount != 0) {  		taps = new Collection<BIOPTap> ();  		while (taps.Count < tapsCount) {  			BIOPTap tap = new BIOPTap ();  			tap.Process (byteData' lastIndex);  			taps.Add (tap);  			lastIndex = tap.Index;  		}  	}  	userInfoLength = (int)byteData [lastIndex];  	lastIndex++;  	if (userInfoLength != 0) {  		descriptors = new Collection<BIOPDescriptor> ();  		while (userInfoLength > 0) {  			BIOPDescriptor descriptor = BIOPDescriptor.Create (byteData' lastIndex);  			descriptors.Add (descriptor);  			userInfoLength -= (descriptor.Index - lastIndex);  			lastIndex = descriptor.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Module Info message is short"));  }  
Magic Number,DVBServices,BIOPModuleInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPModuleInfo.cs,Process,The following statement contains a magic number: try {  	moduleTimeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockTimeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	minimumBlockTime = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tapsCount = (int)byteData [lastIndex];  	lastIndex++;  	if (tapsCount != 0) {  		taps = new Collection<BIOPTap> ();  		while (taps.Count < tapsCount) {  			BIOPTap tap = new BIOPTap ();  			tap.Process (byteData' lastIndex);  			taps.Add (tap);  			lastIndex = tap.Index;  		}  	}  	userInfoLength = (int)byteData [lastIndex];  	lastIndex++;  	if (userInfoLength != 0) {  		descriptors = new Collection<BIOPDescriptor> ();  		while (userInfoLength > 0) {  			BIOPDescriptor descriptor = BIOPDescriptor.Create (byteData' lastIndex);  			descriptors.Add (descriptor);  			userInfoLength -= (descriptor.Index - lastIndex);  			lastIndex = descriptor.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Module Info message is short"));  }  
Magic Number,DVBServices,BIOPModuleInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPModuleInfo.cs,Process,The following statement contains a magic number: try {  	moduleTimeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockTimeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	minimumBlockTime = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tapsCount = (int)byteData [lastIndex];  	lastIndex++;  	if (tapsCount != 0) {  		taps = new Collection<BIOPTap> ();  		while (taps.Count < tapsCount) {  			BIOPTap tap = new BIOPTap ();  			tap.Process (byteData' lastIndex);  			taps.Add (tap);  			lastIndex = tap.Index;  		}  	}  	userInfoLength = (int)byteData [lastIndex];  	lastIndex++;  	if (userInfoLength != 0) {  		descriptors = new Collection<BIOPDescriptor> ();  		while (userInfoLength > 0) {  			BIOPDescriptor descriptor = BIOPDescriptor.Create (byteData' lastIndex);  			descriptors.Add (descriptor);  			userInfoLength -= (descriptor.Index - lastIndex);  			lastIndex = descriptor.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Module Info message is short"));  }  
Magic Number,DVBServices,BIOPModuleInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPModuleInfo.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPModuleInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPModuleInfo.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPModuleInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPModuleInfo.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = (int)byteData [lastIndex];  	lastIndex++;  	carouselID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Object Location message is short"));  }  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = (int)byteData [lastIndex];  	lastIndex++;  	carouselID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Object Location message is short"));  }  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = (int)byteData [lastIndex];  	lastIndex++;  	carouselID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Object Location message is short"));  }  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = (int)byteData [lastIndex];  	lastIndex++;  	carouselID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	majorVersion = (int)byteData [lastIndex];  	lastIndex++;  	minorVersion = (int)byteData [lastIndex];  	lastIndex++;  	objectKeyLength = (int)byteData [lastIndex];  	lastIndex++;  	if (objectKeyLength != 0) {  		objectKeyData = Utils.GetBytes (byteData' lastIndex' objectKeyLength);  		lastIndex += objectKeyLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Object Location message is short"));  }  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPObjectLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPObjectLocation.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPProfileBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBase.cs,Process,The following statement contains a magic number: try {  	profileIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	if (Utils.CompareBytes (profileIDTag' BIOPProfileBody.Tag)) {  		profileBody = new BIOPProfileBody ();  		profileBody.Process (byteData' lastIndex);  		lastIndex = profileBody.Index;  	}  	else {  		if (Utils.CompareBytes (profileIDTag' BIOPLiteOptionsProfileBody.Tag)) {  			liteOptionsProfileBody = new BIOPLiteOptionsProfileBody ();  			liteOptionsProfileBody.Process (byteData' lastIndex);  			lastIndex = liteOptionsProfileBody.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Profile message is short"));  }  
Magic Number,DVBServices,BIOPProfileBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBase.cs,Process,The following statement contains a magic number: try {  	profileIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	if (Utils.CompareBytes (profileIDTag' BIOPProfileBody.Tag)) {  		profileBody = new BIOPProfileBody ();  		profileBody.Process (byteData' lastIndex);  		lastIndex = profileBody.Index;  	}  	else {  		if (Utils.CompareBytes (profileIDTag' BIOPLiteOptionsProfileBody.Tag)) {  			liteOptionsProfileBody = new BIOPLiteOptionsProfileBody ();  			liteOptionsProfileBody.Process (byteData' lastIndex);  			lastIndex = liteOptionsProfileBody.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Profile message is short"));  }  
Magic Number,DVBServices,BIOPProfileBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBase.cs,Process,The following statement contains a magic number: try {  	profileIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	byteOrder = (int)byteData [lastIndex];  	lastIndex++;  	if (Utils.CompareBytes (profileIDTag' BIOPProfileBody.Tag)) {  		profileBody = new BIOPProfileBody ();  		profileBody.Process (byteData' lastIndex);  		lastIndex = profileBody.Index;  	}  	else {  		if (Utils.CompareBytes (profileIDTag' BIOPLiteOptionsProfileBody.Tag)) {  			liteOptionsProfileBody = new BIOPLiteOptionsProfileBody ();  			liteOptionsProfileBody.Process (byteData' lastIndex);  			lastIndex = liteOptionsProfileBody.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Profile message is short"));  }  
Magic Number,DVBServices,BIOPProfileBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBase.cs,Process,The following statement contains a magic number: profileIDTag = Utils.GetBytes (byteData' lastIndex' 4);  
Magic Number,DVBServices,BIOPProfileBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBase.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPProfileBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBase.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPProfileBody,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBody.cs,Process,The following statement contains a magic number: try {  	componentsCount = (int)byteData [lastIndex];  	lastIndex++;  	objectLocation = new BIOPObjectLocation ();  	objectLocation.Process (byteData' lastIndex);  	lastIndex = objectLocation.Index;  	connectionBinder = new DSMConnBinder ();  	connectionBinder.Process (byteData' lastIndex);  	lastIndex = connectionBinder.Index;  	if (componentsCount > 2) {  		liteComponents = new Collection<BIOPLiteComponent> ();  		while (liteComponents.Count != componentsCount - 2) {  			BIOPLiteComponent liteComponent = new BIOPLiteComponent ();  			liteComponent.Process (byteData' lastIndex);  			liteComponents.Add (liteComponent);  			lastIndex = liteComponent.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Profile Body message is short"));  }  
Magic Number,DVBServices,BIOPProfileBody,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBody.cs,Process,The following statement contains a magic number: try {  	componentsCount = (int)byteData [lastIndex];  	lastIndex++;  	objectLocation = new BIOPObjectLocation ();  	objectLocation.Process (byteData' lastIndex);  	lastIndex = objectLocation.Index;  	connectionBinder = new DSMConnBinder ();  	connectionBinder.Process (byteData' lastIndex);  	lastIndex = connectionBinder.Index;  	if (componentsCount > 2) {  		liteComponents = new Collection<BIOPLiteComponent> ();  		while (liteComponents.Count != componentsCount - 2) {  			BIOPLiteComponent liteComponent = new BIOPLiteComponent ();  			liteComponent.Process (byteData' lastIndex);  			liteComponents.Add (liteComponent);  			lastIndex = liteComponent.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Profile Body message is short"));  }  
Magic Number,DVBServices,BIOPProfileBody,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBody.cs,Process,The following statement contains a magic number: if (componentsCount > 2) {  	liteComponents = new Collection<BIOPLiteComponent> ();  	while (liteComponents.Count != componentsCount - 2) {  		BIOPLiteComponent liteComponent = new BIOPLiteComponent ();  		liteComponent.Process (byteData' lastIndex);  		liteComponents.Add (liteComponent);  		lastIndex = liteComponent.Index;  	}  }  
Magic Number,DVBServices,BIOPProfileBody,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBody.cs,Process,The following statement contains a magic number: if (componentsCount > 2) {  	liteComponents = new Collection<BIOPLiteComponent> ();  	while (liteComponents.Count != componentsCount - 2) {  		BIOPLiteComponent liteComponent = new BIOPLiteComponent ();  		liteComponent.Process (byteData' lastIndex);  		liteComponents.Add (liteComponent);  		lastIndex = liteComponent.Index;  	}  }  
Magic Number,DVBServices,BIOPProfileBody,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPProfileBody.cs,Process,The following statement contains a magic number: while (liteComponents.Count != componentsCount - 2) {  	BIOPLiteComponent liteComponent = new BIOPLiteComponent ();  	liteComponent.Process (byteData' lastIndex);  	liteComponents.Add (liteComponent);  	lastIndex = liteComponent.Index;  }  
Magic Number,DVBServices,BIOPServiceContext,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceContext.cs,Process,The following statement contains a magic number: try {  	contextID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	dataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (dataLength != 0) {  		contextData = Utils.GetBytes (byteData' lastIndex' dataLength);  		lastIndex += dataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Service Context message is short"));  }  
Magic Number,DVBServices,BIOPServiceContext,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceContext.cs,Process,The following statement contains a magic number: try {  	contextID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	dataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (dataLength != 0) {  		contextData = Utils.GetBytes (byteData' lastIndex' dataLength);  		lastIndex += dataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Service Context message is short"));  }  
Magic Number,DVBServices,BIOPServiceContext,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceContext.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPServiceContext,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceContext.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPServiceGatewayMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceGatewayMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength > 0) {  		objectInfoData = Utils.GetBytes (byteData' lastIndex' objectInfoLength);  		lastIndex += objectInfoLength;  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	bindingsCount = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (bindingsCount != 0) {  		bindings = new Collection<BIOPBinding> ();  		while (bindings.Count != bindingsCount) {  			BIOPBinding binding = new BIOPBinding ();  			binding.Process (byteData' lastIndex);  			bindings.Add (binding);  			lastIndex = binding.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Service Gateway message is short"));  }  
Magic Number,DVBServices,BIOPServiceGatewayMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceGatewayMessage.cs,Process,The following statement contains a magic number: try {  	if (objectInfoLength > 0) {  		objectInfoData = Utils.GetBytes (byteData' lastIndex' objectInfoLength);  		lastIndex += objectInfoLength;  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count != serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	messageBodyLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	bindingsCount = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (bindingsCount != 0) {  		bindings = new Collection<BIOPBinding> ();  		while (bindings.Count != bindingsCount) {  			BIOPBinding binding = new BIOPBinding ();  			binding.Process (byteData' lastIndex);  			bindings.Add (binding);  			lastIndex = binding.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Service Gateway message is short"));  }  
Magic Number,DVBServices,BIOPServiceGatewayMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceGatewayMessage.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPServiceGatewayMessage,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPServiceGatewayMessage.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPTapSelector,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTapSelector.cs,Process,The following statement contains a magic number: try {  	selectorType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transactionID = new DSMCCTransactionID (Utils.Convert4BytesToInt (byteData' lastIndex));  	lastIndex += 4;  	timeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Tap Selector message is short"));  }  
Magic Number,DVBServices,BIOPTapSelector,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTapSelector.cs,Process,The following statement contains a magic number: try {  	selectorType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transactionID = new DSMCCTransactionID (Utils.Convert4BytesToInt (byteData' lastIndex));  	lastIndex += 4;  	timeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Tap Selector message is short"));  }  
Magic Number,DVBServices,BIOPTapSelector,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTapSelector.cs,Process,The following statement contains a magic number: try {  	selectorType = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transactionID = new DSMCCTransactionID (Utils.Convert4BytesToInt (byteData' lastIndex));  	lastIndex += 4;  	timeout = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Tap Selector message is short"));  }  
Magic Number,DVBServices,BIOPTapSelector,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTapSelector.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPTapSelector,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTapSelector.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,BIOPTapSelector,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTapSelector.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: try {  	streamContent = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (streamContent) {  	case 1:  	case 5:  		componentTypeVideo = (int)byteData [lastIndex];  		break;  	case 2:  		componentTypeAudio = (int)byteData [lastIndex];  		break;  	case 3:  		componentTypeSubtitles = (int)byteData [lastIndex];  		break;  	default:  		break;  	}  	lastIndex++;  	componentTag = (int)byteData [lastIndex];  	lastIndex++;  	languageCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int textLength = Length - (lastIndex - index);  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The DVB Component Descriptor message is short"));  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: try {  	streamContent = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (streamContent) {  	case 1:  	case 5:  		componentTypeVideo = (int)byteData [lastIndex];  		break;  	case 2:  		componentTypeAudio = (int)byteData [lastIndex];  		break;  	case 3:  		componentTypeSubtitles = (int)byteData [lastIndex];  		break;  	default:  		break;  	}  	lastIndex++;  	componentTag = (int)byteData [lastIndex];  	lastIndex++;  	languageCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int textLength = Length - (lastIndex - index);  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The DVB Component Descriptor message is short"));  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: try {  	streamContent = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (streamContent) {  	case 1:  	case 5:  		componentTypeVideo = (int)byteData [lastIndex];  		break;  	case 2:  		componentTypeAudio = (int)byteData [lastIndex];  		break;  	case 3:  		componentTypeSubtitles = (int)byteData [lastIndex];  		break;  	default:  		break;  	}  	lastIndex++;  	componentTag = (int)byteData [lastIndex];  	lastIndex++;  	languageCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int textLength = Length - (lastIndex - index);  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The DVB Component Descriptor message is short"));  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: try {  	streamContent = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (streamContent) {  	case 1:  	case 5:  		componentTypeVideo = (int)byteData [lastIndex];  		break;  	case 2:  		componentTypeAudio = (int)byteData [lastIndex];  		break;  	case 3:  		componentTypeSubtitles = (int)byteData [lastIndex];  		break;  	default:  		break;  	}  	lastIndex++;  	componentTag = (int)byteData [lastIndex];  	lastIndex++;  	languageCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int textLength = Length - (lastIndex - index);  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The DVB Component Descriptor message is short"));  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: try {  	streamContent = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (streamContent) {  	case 1:  	case 5:  		componentTypeVideo = (int)byteData [lastIndex];  		break;  	case 2:  		componentTypeAudio = (int)byteData [lastIndex];  		break;  	case 3:  		componentTypeSubtitles = (int)byteData [lastIndex];  		break;  	default:  		break;  	}  	lastIndex++;  	componentTag = (int)byteData [lastIndex];  	lastIndex++;  	languageCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int textLength = Length - (lastIndex - index);  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (OverflowException) {  	throw (new ArgumentOutOfRangeException ("The DVB Component Descriptor message is short"));  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: switch (streamContent) {  case 1:  case 5:  	componentTypeVideo = (int)byteData [lastIndex];  	break;  case 2:  	componentTypeAudio = (int)byteData [lastIndex];  	break;  case 3:  	componentTypeSubtitles = (int)byteData [lastIndex];  	break;  default:  	break;  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: switch (streamContent) {  case 1:  case 5:  	componentTypeVideo = (int)byteData [lastIndex];  	break;  case 2:  	componentTypeAudio = (int)byteData [lastIndex];  	break;  case 3:  	componentTypeSubtitles = (int)byteData [lastIndex];  	break;  default:  	break;  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: switch (streamContent) {  case 1:  case 5:  	componentTypeVideo = (int)byteData [lastIndex];  	break;  case 2:  	componentTypeAudio = (int)byteData [lastIndex];  	break;  case 3:  	componentTypeSubtitles = (int)byteData [lastIndex];  	break;  default:  	break;  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: languageCode = Utils.GetBytes (byteData' lastIndex' 3);  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (streamContent) {  case 1:  	switch (componentTypeVideo) {  	case 1:  		return ("MPEG2 video' 4:3' 25Hz");  	case 2:  	case 3:  		return ("MPEG2 video' 16:9' 25Hz");  	case 4:  		return ("MPEG2 video' >16:9' 25Hz");  	case 5:  		return ("MPEG2 video' 4:3' 30Hz");  	case 6:  	case 7:  		return ("MPEG2 video' 16:9' 30Hz");  	case 8:  		return ("MPEG2 video' >16:9' 30Hz");  	case 9:  		return ("MPEG2 video' 4:3' 25Hz");  	case 0x0a:  	case 0x0b:  		return ("MPEG2 HD video' 16:9' 25Hz");  	case 0x0c:  		return ("MPEG2 HD video' >16:9' 25Hz");  	case 0x0d:  		return ("MPEG2 HD video' 4:3' 30Hz");  	case 0x0e:  	case 0x0f:  		return ("MPEG2 HD video' 16:9' 30Hz");  	case 0x10:  		return ("MPEG2 HD video' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 2:  	switch (componentTypeAudio) {  	case 1:  	case 2:  		return ("MPEG1 audio' mono");  	case 3:  		return ("MPEG1 audio' stereo");  	case 4:  		return ("MPEG1 audio' multi-lingual' multi-channel");  	case 5:  		return ("MPEG1 audio' surround sound");  	case 0x40:  		return ("MPEG1 audio' for visually impaired");  	case 0x41:  		return ("MPEG1 audio' for hard of hearing");  	case 0x42:  		return ("Supplementary audio");  	default:  		if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 3:  	switch (componentTypeVideo) {  	case 1:  		return ("EBU Teletext subtitles");  	case 2:  		return ("Associated EBU Teletext");  	case 3:  		return ("VBI data");  	case 0x10:  		return ("DVB subtitles");  	case 0x11:  		return ("DVB subtitles' 4:3");  	case 0x12:  		return ("DVB subtitles' 16:9");  	case 0x13:  		return ("DVB subtitles' 2.21:1");  	case 0x14:  		return ("DVB subtitles' HD");  	case 0x20:  		return ("DVB subtitles for hard of hearing");  	case 0x21:  		return ("DVB subtitles for hard of hearing' 4:3");  	case 0x22:  		return ("DVB subtitles for hard of hearing' 16:9");  	case 0x23:  		return ("DVB subtitles for hard of hearing' 2.21:1");  	case 0x24:  		return ("DVB subtitles for hard of hearing' HD");  	case 0x30:  		return ("Open sign language interpretation");  	case 0x31:  		return ("Closed sign language interpretation");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 4:  	if (componentTypeAudio < 0x080)  		return ("AC3 audio");  	else  		return ("Enhanced AC3 audio");  case 5:  	switch (componentTypeVideo) {  	case 1:  		return ("H264/AVC SD' 4:3' 25Hz");  	case 3:  		return ("H264/AVC SD' 16:9' 25Hz");  	case 4:  		return ("H264/AVC SD' >16:9' 25Hz");  	case 5:  		return ("H264/AVC SD' 4:3' 30Hz");  	case 7:  		return ("H264/AVC SD' 16:9' 30Hz");  	case 8:  		return ("H264/AVC SD' >16:9' 30Hz");  	case 0x0B:  		return ("H264/AVC HD' 16:9' 25Hz");  	case 0x0C:  		return ("H264/AVC HD' >16:9' 25Hz");  	case 0x0F:  		return ("H264/AVC HD' 16:9' 30Hz");  	case 0x10:  		return ("H264/AVC HD' >16:9' 30Hz");  	default:  		if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 6:  	switch (componentTypeAudio) {  	case 1:  		return ("HE-AAC audio' mono");  	case 3:  		return ("HE-AAC audio' stereo");  	case 5:  		return ("HE-AAC audio' surround sound");  	case 0x40:  		return ("HE-AAC audio for visually impaired");  	case 0x41:  		return ("HE-AAC audio for hard of hearing");  	case 0x42:  		return ("HE-AAC supplementary audio");  	case 0x43:  		return ("HE-AAC V2 audio' stero");  	case 0x44:  		return ("HE-AAC V2 audio for visually impaired");  	case 0x45:  		return ("HE-AAC V2 audio for hard of hearing");  	case 0x46:  		return ("HE-AAC V2 supplementary audio");  	default:  		if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  			return ("User defined");  		else  			return ("Reserved for future use");  	}  case 7:  	if (componentTypeAudio < 0x80)  		return ("DTS audio mode");  	else  		return ("Reserved for future use");  default:  	if (streamContent > 0x0B)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("MPEG2 video' 4:3' 25Hz");  case 2:  case 3:  	return ("MPEG2 video' 16:9' 25Hz");  case 4:  	return ("MPEG2 video' >16:9' 25Hz");  case 5:  	return ("MPEG2 video' 4:3' 30Hz");  case 6:  case 7:  	return ("MPEG2 video' 16:9' 30Hz");  case 8:  	return ("MPEG2 video' >16:9' 30Hz");  case 9:  	return ("MPEG2 video' 4:3' 25Hz");  case 0x0a:  case 0x0b:  	return ("MPEG2 HD video' 16:9' 25Hz");  case 0x0c:  	return ("MPEG2 HD video' >16:9' 25Hz");  case 0x0d:  	return ("MPEG2 HD video' 4:3' 30Hz");  case 0x0e:  case 0x0f:  	return ("MPEG2 HD video' 16:9' 30Hz");  case 0x10:  	return ("MPEG2 HD video' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xaf && componentTypeVideo < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeAudio) {  case 1:  case 2:  	return ("MPEG1 audio' mono");  case 3:  	return ("MPEG1 audio' stereo");  case 4:  	return ("MPEG1 audio' multi-lingual' multi-channel");  case 5:  	return ("MPEG1 audio' surround sound");  case 0x40:  	return ("MPEG1 audio' for visually impaired");  case 0x41:  	return ("MPEG1 audio' for hard of hearing");  case 0x42:  	return ("Supplementary audio");  default:  	if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeAudio) {  case 1:  case 2:  	return ("MPEG1 audio' mono");  case 3:  	return ("MPEG1 audio' stereo");  case 4:  	return ("MPEG1 audio' multi-lingual' multi-channel");  case 5:  	return ("MPEG1 audio' surround sound");  case 0x40:  	return ("MPEG1 audio' for visually impaired");  case 0x41:  	return ("MPEG1 audio' for hard of hearing");  case 0x42:  	return ("Supplementary audio");  default:  	if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeAudio) {  case 1:  case 2:  	return ("MPEG1 audio' mono");  case 3:  	return ("MPEG1 audio' stereo");  case 4:  	return ("MPEG1 audio' multi-lingual' multi-channel");  case 5:  	return ("MPEG1 audio' surround sound");  case 0x40:  	return ("MPEG1 audio' for visually impaired");  case 0x41:  	return ("MPEG1 audio' for hard of hearing");  case 0x42:  	return ("Supplementary audio");  default:  	if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeAudio) {  case 1:  case 2:  	return ("MPEG1 audio' mono");  case 3:  	return ("MPEG1 audio' stereo");  case 4:  	return ("MPEG1 audio' multi-lingual' multi-channel");  case 5:  	return ("MPEG1 audio' surround sound");  case 0x40:  	return ("MPEG1 audio' for visually impaired");  case 0x41:  	return ("MPEG1 audio' for hard of hearing");  case 0x42:  	return ("Supplementary audio");  default:  	if (componentTypeAudio > 0xaf && componentTypeAudio < 0xff)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("EBU Teletext subtitles");  case 2:  	return ("Associated EBU Teletext");  case 3:  	return ("VBI data");  case 0x10:  	return ("DVB subtitles");  case 0x11:  	return ("DVB subtitles' 4:3");  case 0x12:  	return ("DVB subtitles' 16:9");  case 0x13:  	return ("DVB subtitles' 2.21:1");  case 0x14:  	return ("DVB subtitles' HD");  case 0x20:  	return ("DVB subtitles for hard of hearing");  case 0x21:  	return ("DVB subtitles for hard of hearing' 4:3");  case 0x22:  	return ("DVB subtitles for hard of hearing' 16:9");  case 0x23:  	return ("DVB subtitles for hard of hearing' 2.21:1");  case 0x24:  	return ("DVB subtitles for hard of hearing' HD");  case 0x30:  	return ("Open sign language interpretation");  case 0x31:  	return ("Closed sign language interpretation");  default:  	if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("EBU Teletext subtitles");  case 2:  	return ("Associated EBU Teletext");  case 3:  	return ("VBI data");  case 0x10:  	return ("DVB subtitles");  case 0x11:  	return ("DVB subtitles' 4:3");  case 0x12:  	return ("DVB subtitles' 16:9");  case 0x13:  	return ("DVB subtitles' 2.21:1");  case 0x14:  	return ("DVB subtitles' HD");  case 0x20:  	return ("DVB subtitles for hard of hearing");  case 0x21:  	return ("DVB subtitles for hard of hearing' 4:3");  case 0x22:  	return ("DVB subtitles for hard of hearing' 16:9");  case 0x23:  	return ("DVB subtitles for hard of hearing' 2.21:1");  case 0x24:  	return ("DVB subtitles for hard of hearing' HD");  case 0x30:  	return ("Open sign language interpretation");  case 0x31:  	return ("Closed sign language interpretation");  default:  	if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("H264/AVC SD' 4:3' 25Hz");  case 3:  	return ("H264/AVC SD' 16:9' 25Hz");  case 4:  	return ("H264/AVC SD' >16:9' 25Hz");  case 5:  	return ("H264/AVC SD' 4:3' 30Hz");  case 7:  	return ("H264/AVC SD' 16:9' 30Hz");  case 8:  	return ("H264/AVC SD' >16:9' 30Hz");  case 0x0B:  	return ("H264/AVC HD' 16:9' 25Hz");  case 0x0C:  	return ("H264/AVC HD' >16:9' 25Hz");  case 0x0F:  	return ("H264/AVC HD' 16:9' 30Hz");  case 0x10:  	return ("H264/AVC HD' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("H264/AVC SD' 4:3' 25Hz");  case 3:  	return ("H264/AVC SD' 16:9' 25Hz");  case 4:  	return ("H264/AVC SD' >16:9' 25Hz");  case 5:  	return ("H264/AVC SD' 4:3' 30Hz");  case 7:  	return ("H264/AVC SD' 16:9' 30Hz");  case 8:  	return ("H264/AVC SD' >16:9' 30Hz");  case 0x0B:  	return ("H264/AVC HD' 16:9' 25Hz");  case 0x0C:  	return ("H264/AVC HD' >16:9' 25Hz");  case 0x0F:  	return ("H264/AVC HD' 16:9' 30Hz");  case 0x10:  	return ("H264/AVC HD' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("H264/AVC SD' 4:3' 25Hz");  case 3:  	return ("H264/AVC SD' 16:9' 25Hz");  case 4:  	return ("H264/AVC SD' >16:9' 25Hz");  case 5:  	return ("H264/AVC SD' 4:3' 30Hz");  case 7:  	return ("H264/AVC SD' 16:9' 30Hz");  case 8:  	return ("H264/AVC SD' >16:9' 30Hz");  case 0x0B:  	return ("H264/AVC HD' 16:9' 25Hz");  case 0x0C:  	return ("H264/AVC HD' >16:9' 25Hz");  case 0x0F:  	return ("H264/AVC HD' 16:9' 30Hz");  case 0x10:  	return ("H264/AVC HD' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("H264/AVC SD' 4:3' 25Hz");  case 3:  	return ("H264/AVC SD' 16:9' 25Hz");  case 4:  	return ("H264/AVC SD' >16:9' 25Hz");  case 5:  	return ("H264/AVC SD' 4:3' 30Hz");  case 7:  	return ("H264/AVC SD' 16:9' 30Hz");  case 8:  	return ("H264/AVC SD' >16:9' 30Hz");  case 0x0B:  	return ("H264/AVC HD' 16:9' 25Hz");  case 0x0C:  	return ("H264/AVC HD' >16:9' 25Hz");  case 0x0F:  	return ("H264/AVC HD' 16:9' 30Hz");  case 0x10:  	return ("H264/AVC HD' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeVideo) {  case 1:  	return ("H264/AVC SD' 4:3' 25Hz");  case 3:  	return ("H264/AVC SD' 16:9' 25Hz");  case 4:  	return ("H264/AVC SD' >16:9' 25Hz");  case 5:  	return ("H264/AVC SD' 4:3' 30Hz");  case 7:  	return ("H264/AVC SD' 16:9' 30Hz");  case 8:  	return ("H264/AVC SD' >16:9' 30Hz");  case 0x0B:  	return ("H264/AVC HD' 16:9' 25Hz");  case 0x0C:  	return ("H264/AVC HD' >16:9' 25Hz");  case 0x0F:  	return ("H264/AVC HD' 16:9' 30Hz");  case 0x10:  	return ("H264/AVC HD' >16:9' 30Hz");  default:  	if (componentTypeVideo > 0xAF && componentTypeVideo < 0xFF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeAudio) {  case 1:  	return ("HE-AAC audio' mono");  case 3:  	return ("HE-AAC audio' stereo");  case 5:  	return ("HE-AAC audio' surround sound");  case 0x40:  	return ("HE-AAC audio for visually impaired");  case 0x41:  	return ("HE-AAC audio for hard of hearing");  case 0x42:  	return ("HE-AAC supplementary audio");  case 0x43:  	return ("HE-AAC V2 audio' stero");  case 0x44:  	return ("HE-AAC V2 audio for visually impaired");  case 0x45:  	return ("HE-AAC V2 audio for hard of hearing");  case 0x46:  	return ("HE-AAC V2 supplementary audio");  default:  	if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBComponentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBComponentDescriptor.cs,Decode,The following statement contains a magic number: switch (componentTypeAudio) {  case 1:  	return ("HE-AAC audio' mono");  case 3:  	return ("HE-AAC audio' stereo");  case 5:  	return ("HE-AAC audio' surround sound");  case 0x40:  	return ("HE-AAC audio for visually impaired");  case 0x41:  	return ("HE-AAC audio for hard of hearing");  case 0x42:  	return ("HE-AAC supplementary audio");  case 0x43:  	return ("HE-AAC V2 audio' stero");  case 0x44:  	return ("HE-AAC V2 audio for visually impaired");  case 0x45:  	return ("HE-AAC V2 audio for hard of hearing");  case 0x46:  	return ("HE-AAC V2 supplementary audio");  default:  	if (componentTypeAudio > 0x0AF && componentTypeAudio < 0x0FF)  		return ("User defined");  	else  		return ("Reserved for future use");  }  
Magic Number,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 0) {  		int dataLength = Length;  		contentTypes = new Collection<int> ();  		contentSubTypes = new Collection<int> ();  		userTypes = new Collection<int> ();  		while (dataLength != 0) {  			int contentType = (int)(byteData [lastIndex] >> 4);  			contentTypes.Add (contentType);  			int contentSubType = (int)(byteData [lastIndex] & 0x0f);  			contentSubTypes.Add (contentSubType);  			lastIndex++;  			userTypes.Add ((int)byteData [lastIndex]);  			lastIndex++;  			dataLength -= 2;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Content Descriptor message is short"));  }  
Magic Number,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 0) {  		int dataLength = Length;  		contentTypes = new Collection<int> ();  		contentSubTypes = new Collection<int> ();  		userTypes = new Collection<int> ();  		while (dataLength != 0) {  			int contentType = (int)(byteData [lastIndex] >> 4);  			contentTypes.Add (contentType);  			int contentSubType = (int)(byteData [lastIndex] & 0x0f);  			contentSubTypes.Add (contentSubType);  			lastIndex++;  			userTypes.Add ((int)byteData [lastIndex]);  			lastIndex++;  			dataLength -= 2;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Content Descriptor message is short"));  }  
Magic Number,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,Process,The following statement contains a magic number: if (Length != 0) {  	int dataLength = Length;  	contentTypes = new Collection<int> ();  	contentSubTypes = new Collection<int> ();  	userTypes = new Collection<int> ();  	while (dataLength != 0) {  		int contentType = (int)(byteData [lastIndex] >> 4);  		contentTypes.Add (contentType);  		int contentSubType = (int)(byteData [lastIndex] & 0x0f);  		contentSubTypes.Add (contentSubType);  		lastIndex++;  		userTypes.Add ((int)byteData [lastIndex]);  		lastIndex++;  		dataLength -= 2;  	}  }  
Magic Number,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,Process,The following statement contains a magic number: if (Length != 0) {  	int dataLength = Length;  	contentTypes = new Collection<int> ();  	contentSubTypes = new Collection<int> ();  	userTypes = new Collection<int> ();  	while (dataLength != 0) {  		int contentType = (int)(byteData [lastIndex] >> 4);  		contentTypes.Add (contentType);  		int contentSubType = (int)(byteData [lastIndex] & 0x0f);  		contentSubTypes.Add (contentSubType);  		lastIndex++;  		userTypes.Add ((int)byteData [lastIndex]);  		lastIndex++;  		dataLength -= 2;  	}  }  
Magic Number,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,Process,The following statement contains a magic number: while (dataLength != 0) {  	int contentType = (int)(byteData [lastIndex] >> 4);  	contentTypes.Add (contentType);  	int contentSubType = (int)(byteData [lastIndex] & 0x0f);  	contentSubTypes.Add (contentSubType);  	lastIndex++;  	userTypes.Add ((int)byteData [lastIndex]);  	lastIndex++;  	dataLength -= 2;  }  
Magic Number,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,Process,The following statement contains a magic number: while (dataLength != 0) {  	int contentType = (int)(byteData [lastIndex] >> 4);  	contentTypes.Add (contentType);  	int contentSubType = (int)(byteData [lastIndex] & 0x0f);  	contentSubTypes.Add (contentSubType);  	lastIndex++;  	userTypes.Add ((int)byteData [lastIndex]);  	lastIndex++;  	dataLength -= 2;  }  
Magic Number,DVBServices,DVBContentDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBContentDescriptor.cs,Process,The following statement contains a magic number: dataLength -= 2;  
Magic Number,DVBServices,BIOPTap,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTap.cs,Process,The following statement contains a magic number: try {  	identity = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	use = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	associationTag = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	selectorLength = (int)byteData [lastIndex];  	lastIndex++;  	if (selectorLength != 0)  		selectorData = Utils.GetBytes (byteData' lastIndex' selectorLength);  	if (selectorLength == BIOPTapSelector.TapSelectorLength) {  		tapSelector = new BIOPTapSelector ();  		tapSelector.Process (byteData' lastIndex);  	}  	lastIndex += selectorLength;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Tap message is short"));  }  
Magic Number,DVBServices,BIOPTap,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTap.cs,Process,The following statement contains a magic number: try {  	identity = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	use = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	associationTag = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	selectorLength = (int)byteData [lastIndex];  	lastIndex++;  	if (selectorLength != 0)  		selectorData = Utils.GetBytes (byteData' lastIndex' selectorLength);  	if (selectorLength == BIOPTapSelector.TapSelectorLength) {  		tapSelector = new BIOPTapSelector ();  		tapSelector.Process (byteData' lastIndex);  	}  	lastIndex += selectorLength;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Tap message is short"));  }  
Magic Number,DVBServices,BIOPTap,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTap.cs,Process,The following statement contains a magic number: try {  	identity = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	use = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	associationTag = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	selectorLength = (int)byteData [lastIndex];  	lastIndex++;  	if (selectorLength != 0)  		selectorData = Utils.GetBytes (byteData' lastIndex' selectorLength);  	if (selectorLength == BIOPTapSelector.TapSelectorLength) {  		tapSelector = new BIOPTapSelector ();  		tapSelector.Process (byteData' lastIndex);  	}  	lastIndex += selectorLength;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The BIOP Tap message is short"));  }  
Magic Number,DVBServices,BIOPTap,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTap.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPTap,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTap.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,BIOPTap,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\BIOPTap.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,CosNameComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNameComponent.cs,Process,The following statement contains a magic number: try {  	identityLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (identityLength != 0) {  		identity = Utils.GetBytes (byteData' lastIndex' identityLength);  		lastIndex += identityLength;  	}  	kindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (kindLength != 0) {  		kind = Utils.GetBytes (byteData' lastIndex' kindLength);  		lastIndex += kindLength;  	}  	initialContextLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (initialContextLength != 0) {  		initialContext = Utils.GetBytes (byteData' lastIndex' initialContextLength);  		lastIndex += initialContextLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The COS Naming Component message is short"));  }  
Magic Number,DVBServices,CosNameComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNameComponent.cs,Process,The following statement contains a magic number: try {  	identityLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (identityLength != 0) {  		identity = Utils.GetBytes (byteData' lastIndex' identityLength);  		lastIndex += identityLength;  	}  	kindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (kindLength != 0) {  		kind = Utils.GetBytes (byteData' lastIndex' kindLength);  		lastIndex += kindLength;  	}  	initialContextLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (initialContextLength != 0) {  		initialContext = Utils.GetBytes (byteData' lastIndex' initialContextLength);  		lastIndex += initialContextLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The COS Naming Component message is short"));  }  
Magic Number,DVBServices,CosNameComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNameComponent.cs,Process,The following statement contains a magic number: try {  	identityLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (identityLength != 0) {  		identity = Utils.GetBytes (byteData' lastIndex' identityLength);  		lastIndex += identityLength;  	}  	kindLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (kindLength != 0) {  		kind = Utils.GetBytes (byteData' lastIndex' kindLength);  		lastIndex += kindLength;  	}  	initialContextLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (initialContextLength != 0) {  		initialContext = Utils.GetBytes (byteData' lastIndex' initialContextLength);  		lastIndex += initialContextLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The COS Naming Component message is short"));  }  
Magic Number,DVBServices,CosNameComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNameComponent.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,CosNameComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNameComponent.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,CosNameComponent,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNameComponent.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,CosNamingName,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNamingName.cs,Process,The following statement contains a magic number: try {  	nameComponentsCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (nameComponentsCount != 0) {  		nameComponents = new Collection<CosNameComponent> ();  		while (nameComponents.Count != nameComponentsCount) {  			CosNameComponent nameComponent = new CosNameComponent ();  			nameComponent.Process (byteData' lastIndex);  			nameComponents.Add (nameComponent);  			lastIndex = nameComponent.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The COS Naming Component message is short"));  }  
Magic Number,DVBServices,CosNamingName,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\CosNamingName.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMCCCompatibilityDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptor.cs,Process,The following statement contains a magic number: try {  	descriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	descriptorCount = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (descriptorCount != 0) {  		descriptorEntries = new Collection<DSMCCCompatibilityDescriptorEntry> ();  		while (descriptorEntries.Count != descriptorCount) {  			DSMCCCompatibilityDescriptorEntry descriptorEntry = new DSMCCCompatibilityDescriptorEntry ();  			descriptorEntry.Process (byteData' lastIndex);  			descriptorEntries.Add (descriptorEntry);  			lastIndex = descriptorEntry.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Compatability Descriptor message is short"));  }  
Magic Number,DVBServices,DSMCCCompatibilityDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptor.cs,Process,The following statement contains a magic number: try {  	descriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	descriptorCount = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (descriptorCount != 0) {  		descriptorEntries = new Collection<DSMCCCompatibilityDescriptorEntry> ();  		while (descriptorEntries.Count != descriptorCount) {  			DSMCCCompatibilityDescriptorEntry descriptorEntry = new DSMCCCompatibilityDescriptorEntry ();  			descriptorEntry.Process (byteData' lastIndex);  			descriptorEntries.Add (descriptorEntry);  			lastIndex = descriptorEntry.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Compatability Descriptor message is short"));  }  
Magic Number,DVBServices,DSMCCCompatibilityDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCCompatibilityDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	descriptorType = (int)byteData [lastIndex];  	lastIndex++;  	descriptorLength = (int)byteData [lastIndex];  	lastIndex++;  	specifierType = (int)byteData [lastIndex];  	lastIndex++;  	specifierData = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	model = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	version = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	subDescriptorCount = (int)byteData [lastIndex];  	lastIndex++;  	if (subDescriptorCount != 0) {  		subDescriptors = new Collection<DSMCCCompatibilityDescriptorSubDescriptor> ();  		while (subDescriptors.Count != subDescriptorCount) {  			DSMCCCompatibilityDescriptorSubDescriptor subDescriptor = new DSMCCCompatibilityDescriptorSubDescriptor ();  			subDescriptor.Process (byteData' lastIndex);  			subDescriptors.Add (subDescriptor);  			lastIndex = subDescriptor.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Compatability Descriptor Entry message is short"));  }  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	descriptorType = (int)byteData [lastIndex];  	lastIndex++;  	descriptorLength = (int)byteData [lastIndex];  	lastIndex++;  	specifierType = (int)byteData [lastIndex];  	lastIndex++;  	specifierData = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	model = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	version = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	subDescriptorCount = (int)byteData [lastIndex];  	lastIndex++;  	if (subDescriptorCount != 0) {  		subDescriptors = new Collection<DSMCCCompatibilityDescriptorSubDescriptor> ();  		while (subDescriptors.Count != subDescriptorCount) {  			DSMCCCompatibilityDescriptorSubDescriptor subDescriptor = new DSMCCCompatibilityDescriptorSubDescriptor ();  			subDescriptor.Process (byteData' lastIndex);  			subDescriptors.Add (subDescriptor);  			lastIndex = subDescriptor.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Compatability Descriptor Entry message is short"));  }  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	descriptorType = (int)byteData [lastIndex];  	lastIndex++;  	descriptorLength = (int)byteData [lastIndex];  	lastIndex++;  	specifierType = (int)byteData [lastIndex];  	lastIndex++;  	specifierData = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	model = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	version = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	subDescriptorCount = (int)byteData [lastIndex];  	lastIndex++;  	if (subDescriptorCount != 0) {  		subDescriptors = new Collection<DSMCCCompatibilityDescriptorSubDescriptor> ();  		while (subDescriptors.Count != subDescriptorCount) {  			DSMCCCompatibilityDescriptorSubDescriptor subDescriptor = new DSMCCCompatibilityDescriptorSubDescriptor ();  			subDescriptor.Process (byteData' lastIndex);  			subDescriptors.Add (subDescriptor);  			lastIndex = subDescriptor.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Compatability Descriptor Entry message is short"));  }  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: try {  	descriptorType = (int)byteData [lastIndex];  	lastIndex++;  	descriptorLength = (int)byteData [lastIndex];  	lastIndex++;  	specifierType = (int)byteData [lastIndex];  	lastIndex++;  	specifierData = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	model = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	version = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	subDescriptorCount = (int)byteData [lastIndex];  	lastIndex++;  	if (subDescriptorCount != 0) {  		subDescriptors = new Collection<DSMCCCompatibilityDescriptorSubDescriptor> ();  		while (subDescriptors.Count != subDescriptorCount) {  			DSMCCCompatibilityDescriptorSubDescriptor subDescriptor = new DSMCCCompatibilityDescriptorSubDescriptor ();  			subDescriptor.Process (byteData' lastIndex);  			subDescriptors.Add (subDescriptor);  			lastIndex = subDescriptor.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Compatability Descriptor Entry message is short"));  }  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: specifierData = Utils.GetBytes (byteData' lastIndex' 3);  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCCompatibilityDescriptorEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCCompatibilityDescriptorEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Swap4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	blockNumber = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	downloadCancelReason = (int)byteData [lastIndex];  	lastIndex++;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	privateDataLength = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Cancel message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Swap4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	blockNumber = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	downloadCancelReason = (int)byteData [lastIndex];  	lastIndex++;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	privateDataLength = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Cancel message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Swap4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	blockNumber = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	downloadCancelReason = (int)byteData [lastIndex];  	lastIndex++;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	privateDataLength = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Cancel message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Swap4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleID = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	blockNumber = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	downloadCancelReason = (int)byteData [lastIndex];  	lastIndex++;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	privateDataLength = Utils.Swap2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Cancel message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadCancel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadCancel.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,Process,The following statement contains a magic number: try {  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	moduleVersion = (int)byteData [lastIndex];  	lastIndex++;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	blockNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	dataSize = (base.DSMCCHeader.MessageLength - base.DSMCCHeader.AdaptionLength) - (lastIndex - index);  	if (dataSize != 0)  		data = Utils.GetBytes (byteData' lastIndex' dataSize);  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Data Block message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,Process,The following statement contains a magic number: try {  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	moduleVersion = (int)byteData [lastIndex];  	lastIndex++;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	blockNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	dataSize = (base.DSMCCHeader.MessageLength - base.DSMCCHeader.AdaptionLength) - (lastIndex - index);  	if (dataSize != 0)  		data = Utils.GetBytes (byteData' lastIndex' dataSize);  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Data Block message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,LogMessage,The following statement contains a magic number: if (data.Length < 10)  	logDataSize = data.Length;  else  	logDataSize = 10;  
Magic Number,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,LogMessage,The following statement contains a magic number: if (data.Length < 10)  	logDataSize = data.Length;  else  	logDataSize = 10;  
Magic Number,DVBServices,DSMCCDownloadDataBlock,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadDataBlock.cs,LogMessage,The following statement contains a magic number: logDataSize = 10;  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockSize = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	windowSize = (int)byteData [lastIndex];  	lastIndex++;  	ackPeriod = (int)byteData [lastIndex];  	lastIndex++;  	tcDownloadWindow = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tcDownloadScenario = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	compatibilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatibilityDescriptorLength != 0) {  		compatibilityDescriptor = new DSMCCCompatibilityDescriptor ();  		compatibilityDescriptor.Process (byteData' lastIndex);  		lastIndex = compatibilityDescriptor.Index;  	}  	numberOfModules = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (numberOfModules != 0) {  		moduleList = new Collection<DSMCCDownloadInfoIndicationModule> ();  		while (moduleList.Count < numberOfModules) {  			DSMCCDownloadInfoIndicationModule module = new DSMCCDownloadInfoIndicationModule ();  			module.Process (byteData' lastIndex);  			moduleList.Add (module);  			lastIndex = module.Index;  		}  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC DownloadInfo Indication message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockSize = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	windowSize = (int)byteData [lastIndex];  	lastIndex++;  	ackPeriod = (int)byteData [lastIndex];  	lastIndex++;  	tcDownloadWindow = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tcDownloadScenario = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	compatibilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatibilityDescriptorLength != 0) {  		compatibilityDescriptor = new DSMCCCompatibilityDescriptor ();  		compatibilityDescriptor.Process (byteData' lastIndex);  		lastIndex = compatibilityDescriptor.Index;  	}  	numberOfModules = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (numberOfModules != 0) {  		moduleList = new Collection<DSMCCDownloadInfoIndicationModule> ();  		while (moduleList.Count < numberOfModules) {  			DSMCCDownloadInfoIndicationModule module = new DSMCCDownloadInfoIndicationModule ();  			module.Process (byteData' lastIndex);  			moduleList.Add (module);  			lastIndex = module.Index;  		}  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC DownloadInfo Indication message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockSize = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	windowSize = (int)byteData [lastIndex];  	lastIndex++;  	ackPeriod = (int)byteData [lastIndex];  	lastIndex++;  	tcDownloadWindow = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tcDownloadScenario = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	compatibilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatibilityDescriptorLength != 0) {  		compatibilityDescriptor = new DSMCCCompatibilityDescriptor ();  		compatibilityDescriptor.Process (byteData' lastIndex);  		lastIndex = compatibilityDescriptor.Index;  	}  	numberOfModules = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (numberOfModules != 0) {  		moduleList = new Collection<DSMCCDownloadInfoIndicationModule> ();  		while (moduleList.Count < numberOfModules) {  			DSMCCDownloadInfoIndicationModule module = new DSMCCDownloadInfoIndicationModule ();  			module.Process (byteData' lastIndex);  			moduleList.Add (module);  			lastIndex = module.Index;  		}  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC DownloadInfo Indication message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockSize = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	windowSize = (int)byteData [lastIndex];  	lastIndex++;  	ackPeriod = (int)byteData [lastIndex];  	lastIndex++;  	tcDownloadWindow = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tcDownloadScenario = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	compatibilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatibilityDescriptorLength != 0) {  		compatibilityDescriptor = new DSMCCCompatibilityDescriptor ();  		compatibilityDescriptor.Process (byteData' lastIndex);  		lastIndex = compatibilityDescriptor.Index;  	}  	numberOfModules = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (numberOfModules != 0) {  		moduleList = new Collection<DSMCCDownloadInfoIndicationModule> ();  		while (moduleList.Count < numberOfModules) {  			DSMCCDownloadInfoIndicationModule module = new DSMCCDownloadInfoIndicationModule ();  			module.Process (byteData' lastIndex);  			moduleList.Add (module);  			lastIndex = module.Index;  		}  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC DownloadInfo Indication message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockSize = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	windowSize = (int)byteData [lastIndex];  	lastIndex++;  	ackPeriod = (int)byteData [lastIndex];  	lastIndex++;  	tcDownloadWindow = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tcDownloadScenario = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	compatibilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatibilityDescriptorLength != 0) {  		compatibilityDescriptor = new DSMCCCompatibilityDescriptor ();  		compatibilityDescriptor.Process (byteData' lastIndex);  		lastIndex = compatibilityDescriptor.Index;  	}  	numberOfModules = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (numberOfModules != 0) {  		moduleList = new Collection<DSMCCDownloadInfoIndicationModule> ();  		while (moduleList.Count < numberOfModules) {  			DSMCCDownloadInfoIndicationModule module = new DSMCCDownloadInfoIndicationModule ();  			module.Process (byteData' lastIndex);  			moduleList.Add (module);  			lastIndex = module.Index;  		}  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC DownloadInfo Indication message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockSize = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	windowSize = (int)byteData [lastIndex];  	lastIndex++;  	ackPeriod = (int)byteData [lastIndex];  	lastIndex++;  	tcDownloadWindow = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tcDownloadScenario = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	compatibilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatibilityDescriptorLength != 0) {  		compatibilityDescriptor = new DSMCCCompatibilityDescriptor ();  		compatibilityDescriptor.Process (byteData' lastIndex);  		lastIndex = compatibilityDescriptor.Index;  	}  	numberOfModules = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (numberOfModules != 0) {  		moduleList = new Collection<DSMCCDownloadInfoIndicationModule> ();  		while (moduleList.Count < numberOfModules) {  			DSMCCDownloadInfoIndicationModule module = new DSMCCDownloadInfoIndicationModule ();  			module.Process (byteData' lastIndex);  			moduleList.Add (module);  			lastIndex = module.Index;  		}  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC DownloadInfo Indication message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: try {  	downloadID = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	blockSize = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	windowSize = (int)byteData [lastIndex];  	lastIndex++;  	ackPeriod = (int)byteData [lastIndex];  	lastIndex++;  	tcDownloadWindow = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	tcDownloadScenario = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	compatibilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatibilityDescriptorLength != 0) {  		compatibilityDescriptor = new DSMCCCompatibilityDescriptor ();  		compatibilityDescriptor.Process (byteData' lastIndex);  		lastIndex = compatibilityDescriptor.Index;  	}  	numberOfModules = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (numberOfModules != 0) {  		moduleList = new Collection<DSMCCDownloadInfoIndicationModule> ();  		while (moduleList.Count < numberOfModules) {  			DSMCCDownloadInfoIndicationModule module = new DSMCCDownloadInfoIndicationModule ();  			module.Process (byteData' lastIndex);  			moduleList.Add (module);  			lastIndex = module.Index;  		}  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		privateData = Utils.GetBytes (byteData' lastIndex' privateDataLength);  		lastIndex += privateDataLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC DownloadInfo Indication message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadInfoIndication,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndication.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadInfoIndicationModule,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndicationModule.cs,Process,The following statement contains a magic number: try {  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	moduleSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleVersion = (int)byteData [lastIndex];  	lastIndex++;  	moduleInfoLength = (int)byteData [lastIndex];  	lastIndex++;  	if (moduleInfoLength != 0) {  		biopModuleInformation = new BIOPModuleInfo ();  		biopModuleInformation.Process (byteData' lastIndex);  		lastIndex = biopModuleInformation.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Info Indication Module message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndicationModule,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndicationModule.cs,Process,The following statement contains a magic number: try {  	moduleID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	moduleSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	moduleVersion = (int)byteData [lastIndex];  	lastIndex++;  	moduleInfoLength = (int)byteData [lastIndex];  	lastIndex++;  	if (moduleInfoLength != 0) {  		biopModuleInformation = new BIOPModuleInfo ();  		biopModuleInformation.Process (byteData' lastIndex);  		lastIndex = biopModuleInformation.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Info Indication Module message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadInfoIndicationModule,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndicationModule.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadInfoIndicationModule,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadInfoIndicationModule.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: try {  	serverID = Utils.GetBytes (byteData' lastIndex' 20);  	lastIndex += 20;  	compatabilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatabilityDescriptorLength != 0) {  		compatabilityDescriptor = Utils.GetBytes (byteData' lastIndex' compatabilityDescriptorLength);  		lastIndex += compatabilityDescriptorLength;  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		serviceGateWayInfo = new ServiceGatewayInfo ();  		serviceGateWayInfo.Process (byteData' lastIndex);  		lastIndex = serviceGateWayInfo.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Server Initiate message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: try {  	serverID = Utils.GetBytes (byteData' lastIndex' 20);  	lastIndex += 20;  	compatabilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatabilityDescriptorLength != 0) {  		compatabilityDescriptor = Utils.GetBytes (byteData' lastIndex' compatabilityDescriptorLength);  		lastIndex += compatabilityDescriptorLength;  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		serviceGateWayInfo = new ServiceGatewayInfo ();  		serviceGateWayInfo.Process (byteData' lastIndex);  		lastIndex = serviceGateWayInfo.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Server Initiate message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: try {  	serverID = Utils.GetBytes (byteData' lastIndex' 20);  	lastIndex += 20;  	compatabilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatabilityDescriptorLength != 0) {  		compatabilityDescriptor = Utils.GetBytes (byteData' lastIndex' compatabilityDescriptorLength);  		lastIndex += compatabilityDescriptorLength;  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		serviceGateWayInfo = new ServiceGatewayInfo ();  		serviceGateWayInfo.Process (byteData' lastIndex);  		lastIndex = serviceGateWayInfo.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Server Initiate message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: try {  	serverID = Utils.GetBytes (byteData' lastIndex' 20);  	lastIndex += 20;  	compatabilityDescriptorLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (compatabilityDescriptorLength != 0) {  		compatabilityDescriptor = Utils.GetBytes (byteData' lastIndex' compatabilityDescriptorLength);  		lastIndex += compatabilityDescriptorLength;  	}  	privateDataLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (privateDataLength != 0) {  		serviceGateWayInfo = new ServiceGatewayInfo ();  		serviceGateWayInfo.Process (byteData' lastIndex);  		lastIndex = serviceGateWayInfo.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC Download Server Initiate message is short"));  }  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: serverID = Utils.GetBytes (byteData' lastIndex' 20);  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: lastIndex += 20;  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCDownloadServerInitiate,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCDownloadServerInitiate.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCHeader.cs,Process,The following statement contains a magic number: try {  	protocolDiscriminator = (int)byteData [lastIndex];  	lastIndex++;  	dsmccType = (int)byteData [lastIndex];  	lastIndex++;  	messageID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transactionID = new DSMCCTransactionID (Utils.Convert4BytesToInt (byteData' lastIndex));  	lastIndex += 4;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	adaptionLength = (int)byteData [lastIndex];  	lastIndex++;  	messageLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (adaptionLength != 0) {  		adaptionData = Utils.GetBytes (byteData' lastIndex' adaptionLength);  		lastIndex += adaptionLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC header is short"));  }  
Magic Number,DVBServices,DSMCCHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCHeader.cs,Process,The following statement contains a magic number: try {  	protocolDiscriminator = (int)byteData [lastIndex];  	lastIndex++;  	dsmccType = (int)byteData [lastIndex];  	lastIndex++;  	messageID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transactionID = new DSMCCTransactionID (Utils.Convert4BytesToInt (byteData' lastIndex));  	lastIndex += 4;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	adaptionLength = (int)byteData [lastIndex];  	lastIndex++;  	messageLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (adaptionLength != 0) {  		adaptionData = Utils.GetBytes (byteData' lastIndex' adaptionLength);  		lastIndex += adaptionLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC header is short"));  }  
Magic Number,DVBServices,DSMCCHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCHeader.cs,Process,The following statement contains a magic number: try {  	protocolDiscriminator = (int)byteData [lastIndex];  	lastIndex++;  	dsmccType = (int)byteData [lastIndex];  	lastIndex++;  	messageID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	transactionID = new DSMCCTransactionID (Utils.Convert4BytesToInt (byteData' lastIndex));  	lastIndex += 4;  	reserved1 = (int)byteData [lastIndex];  	lastIndex++;  	adaptionLength = (int)byteData [lastIndex];  	lastIndex++;  	messageLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (adaptionLength != 0) {  		adaptionData = Utils.GetBytes (byteData' lastIndex' adaptionLength);  		lastIndex += adaptionLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSMCC header is short"));  }  
Magic Number,DVBServices,DSMCCHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCHeader.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCHeader.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMCCHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCHeader.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,getDSMCCSections,The following statement contains a magic number: dsmccReader = new TSStreamReader (500' dataProvider.BufferAddress);  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,getDSMCCSections,The following statement contains a magic number: while (!checkAllDataLoaded ()) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	dsmccReader.Lock ("LoadMessages");  	if (dsmccReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in dsmccReader.Sections)  			sections.Add (section);  		dsmccReader.Sections.Clear ();  	}  	dsmccReader.Release ("LoadMessages");  	foreach (Mpeg2Section section in sections) {  		switch (section.Table) {  		case 0x3b:  			processControlSection (section);  			break;  		case 0x3c:  			processDataSection (section);  			break;  		default:  			break;  		}  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,getDSMCCSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processStation,The following statement contains a magic number: for (int day = 2; day < 9; day++) {  	processDay (epgDirectory' day' serviceEntry);  	/*BIOPDirectoryMessage dayDirectory = findObject(epgDirectory.Bindings' day.ToString()' "dir") as BIOPDirectoryMessage;                 if (dayDirectory == null)                     return;                  if (dayDirectory.Bindings == null)                     return;                  foreach (BIOPBinding stationBinding in dayDirectory.Bindings)                 {                     if (stationBinding.Names[0].Kind == "fil")                     {                         if (stationBinding.IOPIOR != null)                         {                             int fileModuleID = stationBinding.IOPIOR.TaggedProfiles[0].ProfileBody.ObjectLocation.ModuleID;                             byte[] fileObjectKey = stationBinding.IOPIOR.TaggedProfiles[0].ProfileBody.ObjectLocation.ObjectKeyData;                             BIOPFileMessage epgFile = findObject(fileModuleID' fileObjectKey) as BIOPFileMessage;                             if (epgFile != null)                             {                                 try                                 {                                     string[] nameParts = stationBinding.Names[0].Identity.Split(new char[] { '_' });                                     if (nameParts.Length == 3)                                         processEPGFile(day' nameParts[2]' epgFile);                                     processEPGFile(day' nameParts[0]' epgFile);                                 }                                 catch (ArgumentOutOfRangeException e)                                 {                                     Logger.Instance.Write("Failed to process DSMCC file: " + e.Message);                                     modules.Clear();                                 }                                 catch (IndexOutOfRangeException e)                                 {                                     Logger.Instance.Write("Failed to process DSMCC file: " + e.Message);                                     throw;                                 }                             }                         }                     }                 }*/}  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processStation,The following statement contains a magic number: for (int day = 2; day < 9; day++) {  	processDay (epgDirectory' day' serviceEntry);  	/*BIOPDirectoryMessage dayDirectory = findObject(epgDirectory.Bindings' day.ToString()' "dir") as BIOPDirectoryMessage;                 if (dayDirectory == null)                     return;                  if (dayDirectory.Bindings == null)                     return;                  foreach (BIOPBinding stationBinding in dayDirectory.Bindings)                 {                     if (stationBinding.Names[0].Kind == "fil")                     {                         if (stationBinding.IOPIOR != null)                         {                             int fileModuleID = stationBinding.IOPIOR.TaggedProfiles[0].ProfileBody.ObjectLocation.ModuleID;                             byte[] fileObjectKey = stationBinding.IOPIOR.TaggedProfiles[0].ProfileBody.ObjectLocation.ObjectKeyData;                             BIOPFileMessage epgFile = findObject(fileModuleID' fileObjectKey) as BIOPFileMessage;                             if (epgFile != null)                             {                                 try                                 {                                     string[] nameParts = stationBinding.Names[0].Identity.Split(new char[] { '_' });                                     if (nameParts.Length == 3)                                         processEPGFile(day' nameParts[2]' epgFile);                                     processEPGFile(day' nameParts[0]' epgFile);                                 }                                 catch (ArgumentOutOfRangeException e)                                 {                                     Logger.Instance.Write("Failed to process DSMCC file: " + e.Message);                                     modules.Clear();                                 }                                 catch (IndexOutOfRangeException e)                                 {                                     Logger.Instance.Write("Failed to process DSMCC file: " + e.Message);                                     throw;                                 }                             }                         }                     }                 }*/}  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,createServiceEntries,The following statement contains a magic number: try {  	count = Int32.Parse (Utils.GetAsciiString (contentFields [2]));  }  catch (ArgumentException) {  	Logger.Instance.Write ("Service Info data is in the wrong format (2) - cannot be processed");  	return (null);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("Service Info data is in the wrong format (2) - cannot be processed");  	return (null);  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,createServiceEntries,The following statement contains a magic number: count = Int32.Parse (Utils.GetAsciiString (contentFields [2]));  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,createServiceEntries,The following statement contains a magic number: while (entryIndex < contentFields.Count) {  	ServiceEntry serviceEntry = new ServiceEntry (Utils.GetAsciiString (contentFields [entryIndex])' Utils.GetAsciiString (contentFields [entryIndex + 1])' Utils.GetAsciiString (contentFields [entryIndex + 2])' Utils.GetAsciiString (contentFields [entryIndex + 3]));  	serviceEntries.Add (serviceEntry);  	entryIndex += 4;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,createServiceEntries,The following statement contains a magic number: while (entryIndex < contentFields.Count) {  	ServiceEntry serviceEntry = new ServiceEntry (Utils.GetAsciiString (contentFields [entryIndex])' Utils.GetAsciiString (contentFields [entryIndex + 1])' Utils.GetAsciiString (contentFields [entryIndex + 2])' Utils.GetAsciiString (contentFields [entryIndex + 3]));  	serviceEntries.Add (serviceEntry);  	entryIndex += 4;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,createServiceEntries,The following statement contains a magic number: while (entryIndex < contentFields.Count) {  	ServiceEntry serviceEntry = new ServiceEntry (Utils.GetAsciiString (contentFields [entryIndex])' Utils.GetAsciiString (contentFields [entryIndex + 1])' Utils.GetAsciiString (contentFields [entryIndex + 2])' Utils.GetAsciiString (contentFields [entryIndex + 3]));  	serviceEntries.Add (serviceEntry);  	entryIndex += 4;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,createServiceEntries,The following statement contains a magic number: entryIndex += 4;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,logDirectoryStructure,The following statement contains a magic number: prefix = prefix.Substring (4);  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (rootCRIDFieldNumber == -1)  	rootCRIDFieldNumber = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: rootCRIDFieldNumber = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (programCountFieldNumber == -1)  	programCountFieldNumber = 4;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: programCountFieldNumber = 4;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (endTimeFieldNumber == -1)  	endTimeFieldNumber = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: endTimeFieldNumber = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (eventCRIDFieldNumber == -1)  	eventCRIDFieldNumber = 6;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: eventCRIDFieldNumber = 6;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (eventNameFieldNumber == -1)  	eventNameFieldNumber = 7;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: eventNameFieldNumber = 7;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (shortDescriptionFieldNumber == -1)  	shortDescriptionFieldNumber = 8;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: shortDescriptionFieldNumber = 8;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (imageCountFieldNumber == -1)  	imageCountFieldNumber = 9;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: imageCountFieldNumber = 9;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (seriesCRIDFieldNumber == -1)  	seriesCRIDFieldNumber = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: seriesCRIDFieldNumber = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: try {  	Collection<byte[]> records = Utils.SplitBytes (fileData' 0x1c);  	for (int index = 0; index < records.Count; index++) {  		Collection<byte[]> headerFields = Utils.SplitBytes (records [index]' 0x1d);  		int expectedHeaderFieldCount = MHEGParserParameters.HeaderFields;  		if (expectedHeaderFieldCount != -1 && expectedHeaderFieldCount != headerFields.Count)  			throw (new IndexOutOfRangeException ("MHEG format error - count of header fields is incorrect - expected " + expectedHeaderFieldCount + " got " + headerFields.Count));  		// These fields are not used  		// byte[] programNumber = headerFields[0];  		// string friendlyDate = Utils.GetString(headerFields[1]);  		// string stationName = Utils.GetString(headerFields[2]);  		string rootCRID = Utils.GetAsciiString (headerFields [rootCRIDFieldNumber]);  		int programCount = Int32.Parse (Utils.GetAsciiString (headerFields [programCountFieldNumber]));  		while (programCount > 0) {  			index++;  			if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  				logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  			Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  			try {  				if (dataFields [1].Length != 0) {  					EPGEntry epgEntry = new EPGEntry ();  					epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  					epgEntry.TransportStreamID = tvStation.TransportStreamID;  					epgEntry.ServiceID = serviceID;  					epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  					epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  					epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  					// These fields are not used  					// byte[] titleLineCount = dataFields[3];  					// byte[] friendlyTime = dataFields[4];  					// byte[] entryType = dataFields[5];  					string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  					byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  					string eventName = Utils.GetString (editedEventName' "utf-8");  					epgEntry.EventName = Utils.Compact (eventName);  					byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  					string eventDescription = Utils.GetString (editedDescription' "utf-8");  					processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  					int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  					if (iconCount < 0 || iconCount > 10) {  						Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  						if (logger != null)  							logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  					}  					else {  						int imageIndex;  						for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  							switch (Utils.GetAsciiString (dataFields [imageIndex])) {  							case "/pngs/ao.png":  								epgEntry.ParentalRating = "AO";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  								break;  							case "/pngs/pgr.png":  								epgEntry.ParentalRating = "PGR";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  								break;  							case "/pngs/g.png":  								epgEntry.ParentalRating = "G";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  								break;  							case "/pngs/ear.png":  								epgEntry.SubTitles = "teletext";  								break;  							case "/pngs/hd.png":  								epgEntry.VideoQuality = "HDTV";  								break;  							case "/pngs/dolby.png":  								epgEntry.AudioQuality = "dolby digital";  								break;  							default:  								break;  							}  						}  						int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  						int addedDetailFieldCount = iconCount;  						string seriesCRID = string.Empty;  						if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  							// This field is not used.  							// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  							seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  							// These fields are not used  							// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          							// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  							// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  							addedDetailFieldCount += 6;  						}  						else  							addedDetailFieldCount += 2;  						if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  							throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  						processNZLCRID (epgEntry' seriesCRID' eventCRID);  						epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  						if (epgEntry.EventCategory == null)  							epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  						tvStation.AddEPGEntry (epgEntry);  						if (titleLogger != null)  							logTitle (eventName' epgEntry' titleLogger);  						if (descriptionLogger != null)  							logDescription (eventDescription' epgEntry' descriptionLogger);  					}  				}  				programCount--;  			}  			catch (ArithmeticException) {  				Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  				if (logger != null)  					logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  			}  		}  	}  }  catch (ArithmeticException e) {  	throw (new ArgumentOutOfRangeException ("DSMCC file entry parsing failed: " + e.Message));  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: try {  	Collection<byte[]> records = Utils.SplitBytes (fileData' 0x1c);  	for (int index = 0; index < records.Count; index++) {  		Collection<byte[]> headerFields = Utils.SplitBytes (records [index]' 0x1d);  		int expectedHeaderFieldCount = MHEGParserParameters.HeaderFields;  		if (expectedHeaderFieldCount != -1 && expectedHeaderFieldCount != headerFields.Count)  			throw (new IndexOutOfRangeException ("MHEG format error - count of header fields is incorrect - expected " + expectedHeaderFieldCount + " got " + headerFields.Count));  		// These fields are not used  		// byte[] programNumber = headerFields[0];  		// string friendlyDate = Utils.GetString(headerFields[1]);  		// string stationName = Utils.GetString(headerFields[2]);  		string rootCRID = Utils.GetAsciiString (headerFields [rootCRIDFieldNumber]);  		int programCount = Int32.Parse (Utils.GetAsciiString (headerFields [programCountFieldNumber]));  		while (programCount > 0) {  			index++;  			if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  				logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  			Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  			try {  				if (dataFields [1].Length != 0) {  					EPGEntry epgEntry = new EPGEntry ();  					epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  					epgEntry.TransportStreamID = tvStation.TransportStreamID;  					epgEntry.ServiceID = serviceID;  					epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  					epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  					epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  					// These fields are not used  					// byte[] titleLineCount = dataFields[3];  					// byte[] friendlyTime = dataFields[4];  					// byte[] entryType = dataFields[5];  					string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  					byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  					string eventName = Utils.GetString (editedEventName' "utf-8");  					epgEntry.EventName = Utils.Compact (eventName);  					byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  					string eventDescription = Utils.GetString (editedDescription' "utf-8");  					processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  					int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  					if (iconCount < 0 || iconCount > 10) {  						Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  						if (logger != null)  							logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  					}  					else {  						int imageIndex;  						for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  							switch (Utils.GetAsciiString (dataFields [imageIndex])) {  							case "/pngs/ao.png":  								epgEntry.ParentalRating = "AO";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  								break;  							case "/pngs/pgr.png":  								epgEntry.ParentalRating = "PGR";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  								break;  							case "/pngs/g.png":  								epgEntry.ParentalRating = "G";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  								break;  							case "/pngs/ear.png":  								epgEntry.SubTitles = "teletext";  								break;  							case "/pngs/hd.png":  								epgEntry.VideoQuality = "HDTV";  								break;  							case "/pngs/dolby.png":  								epgEntry.AudioQuality = "dolby digital";  								break;  							default:  								break;  							}  						}  						int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  						int addedDetailFieldCount = iconCount;  						string seriesCRID = string.Empty;  						if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  							// This field is not used.  							// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  							seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  							// These fields are not used  							// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          							// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  							// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  							addedDetailFieldCount += 6;  						}  						else  							addedDetailFieldCount += 2;  						if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  							throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  						processNZLCRID (epgEntry' seriesCRID' eventCRID);  						epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  						if (epgEntry.EventCategory == null)  							epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  						tvStation.AddEPGEntry (epgEntry);  						if (titleLogger != null)  							logTitle (eventName' epgEntry' titleLogger);  						if (descriptionLogger != null)  							logDescription (eventDescription' epgEntry' descriptionLogger);  					}  				}  				programCount--;  			}  			catch (ArithmeticException) {  				Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  				if (logger != null)  					logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  			}  		}  	}  }  catch (ArithmeticException e) {  	throw (new ArgumentOutOfRangeException ("DSMCC file entry parsing failed: " + e.Message));  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: try {  	Collection<byte[]> records = Utils.SplitBytes (fileData' 0x1c);  	for (int index = 0; index < records.Count; index++) {  		Collection<byte[]> headerFields = Utils.SplitBytes (records [index]' 0x1d);  		int expectedHeaderFieldCount = MHEGParserParameters.HeaderFields;  		if (expectedHeaderFieldCount != -1 && expectedHeaderFieldCount != headerFields.Count)  			throw (new IndexOutOfRangeException ("MHEG format error - count of header fields is incorrect - expected " + expectedHeaderFieldCount + " got " + headerFields.Count));  		// These fields are not used  		// byte[] programNumber = headerFields[0];  		// string friendlyDate = Utils.GetString(headerFields[1]);  		// string stationName = Utils.GetString(headerFields[2]);  		string rootCRID = Utils.GetAsciiString (headerFields [rootCRIDFieldNumber]);  		int programCount = Int32.Parse (Utils.GetAsciiString (headerFields [programCountFieldNumber]));  		while (programCount > 0) {  			index++;  			if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  				logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  			Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  			try {  				if (dataFields [1].Length != 0) {  					EPGEntry epgEntry = new EPGEntry ();  					epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  					epgEntry.TransportStreamID = tvStation.TransportStreamID;  					epgEntry.ServiceID = serviceID;  					epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  					epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  					epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  					// These fields are not used  					// byte[] titleLineCount = dataFields[3];  					// byte[] friendlyTime = dataFields[4];  					// byte[] entryType = dataFields[5];  					string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  					byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  					string eventName = Utils.GetString (editedEventName' "utf-8");  					epgEntry.EventName = Utils.Compact (eventName);  					byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  					string eventDescription = Utils.GetString (editedDescription' "utf-8");  					processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  					int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  					if (iconCount < 0 || iconCount > 10) {  						Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  						if (logger != null)  							logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  					}  					else {  						int imageIndex;  						for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  							switch (Utils.GetAsciiString (dataFields [imageIndex])) {  							case "/pngs/ao.png":  								epgEntry.ParentalRating = "AO";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  								break;  							case "/pngs/pgr.png":  								epgEntry.ParentalRating = "PGR";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  								break;  							case "/pngs/g.png":  								epgEntry.ParentalRating = "G";  								epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  								break;  							case "/pngs/ear.png":  								epgEntry.SubTitles = "teletext";  								break;  							case "/pngs/hd.png":  								epgEntry.VideoQuality = "HDTV";  								break;  							case "/pngs/dolby.png":  								epgEntry.AudioQuality = "dolby digital";  								break;  							default:  								break;  							}  						}  						int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  						int addedDetailFieldCount = iconCount;  						string seriesCRID = string.Empty;  						if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  							// This field is not used.  							// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  							seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  							// These fields are not used  							// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          							// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  							// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  							addedDetailFieldCount += 6;  						}  						else  							addedDetailFieldCount += 2;  						if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  							throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  						processNZLCRID (epgEntry' seriesCRID' eventCRID);  						epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  						if (epgEntry.EventCategory == null)  							epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  						tvStation.AddEPGEntry (epgEntry);  						if (titleLogger != null)  							logTitle (eventName' epgEntry' titleLogger);  						if (descriptionLogger != null)  							logDescription (eventDescription' epgEntry' descriptionLogger);  					}  				}  				programCount--;  			}  			catch (ArithmeticException) {  				Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  				if (logger != null)  					logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  			}  		}  	}  }  catch (ArithmeticException e) {  	throw (new ArgumentOutOfRangeException ("DSMCC file entry parsing failed: " + e.Message));  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: for (int index = 0; index < records.Count; index++) {  	Collection<byte[]> headerFields = Utils.SplitBytes (records [index]' 0x1d);  	int expectedHeaderFieldCount = MHEGParserParameters.HeaderFields;  	if (expectedHeaderFieldCount != -1 && expectedHeaderFieldCount != headerFields.Count)  		throw (new IndexOutOfRangeException ("MHEG format error - count of header fields is incorrect - expected " + expectedHeaderFieldCount + " got " + headerFields.Count));  	// These fields are not used  	// byte[] programNumber = headerFields[0];  	// string friendlyDate = Utils.GetString(headerFields[1]);  	// string stationName = Utils.GetString(headerFields[2]);  	string rootCRID = Utils.GetAsciiString (headerFields [rootCRIDFieldNumber]);  	int programCount = Int32.Parse (Utils.GetAsciiString (headerFields [programCountFieldNumber]));  	while (programCount > 0) {  		index++;  		if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  			logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  		Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  		try {  			if (dataFields [1].Length != 0) {  				EPGEntry epgEntry = new EPGEntry ();  				epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  				epgEntry.TransportStreamID = tvStation.TransportStreamID;  				epgEntry.ServiceID = serviceID;  				epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  				epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  				epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  				// These fields are not used  				// byte[] titleLineCount = dataFields[3];  				// byte[] friendlyTime = dataFields[4];  				// byte[] entryType = dataFields[5];  				string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  				byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  				string eventName = Utils.GetString (editedEventName' "utf-8");  				epgEntry.EventName = Utils.Compact (eventName);  				byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  				string eventDescription = Utils.GetString (editedDescription' "utf-8");  				processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  				int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  				if (iconCount < 0 || iconCount > 10) {  					Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  					if (logger != null)  						logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  				}  				else {  					int imageIndex;  					for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  						switch (Utils.GetAsciiString (dataFields [imageIndex])) {  						case "/pngs/ao.png":  							epgEntry.ParentalRating = "AO";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  							break;  						case "/pngs/pgr.png":  							epgEntry.ParentalRating = "PGR";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  							break;  						case "/pngs/g.png":  							epgEntry.ParentalRating = "G";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  							break;  						case "/pngs/ear.png":  							epgEntry.SubTitles = "teletext";  							break;  						case "/pngs/hd.png":  							epgEntry.VideoQuality = "HDTV";  							break;  						case "/pngs/dolby.png":  							epgEntry.AudioQuality = "dolby digital";  							break;  						default:  							break;  						}  					}  					int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  					int addedDetailFieldCount = iconCount;  					string seriesCRID = string.Empty;  					if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  						// This field is not used.  						// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  						seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  						// These fields are not used  						// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          						// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  						// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  						addedDetailFieldCount += 6;  					}  					else  						addedDetailFieldCount += 2;  					if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  						throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  					processNZLCRID (epgEntry' seriesCRID' eventCRID);  					epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  					if (epgEntry.EventCategory == null)  						epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  					tvStation.AddEPGEntry (epgEntry);  					if (titleLogger != null)  						logTitle (eventName' epgEntry' titleLogger);  					if (descriptionLogger != null)  						logDescription (eventDescription' epgEntry' descriptionLogger);  				}  			}  			programCount--;  		}  		catch (ArithmeticException) {  			Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  			if (logger != null)  				logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  		}  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: for (int index = 0; index < records.Count; index++) {  	Collection<byte[]> headerFields = Utils.SplitBytes (records [index]' 0x1d);  	int expectedHeaderFieldCount = MHEGParserParameters.HeaderFields;  	if (expectedHeaderFieldCount != -1 && expectedHeaderFieldCount != headerFields.Count)  		throw (new IndexOutOfRangeException ("MHEG format error - count of header fields is incorrect - expected " + expectedHeaderFieldCount + " got " + headerFields.Count));  	// These fields are not used  	// byte[] programNumber = headerFields[0];  	// string friendlyDate = Utils.GetString(headerFields[1]);  	// string stationName = Utils.GetString(headerFields[2]);  	string rootCRID = Utils.GetAsciiString (headerFields [rootCRIDFieldNumber]);  	int programCount = Int32.Parse (Utils.GetAsciiString (headerFields [programCountFieldNumber]));  	while (programCount > 0) {  		index++;  		if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  			logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  		Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  		try {  			if (dataFields [1].Length != 0) {  				EPGEntry epgEntry = new EPGEntry ();  				epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  				epgEntry.TransportStreamID = tvStation.TransportStreamID;  				epgEntry.ServiceID = serviceID;  				epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  				epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  				epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  				// These fields are not used  				// byte[] titleLineCount = dataFields[3];  				// byte[] friendlyTime = dataFields[4];  				// byte[] entryType = dataFields[5];  				string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  				byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  				string eventName = Utils.GetString (editedEventName' "utf-8");  				epgEntry.EventName = Utils.Compact (eventName);  				byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  				string eventDescription = Utils.GetString (editedDescription' "utf-8");  				processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  				int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  				if (iconCount < 0 || iconCount > 10) {  					Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  					if (logger != null)  						logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  				}  				else {  					int imageIndex;  					for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  						switch (Utils.GetAsciiString (dataFields [imageIndex])) {  						case "/pngs/ao.png":  							epgEntry.ParentalRating = "AO";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  							break;  						case "/pngs/pgr.png":  							epgEntry.ParentalRating = "PGR";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  							break;  						case "/pngs/g.png":  							epgEntry.ParentalRating = "G";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  							break;  						case "/pngs/ear.png":  							epgEntry.SubTitles = "teletext";  							break;  						case "/pngs/hd.png":  							epgEntry.VideoQuality = "HDTV";  							break;  						case "/pngs/dolby.png":  							epgEntry.AudioQuality = "dolby digital";  							break;  						default:  							break;  						}  					}  					int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  					int addedDetailFieldCount = iconCount;  					string seriesCRID = string.Empty;  					if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  						// This field is not used.  						// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  						seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  						// These fields are not used  						// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          						// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  						// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  						addedDetailFieldCount += 6;  					}  					else  						addedDetailFieldCount += 2;  					if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  						throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  					processNZLCRID (epgEntry' seriesCRID' eventCRID);  					epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  					if (epgEntry.EventCategory == null)  						epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  					tvStation.AddEPGEntry (epgEntry);  					if (titleLogger != null)  						logTitle (eventName' epgEntry' titleLogger);  					if (descriptionLogger != null)  						logDescription (eventDescription' epgEntry' descriptionLogger);  				}  			}  			programCount--;  		}  		catch (ArithmeticException) {  			Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  			if (logger != null)  				logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  		}  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: for (int index = 0; index < records.Count; index++) {  	Collection<byte[]> headerFields = Utils.SplitBytes (records [index]' 0x1d);  	int expectedHeaderFieldCount = MHEGParserParameters.HeaderFields;  	if (expectedHeaderFieldCount != -1 && expectedHeaderFieldCount != headerFields.Count)  		throw (new IndexOutOfRangeException ("MHEG format error - count of header fields is incorrect - expected " + expectedHeaderFieldCount + " got " + headerFields.Count));  	// These fields are not used  	// byte[] programNumber = headerFields[0];  	// string friendlyDate = Utils.GetString(headerFields[1]);  	// string stationName = Utils.GetString(headerFields[2]);  	string rootCRID = Utils.GetAsciiString (headerFields [rootCRIDFieldNumber]);  	int programCount = Int32.Parse (Utils.GetAsciiString (headerFields [programCountFieldNumber]));  	while (programCount > 0) {  		index++;  		if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  			logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  		Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  		try {  			if (dataFields [1].Length != 0) {  				EPGEntry epgEntry = new EPGEntry ();  				epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  				epgEntry.TransportStreamID = tvStation.TransportStreamID;  				epgEntry.ServiceID = serviceID;  				epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  				epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  				epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  				// These fields are not used  				// byte[] titleLineCount = dataFields[3];  				// byte[] friendlyTime = dataFields[4];  				// byte[] entryType = dataFields[5];  				string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  				byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  				string eventName = Utils.GetString (editedEventName' "utf-8");  				epgEntry.EventName = Utils.Compact (eventName);  				byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  				string eventDescription = Utils.GetString (editedDescription' "utf-8");  				processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  				int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  				if (iconCount < 0 || iconCount > 10) {  					Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  					if (logger != null)  						logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  				}  				else {  					int imageIndex;  					for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  						switch (Utils.GetAsciiString (dataFields [imageIndex])) {  						case "/pngs/ao.png":  							epgEntry.ParentalRating = "AO";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  							break;  						case "/pngs/pgr.png":  							epgEntry.ParentalRating = "PGR";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  							break;  						case "/pngs/g.png":  							epgEntry.ParentalRating = "G";  							epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  							break;  						case "/pngs/ear.png":  							epgEntry.SubTitles = "teletext";  							break;  						case "/pngs/hd.png":  							epgEntry.VideoQuality = "HDTV";  							break;  						case "/pngs/dolby.png":  							epgEntry.AudioQuality = "dolby digital";  							break;  						default:  							break;  						}  					}  					int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  					int addedDetailFieldCount = iconCount;  					string seriesCRID = string.Empty;  					if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  						// This field is not used.  						// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  						seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  						// These fields are not used  						// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          						// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  						// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  						addedDetailFieldCount += 6;  					}  					else  						addedDetailFieldCount += 2;  					if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  						throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  					processNZLCRID (epgEntry' seriesCRID' eventCRID);  					epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  					if (epgEntry.EventCategory == null)  						epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  					tvStation.AddEPGEntry (epgEntry);  					if (titleLogger != null)  						logTitle (eventName' epgEntry' titleLogger);  					if (descriptionLogger != null)  						logDescription (eventDescription' epgEntry' descriptionLogger);  				}  			}  			programCount--;  		}  		catch (ArithmeticException) {  			Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  			if (logger != null)  				logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  		}  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: while (programCount > 0) {  	index++;  	if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  		logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  	Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  	try {  		if (dataFields [1].Length != 0) {  			EPGEntry epgEntry = new EPGEntry ();  			epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  			epgEntry.TransportStreamID = tvStation.TransportStreamID;  			epgEntry.ServiceID = serviceID;  			epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  			epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  			epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  			// These fields are not used  			// byte[] titleLineCount = dataFields[3];  			// byte[] friendlyTime = dataFields[4];  			// byte[] entryType = dataFields[5];  			string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  			byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  			string eventName = Utils.GetString (editedEventName' "utf-8");  			epgEntry.EventName = Utils.Compact (eventName);  			byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  			string eventDescription = Utils.GetString (editedDescription' "utf-8");  			processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  			int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  			if (iconCount < 0 || iconCount > 10) {  				Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  				if (logger != null)  					logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  			}  			else {  				int imageIndex;  				for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  					switch (Utils.GetAsciiString (dataFields [imageIndex])) {  					case "/pngs/ao.png":  						epgEntry.ParentalRating = "AO";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  						break;  					case "/pngs/pgr.png":  						epgEntry.ParentalRating = "PGR";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  						break;  					case "/pngs/g.png":  						epgEntry.ParentalRating = "G";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  						break;  					case "/pngs/ear.png":  						epgEntry.SubTitles = "teletext";  						break;  					case "/pngs/hd.png":  						epgEntry.VideoQuality = "HDTV";  						break;  					case "/pngs/dolby.png":  						epgEntry.AudioQuality = "dolby digital";  						break;  					default:  						break;  					}  				}  				int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  				int addedDetailFieldCount = iconCount;  				string seriesCRID = string.Empty;  				if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  					// This field is not used.  					// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  					seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  					// These fields are not used  					// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          					// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  					// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  					addedDetailFieldCount += 6;  				}  				else  					addedDetailFieldCount += 2;  				if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  					throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  				processNZLCRID (epgEntry' seriesCRID' eventCRID);  				epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  				if (epgEntry.EventCategory == null)  					epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  				tvStation.AddEPGEntry (epgEntry);  				if (titleLogger != null)  					logTitle (eventName' epgEntry' titleLogger);  				if (descriptionLogger != null)  					logDescription (eventDescription' epgEntry' descriptionLogger);  			}  		}  		programCount--;  	}  	catch (ArithmeticException) {  		Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  		if (logger != null)  			logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: while (programCount > 0) {  	index++;  	if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  		logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  	Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  	try {  		if (dataFields [1].Length != 0) {  			EPGEntry epgEntry = new EPGEntry ();  			epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  			epgEntry.TransportStreamID = tvStation.TransportStreamID;  			epgEntry.ServiceID = serviceID;  			epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  			epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  			epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  			// These fields are not used  			// byte[] titleLineCount = dataFields[3];  			// byte[] friendlyTime = dataFields[4];  			// byte[] entryType = dataFields[5];  			string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  			byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  			string eventName = Utils.GetString (editedEventName' "utf-8");  			epgEntry.EventName = Utils.Compact (eventName);  			byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  			string eventDescription = Utils.GetString (editedDescription' "utf-8");  			processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  			int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  			if (iconCount < 0 || iconCount > 10) {  				Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  				if (logger != null)  					logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  			}  			else {  				int imageIndex;  				for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  					switch (Utils.GetAsciiString (dataFields [imageIndex])) {  					case "/pngs/ao.png":  						epgEntry.ParentalRating = "AO";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  						break;  					case "/pngs/pgr.png":  						epgEntry.ParentalRating = "PGR";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  						break;  					case "/pngs/g.png":  						epgEntry.ParentalRating = "G";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  						break;  					case "/pngs/ear.png":  						epgEntry.SubTitles = "teletext";  						break;  					case "/pngs/hd.png":  						epgEntry.VideoQuality = "HDTV";  						break;  					case "/pngs/dolby.png":  						epgEntry.AudioQuality = "dolby digital";  						break;  					default:  						break;  					}  				}  				int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  				int addedDetailFieldCount = iconCount;  				string seriesCRID = string.Empty;  				if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  					// This field is not used.  					// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  					seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  					// These fields are not used  					// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          					// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  					// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  					addedDetailFieldCount += 6;  				}  				else  					addedDetailFieldCount += 2;  				if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  					throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  				processNZLCRID (epgEntry' seriesCRID' eventCRID);  				epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  				if (epgEntry.EventCategory == null)  					epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  				tvStation.AddEPGEntry (epgEntry);  				if (titleLogger != null)  					logTitle (eventName' epgEntry' titleLogger);  				if (descriptionLogger != null)  					logDescription (eventDescription' epgEntry' descriptionLogger);  			}  		}  		programCount--;  	}  	catch (ArithmeticException) {  		Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  		if (logger != null)  			logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: while (programCount > 0) {  	index++;  	if (logger != null && RunParameters.Instance.TraceIDs.Contains ("DSMCCRECORD"))  		logger.Dump ("DSMCC Parser data - Program Entry"' records [index]' records [index].Length);  	Collection<byte[]> dataFields = Utils.SplitBytes (records [index]' 0x1d);  	try {  		if (dataFields [1].Length != 0) {  			EPGEntry epgEntry = new EPGEntry ();  			epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  			epgEntry.TransportStreamID = tvStation.TransportStreamID;  			epgEntry.ServiceID = serviceID;  			epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  			epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  			epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  			// These fields are not used  			// byte[] titleLineCount = dataFields[3];  			// byte[] friendlyTime = dataFields[4];  			// byte[] entryType = dataFields[5];  			string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  			byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  			string eventName = Utils.GetString (editedEventName' "utf-8");  			epgEntry.EventName = Utils.Compact (eventName);  			byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  			string eventDescription = Utils.GetString (editedDescription' "utf-8");  			processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  			int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  			if (iconCount < 0 || iconCount > 10) {  				Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  				if (logger != null)  					logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  			}  			else {  				int imageIndex;  				for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  					switch (Utils.GetAsciiString (dataFields [imageIndex])) {  					case "/pngs/ao.png":  						epgEntry.ParentalRating = "AO";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  						break;  					case "/pngs/pgr.png":  						epgEntry.ParentalRating = "PGR";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  						break;  					case "/pngs/g.png":  						epgEntry.ParentalRating = "G";  						epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  						break;  					case "/pngs/ear.png":  						epgEntry.SubTitles = "teletext";  						break;  					case "/pngs/hd.png":  						epgEntry.VideoQuality = "HDTV";  						break;  					case "/pngs/dolby.png":  						epgEntry.AudioQuality = "dolby digital";  						break;  					default:  						break;  					}  				}  				int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  				int addedDetailFieldCount = iconCount;  				string seriesCRID = string.Empty;  				if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  					// This field is not used.  					// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  					seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  					// These fields are not used  					// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          					// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  					// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  					addedDetailFieldCount += 6;  				}  				else  					addedDetailFieldCount += 2;  				if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  					throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  				processNZLCRID (epgEntry' seriesCRID' eventCRID);  				epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  				if (epgEntry.EventCategory == null)  					epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  				tvStation.AddEPGEntry (epgEntry);  				if (titleLogger != null)  					logTitle (eventName' epgEntry' titleLogger);  				if (descriptionLogger != null)  					logDescription (eventDescription' epgEntry' descriptionLogger);  			}  		}  		programCount--;  	}  	catch (ArithmeticException) {  		Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  		if (logger != null)  			logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: try {  	if (dataFields [1].Length != 0) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = serviceID;  		epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  		epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  		epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  		// These fields are not used  		// byte[] titleLineCount = dataFields[3];  		// byte[] friendlyTime = dataFields[4];  		// byte[] entryType = dataFields[5];  		string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  		byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  		string eventName = Utils.GetString (editedEventName' "utf-8");  		epgEntry.EventName = Utils.Compact (eventName);  		byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  		string eventDescription = Utils.GetString (editedDescription' "utf-8");  		processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  		int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  		if (iconCount < 0 || iconCount > 10) {  			Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  			if (logger != null)  				logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  		}  		else {  			int imageIndex;  			for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  				switch (Utils.GetAsciiString (dataFields [imageIndex])) {  				case "/pngs/ao.png":  					epgEntry.ParentalRating = "AO";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  					break;  				case "/pngs/pgr.png":  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  					break;  				case "/pngs/g.png":  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  					break;  				case "/pngs/ear.png":  					epgEntry.SubTitles = "teletext";  					break;  				case "/pngs/hd.png":  					epgEntry.VideoQuality = "HDTV";  					break;  				case "/pngs/dolby.png":  					epgEntry.AudioQuality = "dolby digital";  					break;  				default:  					break;  				}  			}  			int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  			int addedDetailFieldCount = iconCount;  			string seriesCRID = string.Empty;  			if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  				// This field is not used.  				// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  				seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  				// These fields are not used  				// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          				// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  				// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  				addedDetailFieldCount += 6;  			}  			else  				addedDetailFieldCount += 2;  			if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  				throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  			processNZLCRID (epgEntry' seriesCRID' eventCRID);  			epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  			if (epgEntry.EventCategory == null)  				epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  			tvStation.AddEPGEntry (epgEntry);  			if (titleLogger != null)  				logTitle (eventName' epgEntry' titleLogger);  			if (descriptionLogger != null)  				logDescription (eventDescription' epgEntry' descriptionLogger);  		}  	}  	programCount--;  }  catch (ArithmeticException) {  	Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  	if (logger != null)  		logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: try {  	if (dataFields [1].Length != 0) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = serviceID;  		epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  		epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  		epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  		// These fields are not used  		// byte[] titleLineCount = dataFields[3];  		// byte[] friendlyTime = dataFields[4];  		// byte[] entryType = dataFields[5];  		string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  		byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  		string eventName = Utils.GetString (editedEventName' "utf-8");  		epgEntry.EventName = Utils.Compact (eventName);  		byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  		string eventDescription = Utils.GetString (editedDescription' "utf-8");  		processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  		int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  		if (iconCount < 0 || iconCount > 10) {  			Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  			if (logger != null)  				logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  		}  		else {  			int imageIndex;  			for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  				switch (Utils.GetAsciiString (dataFields [imageIndex])) {  				case "/pngs/ao.png":  					epgEntry.ParentalRating = "AO";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  					break;  				case "/pngs/pgr.png":  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  					break;  				case "/pngs/g.png":  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  					break;  				case "/pngs/ear.png":  					epgEntry.SubTitles = "teletext";  					break;  				case "/pngs/hd.png":  					epgEntry.VideoQuality = "HDTV";  					break;  				case "/pngs/dolby.png":  					epgEntry.AudioQuality = "dolby digital";  					break;  				default:  					break;  				}  			}  			int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  			int addedDetailFieldCount = iconCount;  			string seriesCRID = string.Empty;  			if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  				// This field is not used.  				// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  				seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  				// These fields are not used  				// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          				// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  				// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  				addedDetailFieldCount += 6;  			}  			else  				addedDetailFieldCount += 2;  			if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  				throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  			processNZLCRID (epgEntry' seriesCRID' eventCRID);  			epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  			if (epgEntry.EventCategory == null)  				epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  			tvStation.AddEPGEntry (epgEntry);  			if (titleLogger != null)  				logTitle (eventName' epgEntry' titleLogger);  			if (descriptionLogger != null)  				logDescription (eventDescription' epgEntry' descriptionLogger);  		}  	}  	programCount--;  }  catch (ArithmeticException) {  	Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  	if (logger != null)  		logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: try {  	if (dataFields [1].Length != 0) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = serviceID;  		epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  		epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  		epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  		// These fields are not used  		// byte[] titleLineCount = dataFields[3];  		// byte[] friendlyTime = dataFields[4];  		// byte[] entryType = dataFields[5];  		string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  		byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  		string eventName = Utils.GetString (editedEventName' "utf-8");  		epgEntry.EventName = Utils.Compact (eventName);  		byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  		string eventDescription = Utils.GetString (editedDescription' "utf-8");  		processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  		int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  		if (iconCount < 0 || iconCount > 10) {  			Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  			if (logger != null)  				logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  		}  		else {  			int imageIndex;  			for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  				switch (Utils.GetAsciiString (dataFields [imageIndex])) {  				case "/pngs/ao.png":  					epgEntry.ParentalRating = "AO";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  					break;  				case "/pngs/pgr.png":  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  					break;  				case "/pngs/g.png":  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  					break;  				case "/pngs/ear.png":  					epgEntry.SubTitles = "teletext";  					break;  				case "/pngs/hd.png":  					epgEntry.VideoQuality = "HDTV";  					break;  				case "/pngs/dolby.png":  					epgEntry.AudioQuality = "dolby digital";  					break;  				default:  					break;  				}  			}  			int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  			int addedDetailFieldCount = iconCount;  			string seriesCRID = string.Empty;  			if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  				// This field is not used.  				// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  				seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  				// These fields are not used  				// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          				// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  				// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  				addedDetailFieldCount += 6;  			}  			else  				addedDetailFieldCount += 2;  			if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  				throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  			processNZLCRID (epgEntry' seriesCRID' eventCRID);  			epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  			if (epgEntry.EventCategory == null)  				epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  			tvStation.AddEPGEntry (epgEntry);  			if (titleLogger != null)  				logTitle (eventName' epgEntry' titleLogger);  			if (descriptionLogger != null)  				logDescription (eventDescription' epgEntry' descriptionLogger);  		}  	}  	programCount--;  }  catch (ArithmeticException) {  	Logger.Instance.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  	if (logger != null)  		logger.Dump ("DSMCC Parser error - Arithmetic Exception - File Entry"' fileData' fileData.Length);  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (dataFields [1].Length != 0) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = serviceID;  	epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  	epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  	epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  	// These fields are not used  	// byte[] titleLineCount = dataFields[3];  	// byte[] friendlyTime = dataFields[4];  	// byte[] entryType = dataFields[5];  	string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  	byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  	string eventName = Utils.GetString (editedEventName' "utf-8");  	epgEntry.EventName = Utils.Compact (eventName);  	byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  	string eventDescription = Utils.GetString (editedDescription' "utf-8");  	processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  	int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  	if (iconCount < 0 || iconCount > 10) {  		Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  		if (logger != null)  			logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  	}  	else {  		int imageIndex;  		for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  			switch (Utils.GetAsciiString (dataFields [imageIndex])) {  			case "/pngs/ao.png":  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  				break;  			case "/pngs/pgr.png":  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  				break;  			case "/pngs/g.png":  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  				break;  			case "/pngs/ear.png":  				epgEntry.SubTitles = "teletext";  				break;  			case "/pngs/hd.png":  				epgEntry.VideoQuality = "HDTV";  				break;  			case "/pngs/dolby.png":  				epgEntry.AudioQuality = "dolby digital";  				break;  			default:  				break;  			}  		}  		int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  		int addedDetailFieldCount = iconCount;  		string seriesCRID = string.Empty;  		if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  			// This field is not used.  			// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  			seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  			// These fields are not used  			// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          			// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  			// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  			addedDetailFieldCount += 6;  		}  		else  			addedDetailFieldCount += 2;  		if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  			throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  		processNZLCRID (epgEntry' seriesCRID' eventCRID);  		epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  		if (epgEntry.EventCategory == null)  			epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eventName' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logDescription (eventDescription' epgEntry' descriptionLogger);  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (dataFields [1].Length != 0) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = serviceID;  	epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  	epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  	epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  	// These fields are not used  	// byte[] titleLineCount = dataFields[3];  	// byte[] friendlyTime = dataFields[4];  	// byte[] entryType = dataFields[5];  	string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  	byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  	string eventName = Utils.GetString (editedEventName' "utf-8");  	epgEntry.EventName = Utils.Compact (eventName);  	byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  	string eventDescription = Utils.GetString (editedDescription' "utf-8");  	processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  	int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  	if (iconCount < 0 || iconCount > 10) {  		Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  		if (logger != null)  			logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  	}  	else {  		int imageIndex;  		for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  			switch (Utils.GetAsciiString (dataFields [imageIndex])) {  			case "/pngs/ao.png":  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  				break;  			case "/pngs/pgr.png":  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  				break;  			case "/pngs/g.png":  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  				break;  			case "/pngs/ear.png":  				epgEntry.SubTitles = "teletext";  				break;  			case "/pngs/hd.png":  				epgEntry.VideoQuality = "HDTV";  				break;  			case "/pngs/dolby.png":  				epgEntry.AudioQuality = "dolby digital";  				break;  			default:  				break;  			}  		}  		int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  		int addedDetailFieldCount = iconCount;  		string seriesCRID = string.Empty;  		if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  			// This field is not used.  			// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  			seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  			// These fields are not used  			// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          			// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  			// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  			addedDetailFieldCount += 6;  		}  		else  			addedDetailFieldCount += 2;  		if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  			throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  		processNZLCRID (epgEntry' seriesCRID' eventCRID);  		epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  		if (epgEntry.EventCategory == null)  			epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eventName' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logDescription (eventDescription' epgEntry' descriptionLogger);  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (dataFields [1].Length != 0) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = serviceID;  	epgEntry.EventID = Int32.Parse (Utils.GetAsciiString (headerFields [eventIDFieldNumber]));  	epgEntry.StartTime = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [startTimeFieldNumber])))));  	epgEntry.Duration = Utils.RoundTime (date.AddSeconds (((double)Int32.Parse (Utils.GetAsciiString (dataFields [endTimeFieldNumber])))) - epgEntry.StartTime);  	// These fields are not used  	// byte[] titleLineCount = dataFields[3];  	// byte[] friendlyTime = dataFields[4];  	// byte[] entryType = dataFields[5];  	string eventCRID = Utils.GetAsciiString (dataFields [eventCRIDFieldNumber]);  	byte[] editedEventName = replaceByte (dataFields [eventNameFieldNumber]' 0x0d' 0x20);  	string eventName = Utils.GetString (editedEventName' "utf-8");  	epgEntry.EventName = Utils.Compact (eventName);  	byte[] editedDescription = replaceByte (dataFields [shortDescriptionFieldNumber]' 0x0d' 0x20);  	string eventDescription = Utils.GetString (editedDescription' "utf-8");  	processNZLShortDescription (epgEntry' Utils.Compact (eventDescription));  	int iconCount = Int32.Parse (Utils.GetAsciiString (dataFields [imageCountFieldNumber]));  	if (iconCount < 0 || iconCount > 10) {  		Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  		if (logger != null)  			logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  	}  	else {  		int imageIndex;  		for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  			switch (Utils.GetAsciiString (dataFields [imageIndex])) {  			case "/pngs/ao.png":  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  				break;  			case "/pngs/pgr.png":  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  				break;  			case "/pngs/g.png":  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  				break;  			case "/pngs/ear.png":  				epgEntry.SubTitles = "teletext";  				break;  			case "/pngs/hd.png":  				epgEntry.VideoQuality = "HDTV";  				break;  			case "/pngs/dolby.png":  				epgEntry.AudioQuality = "dolby digital";  				break;  			default:  				break;  			}  		}  		int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  		int addedDetailFieldCount = iconCount;  		string seriesCRID = string.Empty;  		if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  			// This field is not used.  			// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  			seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  			// These fields are not used  			// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          			// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  			// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  			addedDetailFieldCount += 6;  		}  		else  			addedDetailFieldCount += 2;  		if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  			throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  		processNZLCRID (epgEntry' seriesCRID' eventCRID);  		epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  		if (epgEntry.EventCategory == null)  			epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eventName' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logDescription (eventDescription' epgEntry' descriptionLogger);  	}  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (iconCount < 0 || iconCount > 10) {  	Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  	if (logger != null)  		logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  }  else {  	int imageIndex;  	for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  		switch (Utils.GetAsciiString (dataFields [imageIndex])) {  		case "/pngs/ao.png":  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  			break;  		case "/pngs/pgr.png":  			epgEntry.ParentalRating = "PGR";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  			break;  		case "/pngs/g.png":  			epgEntry.ParentalRating = "G";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  			break;  		case "/pngs/ear.png":  			epgEntry.SubTitles = "teletext";  			break;  		case "/pngs/hd.png":  			epgEntry.VideoQuality = "HDTV";  			break;  		case "/pngs/dolby.png":  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  	}  	int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  	int addedDetailFieldCount = iconCount;  	string seriesCRID = string.Empty;  	if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  		// This field is not used.  		// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  		seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  		// These fields are not used  		// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          		// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  		// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  		addedDetailFieldCount += 6;  	}  	else  		addedDetailFieldCount += 2;  	if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  		throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  	processNZLCRID (epgEntry' seriesCRID' eventCRID);  	epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  	if (epgEntry.EventCategory == null)  		epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (eventDescription' epgEntry' descriptionLogger);  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (iconCount < 0 || iconCount > 10) {  	Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  	if (logger != null)  		logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  }  else {  	int imageIndex;  	for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  		switch (Utils.GetAsciiString (dataFields [imageIndex])) {  		case "/pngs/ao.png":  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  			break;  		case "/pngs/pgr.png":  			epgEntry.ParentalRating = "PGR";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  			break;  		case "/pngs/g.png":  			epgEntry.ParentalRating = "G";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  			break;  		case "/pngs/ear.png":  			epgEntry.SubTitles = "teletext";  			break;  		case "/pngs/hd.png":  			epgEntry.VideoQuality = "HDTV";  			break;  		case "/pngs/dolby.png":  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  	}  	int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  	int addedDetailFieldCount = iconCount;  	string seriesCRID = string.Empty;  	if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  		// This field is not used.  		// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  		seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  		// These fields are not used  		// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          		// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  		// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  		addedDetailFieldCount += 6;  	}  	else  		addedDetailFieldCount += 2;  	if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  		throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  	processNZLCRID (epgEntry' seriesCRID' eventCRID);  	epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  	if (epgEntry.EventCategory == null)  		epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (eventDescription' epgEntry' descriptionLogger);  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (iconCount < 0 || iconCount > 10) {  	Logger.Instance.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  	if (logger != null)  		logger.Dump ("DSMCC Parser error - Icon Count - File Entry"' fileData' fileData.Length);  }  else {  	int imageIndex;  	for (imageIndex = imageCountFieldNumber + 1; imageIndex < iconCount + imageCountFieldNumber + 1; imageIndex++) {  		switch (Utils.GetAsciiString (dataFields [imageIndex])) {  		case "/pngs/ao.png":  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "AO");  			break;  		case "/pngs/pgr.png":  			epgEntry.ParentalRating = "PGR";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "PGR");  			break;  		case "/pngs/g.png":  			epgEntry.ParentalRating = "G";  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating ("NZL"' "MHEG5"' "G");  			break;  		case "/pngs/ear.png":  			epgEntry.SubTitles = "teletext";  			break;  		case "/pngs/hd.png":  			epgEntry.VideoQuality = "HDTV";  			break;  		case "/pngs/dolby.png":  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  	}  	int expectedDetailFieldCount = MHEGParserParameters.DetailFields;  	int addedDetailFieldCount = iconCount;  	string seriesCRID = string.Empty;  	if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  		// This field is not used.  		// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  		seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  		// These fields are not used  		// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          		// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  		// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  		addedDetailFieldCount += 6;  	}  	else  		addedDetailFieldCount += 2;  	if (expectedDetailFieldCount != -1 && expectedDetailFieldCount + addedDetailFieldCount != dataFields.Count)  		throw (new IndexOutOfRangeException ("MHEG format error - count of detail fields is incorrect - expected " + (expectedDetailFieldCount + addedDetailFieldCount) + " got " + dataFields.Count));  	processNZLCRID (epgEntry' seriesCRID' eventCRID);  	epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.EventName);  	if (epgEntry.EventCategory == null)  		epgEntry.EventCategory = CustomProgramCategory.FindCategoryDescription (epgEntry.ShortDescription);  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eventName' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logDescription (eventDescription' epgEntry' descriptionLogger);  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  	// This field is not used.  	// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  	seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  	// These fields are not used  	// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          	// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  	// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  	addedDetailFieldCount += 6;  }  else  	addedDetailFieldCount += 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: if (Int32.Parse (Utils.GetAsciiString (dataFields [imageIndex])) != 0) {  	// This field is not used.  	// string entryType2 = Utils.GetString(dataFields[imageIndex + 1]);  	seriesCRID = Utils.GetAsciiString (dataFields [imageIndex + seriesCRIDFieldNumber]);  	// These fields are not used  	// string eventName2 = Utils.GetString(dataFields[imageIndex + 3]);                                          	// string shortDescription2 = Utils.GetString(dataFields[imageIndex + 4]);  	// int otherIconCount = Int32.Parse(Utils.GetString(dataFields[imageIndex + 5]));  	addedDetailFieldCount += 6;  }  else  	addedDetailFieldCount += 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: addedDetailFieldCount += 6;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForNZL,The following statement contains a magic number: addedDetailFieldCount += 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processNZLShortDescription,The following statement contains a magic number: if (endIndex + 3 >= description.Length) {  	epgEntry.ShortDescription = description;  	return;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processNZLShortDescription,The following statement contains a magic number: epgEntry.ShortDescription = description.Substring (endIndex + 3);  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processNZLCRIDRaw,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processNZLCRIDNumber,The following statement contains a magic number: if (epgEntry.Series != null || epgEntry.Episode != null) {  	epgEntry.EpisodeSystemType = "xmltv_ns";  	epgEntry.EpisodeSystemParts = 3;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processNZLCRIDNumber,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processNZLCRIDBSEPG,The following statement contains a magic number: if (epgEntry.Series != null || epgEntry.Episode != null) {  	epgEntry.EpisodeSystemType = "bsepg-epid";  	epgEntry.EpisodeSystemParts = 2;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processNZLCRIDBSEPG,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: if (eventCRIDFieldNumber == -1)  	eventCRIDFieldNumber = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: eventCRIDFieldNumber = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: if (seriesCRIDFieldNumber == -1)  	seriesCRIDFieldNumber = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: seriesCRIDFieldNumber = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: if (eventNameFieldNumber == -1)  	eventNameFieldNumber = 4;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: eventNameFieldNumber = 4;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: if (shortDescriptionFieldNumber == -1)  	shortDescriptionFieldNumber = 5;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: shortDescriptionFieldNumber = 5;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: if (highDefinitionFieldNumber == -1)  	highDefinitionFieldNumber = 6;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: highDefinitionFieldNumber = 6;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: if (closedCaptionsFieldNumber == -1)  	closedCaptionsFieldNumber = 7;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: closedCaptionsFieldNumber = 7;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: if (parentalRatingFieldNumber == -1)  	parentalRatingFieldNumber = 8;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processEPGFileForAUS,The following statement contains a magic number: parentalRatingFieldNumber = 8;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,removeHDFlag,The following statement contains a magic number: if (startIndex + 4 >= description.Length)  	return (description);  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,removeHDFlag,The following statement contains a magic number: return (description.Substring (startIndex + 4).Trim ());  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,removeClosedCaptionsFlag,The following statement contains a magic number: if (startIndex + 4 >= description.Length)  	return (description);  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,removeClosedCaptionsFlag,The following statement contains a magic number: return (description.Substring (startIndex + 4).Trim ());  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processAUSCRIDRaw,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processAUSCRIDNumber,The following statement contains a magic number: if (epgEntry.Series != null || epgEntry.Episode != null) {  	epgEntry.EpisodeSystemType = "xmltv_ns";  	epgEntry.EpisodeSystemParts = 3;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processAUSCRIDNumber,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processAUSCRIDBSEPG,The following statement contains a magic number: if (dataSet) {  	epgEntry.Episode = episode;  	epgEntry.Series = series;  	epgEntry.EpisodeSystemType = "bsepg-epid";  	epgEntry.EpisodeSystemParts = 2;  }  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,processAUSCRIDBSEPG,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 2;  
Magic Number,DVBServices,DSMCCController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCController.cs,checkNZLTimes,The following statement contains a magic number: if (nextEntry.Duration > new TimeSpan (3' 0' 0))  	return (false);  
Magic Number,DVBServices,DSMCCTransactionID,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCTransactionID.cs,DSMCCTransactionID,The following statement contains a magic number: version = (transactionID & 0x3fff0000) >> 16;  
Magic Number,DVBServices,DSMCCTransactionID,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCTransactionID.cs,DSMCCTransactionID,The following statement contains a magic number: switch (transactionID & 0xc0000000) {  case 0x00000000:  	assignment = 0;  	break;  case 0x40000000:  	assignment = 1;  	break;  case 0x80000000:  	assignment = 2;  	break;  default:  	assignment = 3;  	break;  }  
Magic Number,DVBServices,DSMCCTransactionID,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCTransactionID.cs,DSMCCTransactionID,The following statement contains a magic number: switch (transactionID & 0xc0000000) {  case 0x00000000:  	assignment = 0;  	break;  case 0x40000000:  	assignment = 1;  	break;  case 0x80000000:  	assignment = 2;  	break;  default:  	assignment = 3;  	break;  }  
Magic Number,DVBServices,DSMCCTransactionID,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCTransactionID.cs,DSMCCTransactionID,The following statement contains a magic number: assignment = 2;  
Magic Number,DVBServices,DSMCCTransactionID,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMCCTransactionID.cs,DSMCCTransactionID,The following statement contains a magic number: assignment = 3;  
Magic Number,DVBServices,DSMConnBinder,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMConnBinder.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = (int)byteData [lastIndex];  	lastIndex++;  	tapsCount = (int)byteData [lastIndex];  	lastIndex++;  	if (tapsCount != 0) {  		taps = new Collection<BIOPTap> ();  		while (taps.Count != tapsCount) {  			BIOPTap tap = new BIOPTap ();  			tap.Process (byteData' lastIndex);  			taps.Add (tap);  			lastIndex = tap.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSM Conn Binder message is short"));  }  
Magic Number,DVBServices,DSMConnBinder,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMConnBinder.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	dataLength = (int)byteData [lastIndex];  	lastIndex++;  	tapsCount = (int)byteData [lastIndex];  	lastIndex++;  	if (tapsCount != 0) {  		taps = new Collection<BIOPTap> ();  		while (taps.Count != tapsCount) {  			BIOPTap tap = new BIOPTap ();  			tap.Process (byteData' lastIndex);  			taps.Add (tap);  			lastIndex = tap.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSM Conn Binder message is short"));  }  
Magic Number,DVBServices,DSMConnBinder,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMConnBinder.cs,Process,The following statement contains a magic number: componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  
Magic Number,DVBServices,DSMConnBinder,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMConnBinder.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMServiceLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMServiceLocation.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	componentDataLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	serviceDomainLength = (int)byteData [lastIndex];  	lastIndex++;  	serviceDomain = Utils.GetBytes (byteData' lastIndex' serviceDomainLength);  	lastIndex += serviceDomainLength;  	cosNamingName = new CosNamingName ();  	cosNamingName.Process (byteData' lastIndex);  	lastIndex += cosNamingName.Index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSM Service Location message is short"));  }  
Magic Number,DVBServices,DSMServiceLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMServiceLocation.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	componentDataLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	serviceDomainLength = (int)byteData [lastIndex];  	lastIndex++;  	serviceDomain = Utils.GetBytes (byteData' lastIndex' serviceDomainLength);  	lastIndex += serviceDomainLength;  	cosNamingName = new CosNamingName ();  	cosNamingName.Process (byteData' lastIndex);  	lastIndex += cosNamingName.Index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSM Service Location message is short"));  }  
Magic Number,DVBServices,DSMServiceLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMServiceLocation.cs,Process,The following statement contains a magic number: try {  	componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  	lastIndex += 4;  	componentDataLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	serviceDomainLength = (int)byteData [lastIndex];  	lastIndex++;  	serviceDomain = Utils.GetBytes (byteData' lastIndex' serviceDomainLength);  	lastIndex += serviceDomainLength;  	cosNamingName = new CosNamingName ();  	cosNamingName.Process (byteData' lastIndex);  	lastIndex += cosNamingName.Index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DSM Service Location message is short"));  }  
Magic Number,DVBServices,DSMServiceLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMServiceLocation.cs,Process,The following statement contains a magic number: componentIDTag = Utils.GetBytes (byteData' lastIndex' 4);  
Magic Number,DVBServices,DSMServiceLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMServiceLocation.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DSMServiceLocation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DSMServiceLocation.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DVBCompressedModuleDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DVBCompressedModuleDescriptor.cs,Process,The following statement contains a magic number: try {  	tag = (int)byteData [lastIndex];  	lastIndex++;  	length = (int)byteData [lastIndex];  	lastIndex++;  	compressionMethod = (int)byteData [lastIndex];  	lastIndex++;  	originalSize = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Compressed Module Descriptor message is short"));  }  
Magic Number,DVBServices,DVBCompressedModuleDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\DVBCompressedModuleDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: try {  	while (lastIndex < byteData.Length - 4) {  		DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  		entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  		lastIndex += 3;  		entry.Region = (int)byteData [lastIndex] >> 2;  		entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  		lastIndex++;  		int hoursTens = (int)byteData [lastIndex] >> 4;  		int hoursUnits = (int)byteData [lastIndex] & 0x0f;  		int minutesTens = (int)byteData [lastIndex + 1] >> 4;  		int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  		lastIndex += 2;  		entry.ChangeTime = getChangeTime (byteData' lastIndex);  		lastIndex += 5;  		int nextHoursTens = (int)byteData [lastIndex] >> 4;  		int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  		int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  		int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  		entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  		lastIndex += 2;  		TimeOffsetEntries.Add (entry);  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Local Time Offset Descriptor message is short"));  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	DVBLocalTimeOffsetEntry entry = new DVBLocalTimeOffsetEntry ();  	entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	entry.Region = (int)byteData [lastIndex] >> 2;  	entry.OffsetPositive = (byteData [lastIndex] & 0x01) == 0;  	lastIndex++;  	int hoursTens = (int)byteData [lastIndex] >> 4;  	int hoursUnits = (int)byteData [lastIndex] & 0x0f;  	int minutesTens = (int)byteData [lastIndex + 1] >> 4;  	int minutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  	lastIndex += 2;  	entry.ChangeTime = getChangeTime (byteData' lastIndex);  	lastIndex += 5;  	int nextHoursTens = (int)byteData [lastIndex] >> 4;  	int nextHoursUnits = (int)byteData [lastIndex] & 0x0f;  	int nextMinutesTens = (int)byteData [lastIndex + 1] >> 4;  	int nextMinutesUnits = (int)byteData [lastIndex + 1] & 0x0f;  	entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  	lastIndex += 2;  	TimeOffsetEntries.Add (entry);  }  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: entry.CountryCode = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: entry.Region = (int)byteData [lastIndex] >> 2;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: entry.TimeOffset = new TimeSpan ((hoursTens * 10) + hoursUnits' (minutesTens * 10) + minutesUnits' 0);  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 5;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: entry.NextTimeOffset = new TimeSpan ((nextHoursTens * 10) + nextHoursUnits' (nextMinutesTens * 10) + nextMinutesUnits' 0);  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,getChangeTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,getChangeTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,getChangeTime,The following statement contains a magic number: year = year + 1900 + adjust;  
Magic Number,DVBServices,DVBLocalTimeOffsetDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBLocalTimeOffsetDescriptor.cs,getChangeTime,The following statement contains a magic number: month = month - 1 - (adjust * 12);  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 0) {  		serviceList = new Collection<ServiceListEntry> ();  		int length = Length;  		while (length > 0) {  			int serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  			lastIndex += 2;  			int serviceType = (int)byteData [lastIndex];  			lastIndex++;  			serviceList.Add (new ServiceListEntry (serviceID' serviceType));  			length -= 3;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Service List Descriptor message is short"));  }  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 0) {  		serviceList = new Collection<ServiceListEntry> ();  		int length = Length;  		while (length > 0) {  			int serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  			lastIndex += 2;  			int serviceType = (int)byteData [lastIndex];  			lastIndex++;  			serviceList.Add (new ServiceListEntry (serviceID' serviceType));  			length -= 3;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Service List Descriptor message is short"));  }  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: if (Length != 0) {  	serviceList = new Collection<ServiceListEntry> ();  	int length = Length;  	while (length > 0) {  		int serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  		lastIndex += 2;  		int serviceType = (int)byteData [lastIndex];  		lastIndex++;  		serviceList.Add (new ServiceListEntry (serviceID' serviceType));  		length -= 3;  	}  }  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: if (Length != 0) {  	serviceList = new Collection<ServiceListEntry> ();  	int length = Length;  	while (length > 0) {  		int serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  		lastIndex += 2;  		int serviceType = (int)byteData [lastIndex];  		lastIndex++;  		serviceList.Add (new ServiceListEntry (serviceID' serviceType));  		length -= 3;  	}  }  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: while (length > 0) {  	int serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int serviceType = (int)byteData [lastIndex];  	lastIndex++;  	serviceList.Add (new ServiceListEntry (serviceID' serviceType));  	length -= 3;  }  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: while (length > 0) {  	int serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int serviceType = (int)byteData [lastIndex];  	lastIndex++;  	serviceList.Add (new ServiceListEntry (serviceID' serviceType));  	length -= 3;  }  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DVBServiceListDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\DVBServiceListDescriptor.cs,Process,The following statement contains a magic number: length -= 3;  
Magic Number,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,getEITSections,The following statement contains a magic number: eitReader = new TSStreamReader (2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,getEITSections,The following statement contains a magic number: while (!eitSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	eitReader.Lock ("LoadMessages");  	if (eitReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in eitReader.Sections)  			sections.Add (section);  		eitReader.Sections.Clear ();  	}  	eitReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processSections (sections);  	if (TVStation.EPGCount == lastCount) {  		repeats++;  		eitSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = TVStation.EPGCount;  }  
Magic Number,DVBServices,EITController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITController.cs,getEITSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT message is short"));  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT message is short"));  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT message is short"));  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT message is short"));  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT message is short"));  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT message is short"));  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	getStartTime (byteData' lastIndex);  	lastIndex += 5;  	getDuration (byteData' lastIndex);  	lastIndex += 3;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  		if (!descriptor.IsEmpty) {  			processDescriptor (descriptor);  			descriptor.LogMessage ();  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The EIT message is short"));  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: lastIndex += 5;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: runningStatus = (int)(byteData [lastIndex] >> 5);  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The following statement contains a magic number: if (byteData [index] == 0xff && byteData [index + 1] == 0xff && byteData [index + 2] == 0xff && byteData [index + 3] == 0xff && byteData [index + 4] == 0xff) {  	startTime = DateTime.MinValue;  	return;  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The following statement contains a magic number: if (byteData [index] == 0xff && byteData [index + 1] == 0xff && byteData [index + 2] == 0xff && byteData [index + 3] == 0xff && byteData [index + 4] == 0xff) {  	startTime = DateTime.MinValue;  	return;  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The following statement contains a magic number: if (byteData [index] == 0xff && byteData [index + 1] == 0xff && byteData [index + 2] == 0xff && byteData [index + 3] == 0xff && byteData [index + 4] == 0xff) {  	startTime = DateTime.MinValue;  	return;  }  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The following statement contains a magic number: year = year + 1900 + adjust;  
Magic Number,DVBServices,EITEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITEntry.cs,getStartTime,The following statement contains a magic number: month = month - 1 - (adjust * 12);  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	EITEntry eitEntry = new EITEntry ();  	eitEntry.Process (byteData' lastIndex);  	if (eitEntry.StartTime != DateTime.MinValue) {  		EPGEntry epgEntry = new EPGEntry ();  		epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  		epgEntry.TransportStreamID = tvStation.TransportStreamID;  		epgEntry.ServiceID = tvStation.ServiceID;  		epgEntry.EPGSource = EPGSource.EIT;  		switch (eitEntry.ComponentTypeAudio) {  		case 3:  			epgEntry.AudioQuality = "stereo";  			break;  		case 5:  			epgEntry.AudioQuality = "dolby digital";  			break;  		default:  			break;  		}  		if (eitEntry.ComponentTypeVideo > 9)  			epgEntry.VideoQuality = "HDTV";  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  		else  			epgEntry.EventCategory = eitEntry.ShortDescription;  		epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  		epgEntry.EventID = eitEntry.EventID;  		epgEntry.EventName = eitEntry.EventName;  		if (RunParameters.Instance.CountryCode != null) {  			epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  			epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		}  		else {  			if (eitEntry.ParentalRating > 11) {  				epgEntry.ParentalRating = "AO";  				epgEntry.MpaaParentalRating = "AO";  			}  			else {  				if (eitEntry.ParentalRating > 8) {  					epgEntry.ParentalRating = "PGR";  					epgEntry.MpaaParentalRating = "PG";  				}  				else {  					epgEntry.ParentalRating = "G";  					epgEntry.MpaaParentalRating = "G";  				}  			}  		}  		epgEntry.RunningStatus = eitEntry.RunningStatus;  		epgEntry.Scrambled = eitEntry.Scrambled;  		if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  			epgEntry.ShortDescription = eitEntry.Description;  		else  			epgEntry.ShortDescription = eitEntry.ExtendedDescription;  		epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  		epgEntry.Cast = eitEntry.Cast;  		epgEntry.Directors = eitEntry.Directors;  		epgEntry.Date = eitEntry.Year;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		epgEntry.StarRating = eitEntry.StarRating;  		if (eitEntry.TVRating != null)  			epgEntry.ParentalRating = eitEntry.TVRating;  		setSeriesEpisode (epgEntry' eitEntry);  		/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  		tvStation.AddEPGEntry (epgEntry);  		if (titleLogger != null)  			logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  		if (descriptionLogger != null)  			logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  		if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  			updateCategoryEntries (tvStation' eitEntry);  	}  	lastIndex = eitEntry.Index;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.StartTime != DateTime.MinValue) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.EIT;  	switch (eitEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (eitEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  	else  		epgEntry.EventCategory = eitEntry.ShortDescription;  	epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  	epgEntry.EventID = eitEntry.EventID;  	epgEntry.EventName = eitEntry.EventName;  	if (RunParameters.Instance.CountryCode != null) {  		epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	}  	else {  		if (eitEntry.ParentalRating > 11) {  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = "AO";  		}  		else {  			if (eitEntry.ParentalRating > 8) {  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = "PG";  			}  			else {  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = "G";  			}  		}  	}  	epgEntry.RunningStatus = eitEntry.RunningStatus;  	epgEntry.Scrambled = eitEntry.Scrambled;  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.ShortDescription = eitEntry.Description;  	else  		epgEntry.ShortDescription = eitEntry.ExtendedDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  	epgEntry.Cast = eitEntry.Cast;  	epgEntry.Directors = eitEntry.Directors;  	epgEntry.Date = eitEntry.Year;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	epgEntry.StarRating = eitEntry.StarRating;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	setSeriesEpisode (epgEntry' eitEntry);  	/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (tvStation' eitEntry);  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.StartTime != DateTime.MinValue) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.EIT;  	switch (eitEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (eitEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  	else  		epgEntry.EventCategory = eitEntry.ShortDescription;  	epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  	epgEntry.EventID = eitEntry.EventID;  	epgEntry.EventName = eitEntry.EventName;  	if (RunParameters.Instance.CountryCode != null) {  		epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	}  	else {  		if (eitEntry.ParentalRating > 11) {  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = "AO";  		}  		else {  			if (eitEntry.ParentalRating > 8) {  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = "PG";  			}  			else {  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = "G";  			}  		}  	}  	epgEntry.RunningStatus = eitEntry.RunningStatus;  	epgEntry.Scrambled = eitEntry.Scrambled;  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.ShortDescription = eitEntry.Description;  	else  		epgEntry.ShortDescription = eitEntry.ExtendedDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  	epgEntry.Cast = eitEntry.Cast;  	epgEntry.Directors = eitEntry.Directors;  	epgEntry.Date = eitEntry.Year;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	epgEntry.StarRating = eitEntry.StarRating;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	setSeriesEpisode (epgEntry' eitEntry);  	/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (tvStation' eitEntry);  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.StartTime != DateTime.MinValue) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.EIT;  	switch (eitEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (eitEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  	else  		epgEntry.EventCategory = eitEntry.ShortDescription;  	epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  	epgEntry.EventID = eitEntry.EventID;  	epgEntry.EventName = eitEntry.EventName;  	if (RunParameters.Instance.CountryCode != null) {  		epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	}  	else {  		if (eitEntry.ParentalRating > 11) {  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = "AO";  		}  		else {  			if (eitEntry.ParentalRating > 8) {  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = "PG";  			}  			else {  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = "G";  			}  		}  	}  	epgEntry.RunningStatus = eitEntry.RunningStatus;  	epgEntry.Scrambled = eitEntry.Scrambled;  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.ShortDescription = eitEntry.Description;  	else  		epgEntry.ShortDescription = eitEntry.ExtendedDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  	epgEntry.Cast = eitEntry.Cast;  	epgEntry.Directors = eitEntry.Directors;  	epgEntry.Date = eitEntry.Year;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	epgEntry.StarRating = eitEntry.StarRating;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	setSeriesEpisode (epgEntry' eitEntry);  	/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (tvStation' eitEntry);  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.StartTime != DateTime.MinValue) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.EIT;  	switch (eitEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (eitEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  	else  		epgEntry.EventCategory = eitEntry.ShortDescription;  	epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  	epgEntry.EventID = eitEntry.EventID;  	epgEntry.EventName = eitEntry.EventName;  	if (RunParameters.Instance.CountryCode != null) {  		epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	}  	else {  		if (eitEntry.ParentalRating > 11) {  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = "AO";  		}  		else {  			if (eitEntry.ParentalRating > 8) {  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = "PG";  			}  			else {  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = "G";  			}  		}  	}  	epgEntry.RunningStatus = eitEntry.RunningStatus;  	epgEntry.Scrambled = eitEntry.Scrambled;  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.ShortDescription = eitEntry.Description;  	else  		epgEntry.ShortDescription = eitEntry.ExtendedDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  	epgEntry.Cast = eitEntry.Cast;  	epgEntry.Directors = eitEntry.Directors;  	epgEntry.Date = eitEntry.Year;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	epgEntry.StarRating = eitEntry.StarRating;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	setSeriesEpisode (epgEntry' eitEntry);  	/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (tvStation' eitEntry);  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.StartTime != DateTime.MinValue) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.EIT;  	switch (eitEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (eitEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  	else  		epgEntry.EventCategory = eitEntry.ShortDescription;  	epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  	epgEntry.EventID = eitEntry.EventID;  	epgEntry.EventName = eitEntry.EventName;  	if (RunParameters.Instance.CountryCode != null) {  		epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	}  	else {  		if (eitEntry.ParentalRating > 11) {  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = "AO";  		}  		else {  			if (eitEntry.ParentalRating > 8) {  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = "PG";  			}  			else {  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = "G";  			}  		}  	}  	epgEntry.RunningStatus = eitEntry.RunningStatus;  	epgEntry.Scrambled = eitEntry.Scrambled;  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.ShortDescription = eitEntry.Description;  	else  		epgEntry.ShortDescription = eitEntry.ExtendedDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  	epgEntry.Cast = eitEntry.Cast;  	epgEntry.Directors = eitEntry.Directors;  	epgEntry.Date = eitEntry.Year;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	epgEntry.StarRating = eitEntry.StarRating;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	setSeriesEpisode (epgEntry' eitEntry);  	/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (tvStation' eitEntry);  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.StartTime != DateTime.MinValue) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.EIT;  	switch (eitEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (eitEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  	else  		epgEntry.EventCategory = eitEntry.ShortDescription;  	epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  	epgEntry.EventID = eitEntry.EventID;  	epgEntry.EventName = eitEntry.EventName;  	if (RunParameters.Instance.CountryCode != null) {  		epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	}  	else {  		if (eitEntry.ParentalRating > 11) {  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = "AO";  		}  		else {  			if (eitEntry.ParentalRating > 8) {  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = "PG";  			}  			else {  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = "G";  			}  		}  	}  	epgEntry.RunningStatus = eitEntry.RunningStatus;  	epgEntry.Scrambled = eitEntry.Scrambled;  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.ShortDescription = eitEntry.Description;  	else  		epgEntry.ShortDescription = eitEntry.ExtendedDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  	epgEntry.Cast = eitEntry.Cast;  	epgEntry.Directors = eitEntry.Directors;  	epgEntry.Date = eitEntry.Year;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	epgEntry.StarRating = eitEntry.StarRating;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	setSeriesEpisode (epgEntry' eitEntry);  	/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (tvStation' eitEntry);  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.StartTime != DateTime.MinValue) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = tvStation.OriginalNetworkID;  	epgEntry.TransportStreamID = tvStation.TransportStreamID;  	epgEntry.ServiceID = tvStation.ServiceID;  	epgEntry.EPGSource = EPGSource.EIT;  	switch (eitEntry.ComponentTypeAudio) {  	case 3:  		epgEntry.AudioQuality = "stereo";  		break;  	case 5:  		epgEntry.AudioQuality = "dolby digital";  		break;  	default:  		break;  	}  	if (eitEntry.ComponentTypeVideo > 9)  		epgEntry.VideoQuality = "HDTV";  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.EventCategory = getEventCategory (eitEntry.EventName' eitEntry.Description' eitEntry.ContentType' eitEntry.ContentSubType);  	else  		epgEntry.EventCategory = eitEntry.ShortDescription;  	epgEntry.Duration = Utils.RoundTime (eitEntry.Duration);  	epgEntry.EventID = eitEntry.EventID;  	epgEntry.EventName = eitEntry.EventName;  	if (RunParameters.Instance.CountryCode != null) {  		epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  		epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	}  	else {  		if (eitEntry.ParentalRating > 11) {  			epgEntry.ParentalRating = "AO";  			epgEntry.MpaaParentalRating = "AO";  		}  		else {  			if (eitEntry.ParentalRating > 8) {  				epgEntry.ParentalRating = "PGR";  				epgEntry.MpaaParentalRating = "PG";  			}  			else {  				epgEntry.ParentalRating = "G";  				epgEntry.MpaaParentalRating = "G";  			}  		}  	}  	epgEntry.RunningStatus = eitEntry.RunningStatus;  	epgEntry.Scrambled = eitEntry.Scrambled;  	if (!RunParameters.Instance.Options.Contains ("USEDESCASCATEGORY"))  		epgEntry.ShortDescription = eitEntry.Description;  	else  		epgEntry.ShortDescription = eitEntry.ExtendedDescription;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetOffsetTime (eitEntry.StartTime));  	epgEntry.Cast = eitEntry.Cast;  	epgEntry.Directors = eitEntry.Directors;  	epgEntry.Date = eitEntry.Year;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	epgEntry.StarRating = eitEntry.StarRating;  	if (eitEntry.TVRating != null)  		epgEntry.ParentalRating = eitEntry.TVRating;  	setSeriesEpisode (epgEntry' eitEntry);  	/*if (eitEntry.PreviousPlayDate != null)                     {                         try                         {                             TimeSpan offset = new TimeSpan(Int32.Parse(eitEntry.PreviousPlayDate) * TimeSpan.TicksPerSecond);                             epgEntry.PreviousPlayDate = epgEntry.StartTime - offset;                         }                         catch (FormatException) { }                     }*/epgEntry.Country = eitEntry.Country;  	tvStation.AddEPGEntry (epgEntry);  	if (titleLogger != null)  		logTitle (eitEntry.EventName' eitEntry' epgEntry' titleLogger);  	if (descriptionLogger != null)  		logTitle (eitEntry.Description' eitEntry' epgEntry' descriptionLogger);  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (tvStation' eitEntry);  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: switch (eitEntry.ComponentTypeAudio) {  case 3:  	epgEntry.AudioQuality = "stereo";  	break;  case 5:  	epgEntry.AudioQuality = "dolby digital";  	break;  default:  	break;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: switch (eitEntry.ComponentTypeAudio) {  case 3:  	epgEntry.AudioQuality = "stereo";  	break;  case 5:  	epgEntry.AudioQuality = "dolby digital";  	break;  default:  	break;  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.ComponentTypeVideo > 9)  	epgEntry.VideoQuality = "HDTV";  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (RunParameters.Instance.CountryCode != null) {  	epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  }  else {  	if (eitEntry.ParentalRating > 11) {  		epgEntry.ParentalRating = "AO";  		epgEntry.MpaaParentalRating = "AO";  	}  	else {  		if (eitEntry.ParentalRating > 8) {  			epgEntry.ParentalRating = "PGR";  			epgEntry.MpaaParentalRating = "PG";  		}  		else {  			epgEntry.ParentalRating = "G";  			epgEntry.MpaaParentalRating = "G";  		}  	}  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (RunParameters.Instance.CountryCode != null) {  	epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  }  else {  	if (eitEntry.ParentalRating > 11) {  		epgEntry.ParentalRating = "AO";  		epgEntry.MpaaParentalRating = "AO";  	}  	else {  		if (eitEntry.ParentalRating > 8) {  			epgEntry.ParentalRating = "PGR";  			epgEntry.MpaaParentalRating = "PG";  		}  		else {  			epgEntry.ParentalRating = "G";  			epgEntry.MpaaParentalRating = "G";  		}  	}  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (RunParameters.Instance.CountryCode != null) {  	epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  }  else {  	if (eitEntry.ParentalRating > 11) {  		epgEntry.ParentalRating = "AO";  		epgEntry.MpaaParentalRating = "AO";  	}  	else {  		if (eitEntry.ParentalRating > 8) {  			epgEntry.ParentalRating = "PGR";  			epgEntry.MpaaParentalRating = "PG";  		}  		else {  			epgEntry.ParentalRating = "G";  			epgEntry.MpaaParentalRating = "G";  		}  	}  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (RunParameters.Instance.CountryCode != null) {  	epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  	epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  }  else {  	if (eitEntry.ParentalRating > 11) {  		epgEntry.ParentalRating = "AO";  		epgEntry.MpaaParentalRating = "AO";  	}  	else {  		if (eitEntry.ParentalRating > 8) {  			epgEntry.ParentalRating = "PGR";  			epgEntry.MpaaParentalRating = "PG";  		}  		else {  			epgEntry.ParentalRating = "G";  			epgEntry.MpaaParentalRating = "G";  		}  	}  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: epgEntry.ParentalRating = ParentalRating.FindRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: epgEntry.MpaaParentalRating = ParentalRating.FindMpaaRating (RunParameters.Instance.CountryCode' "EIT"' (eitEntry.ParentalRating + 3).ToString ());  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.ParentalRating > 11) {  	epgEntry.ParentalRating = "AO";  	epgEntry.MpaaParentalRating = "AO";  }  else {  	if (eitEntry.ParentalRating > 8) {  		epgEntry.ParentalRating = "PGR";  		epgEntry.MpaaParentalRating = "PG";  	}  	else {  		epgEntry.ParentalRating = "G";  		epgEntry.MpaaParentalRating = "G";  	}  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.ParentalRating > 11) {  	epgEntry.ParentalRating = "AO";  	epgEntry.MpaaParentalRating = "AO";  }  else {  	if (eitEntry.ParentalRating > 8) {  		epgEntry.ParentalRating = "PGR";  		epgEntry.MpaaParentalRating = "PG";  	}  	else {  		epgEntry.ParentalRating = "G";  		epgEntry.MpaaParentalRating = "G";  	}  }  
Magic Number,DVBServices,EITSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\EITSection.cs,Process,The following statement contains a magic number: if (eitEntry.ParentalRating > 8) {  	epgEntry.ParentalRating = "PGR";  	epgEntry.MpaaParentalRating = "PG";  }  else {  	epgEntry.ParentalRating = "G";  	epgEntry.MpaaParentalRating = "G";  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,Stop,The following statement contains a magic number: if (running) {  	Logger.Instance.Write ("Stopping background worker thread");  	epgWorker.CancelAsync ();  	bool reply = resetEvent.WaitOne (new TimeSpan (0' 0' 45));  	if (!reply)  		Logger.Instance.Write ("Failed to stop background worker thread");  	running = false;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkWMCRecordings,The following statement contains a magic number: foreach (WMCRecording recording in WMCRecording.Recordings) {  	RecordedProgram recordedProgram = new RecordedProgram (recording.Title);  	recordedProgram.Description = recording.Description;  	if (recording.StartTime != DateTime.MinValue)  		recordedProgram.Date = recording.StartTime;  	else  		recordedProgram.Date = new DateTime (2011' 1' 1);  	recordedPrograms.Add (recordedProgram);  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkWMCRecordings,The following statement contains a magic number: if (recording.StartTime != DateTime.MinValue)  	recordedProgram.Date = recording.StartTime;  else  	recordedProgram.Date = new DateTime (2011' 1' 1);  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkWMCRecordings,The following statement contains a magic number: recordedProgram.Date = new DateTime (2011' 1' 1);  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: if (repeatText.StartsWith ("<")) {  	if (repeatText.EndsWith (">")) {  		matchMethod = 1;  		matchString = (repeatText.Substring (1' repeatText.Length - 2)).ToLower ();  	}  	else {  		matchMethod = 2;  		matchString = (repeatText.Substring (1)).ToLower ();  	}  }  else {  	if (repeatText.EndsWith (">")) {  		matchMethod = 3;  		matchString = repeatText.Substring (0' repeatText.Length - 1).ToLower ();  	}  	else {  		matchMethod = 0;  		matchString = repeatText.ToLower ();  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: if (repeatText.StartsWith ("<")) {  	if (repeatText.EndsWith (">")) {  		matchMethod = 1;  		matchString = (repeatText.Substring (1' repeatText.Length - 2)).ToLower ();  	}  	else {  		matchMethod = 2;  		matchString = (repeatText.Substring (1)).ToLower ();  	}  }  else {  	if (repeatText.EndsWith (">")) {  		matchMethod = 3;  		matchString = repeatText.Substring (0' repeatText.Length - 1).ToLower ();  	}  	else {  		matchMethod = 0;  		matchString = repeatText.ToLower ();  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: if (repeatText.StartsWith ("<")) {  	if (repeatText.EndsWith (">")) {  		matchMethod = 1;  		matchString = (repeatText.Substring (1' repeatText.Length - 2)).ToLower ();  	}  	else {  		matchMethod = 2;  		matchString = (repeatText.Substring (1)).ToLower ();  	}  }  else {  	if (repeatText.EndsWith (">")) {  		matchMethod = 3;  		matchString = repeatText.Substring (0' repeatText.Length - 1).ToLower ();  	}  	else {  		matchMethod = 0;  		matchString = repeatText.ToLower ();  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: if (repeatText.EndsWith (">")) {  	matchMethod = 1;  	matchString = (repeatText.Substring (1' repeatText.Length - 2)).ToLower ();  }  else {  	matchMethod = 2;  	matchString = (repeatText.Substring (1)).ToLower ();  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: if (repeatText.EndsWith (">")) {  	matchMethod = 1;  	matchString = (repeatText.Substring (1' repeatText.Length - 2)).ToLower ();  }  else {  	matchMethod = 2;  	matchString = (repeatText.Substring (1)).ToLower ();  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: matchString = (repeatText.Substring (1' repeatText.Length - 2)).ToLower ();  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: matchMethod = 2;  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: if (repeatText.EndsWith (">")) {  	matchMethod = 3;  	matchString = repeatText.Substring (0' repeatText.Length - 1).ToLower ();  }  else {  	matchMethod = 0;  	matchString = repeatText.ToLower ();  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: matchMethod = 3;  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: switch (matchMethod) {  case 0:  	if (lowerCaseProgramText == matchString)  		return (true);  	break;  case 1:  	if (lowerCaseProgramText.Contains (matchString))  		return (true);  	break;  case 2:  	if (lowerCaseProgramText.StartsWith (matchString))  		return (true);  	break;  case 3:  	if (lowerCaseProgramText.EndsWith (matchString))  		return (true);  	break;  default:  	break;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,checkForMatchingText,The following statement contains a magic number: switch (matchMethod) {  case 0:  	if (lowerCaseProgramText == matchString)  		return (true);  	break;  case 1:  	if (lowerCaseProgramText.Contains (matchString))  		return (true);  	break;  case 2:  	if (lowerCaseProgramText.StartsWith (matchString))  		return (true);  	break;  case 3:  	if (lowerCaseProgramText.EndsWith (matchString))  		return (true);  	break;  default:  	break;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (SatelliteEntry satelliteEntry in satelliteEntries) {  	string fileName = Path.Combine (RunParameters.DataDirectory' satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0') + ".ini");  	try {  		if (File.Exists (fileName)) {  			if (File.Exists (fileName + ".bak")) {  				File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  				File.Delete (fileName + ".bak");  			}  			File.Copy (fileName' fileName + ".bak");  			File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  			File.SetAttributes (fileName' FileAttributes.Normal);  		}  		FileStream fileStream = new FileStream (fileName' FileMode.Create);  		StreamWriter streamWriter = new StreamWriter (fileStream);  		streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[SATTYPE]");  		streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  		string orbitalPosition;  		if (satelliteEntry.East)  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  		else  			orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  		streamWriter.WriteLine (orbitalPosition);  		streamWriter.WriteLine ("");  		streamWriter.WriteLine ("[DVB]");  		streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  		int lineNumber = 0;  		foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  			lineNumber++;  			string polarization = getPolarization (satelliteDescriptor.Polarization);  			string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  			string modulationType = getModulationType (satelliteDescriptor.ModulationType);  			string modulationSystem;  			if (!satelliteDescriptor.S2Flag)  				modulationSystem = "DVB-S";  			else  				modulationSystem = "S2";  			streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  		}  		streamWriter.Close ();  		fileStream.Close ();  	}  	catch (IOException e) {  		Logger.Instance.Write ("<E> Exception creating satellite ini file:");  		Logger.Instance.Write ("<E> " + e.Message);  		return;  	}  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: try {  	if (File.Exists (fileName)) {  		if (File.Exists (fileName + ".bak")) {  			File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  			File.Delete (fileName + ".bak");  		}  		File.Copy (fileName' fileName + ".bak");  		File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  		File.SetAttributes (fileName' FileAttributes.Normal);  	}  	FileStream fileStream = new FileStream (fileName' FileMode.Create);  	StreamWriter streamWriter = new StreamWriter (fileStream);  	streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[SATTYPE]");  	streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  	string orbitalPosition;  	if (satelliteEntry.East)  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  	else  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  	streamWriter.WriteLine (orbitalPosition);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[DVB]");  	streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  	int lineNumber = 0;  	foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  		lineNumber++;  		string polarization = getPolarization (satelliteDescriptor.Polarization);  		string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  		string modulationType = getModulationType (satelliteDescriptor.ModulationType);  		string modulationSystem;  		if (!satelliteDescriptor.S2Flag)  			modulationSystem = "DVB-S";  		else  			modulationSystem = "S2";  		streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  	}  	streamWriter.Close ();  	fileStream.Close ();  }  catch (IOException e) {  	Logger.Instance.Write ("<E> Exception creating satellite ini file:");  	Logger.Instance.Write ("<E> " + e.Message);  	return;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: try {  	if (File.Exists (fileName)) {  		if (File.Exists (fileName + ".bak")) {  			File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  			File.Delete (fileName + ".bak");  		}  		File.Copy (fileName' fileName + ".bak");  		File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  		File.SetAttributes (fileName' FileAttributes.Normal);  	}  	FileStream fileStream = new FileStream (fileName' FileMode.Create);  	StreamWriter streamWriter = new StreamWriter (fileStream);  	streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[SATTYPE]");  	streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  	string orbitalPosition;  	if (satelliteEntry.East)  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  	else  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  	streamWriter.WriteLine (orbitalPosition);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[DVB]");  	streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  	int lineNumber = 0;  	foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  		lineNumber++;  		string polarization = getPolarization (satelliteDescriptor.Polarization);  		string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  		string modulationType = getModulationType (satelliteDescriptor.ModulationType);  		string modulationSystem;  		if (!satelliteDescriptor.S2Flag)  			modulationSystem = "DVB-S";  		else  			modulationSystem = "S2";  		streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  	}  	streamWriter.Close ();  	fileStream.Close ();  }  catch (IOException e) {  	Logger.Instance.Write ("<E> Exception creating satellite ini file:");  	Logger.Instance.Write ("<E> " + e.Message);  	return;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: try {  	if (File.Exists (fileName)) {  		if (File.Exists (fileName + ".bak")) {  			File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  			File.Delete (fileName + ".bak");  		}  		File.Copy (fileName' fileName + ".bak");  		File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  		File.SetAttributes (fileName' FileAttributes.Normal);  	}  	FileStream fileStream = new FileStream (fileName' FileMode.Create);  	StreamWriter streamWriter = new StreamWriter (fileStream);  	streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[SATTYPE]");  	streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  	string orbitalPosition;  	if (satelliteEntry.East)  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  	else  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  	streamWriter.WriteLine (orbitalPosition);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[DVB]");  	streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  	int lineNumber = 0;  	foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  		lineNumber++;  		string polarization = getPolarization (satelliteDescriptor.Polarization);  		string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  		string modulationType = getModulationType (satelliteDescriptor.ModulationType);  		string modulationSystem;  		if (!satelliteDescriptor.S2Flag)  			modulationSystem = "DVB-S";  		else  			modulationSystem = "S2";  		streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  	}  	streamWriter.Close ();  	fileStream.Close ();  }  catch (IOException e) {  	Logger.Instance.Write ("<E> Exception creating satellite ini file:");  	Logger.Instance.Write ("<E> " + e.Message);  	return;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: try {  	if (File.Exists (fileName)) {  		if (File.Exists (fileName + ".bak")) {  			File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  			File.Delete (fileName + ".bak");  		}  		File.Copy (fileName' fileName + ".bak");  		File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  		File.SetAttributes (fileName' FileAttributes.Normal);  	}  	FileStream fileStream = new FileStream (fileName' FileMode.Create);  	StreamWriter streamWriter = new StreamWriter (fileStream);  	streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[SATTYPE]");  	streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  	string orbitalPosition;  	if (satelliteEntry.East)  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  	else  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  	streamWriter.WriteLine (orbitalPosition);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[DVB]");  	streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  	int lineNumber = 0;  	foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  		lineNumber++;  		string polarization = getPolarization (satelliteDescriptor.Polarization);  		string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  		string modulationType = getModulationType (satelliteDescriptor.ModulationType);  		string modulationSystem;  		if (!satelliteDescriptor.S2Flag)  			modulationSystem = "DVB-S";  		else  			modulationSystem = "S2";  		streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  	}  	streamWriter.Close ();  	fileStream.Close ();  }  catch (IOException e) {  	Logger.Instance.Write ("<E> Exception creating satellite ini file:");  	Logger.Instance.Write ("<E> " + e.Message);  	return;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: try {  	if (File.Exists (fileName)) {  		if (File.Exists (fileName + ".bak")) {  			File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  			File.Delete (fileName + ".bak");  		}  		File.Copy (fileName' fileName + ".bak");  		File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  		File.SetAttributes (fileName' FileAttributes.Normal);  	}  	FileStream fileStream = new FileStream (fileName' FileMode.Create);  	StreamWriter streamWriter = new StreamWriter (fileStream);  	streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[SATTYPE]");  	streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  	string orbitalPosition;  	if (satelliteEntry.East)  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  	else  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  	streamWriter.WriteLine (orbitalPosition);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[DVB]");  	streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  	int lineNumber = 0;  	foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  		lineNumber++;  		string polarization = getPolarization (satelliteDescriptor.Polarization);  		string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  		string modulationType = getModulationType (satelliteDescriptor.ModulationType);  		string modulationSystem;  		if (!satelliteDescriptor.S2Flag)  			modulationSystem = "DVB-S";  		else  			modulationSystem = "S2";  		streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  	}  	streamWriter.Close ();  	fileStream.Close ();  }  catch (IOException e) {  	Logger.Instance.Write ("<E> Exception creating satellite ini file:");  	Logger.Instance.Write ("<E> " + e.Message);  	return;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: try {  	if (File.Exists (fileName)) {  		if (File.Exists (fileName + ".bak")) {  			File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  			File.Delete (fileName + ".bak");  		}  		File.Copy (fileName' fileName + ".bak");  		File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  		File.SetAttributes (fileName' FileAttributes.Normal);  	}  	FileStream fileStream = new FileStream (fileName' FileMode.Create);  	StreamWriter streamWriter = new StreamWriter (fileStream);  	streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[SATTYPE]");  	streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  	string orbitalPosition;  	if (satelliteEntry.East)  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  	else  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  	streamWriter.WriteLine (orbitalPosition);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[DVB]");  	streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  	int lineNumber = 0;  	foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  		lineNumber++;  		string polarization = getPolarization (satelliteDescriptor.Polarization);  		string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  		string modulationType = getModulationType (satelliteDescriptor.ModulationType);  		string modulationSystem;  		if (!satelliteDescriptor.S2Flag)  			modulationSystem = "DVB-S";  		else  			modulationSystem = "S2";  		streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  	}  	streamWriter.Close ();  	fileStream.Close ();  }  catch (IOException e) {  	Logger.Instance.Write ("<E> Exception creating satellite ini file:");  	Logger.Instance.Write ("<E> " + e.Message);  	return;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: try {  	if (File.Exists (fileName)) {  		if (File.Exists (fileName + ".bak")) {  			File.SetAttributes (fileName + ".bak"' FileAttributes.Normal);  			File.Delete (fileName + ".bak");  		}  		File.Copy (fileName' fileName + ".bak");  		File.SetAttributes (fileName + ".bak"' FileAttributes.ReadOnly);  		File.SetAttributes (fileName' FileAttributes.Normal);  	}  	FileStream fileStream = new FileStream (fileName' FileMode.Create);  	StreamWriter streamWriter = new StreamWriter (fileStream);  	streamWriter.WriteLine (";    [ Created by EPG Collector " + DateTime.Now);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[SATTYPE]");  	streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  	string orbitalPosition;  	if (satelliteEntry.East)  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  	else  		orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  	streamWriter.WriteLine (orbitalPosition);  	streamWriter.WriteLine ("");  	streamWriter.WriteLine ("[DVB]");  	streamWriter.WriteLine ("0=" + satelliteEntry.SatelliteDescriptors.Count);  	int lineNumber = 0;  	foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  		lineNumber++;  		string polarization = getPolarization (satelliteDescriptor.Polarization);  		string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  		string modulationType = getModulationType (satelliteDescriptor.ModulationType);  		string modulationSystem;  		if (!satelliteDescriptor.S2Flag)  			modulationSystem = "DVB-S";  		else  			modulationSystem = "S2";  		streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  	}  	streamWriter.Close ();  	fileStream.Close ();  }  catch (IOException e) {  	Logger.Instance.Write ("<E> Exception creating satellite ini file:");  	Logger.Instance.Write ("<E> " + e.Message);  	return;  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: streamWriter.WriteLine ("1=" + satelliteEntry.OrbitalPosition.ToString ().PadLeft (4' '0'));  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: if (satelliteEntry.East)  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  else  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: if (satelliteEntry.East)  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  else  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: if (satelliteEntry.East)  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  else  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: if (satelliteEntry.East)  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  else  	orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "E";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: orbitalPosition = "2=" + (satelliteEntry.OrbitalPosition / 10) + "." + (satelliteEntry.OrbitalPosition % 10) + "W";  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  	lineNumber++;  	string polarization = getPolarization (satelliteDescriptor.Polarization);  	string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  	string modulationType = getModulationType (satelliteDescriptor.ModulationType);  	string modulationSystem;  	if (!satelliteDescriptor.S2Flag)  		modulationSystem = "DVB-S";  	else  		modulationSystem = "S2";  	streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: foreach (DVBSatelliteDeliverySystemDescriptor satelliteDescriptor in satelliteEntry.SatelliteDescriptors) {  	lineNumber++;  	string polarization = getPolarization (satelliteDescriptor.Polarization);  	string innerFec = getInnerFec (satelliteDescriptor.InnerFEC);  	string modulationType = getModulationType (satelliteDescriptor.ModulationType);  	string modulationSystem;  	if (!satelliteDescriptor.S2Flag)  		modulationSystem = "DVB-S";  	else  		modulationSystem = "S2";  	streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,createSatelliteIni,The following statement contains a magic number: streamWriter.WriteLine (lineNumber + "=" + (satelliteDescriptor.Frequency / 100) + "'" + polarization + "'" + (satelliteDescriptor.SymbolRate / 10) + "'" + innerFec + "'" + modulationSystem + "'" + modulationType);  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getPolarization,The following statement contains a magic number: switch (polarization) {  case 0:  	return ("H");  case 1:  	return ("V");  case 2:  	return ("L");  case 3:  	return ("R");  default:  	return ("H");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getPolarization,The following statement contains a magic number: switch (polarization) {  case 0:  	return ("H");  case 1:  	return ("V");  case 2:  	return ("L");  case 3:  	return ("R");  default:  	return ("H");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getInnerFec,The following statement contains a magic number: switch (innerFec) {  case 1:  	return ("12");  case 2:  	return ("23");  case 3:  	return ("34");  case 4:  	return ("56");  case 5:  	return ("78");  case 6:  	return ("89");  case 7:  	return ("35");  case 8:  	return ("45");  case 9:  	return ("91");  default:  	return ("12");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getModulationType,The following statement contains a magic number: switch (modulationType) {  case 0:  	return ("AUTO");  case 1:  	return ("QPSK");  case 2:  	return ("8PSK");  case 3:  	return ("16QAM");  default:  	return ("QPSK");  }  
Magic Number,DVBServices,EPGController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EPGController.cs,getModulationType,The following statement contains a magic number: switch (modulationType) {  case 0:  	return ("AUTO");  case 1:  	return ("QPSK");  case 2:  	return ("8PSK");  case 3:  	return ("16QAM");  default:  	return ("QPSK");  }  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: try {  	descriptorNumber = (int)byteData [lastIndex] >> 4;  	lastDescriptorNumber = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	int totalItemLength = (int)byteData [lastIndex];  	lastIndex++;  	if (totalItemLength != 0) {  		itemDescriptions = new Collection<string> ();  		items = new Collection<string> ();  		while (totalItemLength != 0) {  			int itemDescriptionLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemDescriptionLength != 0) {  				string itemDescription = Utils.GetString (byteData' lastIndex' itemDescriptionLength);  				itemDescriptions.Add (itemDescription.ToUpper ());  				lastIndex += itemDescriptionLength;  			}  			int itemLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemLength != 0) {  				string item = Utils.GetString (byteData' lastIndex' itemLength);  				items.Add (item);  				lastIndex += itemLength;  			}  			else  				items.Add ("");  			totalItemLength -= (itemDescriptionLength + itemLength + 2);  		}  	}  	int textLength = (int)byteData [lastIndex];  	lastIndex++;  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Extended Event Descriptor message is short"));  }  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: try {  	descriptorNumber = (int)byteData [lastIndex] >> 4;  	lastDescriptorNumber = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	int totalItemLength = (int)byteData [lastIndex];  	lastIndex++;  	if (totalItemLength != 0) {  		itemDescriptions = new Collection<string> ();  		items = new Collection<string> ();  		while (totalItemLength != 0) {  			int itemDescriptionLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemDescriptionLength != 0) {  				string itemDescription = Utils.GetString (byteData' lastIndex' itemDescriptionLength);  				itemDescriptions.Add (itemDescription.ToUpper ());  				lastIndex += itemDescriptionLength;  			}  			int itemLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemLength != 0) {  				string item = Utils.GetString (byteData' lastIndex' itemLength);  				items.Add (item);  				lastIndex += itemLength;  			}  			else  				items.Add ("");  			totalItemLength -= (itemDescriptionLength + itemLength + 2);  		}  	}  	int textLength = (int)byteData [lastIndex];  	lastIndex++;  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Extended Event Descriptor message is short"));  }  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: try {  	descriptorNumber = (int)byteData [lastIndex] >> 4;  	lastDescriptorNumber = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	int totalItemLength = (int)byteData [lastIndex];  	lastIndex++;  	if (totalItemLength != 0) {  		itemDescriptions = new Collection<string> ();  		items = new Collection<string> ();  		while (totalItemLength != 0) {  			int itemDescriptionLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemDescriptionLength != 0) {  				string itemDescription = Utils.GetString (byteData' lastIndex' itemDescriptionLength);  				itemDescriptions.Add (itemDescription.ToUpper ());  				lastIndex += itemDescriptionLength;  			}  			int itemLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemLength != 0) {  				string item = Utils.GetString (byteData' lastIndex' itemLength);  				items.Add (item);  				lastIndex += itemLength;  			}  			else  				items.Add ("");  			totalItemLength -= (itemDescriptionLength + itemLength + 2);  		}  	}  	int textLength = (int)byteData [lastIndex];  	lastIndex++;  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Extended Event Descriptor message is short"));  }  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: try {  	descriptorNumber = (int)byteData [lastIndex] >> 4;  	lastDescriptorNumber = (int)byteData [lastIndex] & 0x0f;  	lastIndex++;  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += 3;  	int totalItemLength = (int)byteData [lastIndex];  	lastIndex++;  	if (totalItemLength != 0) {  		itemDescriptions = new Collection<string> ();  		items = new Collection<string> ();  		while (totalItemLength != 0) {  			int itemDescriptionLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemDescriptionLength != 0) {  				string itemDescription = Utils.GetString (byteData' lastIndex' itemDescriptionLength);  				itemDescriptions.Add (itemDescription.ToUpper ());  				lastIndex += itemDescriptionLength;  			}  			int itemLength = (int)byteData [lastIndex];  			lastIndex++;  			if (itemLength != 0) {  				string item = Utils.GetString (byteData' lastIndex' itemLength);  				items.Add (item);  				lastIndex += itemLength;  			}  			else  				items.Add ("");  			totalItemLength -= (itemDescriptionLength + itemLength + 2);  		}  	}  	int textLength = (int)byteData [lastIndex];  	lastIndex++;  	if (textLength != 0) {  		text = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Extended Event Descriptor message is short"));  }  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: descriptorNumber = (int)byteData [lastIndex] >> 4;  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: languageCode = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: if (totalItemLength != 0) {  	itemDescriptions = new Collection<string> ();  	items = new Collection<string> ();  	while (totalItemLength != 0) {  		int itemDescriptionLength = (int)byteData [lastIndex];  		lastIndex++;  		if (itemDescriptionLength != 0) {  			string itemDescription = Utils.GetString (byteData' lastIndex' itemDescriptionLength);  			itemDescriptions.Add (itemDescription.ToUpper ());  			lastIndex += itemDescriptionLength;  		}  		int itemLength = (int)byteData [lastIndex];  		lastIndex++;  		if (itemLength != 0) {  			string item = Utils.GetString (byteData' lastIndex' itemLength);  			items.Add (item);  			lastIndex += itemLength;  		}  		else  			items.Add ("");  		totalItemLength -= (itemDescriptionLength + itemLength + 2);  	}  }  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: while (totalItemLength != 0) {  	int itemDescriptionLength = (int)byteData [lastIndex];  	lastIndex++;  	if (itemDescriptionLength != 0) {  		string itemDescription = Utils.GetString (byteData' lastIndex' itemDescriptionLength);  		itemDescriptions.Add (itemDescription.ToUpper ());  		lastIndex += itemDescriptionLength;  	}  	int itemLength = (int)byteData [lastIndex];  	lastIndex++;  	if (itemLength != 0) {  		string item = Utils.GetString (byteData' lastIndex' itemLength);  		items.Add (item);  		lastIndex += itemLength;  	}  	else  		items.Add ("");  	totalItemLength -= (itemDescriptionLength + itemLength + 2);  }  
Magic Number,DVBServices,DVBExtendedEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBExtendedEventDescriptor.cs,Process,The following statement contains a magic number: totalItemLength -= (itemDescriptionLength + itemLength + 2);  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findDvbStations,The following statement contains a magic number: while (!done) {  	if (worker != null && worker.CancellationPending) {  		stationReader.Stop ();  		return (null);  	}  	Thread.Sleep (2000);  	if (!RunParameters.Instance.TraceIDs.Contains ("BDA"))  		Logger.Instance.Write ("."' false' false);  	else  		Logger.Instance.Write ("BDA Buffer space used " + dataProvider.BufferSpaceUsed);  	sections = new Collection<Mpeg2Section> ();  	stationReader.Lock ("ProcessSDTSections");  	if (stationReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in stationReader.Sections)  			sections.Add (section);  		stationReader.Sections.Clear ();  	}  	stationReader.Release ("ProcessSDTSections");  	foreach (Mpeg2Section section in sections) {  		ServiceDescriptionSection serviceDescriptionSection = ServiceDescriptionSection.ProcessServiceDescriptionTable (section.Data);  		if (serviceDescriptionSection != null)  			processServiceDescriptionSection (serviceDescriptionSection' tvStations' dataProvider.Frequency);  	}  	if (tvStations.Count == lastCount) {  		repeats++;  		done = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = tvStations.Count;  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findDvbStations,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processPATSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processServiceDescriptionSection,The following statement contains a magic number: foreach (ServiceDescription serviceDescription in serviceDescriptionSection.ServiceDescriptions) {  	bool processStation = checkServiceInfo (serviceDescription);  	if (processStation) {  		TVStation tvStation = new TVStation (serviceDescription.ServiceName);  		tvStation.ProviderName = serviceDescription.ProviderName;  		if (useActualFrequency) {  			tvStation.Frequency = NetworkInformationSection.GetFrequency (serviceDescriptionSection.OriginalNetworkID' serviceDescriptionSection.TransportStreamID) * 10;  			if (tvStation.Frequency == 0) {  				tvStation.Frequency = frequency.Frequency;  				Logger.Instance.Write ("Station : " + tvStation.Name + " not found in Network Information Table");  			}  		}  		else  			tvStation.Frequency = frequency.Frequency;  		tvStation.OriginalNetworkID = serviceDescriptionSection.OriginalNetworkID;  		tvStation.TransportStreamID = serviceDescriptionSection.TransportStreamID;  		tvStation.ServiceID = serviceDescription.ServiceID;  		tvStation.Encrypted = serviceDescription.Scrambled;  		tvStation.ServiceType = serviceDescription.ServiceType;  		tvStation.ScheduleAvailable = serviceDescription.EITSchedule;  		tvStation.NextFollowingAvailable = serviceDescription.EITPresentFollowing;  		tvStation.TunerType = frequency.TunerType;  		if (frequency.TunerType == TunerType.Satellite) {  			Satellite satellite = ((SatelliteFrequency)frequency).Provider as Satellite;  			if (satellite != null)  				tvStation.Satellite = satellite;  		}  		if (RunParameters.Instance.Options.Contains ("USECHANNELID")) {  			if (serviceDescription.ChannelNumber != -1)  				tvStation.OriginalChannelNumber = serviceDescription.ChannelNumber;  		}  		addStation (tvStations' tvStation);  	}  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processServiceDescriptionSection,The following statement contains a magic number: if (processStation) {  	TVStation tvStation = new TVStation (serviceDescription.ServiceName);  	tvStation.ProviderName = serviceDescription.ProviderName;  	if (useActualFrequency) {  		tvStation.Frequency = NetworkInformationSection.GetFrequency (serviceDescriptionSection.OriginalNetworkID' serviceDescriptionSection.TransportStreamID) * 10;  		if (tvStation.Frequency == 0) {  			tvStation.Frequency = frequency.Frequency;  			Logger.Instance.Write ("Station : " + tvStation.Name + " not found in Network Information Table");  		}  	}  	else  		tvStation.Frequency = frequency.Frequency;  	tvStation.OriginalNetworkID = serviceDescriptionSection.OriginalNetworkID;  	tvStation.TransportStreamID = serviceDescriptionSection.TransportStreamID;  	tvStation.ServiceID = serviceDescription.ServiceID;  	tvStation.Encrypted = serviceDescription.Scrambled;  	tvStation.ServiceType = serviceDescription.ServiceType;  	tvStation.ScheduleAvailable = serviceDescription.EITSchedule;  	tvStation.NextFollowingAvailable = serviceDescription.EITPresentFollowing;  	tvStation.TunerType = frequency.TunerType;  	if (frequency.TunerType == TunerType.Satellite) {  		Satellite satellite = ((SatelliteFrequency)frequency).Provider as Satellite;  		if (satellite != null)  			tvStation.Satellite = satellite;  	}  	if (RunParameters.Instance.Options.Contains ("USECHANNELID")) {  		if (serviceDescription.ChannelNumber != -1)  			tvStation.OriginalChannelNumber = serviceDescription.ChannelNumber;  	}  	addStation (tvStations' tvStation);  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processServiceDescriptionSection,The following statement contains a magic number: if (useActualFrequency) {  	tvStation.Frequency = NetworkInformationSection.GetFrequency (serviceDescriptionSection.OriginalNetworkID' serviceDescriptionSection.TransportStreamID) * 10;  	if (tvStation.Frequency == 0) {  		tvStation.Frequency = frequency.Frequency;  		Logger.Instance.Write ("Station : " + tvStation.Name + " not found in Network Information Table");  	}  }  else  	tvStation.Frequency = frequency.Frequency;  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processServiceDescriptionSection,The following statement contains a magic number: tvStation.Frequency = NetworkInformationSection.GetFrequency (serviceDescriptionSection.OriginalNetworkID' serviceDescriptionSection.TransportStreamID) * 10;  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processProgramInfo,The following statement contains a magic number: while (!done) {  	Thread.Sleep (10);  	pmtReader.Lock ("ProcessPMTSections");  	if (pmtReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in pmtReader.Sections)  			sections.Add (section);  		pmtReader.Sections.Clear ();  	}  	pmtReader.Release ("ProcessPMTSections");  	done = (sections.Count != 0);  	if (!done) {  		repeats++;  		done = (repeats == 500);  	}  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processProgramInfo,The following statement contains a magic number: while (!done) {  	Thread.Sleep (10);  	pmtReader.Lock ("ProcessPMTSections");  	if (pmtReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in pmtReader.Sections)  			sections.Add (section);  		pmtReader.Sections.Clear ();  	}  	pmtReader.Release ("ProcessPMTSections");  	done = (sections.Count != 0);  	if (!done) {  		repeats++;  		done = (repeats == 500);  	}  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processProgramInfo,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processProgramInfo,The following statement contains a magic number: if (!done) {  	repeats++;  	done = (repeats == 500);  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processProgramInfo,The following statement contains a magic number: done = (repeats == 500);  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processNITSections,The following statement contains a magic number: while (!done) {  	if (worker != null && worker.CancellationPending) {  		nitReader.Stop ();  		return;  	}  	Thread.Sleep (2000);  	if (!RunParameters.Instance.TraceIDs.Contains ("BDA"))  		Logger.Instance.Write ("."' false' false);  	else  		Logger.Instance.Write ("Buffer space used " + dataProvider.BufferSpaceUsed);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	nitReader.Lock ("ProcessNITSections");  	if (nitReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in nitReader.Sections)  			sections.Add (section);  		nitReader.Sections.Clear ();  	}  	nitReader.Release ("ProcessNITSections");  	foreach (Mpeg2Section section in sections) {  		NetworkInformationSection networkInformationSection = NetworkInformationSection.ProcessNetworkInformationTable (section.Data);  		if (networkInformationSection != null)  			NetworkInformationSection.AddSection (networkInformationSection);  	}  	if (NetworkInformationSection.NetworkInformationSections.Count == lastCount) {  		repeats++;  		done = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = NetworkInformationSection.NetworkInformationSections.Count;  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,processNITSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findAtscStations,The following statement contains a magic number: while (!done) {  	if (worker.CancellationPending)  		return (tvStations);  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processVirtualChannelTable (sections' dataProvider.Frequency.Frequency);  	done = VirtualChannelTable.Complete;  	if (!done) {  		repeats++;  		done = (repeats == RunParameters.Instance.Repeats);  	}  }  
Magic Number,DVBServices,FrequencyScanner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FrequencyScanner.cs,findAtscStations,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: try {  	typeIDLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	typeID = Utils.GetString (byteData' lastIndex' typeIDLength);  	lastIndex += typeIDLength;  	if ((typeIDLength % 4) != 0) {  		for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  			lastIndex++;  	}  	taggedProfilesCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (taggedProfilesCount != 0) {  		taggedProfiles = new Collection<BIOPProfileBase> ();  		while (taggedProfiles.Count != taggedProfilesCount) {  			BIOPProfileBase taggedProfile = new BIOPProfileBase ();  			taggedProfile.Process (byteData' lastIndex);  			taggedProfiles.Add (taggedProfile);  			lastIndex = taggedProfile.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The IOP:IOR message is short"));  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: try {  	typeIDLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	typeID = Utils.GetString (byteData' lastIndex' typeIDLength);  	lastIndex += typeIDLength;  	if ((typeIDLength % 4) != 0) {  		for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  			lastIndex++;  	}  	taggedProfilesCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (taggedProfilesCount != 0) {  		taggedProfiles = new Collection<BIOPProfileBase> ();  		while (taggedProfiles.Count != taggedProfilesCount) {  			BIOPProfileBase taggedProfile = new BIOPProfileBase ();  			taggedProfile.Process (byteData' lastIndex);  			taggedProfiles.Add (taggedProfile);  			lastIndex = taggedProfile.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The IOP:IOR message is short"));  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: try {  	typeIDLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	typeID = Utils.GetString (byteData' lastIndex' typeIDLength);  	lastIndex += typeIDLength;  	if ((typeIDLength % 4) != 0) {  		for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  			lastIndex++;  	}  	taggedProfilesCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (taggedProfilesCount != 0) {  		taggedProfiles = new Collection<BIOPProfileBase> ();  		while (taggedProfiles.Count != taggedProfilesCount) {  			BIOPProfileBase taggedProfile = new BIOPProfileBase ();  			taggedProfile.Process (byteData' lastIndex);  			taggedProfiles.Add (taggedProfile);  			lastIndex = taggedProfile.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The IOP:IOR message is short"));  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: try {  	typeIDLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	typeID = Utils.GetString (byteData' lastIndex' typeIDLength);  	lastIndex += typeIDLength;  	if ((typeIDLength % 4) != 0) {  		for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  			lastIndex++;  	}  	taggedProfilesCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (taggedProfilesCount != 0) {  		taggedProfiles = new Collection<BIOPProfileBase> ();  		while (taggedProfiles.Count != taggedProfilesCount) {  			BIOPProfileBase taggedProfile = new BIOPProfileBase ();  			taggedProfile.Process (byteData' lastIndex);  			taggedProfiles.Add (taggedProfile);  			lastIndex = taggedProfile.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The IOP:IOR message is short"));  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: try {  	typeIDLength = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	typeID = Utils.GetString (byteData' lastIndex' typeIDLength);  	lastIndex += typeIDLength;  	if ((typeIDLength % 4) != 0) {  		for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  			lastIndex++;  	}  	taggedProfilesCount = Utils.Convert4BytesToInt (byteData' lastIndex);  	lastIndex += 4;  	if (taggedProfilesCount != 0) {  		taggedProfiles = new Collection<BIOPProfileBase> ();  		while (taggedProfiles.Count != taggedProfilesCount) {  			BIOPProfileBase taggedProfile = new BIOPProfileBase ();  			taggedProfile.Process (byteData' lastIndex);  			taggedProfiles.Add (taggedProfile);  			lastIndex = taggedProfile.Index;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The IOP:IOR message is short"));  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: if ((typeIDLength % 4) != 0) {  	for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  		lastIndex++;  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: if ((typeIDLength % 4) != 0) {  	for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  		lastIndex++;  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: if ((typeIDLength % 4) != 0) {  	for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  		lastIndex++;  }  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  	lastIndex++;  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: for (int filler = 0; filler < (4 - (typeIDLength % 4)); filler++)  	lastIndex++;  
Magic Number,DVBServices,IOPIOR,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\IOPIOR.cs,Process,The following statement contains a magic number: lastIndex += 4;  
Magic Number,DVBServices,FreeviewChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeviewChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<FreeviewChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			FreeviewChannelInfoEntry channelInfoEntry = new FreeviewChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Freeview Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,FreeviewChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeviewChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<FreeviewChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			FreeviewChannelInfoEntry channelInfoEntry = new FreeviewChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Freeview Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,FreeviewChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeviewChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<FreeviewChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		FreeviewChannelInfoEntry channelInfoEntry = new FreeviewChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,FreeviewChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeviewChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<FreeviewChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		FreeviewChannelInfoEntry channelInfoEntry = new FreeviewChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,FreeviewChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeviewChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	flags = Utils.GetBytes (byteData' lastIndex' 1);  	lastIndex++;  	userNumber = (int)byteData [lastIndex];  	lastIndex++;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Freeview Channel Info Entry message is short"));  }  
Magic Number,DVBServices,FreeviewChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\FreeviewChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processFields,The following statement contains a magic number: if (parameters.Length != 2) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: The Fields line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processFields,The following statement contains a magic number: if (parameters.Length != 2) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: The Fields line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processFields,The following statement contains a magic number: System.Environment.Exit (3);  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processFields,The following statement contains a magic number: try {  	headerFields = Int32.Parse (parameters [0].Trim ());  	detailFields = Int32.Parse (parameters [1].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: The Fields line is wrong.");  	System.Environment.Exit (3);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: The Fields line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processFields,The following statement contains a magic number: try {  	headerFields = Int32.Parse (parameters [0].Trim ());  	detailFields = Int32.Parse (parameters [1].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: The Fields line is wrong.");  	System.Environment.Exit (3);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: The Fields line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processFields,The following statement contains a magic number: System.Environment.Exit (3);  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processFields,The following statement contains a magic number: System.Environment.Exit (3);  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The following statement contains a magic number: if (parameters.Length != 2) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: A Field line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The following statement contains a magic number: if (parameters.Length != 2) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: A Field line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The following statement contains a magic number: System.Environment.Exit (3);  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The following statement contains a magic number: try {  	ParserParameter parserParameter = new ParserParameter ((FieldName)Enum.Parse (typeof(FieldName)' parameters [0]' true)' Int32.Parse (parameters [1].Trim ()));  	if (parserParameters == null)  		parserParameters = new Collection<ParserParameter> ();  	parserParameters.Add (parserParameter);  }  catch (FormatException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: A Field line is wrong.");  	System.Environment.Exit (3);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: A Field line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The following statement contains a magic number: try {  	ParserParameter parserParameter = new ParserParameter ((FieldName)Enum.Parse (typeof(FieldName)' parameters [0]' true)' Int32.Parse (parameters [1].Trim ()));  	if (parserParameters == null)  		parserParameters = new Collection<ParserParameter> ();  	parserParameters.Add (parserParameter);  }  catch (FormatException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: A Field line is wrong.");  	System.Environment.Exit (3);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("MHEG Parser parameters file format error: A Field line is wrong.");  	System.Environment.Exit (3);  }  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The following statement contains a magic number: System.Environment.Exit (3);  
Magic Number,DVBServices,MHEGParserParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\MHEGParserParameters.cs,processField,The following statement contains a magic number: System.Environment.Exit (3);  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 0) {  		int dataLength = Length;  		parentalRatings = new Collection<int> ();  		while (dataLength != 0) {  			byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  			lastIndex += 3;  			int parentalRating = (int)(byteData [lastIndex]);  			lastIndex++;  			parentalRatings.Add (parentalRating);  			dataLength -= 4;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Parental Rating Descriptor message is short"));  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 0) {  		int dataLength = Length;  		parentalRatings = new Collection<int> ();  		while (dataLength != 0) {  			byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  			lastIndex += 3;  			int parentalRating = (int)(byteData [lastIndex]);  			lastIndex++;  			parentalRatings.Add (parentalRating);  			dataLength -= 4;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Parental Rating Descriptor message is short"));  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 0) {  		int dataLength = Length;  		parentalRatings = new Collection<int> ();  		while (dataLength != 0) {  			byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  			lastIndex += 3;  			int parentalRating = (int)(byteData [lastIndex]);  			lastIndex++;  			parentalRatings.Add (parentalRating);  			dataLength -= 4;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Parental Rating Descriptor message is short"));  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: if (Length != 0) {  	int dataLength = Length;  	parentalRatings = new Collection<int> ();  	while (dataLength != 0) {  		byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  		lastIndex += 3;  		int parentalRating = (int)(byteData [lastIndex]);  		lastIndex++;  		parentalRatings.Add (parentalRating);  		dataLength -= 4;  	}  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: if (Length != 0) {  	int dataLength = Length;  	parentalRatings = new Collection<int> ();  	while (dataLength != 0) {  		byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  		lastIndex += 3;  		int parentalRating = (int)(byteData [lastIndex]);  		lastIndex++;  		parentalRatings.Add (parentalRating);  		dataLength -= 4;  	}  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: if (Length != 0) {  	int dataLength = Length;  	parentalRatings = new Collection<int> ();  	while (dataLength != 0) {  		byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  		lastIndex += 3;  		int parentalRating = (int)(byteData [lastIndex]);  		lastIndex++;  		parentalRatings.Add (parentalRating);  		dataLength -= 4;  	}  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: while (dataLength != 0) {  	byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int parentalRating = (int)(byteData [lastIndex]);  	lastIndex++;  	parentalRatings.Add (parentalRating);  	dataLength -= 4;  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: while (dataLength != 0) {  	byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int parentalRating = (int)(byteData [lastIndex]);  	lastIndex++;  	parentalRatings.Add (parentalRating);  	dataLength -= 4;  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: while (dataLength != 0) {  	byte[] countryCode = Utils.GetBytes (byteData' lastIndex' 3);  	lastIndex += 3;  	int parentalRating = (int)(byteData [lastIndex]);  	lastIndex++;  	parentalRatings.Add (parentalRating);  	dataLength -= 4;  }  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 3;  
Magic Number,DVBServices,DVBParentalRatingDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBParentalRatingDescriptor.cs,Process,The following statement contains a magic number: dataLength -= 4;  
Magic Number,DVBServices,Mpeg2BasicHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2BasicHeader.cs,Process,The following statement contains a magic number: try {  	tableID = (int)byteData [lastIndex];  	lastIndex++;  	syntaxIndicator = (byteData [lastIndex] & 0x80) != 0;  	privateIndicator = (byteData [lastIndex] & 0x40) != 0;  	sectionLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("MPEG2 basic header is short"));  }  
Magic Number,DVBServices,Mpeg2BasicHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2BasicHeader.cs,Process,The following statement contains a magic number: try {  	tableID = (int)byteData [lastIndex];  	lastIndex++;  	syntaxIndicator = (byteData [lastIndex] & 0x80) != 0;  	privateIndicator = (byteData [lastIndex] & 0x40) != 0;  	sectionLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("MPEG2 basic header is short"));  }  
Magic Number,DVBServices,Mpeg2BasicHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2BasicHeader.cs,Process,The following statement contains a magic number: sectionLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  
Magic Number,DVBServices,Mpeg2BasicHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2BasicHeader.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,Mpeg2BasicHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2BasicHeader.cs,Validate,The following statement contains a magic number: if (dataLength > 4096)  	throw (new ArgumentOutOfRangeException ("MPEG2 Section data length wrong"));  
Magic Number,DVBServices,Mpeg2BasicHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2BasicHeader.cs,Validate,The following statement contains a magic number: if (sectionLength < 1 || sectionLength > dataLength - 3)  	throw (new ArgumentOutOfRangeException ("MPEG2 Section length wrong"));  
Magic Number,DVBServices,Mpeg2ExtendedHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2ExtendedHeader.cs,Process,The following statement contains a magic number: try {  	tableIDExtension = (byteData [lastIndex] * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	versionNumber = ((int)((byteData [lastIndex] >> 1) & 0x1f));  	currentNextIndicator = (byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  	sectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("MPEG2 extended header short"));  }  
Magic Number,DVBServices,Mpeg2ExtendedHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2ExtendedHeader.cs,Process,The following statement contains a magic number: try {  	tableIDExtension = (byteData [lastIndex] * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	versionNumber = ((int)((byteData [lastIndex] >> 1) & 0x1f));  	currentNextIndicator = (byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  	sectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	lastSectionNumber = (int)byteData [lastIndex];  	lastIndex++;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("MPEG2 extended header short"));  }  
Magic Number,DVBServices,Mpeg2ExtendedHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2ExtendedHeader.cs,Process,The following statement contains a magic number: tableIDExtension = (byteData [lastIndex] * 256) + (int)byteData [lastIndex + 1];  
Magic Number,DVBServices,Mpeg2ExtendedHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Mpeg2ExtendedHeader.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,checkChannelBouquet,The following statement contains a magic number: if (channel.Region == 65535 || channel.Region == RunParameters.Instance.ChannelRegion)  	return (true);  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: foreach (OpenTVTitleData titleData in TitleData) {  	EPGEntry epgEntry = new EPGEntry ();  	epgEntry.OriginalNetworkID = OriginalNetworkID;  	epgEntry.TransportStreamID = TransportStreamID;  	epgEntry.ServiceID = ServiceID;  	epgEntry.EventID = titleData.EventID;  	epgEntry.StartTime = Utils.RoundTime (TimeOffsetEntry.GetAdjustedTime (titleData.StartTime));  	epgEntry.Duration = Utils.RoundTime (titleData.Duration);  	getEventName (epgEntry' titleData);  	OpenTVSummaryData summary = getShortDescription (epgEntry' titleData);  	getParentalRating (titleData' epgEntry);  	getAspectRatio (titleData' epgEntry);  	getVideoQuality (titleData' epgEntry);  	getAudioQuality (titleData' epgEntry);  	getSubTitles (titleData' epgEntry);  	getEventCategory (titleData' epgEntry);  	getSeasonEpisode (epgEntry);  	getSeriesLink (epgEntry' summary);  	getExtendedRatings (epgEntry);  	getDirector (epgEntry);  	getCast (epgEntry);  	getDate (epgEntry);  	getSubTitle (epgEntry);  	epgEntry.EPGSource = EPGSource.OpenTV;  	epgEntry.PID = titleData.PID;  	epgEntry.Table = titleData.Table;  	epgEntry.TimeStamp = titleData.TimeStamp;  	epgEntry.UnknownData = titleData.Flags;  	station.AddEPGEntry (epgEntry);  	if (first) {  		expectedStartTime = new DateTime ();  		first = false;  	}  	else {  		if (epgEntry.StartTime < expectedStartTime) {  			if (titleLogger != null)  				titleLogger.Write (" ** Overlap In Schedule **");  		}  		else {  			if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  				if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  					if (titleLogger != null)  						titleLogger.Write (" ** Gap In Schedule **");  				}  			}  			else {  				if (epgEntry.StartTime > expectedStartTime) {  					if (titleLogger != null)  						titleLogger.Write (" ** Gap In Schedule **");  				}  			}  		}  	}  	expectedStartTime = epgEntry.StartTime + epgEntry.Duration;  	if (titleLogger != null) {  		string seriesLink = "No ";  		if (summary != null && summary.SeriesLink != -1)  			seriesLink = "0x" + summary.SeriesLink.ToString ("X");  		titleLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + " Cat ID " + titleData.CategoryID.ToString ("000 ") + " Flags " + Utils.ConvertToHex (titleData.Flags) + " SLink " + seriesLink + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + titleData.EventName);  		if (RunParameters.Instance.DebugIDs.Contains ("BITPATTERN"))  			titleLogger.Write ("Bit pattern: " + Utils.ConvertToBits (titleData.EventNameBytes));  	}  	if (descriptionLogger != null && summary != null) {  		descriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + summary.ShortDescription);  		if (RunParameters.Instance.DebugIDs.Contains ("BITPATTERN"))  			descriptionLogger.Write ("Bit pattern: " + Utils.ConvertToBits (summary.ShortDescriptionBytes));  	}  	if (extendedDescriptionLogger != null && summary != null) {  		string extendedDescription = summary.ExtendedDescription;  		if (extendedDescription != null)  			extendedDescriptionLogger.Write (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + extendedDescription);  	}  	if (undefinedRecordLogger != null) {  		Collection<OpenTVRecordBase> undefinedTitleRecords = titleData.UndefinedRecords;  		if (undefinedTitleRecords != null) {  			foreach (OpenTVRecordBase record in undefinedTitleRecords) {  				if (record.Data != null)  					undefinedRecordLogger.Write ("Title records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + titleData.EventName + " Tag: " + record.Tag.ToString ("X") + " Data: " + Utils.ConvertToHex (record.Data));  				else  					undefinedRecordLogger.Write ("Title records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " " + titleData.EventName + " Tag: 0x" + record.Tag.ToString ("X") + " Data: No data");  			}  		}  		if (summary != null) {  			Collection<OpenTVRecordBase> undefinedSummaryRecords = summary.UndefinedRecords;  			if (undefinedSummaryRecords != null) {  				foreach (OpenTVRecordBase record in undefinedSummaryRecords) {  					if (record.Data != null)  						undefinedRecordLogger.Write ("Summary records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " Tag: " + record.Tag.ToString ("X") + " Data: " + Utils.ConvertToHex (record.Data));  					else  						undefinedRecordLogger.Write ("Summary records: " + epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + " " + epgEntry.StartTime.ToShortDateString () + " " + epgEntry.StartTime.ToString ("HH:mm") + " - " + epgEntry.StartTime.Add (epgEntry.Duration).ToString ("HH:mm") + " Tag: ox" + record.Tag.ToString ("X") + " Data: No data");  				}  			}  		}  	}  	if (RunParameters.Instance.DebugIDs.Contains ("CATXREF"))  		updateCategoryEntries (OriginalNetworkID' TransportStreamID' ServiceID' epgEntry.StartTime' epgEntry.EventName' titleData.CategoryID);  	if (!RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  		if (epgEntry.StartTime.Second != 0) {  			if (titleLogger != null)  				titleLogger.Write ("** Suspect Start Time **");  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (first) {  	expectedStartTime = new DateTime ();  	first = false;  }  else {  	if (epgEntry.StartTime < expectedStartTime) {  		if (titleLogger != null)  			titleLogger.Write (" ** Overlap In Schedule **");  	}  	else {  		if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  			if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  				if (titleLogger != null)  					titleLogger.Write (" ** Gap In Schedule **");  			}  		}  		else {  			if (epgEntry.StartTime > expectedStartTime) {  				if (titleLogger != null)  					titleLogger.Write (" ** Gap In Schedule **");  			}  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (epgEntry.StartTime < expectedStartTime) {  	if (titleLogger != null)  		titleLogger.Write (" ** Overlap In Schedule **");  }  else {  	if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  		if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  			if (titleLogger != null)  				titleLogger.Write (" ** Gap In Schedule **");  		}  	}  	else {  		if (epgEntry.StartTime > expectedStartTime) {  			if (titleLogger != null)  				titleLogger.Write (" ** Gap In Schedule **");  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (RunParameters.Instance.Options.Contains ("ACCEPTBREAKS")) {  	if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  		if (titleLogger != null)  			titleLogger.Write (" ** Gap In Schedule **");  	}  }  else {  	if (epgEntry.StartTime > expectedStartTime) {  		if (titleLogger != null)  			titleLogger.Write (" ** Gap In Schedule **");  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,ProcessChannelForEPG,The following statement contains a magic number: if (epgEntry.StartTime > expectedStartTime + new TimeSpan (0' 5' 0)) {  	if (titleLogger != null)  		titleLogger.Write (" ** Gap In Schedule **");  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZEventName,The following statement contains a magic number: if (!titleData.EventName.StartsWith ("[["))  	editedEventName = eventName;  else {  	int startIndex = eventName.IndexOf ("]");  	if (startIndex != -1 && eventName [startIndex + 1] == ']' && startIndex + 2 < eventName.Length)  		editedEventName = eventName.Substring (startIndex + 2);  	else  		editedEventName = eventName;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZEventName,The following statement contains a magic number: if (!titleData.EventName.StartsWith ("[["))  	editedEventName = eventName;  else {  	int startIndex = eventName.IndexOf ("]");  	if (startIndex != -1 && eventName [startIndex + 1] == ']' && startIndex + 2 < eventName.Length)  		editedEventName = eventName.Substring (startIndex + 2);  	else  		editedEventName = eventName;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZEventName,The following statement contains a magic number: if (startIndex != -1 && eventName [startIndex + 1] == ']' && startIndex + 2 < eventName.Length)  	editedEventName = eventName.Substring (startIndex + 2);  else  	editedEventName = eventName;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZEventName,The following statement contains a magic number: if (startIndex != -1 && eventName [startIndex + 1] == ']' && startIndex + 2 < eventName.Length)  	editedEventName = eventName.Substring (startIndex + 2);  else  	editedEventName = eventName;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZEventName,The following statement contains a magic number: editedEventName = eventName.Substring (startIndex + 2);  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZEventName,The following statement contains a magic number: if (editedEventName.EndsWith (" HD"))  	epgEntry.EventName = editedEventName.Substring (0' editedEventName.Length - 3);  else  	epgEntry.EventName = editedEventName;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZEventName,The following statement contains a magic number: epgEntry.EventName = editedEventName.Substring (0' editedEventName.Length - 3);  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getParentalRating,The following statement contains a magic number: if (titleData.Flags == null || titleData.Flags.Length < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getAspectRatio,The following statement contains a magic number: if (titleData.Flags == null || titleData.Flags.Length < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getVideoQuality,The following statement contains a magic number: if (titleData.Flags == null || titleData.Flags.Length < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getAudioQuality,The following statement contains a magic number: if (titleData.Flags == null || titleData.Flags.Length < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getAudioQuality,The following statement contains a magic number: switch (titleData.Flags [0] >> 6) {  case 1:  	epgEntry.AudioQuality = "stereo";  	break;  case 2:  	epgEntry.AudioQuality = "surround";  	break;  case 3:  	epgEntry.AudioQuality = "dolby digital";  	break;  default:  	break;  	;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getAudioQuality,The following statement contains a magic number: switch (titleData.Flags [0] >> 6) {  case 1:  	epgEntry.AudioQuality = "stereo";  	break;  case 2:  	epgEntry.AudioQuality = "surround";  	break;  case 3:  	epgEntry.AudioQuality = "dolby digital";  	break;  default:  	break;  	;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getAudioQuality,The following statement contains a magic number: switch (titleData.Flags [0] >> 6) {  case 1:  	epgEntry.AudioQuality = "stereo";  	break;  case 2:  	epgEntry.AudioQuality = "surround";  	break;  case 3:  	epgEntry.AudioQuality = "dolby digital";  	break;  default:  	break;  	;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSubTitles,The following statement contains a magic number: if (titleData.Flags == null || titleData.Flags.Length < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (index1 + 3 == epgEntry.ShortDescription.Length)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (index1 < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (epgEntry.ShortDescription [index1 + 3] < '0' || epgEntry.ShortDescription [index1 + 3] > '9')  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (epgEntry.ShortDescription [index1 + 3] < '0' || epgEntry.ShortDescription [index1 + 3] > '9')  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (epgEntry.ShortDescription [index1 - 2] < '0' || epgEntry.ShortDescription [index1 - 2] > '9')  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (epgEntry.ShortDescription [index1 - 2] < '0' || epgEntry.ShortDescription [index1 - 2] > '9')  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: while (epgEntry.ShortDescription [index4] != ''') {  	series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  	index4++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: while (index5 < index3) {  	episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  	index5++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (RunParameters.Instance.Options.Contains ("USEBSEPG")) {  	epgEntry.Series = "SE-" + series.ToString ();  	epgEntry.Episode = "EP-" + episode.ToString ();  	epgEntry.EpisodeSystemType = "bsepg-epid";  	epgEntry.EpisodeSystemParts = 2;  }  else {  	epgEntry.Series = series.ToString ();  	epgEntry.Episode = episode.ToString ();  	epgEntry.EpisodeSystemType = "xmltv_ns";  	epgEntry.EpisodeSystemParts = 3;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: if (RunParameters.Instance.Options.Contains ("USEBSEPG")) {  	epgEntry.Series = "SE-" + series.ToString ();  	epgEntry.Episode = "EP-" + episode.ToString ();  	epgEntry.EpisodeSystemType = "bsepg-epid";  	epgEntry.EpisodeSystemParts = 2;  }  else {  	epgEntry.Series = series.ToString ();  	epgEntry.Episode = episode.ToString ();  	epgEntry.EpisodeSystemType = "xmltv_ns";  	epgEntry.EpisodeSystemParts = 3;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 2;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyAUSSeasonEpisode,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,The following statement contains a magic number: if (index1 < 3)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,The following statement contains a magic number: while (epgEntry.ShortDescription [index4] != ''') {  	series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  	index4++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,The following statement contains a magic number: series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,The following statement contains a magic number: while (index5 < index3) {  	episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  	index5++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,The following statement contains a magic number: episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,The following statement contains a magic number: if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  	epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index2 - 1' index5 - index2 + 2).Trim ();  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat1,The following statement contains a magic number: epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index2 - 1' index5 - index2 + 2).Trim ();  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,The following statement contains a magic number: if (index1 < 3)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,The following statement contains a magic number: while (epgEntry.ShortDescription [index4] != ''') {  	series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  	index4++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,The following statement contains a magic number: series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,The following statement contains a magic number: while (index5 < index3) {  	episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  	index5++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,The following statement contains a magic number: episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,The following statement contains a magic number: if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  	epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index2 - 1' index5 - index2 + 2).Trim ();  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat2,The following statement contains a magic number: epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index2 - 1' index5 - index2 + 2).Trim ();  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat3,The following statement contains a magic number: if (index1 < 8)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat3,The following statement contains a magic number: if (epgEntry.ShortDescription.Substring (index2' 7) != "Series ")  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat3,The following statement contains a magic number: while (epgEntry.ShortDescription [index4] != ''') {  	series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  	index4++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat3,The following statement contains a magic number: series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat3,The following statement contains a magic number: while (index5 < index3) {  	episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  	index5++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat3,The following statement contains a magic number: episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat4,The following statement contains a magic number: if (index1 < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat4,The following statement contains a magic number: while (epgEntry.ShortDescription [index4] != ''') {  	series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  	index4++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat4,The following statement contains a magic number: series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat4,The following statement contains a magic number: while (index5 < index3) {  	episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  	index5++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat4,The following statement contains a magic number: episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat5,The following statement contains a magic number: if (index1 < 2)  	return;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat5,The following statement contains a magic number: while (epgEntry.ShortDescription [index4] != ''') {  	series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  	index4++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat5,The following statement contains a magic number: series = (series * 10) + (epgEntry.ShortDescription [index4] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat5,The following statement contains a magic number: while (index5 < index3) {  	episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  	index5++;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyGBREpisodeFormat5,The following statement contains a magic number: episode = (episode * 10) + (epgEntry.ShortDescription [index5] - '0');  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,setSeriesEpisode,The following statement contains a magic number: if (RunParameters.Instance.Options.Contains ("USEBSEPG")) {  	epgEntry.Series = "SE-" + series.ToString ();  	epgEntry.Episode = "EP-" + episode.ToString ();  	epgEntry.EpisodeSystemType = "bsepg-epid";  	epgEntry.EpisodeSystemParts = 2;  }  else {  	epgEntry.Series = series.ToString ();  	epgEntry.Episode = episode.ToString ();  	epgEntry.EpisodeSystemType = "xmltv_ns";  	epgEntry.EpisodeSystemParts = 3;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,setSeriesEpisode,The following statement contains a magic number: if (RunParameters.Instance.Options.Contains ("USEBSEPG")) {  	epgEntry.Series = "SE-" + series.ToString ();  	epgEntry.Episode = "EP-" + episode.ToString ();  	epgEntry.EpisodeSystemType = "bsepg-epid";  	epgEntry.EpisodeSystemParts = 2;  }  else {  	epgEntry.Series = series.ToString ();  	epgEntry.Episode = episode.ToString ();  	epgEntry.EpisodeSystemType = "xmltv_ns";  	epgEntry.EpisodeSystemParts = 3;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,setSeriesEpisode,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 2;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,setSeriesEpisode,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSeriesLink,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 3;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSeriesLinkBSEPG,The following statement contains a magic number: epgEntry.EpisodeSystemParts = 2;  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZLCast,The following statement contains a magic number: if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA")) {  	epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (castStartIndex' castStopIndex - castStartIndex).Trim ();  	if (epgEntry.ShortDescription.EndsWith (" ."))  		epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (epgEntry.ShortDescription.Length - 2);  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZLCast,The following statement contains a magic number: if (epgEntry.ShortDescription.EndsWith (" ."))  	epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (epgEntry.ShortDescription.Length - 2);  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,getSkyNZLCast,The following statement contains a magic number: epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (epgEntry.ShortDescription.Length - 2);  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: while (index1 < epgEntry.ShortDescription.Length) {  	index1 = epgEntry.ShortDescription.IndexOf (startChar' index1);  	if (index1 == -1)  		return;  	index1++;  	bool isDate = true;  	int index2 = 0;  	for (; index2 < 4; index2++) {  		if (index2 + index1 == epgEntry.ShortDescription.Length)  			return;  		if (epgEntry.ShortDescription [index2 + index1] < '0' || epgEntry.ShortDescription [index2 + index1] > '9')  			isDate = false;  	}  	if (index2 + index1 == epgEntry.ShortDescription.Length)  		return;  	if (isDate) {  		if (epgEntry.ShortDescription [index2 + index1] == endChar) {  			if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  				try {  					epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  					if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  						epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  				}  				catch (ArgumentOutOfRangeException) {  					return;  				}  			}  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: while (index1 < epgEntry.ShortDescription.Length) {  	index1 = epgEntry.ShortDescription.IndexOf (startChar' index1);  	if (index1 == -1)  		return;  	index1++;  	bool isDate = true;  	int index2 = 0;  	for (; index2 < 4; index2++) {  		if (index2 + index1 == epgEntry.ShortDescription.Length)  			return;  		if (epgEntry.ShortDescription [index2 + index1] < '0' || epgEntry.ShortDescription [index2 + index1] > '9')  			isDate = false;  	}  	if (index2 + index1 == epgEntry.ShortDescription.Length)  		return;  	if (isDate) {  		if (epgEntry.ShortDescription [index2 + index1] == endChar) {  			if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  				try {  					epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  					if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  						epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  				}  				catch (ArgumentOutOfRangeException) {  					return;  				}  			}  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: while (index1 < epgEntry.ShortDescription.Length) {  	index1 = epgEntry.ShortDescription.IndexOf (startChar' index1);  	if (index1 == -1)  		return;  	index1++;  	bool isDate = true;  	int index2 = 0;  	for (; index2 < 4; index2++) {  		if (index2 + index1 == epgEntry.ShortDescription.Length)  			return;  		if (epgEntry.ShortDescription [index2 + index1] < '0' || epgEntry.ShortDescription [index2 + index1] > '9')  			isDate = false;  	}  	if (index2 + index1 == epgEntry.ShortDescription.Length)  		return;  	if (isDate) {  		if (epgEntry.ShortDescription [index2 + index1] == endChar) {  			if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  				try {  					epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  					if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  						epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  				}  				catch (ArgumentOutOfRangeException) {  					return;  				}  			}  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: for (; index2 < 4; index2++) {  	if (index2 + index1 == epgEntry.ShortDescription.Length)  		return;  	if (epgEntry.ShortDescription [index2 + index1] < '0' || epgEntry.ShortDescription [index2 + index1] > '9')  		isDate = false;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: if (isDate) {  	if (epgEntry.ShortDescription [index2 + index1] == endChar) {  		if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  			try {  				epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  				if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  					epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  			}  			catch (ArgumentOutOfRangeException) {  				return;  			}  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: if (isDate) {  	if (epgEntry.ShortDescription [index2 + index1] == endChar) {  		if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  			try {  				epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  				if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  					epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  			}  			catch (ArgumentOutOfRangeException) {  				return;  			}  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: if (epgEntry.ShortDescription [index2 + index1] == endChar) {  	if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  		try {  			epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  			if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  				epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  		}  		catch (ArgumentOutOfRangeException) {  			return;  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: if (epgEntry.ShortDescription [index2 + index1] == endChar) {  	if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  		try {  			epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  			if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  				epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  		}  		catch (ArgumentOutOfRangeException) {  			return;  		}  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  	try {  		epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  		if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  			epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  	}  	catch (ArgumentOutOfRangeException) {  		return;  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: if (epgEntry.ShortDescription [index1] == '1' || epgEntry.ShortDescription [index1] == '2') {  	try {  		epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  		if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  			epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  	}  	catch (ArgumentOutOfRangeException) {  		return;  	}  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: try {  	epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  	if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  		epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  }  catch (ArgumentOutOfRangeException) {  	return;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: try {  	epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  	if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  		epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  }  catch (ArgumentOutOfRangeException) {  	return;  }  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: epgEntry.Date = epgEntry.ShortDescription.Substring (index1' 4);  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: if (!RunParameters.Instance.Options.Contains ("NOREMOVEDATA"))  	epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  
Magic Number,DVBServices,OpenTVChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannel.cs,extractDate,The following statement contains a magic number: epgEntry.ShortDescription = epgEntry.ShortDescription.Remove (index1 - 1' 6).Trim ();  
Magic Number,DVBServices,OpenTVChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<OpenTVChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			OpenTVChannelInfoEntry channelInfoEntry = new OpenTVChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,OpenTVChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoDescriptor.cs,Process,The following statement contains a magic number: try {  	if (Length != 2) {  		channelInfoEntries = new Collection<OpenTVChannelInfoEntry> ();  		int length = Length - 2;  		while (length > 0) {  			OpenTVChannelInfoEntry channelInfoEntry = new OpenTVChannelInfoEntry ();  			channelInfoEntry.Process (byteData' lastIndex);  			channelInfoEntries.Add (channelInfoEntry);  			lastIndex += channelInfoEntry.Length;  			length -= channelInfoEntry.Length;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Channel Info Descriptor message is short"));  }  
Magic Number,DVBServices,OpenTVChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<OpenTVChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		OpenTVChannelInfoEntry channelInfoEntry = new OpenTVChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,OpenTVChannelInfoDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoDescriptor.cs,Process,The following statement contains a magic number: if (Length != 2) {  	channelInfoEntries = new Collection<OpenTVChannelInfoEntry> ();  	int length = Length - 2;  	while (length > 0) {  		OpenTVChannelInfoEntry channelInfoEntry = new OpenTVChannelInfoEntry ();  		channelInfoEntry.Process (byteData' lastIndex);  		channelInfoEntries.Add (channelInfoEntry);  		lastIndex += channelInfoEntry.Length;  		length -= channelInfoEntry.Length;  	}  }  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	type = (int)byteData [lastIndex];  	lastIndex++;  	channelID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	userNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Channel Info Entry message is short"));  }  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	type = (int)byteData [lastIndex];  	lastIndex++;  	channelID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	userNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Channel Info Entry message is short"));  }  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	type = (int)byteData [lastIndex];  	lastIndex++;  	channelID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	userNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Channel Info Entry message is short"));  }  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	type = (int)byteData [lastIndex];  	lastIndex++;  	channelID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	userNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Channel Info Entry message is short"));  }  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	type = (int)byteData [lastIndex];  	lastIndex++;  	channelID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	userNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	length = lastIndex - index;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Channel Info Entry message is short"));  }  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: flags = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,OpenTVChannelInfoEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVChannelInfoEntry.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getTitleSections,The following statement contains a magic number: titleReader = new TSStreamReader (tables' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getTitleSections,The following statement contains a magic number: while (!titleSectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (1000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	titleReader.Lock ("ProcessOpenTVSections");  	if (titleReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in titleReader.Sections)  			sections.Add (section);  		titleReader.Sections.Clear ();  	}  	titleReader.Release ("ProcessOpenTVSections");  	if (sections.Count != 0)  		processTitleSections (sections);  	titleDataCount = 0;  	foreach (OpenTVChannel channel in OpenTVChannel.Channels)  		titleDataCount += channel.TitleData.Count;  	if (titleDataCount == lastCount) {  		repeats++;  		titleSectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = titleDataCount;  }  
Magic Number,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getTitleSections,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getSummarySections,The following statement contains a magic number: summaryReader = new TSStreamReader (tables' 2000' dataProvider.BufferAddress);  
Magic Number,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getSummarySections,The following statement contains a magic number: while (!summarySectionsDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (1000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	OpenTVSummarySection.OpenTVSummarySections.Clear ();  	summaryReader.Lock ("ProcessOpenTVSections");  	if (summaryReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in summaryReader.Sections)  			sections.Add (section);  		summaryReader.Sections.Clear ();  	}  	summaryReader.Release ("ProcessOpenTVSections");  	if (sections.Count != 0)  		processSummarySections (sections);  	summaryCount = 0;  	foreach (OpenTVChannel channel in OpenTVChannel.Channels)  		summaryCount += channel.SummaryData.Count;  	if (summaryCount == lastCount) {  		repeats++;  		summarySectionsDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = summaryCount;  }  
Magic Number,DVBServices,OpenTVController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVController.cs,getSummarySections,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && !line.StartsWith ("####")) {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length == 2)  			addEntry (rootNumber' parts [1]' parts [0]);  		else {  			if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  				addEntry (rootNumber' parts [2]' "=");  			else  				Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && !line.StartsWith ("####")) {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length == 2)  			addEntry (rootNumber' parts [1]' parts [0]);  		else {  			if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  				addEntry (rootNumber' parts [2]' "=");  			else  				Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && !line.StartsWith ("####")) {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length == 2)  			addEntry (rootNumber' parts [1]' parts [0]);  		else {  			if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  				addEntry (rootNumber' parts [2]' "=");  			else  				Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (line != string.Empty && !line.StartsWith ("####")) {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length == 2)  		addEntry (rootNumber' parts [1]' parts [0]);  	else {  		if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  			addEntry (rootNumber' parts [2]' "=");  		else  			Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  	}  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (line != string.Empty && !line.StartsWith ("####")) {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length == 2)  		addEntry (rootNumber' parts [1]' parts [0]);  	else {  		if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  			addEntry (rootNumber' parts [2]' "=");  		else  			Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  	}  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (line != string.Empty && !line.StartsWith ("####")) {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length == 2)  		addEntry (rootNumber' parts [1]' parts [0]);  	else {  		if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  			addEntry (rootNumber' parts [2]' "=");  		else  			Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  	}  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (parts.Length == 2)  	addEntry (rootNumber' parts [1]' parts [0]);  else {  	if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  		addEntry (rootNumber' parts [2]' "=");  	else  		Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (parts.Length == 2)  	addEntry (rootNumber' parts [1]' parts [0]);  else {  	if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  		addEntry (rootNumber' parts [2]' "=");  	else  		Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (parts.Length == 2)  	addEntry (rootNumber' parts [1]' parts [0]);  else {  	if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  		addEntry (rootNumber' parts [2]' "=");  	else  		Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  }  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  	addEntry (rootNumber' parts [2]' "=");  else  	Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: if (parts.Length == 3 && parts [0] == string.Empty && parts [1] == string.Empty)  	addEntry (rootNumber' parts [2]' "=");  else  	Logger.Instance.Write ("Dictionary line '" + line + "' format wrong - line ignored ");  
Magic Number,DVBServices,SingleTreeDictionaryEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SingleTreeDictionaryEntry.cs,Load,The following statement contains a magic number: addEntry (rootNumber' parts [2]' "=");  
Magic Number,DVBServices,OpenTVSeriesLinkRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSeriesLinkRecord.cs,Process,The following statement contains a magic number: try {  	seriesLink = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVSeriesLinkRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSeriesLinkRecord.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVSummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int recordLength = length;  	while (recordLength != 0) {  		OpenTVRecordBase record = OpenTVRecordBase.Instance (byteData' lastIndex);  		Records.Add (record);  		lastIndex += record.TotalLength;  		recordLength -= record.TotalLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Summary Data message is short"));  }  
Magic Number,DVBServices,OpenTVSummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int recordLength = length;  	while (recordLength != 0) {  		OpenTVRecordBase record = OpenTVRecordBase.Instance (byteData' lastIndex);  		Records.Add (record);  		lastIndex += record.TotalLength;  		recordLength -= record.TotalLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Summary Data message is short"));  }  
Magic Number,DVBServices,OpenTVSummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int recordLength = length;  	while (recordLength != 0) {  		OpenTVRecordBase record = OpenTVRecordBase.Instance (byteData' lastIndex);  		Records.Add (record);  		lastIndex += record.TotalLength;  		recordLength -= record.TotalLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Summary Data message is short"));  }  
Magic Number,DVBServices,OpenTVSummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVSummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryData.cs,Process,The following statement contains a magic number: length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,OpenTVSummaryData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,Process,The following statement contains a magic number: try {  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	while (lastIndex < byteData.Length - 4) {  		OpenTVSummaryData data = new OpenTVSummaryData ();  		data.Process (byteData' lastIndex' baseDate);  		if (summaryData == null)  			summaryData = new Collection<OpenTVSummaryData> ();  		summaryData.Add (data);  		lastIndex = data.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Summary Header message is short"));  }  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,Process,The following statement contains a magic number: try {  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	while (lastIndex < byteData.Length - 4) {  		OpenTVSummaryData data = new OpenTVSummaryData ();  		data.Process (byteData' lastIndex' baseDate);  		if (summaryData == null)  			summaryData = new Collection<OpenTVSummaryData> ();  		summaryData.Add (data);  		lastIndex = data.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Open TV Summary Header message is short"));  }  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	OpenTVSummaryData data = new OpenTVSummaryData ();  	data.Process (byteData' lastIndex' baseDate);  	if (summaryData == null)  		summaryData = new Collection<OpenTVSummaryData> ();  	summaryData.Add (data);  	lastIndex = data.Index;  }  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,OpenTVSummaryHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVSummaryHeader.cs,getDate,The following statement contains a magic number: j = m / 11;  
Magic Number,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,Load,The following statement contains a magic number: while (!streamReader.EndOfStream) {  	string line = streamReader.ReadLine ();  	if (line != string.Empty && line [0] != '#') {  		string[] parts = line.Split (new char[] {  			'='  		});  		if (parts.Length < 2)  			Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  		else {  			try {  				int number = Int32.Parse (parts [0]);  				AddCategory (number' line.Substring (parts [0].Length + 1));  			}  			catch (FormatException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  			catch (ArithmeticException) {  				Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  			}  		}  	}  }  
Magic Number,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,Load,The following statement contains a magic number: if (line != string.Empty && line [0] != '#') {  	string[] parts = line.Split (new char[] {  		'='  	});  	if (parts.Length < 2)  		Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  	else {  		try {  			int number = Int32.Parse (parts [0]);  			AddCategory (number' line.Substring (parts [0].Length + 1));  		}  		catch (FormatException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  		catch (ArithmeticException) {  			Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  		}  	}  }  
Magic Number,DVBServices,OpenTVProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVProgramCategory.cs,Load,The following statement contains a magic number: if (parts.Length < 2)  	Logger.Instance.Write ("Program category line '" + line + "' format wrong - line ignored ");  else {  	try {  		int number = Int32.Parse (parts [0]);  		AddCategory (number' line.Substring (parts [0].Length + 1));  	}  	catch (FormatException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("Program category line '" + line + "' number wrong - line ignored ");  	}  }  
Magic Number,DVBServices,OpenTVTitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int recordLength = length;  	while (recordLength != 0) {  		OpenTVRecordBase record = OpenTVRecordBase.Instance (byteData' lastIndex);  		Records.Add (record);  		lastIndex += record.TotalLength;  		recordLength -= record.TotalLength;  	}  	timeStamp = DateTime.Now;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int recordLength = length;  	while (recordLength != 0) {  		OpenTVRecordBase record = OpenTVRecordBase.Instance (byteData' lastIndex);  		Records.Add (record);  		lastIndex += record.TotalLength;  		recordLength -= record.TotalLength;  	}  	timeStamp = DateTime.Now;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleData.cs,Process,The following statement contains a magic number: try {  	eventID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int recordLength = length;  	while (recordLength != 0) {  		OpenTVRecordBase record = OpenTVRecordBase.Instance (byteData' lastIndex);  		Records.Add (record);  		lastIndex += record.TotalLength;  		recordLength -= record.TotalLength;  	}  	timeStamp = DateTime.Now;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVTitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleData.cs,Process,The following statement contains a magic number: length = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,OpenTVTitleData,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleData.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: try {  	// Source value to 2 second resolution  	startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  	lastIndex += 2;  	duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  	lastIndex += 2;  	categoryID = (int)byteData [lastIndex];  	lastIndex++;  	flags = Utils.GetBytes (byteData' lastIndex' 2);  	lastIndex += 2;  	eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  	lastIndex += Length - 7;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: startTimeOffset = getTime ((byteData [lastIndex] * 512) + (byteData [lastIndex + 1] * 2));  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: duration = getTime (Utils.Convert2BytesToInt (byteData' lastIndex) * 2);  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: flags = Utils.GetBytes (byteData' lastIndex' 2);  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: eventName = Utils.GetBytes (byteData' lastIndex' Length - 7);  
Magic Number,DVBServices,OpenTVTitleDataRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleDataRecord.cs,Process,The following statement contains a magic number: lastIndex += Length - 7;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,Process,The following statement contains a magic number: try {  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	while (lastIndex < byteData.Length - 4) {  		OpenTVTitleData data = new OpenTVTitleData ();  		data.Process (byteData' lastIndex' baseDate' channelID' pid' tid);  		if (!data.IsEmpty) {  			if (titleData == null)  				titleData = new Collection<OpenTVTitleData> ();  			titleData.Add (data);  		}  		lastIndex = data.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,Process,The following statement contains a magic number: try {  	baseDate = getDate (Utils.Convert2BytesToInt (byteData' lastIndex));  	lastIndex += 2;  	while (lastIndex < byteData.Length - 4) {  		OpenTVTitleData data = new OpenTVTitleData ();  		data.Process (byteData' lastIndex' baseDate' channelID' pid' tid);  		if (!data.IsEmpty) {  			if (titleData == null)  				titleData = new Collection<OpenTVTitleData> ();  			titleData.Add (data);  		}  		lastIndex = data.Index;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("lastIndex = " + lastIndex));  }  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	OpenTVTitleData data = new OpenTVTitleData ();  	data.Process (byteData' lastIndex' baseDate' channelID' pid' tid);  	if (!data.IsEmpty) {  		if (titleData == null)  			titleData = new Collection<OpenTVTitleData> ();  		titleData.Add (data);  	}  	lastIndex = data.Index;  }  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,getDate,The following statement contains a magic number: j = j - (146097 * c + 3) / 4;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,getDate,The following statement contains a magic number: j = j - 1461 * y / 4 + 31;  
Magic Number,DVBServices,OpenTVTitleHeader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\OpenTV\OpenTVTitleHeader.cs,getDate,The following statement contains a magic number: j = m / 11;  
Magic Number,DVBServices,ProgramAssociationSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramAssociationSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	ProgramInfo programInfo = new ProgramInfo ();  	programInfo.Process (byteData' lastIndex);  	programInfos.Add (programInfo);  	lastIndex = programInfo.Index;  }  
Magic Number,DVBServices,ProgramInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramInfo.cs,Process,The following statement contains a magic number: try {  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programID = (int)((byteData [lastIndex] & 0x1f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Program Info message is short"));  }  
Magic Number,DVBServices,ProgramInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramInfo.cs,Process,The following statement contains a magic number: try {  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programID = (int)((byteData [lastIndex] & 0x1f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Program Info message is short"));  }  
Magic Number,DVBServices,ProgramInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramInfo.cs,Process,The following statement contains a magic number: try {  	programNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	programID = (int)((byteData [lastIndex] & 0x1f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Program Info message is short"));  }  
Magic Number,DVBServices,ProgramInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramInfo.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ProgramInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramInfo.cs,Process,The following statement contains a magic number: programID = (int)((byteData [lastIndex] & 0x1f) * 256) + (int)byteData [lastIndex + 1];  
Magic Number,DVBServices,ProgramInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramInfo.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ProgramMapSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramMapSection.cs,Process,The following statement contains a magic number: pcrPID = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,ProgramMapSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramMapSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ProgramMapSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramMapSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ProgramMapSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ProgramMapSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	StreamInfo streamInfo = new StreamInfo ();  	streamInfo.Process (byteData' lastIndex);  	streamInfos.Add (streamInfo);  	lastIndex = streamInfo.Index;  }  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eitSchedule = ((int)byteData [lastIndex] & 0x02) != 0;  	eitPresentFollowing = ((int)byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' Scope.ServiceDescripton);  		if (!descriptor.IsEmpty) {  			if (descriptor as DVBServiceDescriptor != null)  				serviceDescriptor = descriptor as DVBServiceDescriptor;  			else {  				if (descriptor as ServiceChannelDescriptor != null)  					serviceChannelDescriptor = descriptor as ServiceChannelDescriptor;  			}  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Service Description message is short"));  }  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eitSchedule = ((int)byteData [lastIndex] & 0x02) != 0;  	eitPresentFollowing = ((int)byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' Scope.ServiceDescripton);  		if (!descriptor.IsEmpty) {  			if (descriptor as DVBServiceDescriptor != null)  				serviceDescriptor = descriptor as DVBServiceDescriptor;  			else {  				if (descriptor as ServiceChannelDescriptor != null)  					serviceChannelDescriptor = descriptor as ServiceChannelDescriptor;  			}  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Service Description message is short"));  }  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eitSchedule = ((int)byteData [lastIndex] & 0x02) != 0;  	eitPresentFollowing = ((int)byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' Scope.ServiceDescripton);  		if (!descriptor.IsEmpty) {  			if (descriptor as DVBServiceDescriptor != null)  				serviceDescriptor = descriptor as DVBServiceDescriptor;  			else {  				if (descriptor as ServiceChannelDescriptor != null)  					serviceChannelDescriptor = descriptor as ServiceChannelDescriptor;  			}  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Service Description message is short"));  }  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eitSchedule = ((int)byteData [lastIndex] & 0x02) != 0;  	eitPresentFollowing = ((int)byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' Scope.ServiceDescripton);  		if (!descriptor.IsEmpty) {  			if (descriptor as DVBServiceDescriptor != null)  				serviceDescriptor = descriptor as DVBServiceDescriptor;  			else {  				if (descriptor as ServiceChannelDescriptor != null)  					serviceChannelDescriptor = descriptor as ServiceChannelDescriptor;  			}  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Service Description message is short"));  }  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: try {  	serviceID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	eitSchedule = ((int)byteData [lastIndex] & 0x02) != 0;  	eitPresentFollowing = ((int)byteData [lastIndex] & 0x01) != 0;  	lastIndex++;  	runningStatus = (int)(byteData [lastIndex] >> 5);  	scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	while (descriptorLoopLength != 0) {  		DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' Scope.ServiceDescripton);  		if (!descriptor.IsEmpty) {  			if (descriptor as DVBServiceDescriptor != null)  				serviceDescriptor = descriptor as DVBServiceDescriptor;  			else {  				if (descriptor as ServiceChannelDescriptor != null)  					serviceChannelDescriptor = descriptor as ServiceChannelDescriptor;  			}  			lastIndex = descriptor.Index;  			descriptorLoopLength -= descriptor.TotalLength;  		}  		else {  			lastIndex += DescriptorBase.MinimumDescriptorLength;  			descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Service Description message is short"));  }  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: runningStatus = (int)(byteData [lastIndex] >> 5);  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: scrambled = ((int)byteData [lastIndex] & 0x10) >> 4 == 1;  
Magic Number,DVBServices,ServiceDescription,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescription.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ServiceDescriptionSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescriptionSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,ServiceDescriptionSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\ServiceDescriptionSection.cs,Process,The following statement contains a magic number: while (lastIndex < byteData.Length - 4) {  	ServiceDescription serviceDescription = new ServiceDescription ();  	serviceDescription.Process (byteData' lastIndex);  	serviceDescriptions.Add (serviceDescription);  	lastIndex = serviceDescription.Index;  }  
Magic Number,DVBServices,ServiceGatewayInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\ServiceGatewayInfo.cs,Process,The following statement contains a magic number: try {  	iopIor = new IOPIOR ();  	iopIor.Process (byteData' lastIndex);  	lastIndex = iopIor.Index;  	tapsCount = (int)byteData [lastIndex];  	lastIndex++;  	if (tapsCount != 0) {  		taps = new Collection<BIOPTap> ();  		while (taps.Count < tapsCount) {  			BIOPTap tap = new BIOPTap ();  			tap.Process (byteData' lastIndex);  			taps.Add (tap);  			lastIndex = tap.Index;  		}  	}  	serviceContextCount = (int)byteData [lastIndex];  	lastIndex++;  	if (serviceContextCount != 0) {  		serviceContexts = new Collection<BIOPServiceContext> ();  		while (serviceContexts.Count < serviceContextCount) {  			BIOPServiceContext serviceContext = new BIOPServiceContext ();  			serviceContext.Process (byteData' lastIndex);  			serviceContexts.Add (serviceContext);  			lastIndex = serviceContext.Index;  		}  	}  	userInfoLength = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	if (userInfoLength != 0) {  		userInfo = Utils.GetBytes (byteData' lastIndex' userInfoLength);  		lastIndex += userInfoLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Service Gateway Info message is short"));  }  
Magic Number,DVBServices,ServiceGatewayInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\MHEG5\ServiceGatewayInfo.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,DVBShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBShortEventDescriptor.cs,Process,The following statement contains a magic number: try {  	languageCode = Utils.GetString (byteData' lastIndex' 3);  	lastIndex += languageCode.Length;  	int eventNameLength = (int)byteData [lastIndex];  	lastIndex++;  	if (eventNameLength != 0) {  		int nameIndex = lastIndex;  		eventName = Utils.GetString (byteData' lastIndex' eventNameLength);  		lastIndex += eventNameLength;  	}  	int textLength = (int)byteData [lastIndex];  	lastIndex++;  	if (textLength != 0) {  		shortDescription = Utils.GetString (byteData' lastIndex' textLength);  		lastIndex += textLength;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	Logger.Instance.Dump ("DVB Short Event Descriptor message is short"' byteData' byteData.Length);  	throw (new ArgumentOutOfRangeException ("The DVB Short Event Descriptor message is short"));  }  
Magic Number,DVBServices,DVBShortEventDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\EIT\DVBShortEventDescriptor.cs,Process,The following statement contains a magic number: languageCode = Utils.GetString (byteData' lastIndex' 3);  
Magic Number,DVBServices,StreamInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\StreamInfo.cs,Process,The following statement contains a magic number: try {  	streamType = (int)byteData [lastIndex];  	lastIndex++;  	programID = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int esInfoLength = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	if (esInfoLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (esInfoLength > 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex += descriptor.TotalLength;  				esInfoLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				esInfoLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Stream Info message is short"));  }  
Magic Number,DVBServices,StreamInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\StreamInfo.cs,Process,The following statement contains a magic number: try {  	streamType = (int)byteData [lastIndex];  	lastIndex++;  	programID = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int esInfoLength = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	if (esInfoLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (esInfoLength > 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex += descriptor.TotalLength;  				esInfoLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				esInfoLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Stream Info message is short"));  }  
Magic Number,DVBServices,StreamInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\StreamInfo.cs,Process,The following statement contains a magic number: try {  	streamType = (int)byteData [lastIndex];  	lastIndex++;  	programID = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int esInfoLength = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	if (esInfoLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (esInfoLength > 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex += descriptor.TotalLength;  				esInfoLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				esInfoLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Stream Info message is short"));  }  
Magic Number,DVBServices,StreamInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\StreamInfo.cs,Process,The following statement contains a magic number: try {  	streamType = (int)byteData [lastIndex];  	lastIndex++;  	programID = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	int esInfoLength = ((byteData [lastIndex] & 0x0f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	if (esInfoLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (esInfoLength > 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex += descriptor.TotalLength;  				esInfoLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				esInfoLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Stream Info message is short"));  }  
Magic Number,DVBServices,StreamInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\StreamInfo.cs,Process,The following statement contains a magic number: programID = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  
Magic Number,DVBServices,StreamInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\StreamInfo.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,StreamInfo,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\StreamInfo.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,TimeOffsetSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TimeOffsetSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,TimeOffsetSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TimeOffsetSection.cs,getCurrentDateTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,TimeOffsetSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TimeOffsetSection.cs,getCurrentDateTime,The following statement contains a magic number: if (month == 14 || month == 15)  	adjust = 1;  else  	adjust = 0;  
Magic Number,DVBServices,TimeOffsetSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TimeOffsetSection.cs,getCurrentDateTime,The following statement contains a magic number: year = year + 1900 + adjust;  
Magic Number,DVBServices,TimeOffsetSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TimeOffsetSection.cs,getCurrentDateTime,The following statement contains a magic number: month = month - 1 - (adjust * 12);  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 6;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' scope);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex = descriptor.Index;  				descriptorLoopLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Transport Stream message is short"));  }  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 6;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' scope);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex = descriptor.Index;  				descriptorLoopLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Transport Stream message is short"));  }  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 6;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' scope);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex = descriptor.Index;  				descriptorLoopLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Transport Stream message is short"));  }  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 6;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' scope);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex = descriptor.Index;  				descriptorLoopLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Transport Stream message is short"));  }  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: try {  	transportStreamID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	originalNetworkID = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int descriptorLoopLength = ((byteData [lastIndex] & 0x0f) * 256) + (int)byteData [lastIndex + 1];  	lastIndex += 2;  	totalLength = descriptorLoopLength + 6;  	if (descriptorLoopLength != 0) {  		descriptors = new Collection<DescriptorBase> ();  		while (descriptorLoopLength != 0) {  			DescriptorBase descriptor = DescriptorBase.Instance (byteData' lastIndex' scope);  			if (!descriptor.IsEmpty) {  				descriptors.Add (descriptor);  				lastIndex = descriptor.Index;  				descriptorLoopLength -= descriptor.TotalLength;  			}  			else {  				lastIndex += DescriptorBase.MinimumDescriptorLength;  				descriptorLoopLength -= DescriptorBase.MinimumDescriptorLength;  			}  		}  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The DVB Transport Stream message is short"));  }  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,TransportStream,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\DVB\TransportStream.cs,Process,The following statement contains a magic number: totalLength = descriptorLoopLength + 6;  
Magic Number,DVBServices,ServiceChannelDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ServiceChannelDescriptor.cs,Process,The following statement contains a magic number: try {  	channelNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	int undefinedDataLength = Length - (lastIndex - index);  	if (undefinedDataLength != 0)  		undefinedData = Utils.GetBytes (byteData' lastIndex' undefinedDataLength);  	lastIndex = index + Length;  	Validate ();  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The Service Channel Descriptor message is short"));  }  
Magic Number,DVBServices,ServiceChannelDescriptor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\ServiceChannelDescriptor.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,SiehFernInfoChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoChannelSection.cs,Process,The following statement contains a magic number: try {  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern Info Channel section is short"));  }  
Magic Number,DVBServices,SiehFernInfoChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoChannelSection.cs,Process,The following statement contains a magic number: try {  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern Info Channel section is short"));  }  
Magic Number,DVBServices,SiehFernInfoChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoChannelSection.cs,Process,The following statement contains a magic number: try {  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern Info Channel section is short"));  }  
Magic Number,DVBServices,SiehFernInfoChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoChannelSection.cs,Process,The following statement contains a magic number: lastIndex += 40;  
Magic Number,DVBServices,SiehFernInfoChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoChannelSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,SiehFernInfoChannelSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoChannelSection.cs,Process,The following statement contains a magic number: data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getChannelSections,The following statement contains a magic number: guideReader = new TSStreamReader (0x3e' 50000' dataProvider.BufferAddress);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getChannelSections,The following statement contains a magic number: while (!guideDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processChannelSections (sections);  	if (SiehFernInfoChannelSection.Sections.Count == lastCount) {  		repeats++;  		guideDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = SiehFernInfoChannelSection.Sections.Count;  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getChannelSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getEPGSections,The following statement contains a magic number: guideReader = new TSStreamReader (0x3e' 50000' dataProvider.BufferAddress);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getEPGSections,The following statement contains a magic number: while (!guideDone) {  	if (worker.CancellationPending)  		return;  	Thread.Sleep (2000);  	Logger.Instance.Write ("."' false' false);  	Collection<Mpeg2Section> sections = new Collection<Mpeg2Section> ();  	guideReader.Lock ("LoadMessages");  	if (guideReader.Sections.Count != 0) {  		foreach (Mpeg2Section section in guideReader.Sections)  			sections.Add (section);  		guideReader.Sections.Clear ();  	}  	guideReader.Release ("LoadMessages");  	if (sections.Count != 0)  		processEPGSections (sections);  	if (SiehFernInfoEPGSection.Sections.Count == lastCount) {  		repeats++;  		guideDone = (repeats == RunParameters.Instance.Repeats);  	}  	else  		repeats = 0;  	lastCount = SiehFernInfoEPGSection.Sections.Count;  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,getEPGSections,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,FinishFrequency,The following statement contains a magic number: while (getIndex < epgBuffer.Length) {  	byte[] epgLine = getLine (epgBuffer' getIndex);  	getIndex += epgLine.Length;  	for (int scan = 0; scan < epgLine.Length; scan++) {  		if (epgLine [scan] == 0x0d || epgLine [scan] == 0x0a)  			epgLine [scan] = (byte)'|';  		else {  			if (epgLine [scan] == 0x8a)  				epgLine [scan] = (byte)' ';  		}  	}  	string epgText = Utils.GetString (epgLine' 0' epgLine.Length);  	switch (epgText.Substring (0' 3)) {  	case "@P:":  		currentStation = processStation (epgText);  		TVStation.StationCollection.Add (currentStation);  		break;  	case "@E:":  		processProgramTitle (epgText' titleLogger);  		break;  	case "@S:":  		processProgramDescription (epgText' descriptionLogger);  		break;  	default:  		break;  	}  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,FinishFrequency,The following statement contains a magic number: switch (epgText.Substring (0' 3)) {  case "@P:":  	currentStation = processStation (epgText);  	TVStation.StationCollection.Add (currentStation);  	break;  case "@E:":  	processProgramTitle (epgText' titleLogger);  	break;  case "@S:":  	processProgramDescription (epgText' descriptionLogger);  	break;  default:  	break;  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processStation,The following statement contains a magic number: station.ServiceID = Int32.Parse (stationParts [2].Trim ());  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (startDate + startTime < lastStartTime)  	startTime = startTime.Add (new TimeSpan (24' 0' 0));  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: startTime = startTime.Add (new TimeSpan (24' 0' 0));  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (separatorIndex == -1)  	epgEntry.EventName = epgText.Substring (9);  else  	epgEntry.EventName = epgText.Substring (9' separatorIndex - 9);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (separatorIndex == -1)  	epgEntry.EventName = epgText.Substring (9);  else  	epgEntry.EventName = epgText.Substring (9' separatorIndex - 9);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (separatorIndex == -1)  	epgEntry.EventName = epgText.Substring (9);  else  	epgEntry.EventName = epgText.Substring (9' separatorIndex - 9);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: epgEntry.EventName = epgText.Substring (9);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: epgEntry.EventName = epgText.Substring (9' separatorIndex - 9);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: epgEntry.EventName = epgText.Substring (9' separatorIndex - 9);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (station.EPGCollection.Count > 1) {  	int count = station.EPGCollection.Count;  	if (station.EPGCollection [count - 2].Duration.TotalSeconds == 0)  		station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (station.EPGCollection.Count > 1) {  	int count = station.EPGCollection.Count;  	if (station.EPGCollection [count - 2].Duration.TotalSeconds == 0)  		station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (station.EPGCollection.Count > 1) {  	int count = station.EPGCollection.Count;  	if (station.EPGCollection [count - 2].Duration.TotalSeconds == 0)  		station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (station.EPGCollection [count - 2].Duration.TotalSeconds == 0)  	station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (station.EPGCollection [count - 2].Duration.TotalSeconds == 0)  	station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: if (station.EPGCollection [count - 2].Duration.TotalSeconds == 0)  	station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramTitle,The following statement contains a magic number: station.EPGCollection [count - 2].Duration = Utils.RoundTime (station.EPGCollection [count - 1].StartTime - station.EPGCollection [count - 2].StartTime);  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramDescription,The following statement contains a magic number: try {  	int totalMinutes = Int32.Parse (timeParts [1].Trim ());  	int hours = totalMinutes / 60;  	int minutes = totalMinutes % 60;  	epgEntry.Duration = new TimeSpan (hours' minutes' 0);  }  catch (FormatException) {  }  
Magic Number,DVBServices,SiehFernInfoController,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoController.cs,processProgramDescription,The following statement contains a magic number: try {  	int totalMinutes = Int32.Parse (timeParts [1].Trim ());  	int hours = totalMinutes / 60;  	int minutes = totalMinutes % 60;  	epgEntry.Duration = new TimeSpan (hours' minutes' 0);  }  catch (FormatException) {  }  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: try {  	unknown = Utils.GetBytes (byteData' lastIndex' 40);  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	maximumSequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern EPG section is short"));  }  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: try {  	unknown = Utils.GetBytes (byteData' lastIndex' 40);  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	maximumSequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern EPG section is short"));  }  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: try {  	unknown = Utils.GetBytes (byteData' lastIndex' 40);  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	maximumSequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern EPG section is short"));  }  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: try {  	unknown = Utils.GetBytes (byteData' lastIndex' 40);  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	maximumSequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern EPG section is short"));  }  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: try {  	unknown = Utils.GetBytes (byteData' lastIndex' 40);  	lastIndex += 40;  	sequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	maximumSequenceNumber = Utils.Convert2BytesToInt (byteData' lastIndex);  	lastIndex += 2;  	data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  	lastIndex += data.Length;  }  catch (IndexOutOfRangeException) {  	throw (new ArgumentOutOfRangeException ("The SiehFern EPG section is short"));  }  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: unknown = Utils.GetBytes (byteData' lastIndex' 40);  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: lastIndex += 40;  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DVBServices,SiehFernInfoEPGSection,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\SiehFern Info\SiehFernInfoEPGSection.cs,Process,The following statement contains a magic number: data = Utils.GetBytes (byteData' lastIndex' byteData.Length - lastIndex - 4);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert2BytesToInt,The following statement contains a magic number: return ((byteData [index] * 256) + (int)byteData [index + 1]);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 1];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 3];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 3];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 1];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 3];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 3];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 4];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 4];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 5];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 5];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 6];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 6];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 7];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Convert8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 7];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertBCDToInt,The following statement contains a magic number: for (int nibbleIndex = 0; nibbleIndex < count; nibbleIndex++) {  	result = (result * 10) + ((byteData [index] >> shift) & 0x0f);  	if (shift == 4)  		shift = 0;  	else {  		shift = 4;  		index++;  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertBCDToInt,The following statement contains a magic number: for (int nibbleIndex = 0; nibbleIndex < count; nibbleIndex++) {  	result = (result * 10) + ((byteData [index] >> shift) & 0x0f);  	if (shift == 4)  		shift = 0;  	else {  		shift = 4;  		index++;  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertBCDToInt,The following statement contains a magic number: for (int nibbleIndex = 0; nibbleIndex < count; nibbleIndex++) {  	result = (result * 10) + ((byteData [index] >> shift) & 0x0f);  	if (shift == 4)  		shift = 0;  	else {  		shift = 4;  		index++;  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertBCDToInt,The following statement contains a magic number: result = (result * 10) + ((byteData [index] >> shift) & 0x0f);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertBCDToInt,The following statement contains a magic number: if (shift == 4)  	shift = 0;  else {  	shift = 4;  	index++;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertBCDToInt,The following statement contains a magic number: if (shift == 4)  	shift = 0;  else {  	shift = 4;  	index++;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertBCDToInt,The following statement contains a magic number: shift = 4;  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int index = 3; index > -1; index--) {  	uint hexByte = (tempValue << 24) >> 24;  	int hexByteLeft = (int)(hexByte >> 4);  	int hexByteRight = (int)(hexByte & 0x0f);  	outputChars [outputIndex] = getHex (hexByteRight);  	outputChars [outputIndex - 1] = getHex (hexByteLeft);  	outputIndex -= 2;  	tempValue = tempValue >> 8;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int index = 3; index > -1; index--) {  	uint hexByte = (tempValue << 24) >> 24;  	int hexByteLeft = (int)(hexByte >> 4);  	int hexByteRight = (int)(hexByte & 0x0f);  	outputChars [outputIndex] = getHex (hexByteRight);  	outputChars [outputIndex - 1] = getHex (hexByteLeft);  	outputIndex -= 2;  	tempValue = tempValue >> 8;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int index = 3; index > -1; index--) {  	uint hexByte = (tempValue << 24) >> 24;  	int hexByteLeft = (int)(hexByte >> 4);  	int hexByteRight = (int)(hexByte & 0x0f);  	outputChars [outputIndex] = getHex (hexByteRight);  	outputChars [outputIndex - 1] = getHex (hexByteLeft);  	outputIndex -= 2;  	tempValue = tempValue >> 8;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int index = 3; index > -1; index--) {  	uint hexByte = (tempValue << 24) >> 24;  	int hexByteLeft = (int)(hexByte >> 4);  	int hexByteRight = (int)(hexByte & 0x0f);  	outputChars [outputIndex] = getHex (hexByteRight);  	outputChars [outputIndex - 1] = getHex (hexByteLeft);  	outputIndex -= 2;  	tempValue = tempValue >> 8;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int index = 3; index > -1; index--) {  	uint hexByte = (tempValue << 24) >> 24;  	int hexByteLeft = (int)(hexByte >> 4);  	int hexByteRight = (int)(hexByte & 0x0f);  	outputChars [outputIndex] = getHex (hexByteRight);  	outputChars [outputIndex - 1] = getHex (hexByteLeft);  	outputIndex -= 2;  	tempValue = tempValue >> 8;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int index = 3; index > -1; index--) {  	uint hexByte = (tempValue << 24) >> 24;  	int hexByteLeft = (int)(hexByte >> 4);  	int hexByteRight = (int)(hexByte & 0x0f);  	outputChars [outputIndex] = getHex (hexByteRight);  	outputChars [outputIndex - 1] = getHex (hexByteLeft);  	outputIndex -= 2;  	tempValue = tempValue >> 8;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: outputIndex -= 2;  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: tempValue = tempValue >> 8;  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: if (replyString.Length % 2 == 0)  	return ("0x" + replyString);  else  	return ("0x0" + replyString);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int inputIndex = 0; inputIndex < length; inputIndex++) {  	int hexByteLeft = inputChars [offset] >> 4;  	int hexByteRight = inputChars [offset] & 0x0f;  	outputChars [outputIndex] = getHex (hexByteLeft);  	outputChars [outputIndex + 1] = getHex (hexByteRight);  	outputIndex += 2;  	offset++;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: for (int inputIndex = 0; inputIndex < length; inputIndex++) {  	int hexByteLeft = inputChars [offset] >> 4;  	int hexByteRight = inputChars [offset] & 0x0f;  	outputChars [outputIndex] = getHex (hexByteLeft);  	outputChars [outputIndex + 1] = getHex (hexByteRight);  	outputIndex += 2;  	offset++;  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToHex,The following statement contains a magic number: outputIndex += 2;  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToBits,The following statement contains a magic number: foreach (byte byteData in inputChars) {  	byte mask = 0x80;  	for (int shift = 0; shift < 8; shift++) {  		if ((byteData & mask) == 0)  			bitString.Append ("0");  		else  			bitString.Append ("1");  		mask = (byte)(mask >> 1);  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertToBits,The following statement contains a magic number: for (int shift = 0; shift < 8; shift++) {  	if ((byteData & mask) == 0)  		bitString.Append ("0");  	else  		bitString.Append ("1");  	mask = (byte)(mask >> 1);  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,getHex,The following statement contains a magic number: if (value < 10)  	return ((char)('0' + value));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,getHex,The following statement contains a magic number: return ((char)('a' + (value - 10)));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertCharByteToInt,The following statement contains a magic number: foreach (byte inputByte in inputBytes)  	result = (result * 10) + (inputByte - 0x30);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertCharByteToInt,The following statement contains a magic number: result = (result * 10) + (inputByte - 0x30);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertCharByteToInt,The following statement contains a magic number: try {  	foreach (byte inputByte in inputBytes) {  		if (inputByte == terminator)  			return (result);  		else  			result = (result * 10) + (inputByte - 0x30);  	}  	return (result);  }  catch (ArithmeticException) {  	throw (new ArgumentOutOfRangeException ("ConvertCharByteToInt result too big"));  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertCharByteToInt,The following statement contains a magic number: foreach (byte inputByte in inputBytes) {  	if (inputByte == terminator)  		return (result);  	else  		result = (result * 10) + (inputByte - 0x30);  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertCharByteToInt,The following statement contains a magic number: if (inputByte == terminator)  	return (result);  else  	result = (result * 10) + (inputByte - 0x30);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,ConvertCharByteToInt,The following statement contains a magic number: result = (result * 10) + (inputByte - 0x30);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap2BytesToInt,The following statement contains a magic number: return ((byteData [index + 1] * 256) + (int)byteData [index]);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index + 1];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap4BytesToInt,The following statement contains a magic number: temp = (temp * 256) + (int)byteData [index];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 6];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 6];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 5];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 5];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 4];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 4];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 3];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 3];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 2];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index + 1];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,Swap8BytesToLong,The following statement contains a magic number: temp = (temp * 256) + (long)byteData [index];  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (RunParameters.Instance.CharacterSet != null) {  	isoTable = RunParameters.Instance.CharacterSet;  	if (byteData [offset] < 0x20)  		startByte = 1;  }  else {  	if (byteData [offset] >= 0x20)  		isoTable = "iso-8859-1";  	else {  		switch (byteData [offset]) {  		case 0x01:  		case 0x02:  		case 0x03:  		case 0x04:  		case 0x05:  		case 0x06:  		case 0x07:  		case 0x08:  		case 0x09:  		case 0x0a:  		case 0x0b:  			isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  			startByte = 1;  			break;  		case 0x10:  			if (byteData [offset + 1] == 0x00) {  				if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  					isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  					startByte = 3;  					break;  				}  				else  					return ("Invalid DVB text string: byte 3 is not a valid value");  			}  			else  				return ("Invalid DVB text string: byte 2 is not a valid value");  		case 0x11:  		case 0x15:  			isoTable = "utf-8";  			startByte = 1;  			break;  		case 0x1f:  			if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  				if (MultiTreeDictionaryEntry.Loaded)  					return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  				else  					return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  			}  			else  				return ("Invalid DVB text string: Custom text specifier is not recognized");  		default:  			return ("Invalid DVB text string: byte 1 is not a valid value");  		}  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (RunParameters.Instance.CharacterSet != null) {  	isoTable = RunParameters.Instance.CharacterSet;  	if (byteData [offset] < 0x20)  		startByte = 1;  }  else {  	if (byteData [offset] >= 0x20)  		isoTable = "iso-8859-1";  	else {  		switch (byteData [offset]) {  		case 0x01:  		case 0x02:  		case 0x03:  		case 0x04:  		case 0x05:  		case 0x06:  		case 0x07:  		case 0x08:  		case 0x09:  		case 0x0a:  		case 0x0b:  			isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  			startByte = 1;  			break;  		case 0x10:  			if (byteData [offset + 1] == 0x00) {  				if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  					isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  					startByte = 3;  					break;  				}  				else  					return ("Invalid DVB text string: byte 3 is not a valid value");  			}  			else  				return ("Invalid DVB text string: byte 2 is not a valid value");  		case 0x11:  		case 0x15:  			isoTable = "utf-8";  			startByte = 1;  			break;  		case 0x1f:  			if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  				if (MultiTreeDictionaryEntry.Loaded)  					return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  				else  					return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  			}  			else  				return ("Invalid DVB text string: Custom text specifier is not recognized");  		default:  			return ("Invalid DVB text string: byte 1 is not a valid value");  		}  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (RunParameters.Instance.CharacterSet != null) {  	isoTable = RunParameters.Instance.CharacterSet;  	if (byteData [offset] < 0x20)  		startByte = 1;  }  else {  	if (byteData [offset] >= 0x20)  		isoTable = "iso-8859-1";  	else {  		switch (byteData [offset]) {  		case 0x01:  		case 0x02:  		case 0x03:  		case 0x04:  		case 0x05:  		case 0x06:  		case 0x07:  		case 0x08:  		case 0x09:  		case 0x0a:  		case 0x0b:  			isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  			startByte = 1;  			break;  		case 0x10:  			if (byteData [offset + 1] == 0x00) {  				if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  					isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  					startByte = 3;  					break;  				}  				else  					return ("Invalid DVB text string: byte 3 is not a valid value");  			}  			else  				return ("Invalid DVB text string: byte 2 is not a valid value");  		case 0x11:  		case 0x15:  			isoTable = "utf-8";  			startByte = 1;  			break;  		case 0x1f:  			if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  				if (MultiTreeDictionaryEntry.Loaded)  					return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  				else  					return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  			}  			else  				return ("Invalid DVB text string: Custom text specifier is not recognized");  		default:  			return ("Invalid DVB text string: byte 1 is not a valid value");  		}  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (RunParameters.Instance.CharacterSet != null) {  	isoTable = RunParameters.Instance.CharacterSet;  	if (byteData [offset] < 0x20)  		startByte = 1;  }  else {  	if (byteData [offset] >= 0x20)  		isoTable = "iso-8859-1";  	else {  		switch (byteData [offset]) {  		case 0x01:  		case 0x02:  		case 0x03:  		case 0x04:  		case 0x05:  		case 0x06:  		case 0x07:  		case 0x08:  		case 0x09:  		case 0x0a:  		case 0x0b:  			isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  			startByte = 1;  			break;  		case 0x10:  			if (byteData [offset + 1] == 0x00) {  				if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  					isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  					startByte = 3;  					break;  				}  				else  					return ("Invalid DVB text string: byte 3 is not a valid value");  			}  			else  				return ("Invalid DVB text string: byte 2 is not a valid value");  		case 0x11:  		case 0x15:  			isoTable = "utf-8";  			startByte = 1;  			break;  		case 0x1f:  			if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  				if (MultiTreeDictionaryEntry.Loaded)  					return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  				else  					return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  			}  			else  				return ("Invalid DVB text string: Custom text specifier is not recognized");  		default:  			return ("Invalid DVB text string: byte 1 is not a valid value");  		}  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (RunParameters.Instance.CharacterSet != null) {  	isoTable = RunParameters.Instance.CharacterSet;  	if (byteData [offset] < 0x20)  		startByte = 1;  }  else {  	if (byteData [offset] >= 0x20)  		isoTable = "iso-8859-1";  	else {  		switch (byteData [offset]) {  		case 0x01:  		case 0x02:  		case 0x03:  		case 0x04:  		case 0x05:  		case 0x06:  		case 0x07:  		case 0x08:  		case 0x09:  		case 0x0a:  		case 0x0b:  			isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  			startByte = 1;  			break;  		case 0x10:  			if (byteData [offset + 1] == 0x00) {  				if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  					isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  					startByte = 3;  					break;  				}  				else  					return ("Invalid DVB text string: byte 3 is not a valid value");  			}  			else  				return ("Invalid DVB text string: byte 2 is not a valid value");  		case 0x11:  		case 0x15:  			isoTable = "utf-8";  			startByte = 1;  			break;  		case 0x1f:  			if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  				if (MultiTreeDictionaryEntry.Loaded)  					return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  				else  					return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  			}  			else  				return ("Invalid DVB text string: Custom text specifier is not recognized");  		default:  			return ("Invalid DVB text string: byte 1 is not a valid value");  		}  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset] >= 0x20)  	isoTable = "iso-8859-1";  else {  	switch (byteData [offset]) {  	case 0x01:  	case 0x02:  	case 0x03:  	case 0x04:  	case 0x05:  	case 0x06:  	case 0x07:  	case 0x08:  	case 0x09:  	case 0x0a:  	case 0x0b:  		isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  		startByte = 1;  		break;  	case 0x10:  		if (byteData [offset + 1] == 0x00) {  			if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  				isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  				startByte = 3;  				break;  			}  			else  				return ("Invalid DVB text string: byte 3 is not a valid value");  		}  		else  			return ("Invalid DVB text string: byte 2 is not a valid value");  	case 0x11:  	case 0x15:  		isoTable = "utf-8";  		startByte = 1;  		break;  	case 0x1f:  		if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  			if (MultiTreeDictionaryEntry.Loaded)  				return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  			else  				return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  		}  		else  			return ("Invalid DVB text string: Custom text specifier is not recognized");  	default:  		return ("Invalid DVB text string: byte 1 is not a valid value");  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset] >= 0x20)  	isoTable = "iso-8859-1";  else {  	switch (byteData [offset]) {  	case 0x01:  	case 0x02:  	case 0x03:  	case 0x04:  	case 0x05:  	case 0x06:  	case 0x07:  	case 0x08:  	case 0x09:  	case 0x0a:  	case 0x0b:  		isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  		startByte = 1;  		break;  	case 0x10:  		if (byteData [offset + 1] == 0x00) {  			if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  				isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  				startByte = 3;  				break;  			}  			else  				return ("Invalid DVB text string: byte 3 is not a valid value");  		}  		else  			return ("Invalid DVB text string: byte 2 is not a valid value");  	case 0x11:  	case 0x15:  		isoTable = "utf-8";  		startByte = 1;  		break;  	case 0x1f:  		if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  			if (MultiTreeDictionaryEntry.Loaded)  				return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  			else  				return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  		}  		else  			return ("Invalid DVB text string: Custom text specifier is not recognized");  	default:  		return ("Invalid DVB text string: byte 1 is not a valid value");  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset] >= 0x20)  	isoTable = "iso-8859-1";  else {  	switch (byteData [offset]) {  	case 0x01:  	case 0x02:  	case 0x03:  	case 0x04:  	case 0x05:  	case 0x06:  	case 0x07:  	case 0x08:  	case 0x09:  	case 0x0a:  	case 0x0b:  		isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  		startByte = 1;  		break;  	case 0x10:  		if (byteData [offset + 1] == 0x00) {  			if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  				isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  				startByte = 3;  				break;  			}  			else  				return ("Invalid DVB text string: byte 3 is not a valid value");  		}  		else  			return ("Invalid DVB text string: byte 2 is not a valid value");  	case 0x11:  	case 0x15:  		isoTable = "utf-8";  		startByte = 1;  		break;  	case 0x1f:  		if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  			if (MultiTreeDictionaryEntry.Loaded)  				return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  			else  				return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  		}  		else  			return ("Invalid DVB text string: Custom text specifier is not recognized");  	default:  		return ("Invalid DVB text string: byte 1 is not a valid value");  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset] >= 0x20)  	isoTable = "iso-8859-1";  else {  	switch (byteData [offset]) {  	case 0x01:  	case 0x02:  	case 0x03:  	case 0x04:  	case 0x05:  	case 0x06:  	case 0x07:  	case 0x08:  	case 0x09:  	case 0x0a:  	case 0x0b:  		isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  		startByte = 1;  		break;  	case 0x10:  		if (byteData [offset + 1] == 0x00) {  			if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  				isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  				startByte = 3;  				break;  			}  			else  				return ("Invalid DVB text string: byte 3 is not a valid value");  		}  		else  			return ("Invalid DVB text string: byte 2 is not a valid value");  	case 0x11:  	case 0x15:  		isoTable = "utf-8";  		startByte = 1;  		break;  	case 0x1f:  		if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  			if (MultiTreeDictionaryEntry.Loaded)  				return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  			else  				return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  		}  		else  			return ("Invalid DVB text string: Custom text specifier is not recognized");  	default:  		return ("Invalid DVB text string: byte 1 is not a valid value");  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset] >= 0x20)  	isoTable = "iso-8859-1";  else {  	switch (byteData [offset]) {  	case 0x01:  	case 0x02:  	case 0x03:  	case 0x04:  	case 0x05:  	case 0x06:  	case 0x07:  	case 0x08:  	case 0x09:  	case 0x0a:  	case 0x0b:  		isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  		startByte = 1;  		break;  	case 0x10:  		if (byteData [offset + 1] == 0x00) {  			if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  				isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  				startByte = 3;  				break;  			}  			else  				return ("Invalid DVB text string: byte 3 is not a valid value");  		}  		else  			return ("Invalid DVB text string: byte 2 is not a valid value");  	case 0x11:  	case 0x15:  		isoTable = "utf-8";  		startByte = 1;  		break;  	case 0x1f:  		if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  			if (MultiTreeDictionaryEntry.Loaded)  				return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  			else  				return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  		}  		else  			return ("Invalid DVB text string: Custom text specifier is not recognized");  	default:  		return ("Invalid DVB text string: byte 1 is not a valid value");  	}  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: switch (byteData [offset]) {  case 0x01:  case 0x02:  case 0x03:  case 0x04:  case 0x05:  case 0x06:  case 0x07:  case 0x08:  case 0x09:  case 0x0a:  case 0x0b:  	isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  	startByte = 1;  	break;  case 0x10:  	if (byteData [offset + 1] == 0x00) {  		if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  			isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  			startByte = 3;  			break;  		}  		else  			return ("Invalid DVB text string: byte 3 is not a valid value");  	}  	else  		return ("Invalid DVB text string: byte 2 is not a valid value");  case 0x11:  case 0x15:  	isoTable = "utf-8";  	startByte = 1;  	break;  case 0x1f:  	if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  		if (MultiTreeDictionaryEntry.Loaded)  			return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  		else  			return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  	}  	else  		return ("Invalid DVB text string: Custom text specifier is not recognized");  default:  	return ("Invalid DVB text string: byte 1 is not a valid value");  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: switch (byteData [offset]) {  case 0x01:  case 0x02:  case 0x03:  case 0x04:  case 0x05:  case 0x06:  case 0x07:  case 0x08:  case 0x09:  case 0x0a:  case 0x0b:  	isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  	startByte = 1;  	break;  case 0x10:  	if (byteData [offset + 1] == 0x00) {  		if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  			isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  			startByte = 3;  			break;  		}  		else  			return ("Invalid DVB text string: byte 3 is not a valid value");  	}  	else  		return ("Invalid DVB text string: byte 2 is not a valid value");  case 0x11:  case 0x15:  	isoTable = "utf-8";  	startByte = 1;  	break;  case 0x1f:  	if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  		if (MultiTreeDictionaryEntry.Loaded)  			return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  		else  			return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  	}  	else  		return ("Invalid DVB text string: Custom text specifier is not recognized");  default:  	return ("Invalid DVB text string: byte 1 is not a valid value");  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: switch (byteData [offset]) {  case 0x01:  case 0x02:  case 0x03:  case 0x04:  case 0x05:  case 0x06:  case 0x07:  case 0x08:  case 0x09:  case 0x0a:  case 0x0b:  	isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  	startByte = 1;  	break;  case 0x10:  	if (byteData [offset + 1] == 0x00) {  		if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  			isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  			startByte = 3;  			break;  		}  		else  			return ("Invalid DVB text string: byte 3 is not a valid value");  	}  	else  		return ("Invalid DVB text string: byte 2 is not a valid value");  case 0x11:  case 0x15:  	isoTable = "utf-8";  	startByte = 1;  	break;  case 0x1f:  	if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  		if (MultiTreeDictionaryEntry.Loaded)  			return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  		else  			return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  	}  	else  		return ("Invalid DVB text string: Custom text specifier is not recognized");  default:  	return ("Invalid DVB text string: byte 1 is not a valid value");  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: switch (byteData [offset]) {  case 0x01:  case 0x02:  case 0x03:  case 0x04:  case 0x05:  case 0x06:  case 0x07:  case 0x08:  case 0x09:  case 0x0a:  case 0x0b:  	isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  	startByte = 1;  	break;  case 0x10:  	if (byteData [offset + 1] == 0x00) {  		if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  			isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  			startByte = 3;  			break;  		}  		else  			return ("Invalid DVB text string: byte 3 is not a valid value");  	}  	else  		return ("Invalid DVB text string: byte 2 is not a valid value");  case 0x11:  case 0x15:  	isoTable = "utf-8";  	startByte = 1;  	break;  case 0x1f:  	if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  		if (MultiTreeDictionaryEntry.Loaded)  			return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  		else  			return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  	}  	else  		return ("Invalid DVB text string: Custom text specifier is not recognized");  default:  	return ("Invalid DVB text string: byte 1 is not a valid value");  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: switch (byteData [offset]) {  case 0x01:  case 0x02:  case 0x03:  case 0x04:  case 0x05:  case 0x06:  case 0x07:  case 0x08:  case 0x09:  case 0x0a:  case 0x0b:  	isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  	startByte = 1;  	break;  case 0x10:  	if (byteData [offset + 1] == 0x00) {  		if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  			isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  			startByte = 3;  			break;  		}  		else  			return ("Invalid DVB text string: byte 3 is not a valid value");  	}  	else  		return ("Invalid DVB text string: byte 2 is not a valid value");  case 0x11:  case 0x15:  	isoTable = "utf-8";  	startByte = 1;  	break;  case 0x1f:  	if (byteData [offset + 1] == 0x01 || byteData [offset + 1] == 0x02) {  		if (MultiTreeDictionaryEntry.Loaded)  			return (MultiTreeDictionaryEntry.DecodeData (Utils.GetBytes (byteData' offset' length + 1)));  		else  			return ("Huffman text: " + Utils.ConvertToHex (byteData' offset' length));  	}  	else  		return ("Invalid DVB text string: Custom text specifier is not recognized");  default:  	return ("Invalid DVB text string: byte 1 is not a valid value");  }  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: isoTable = "iso-8859-" + (byteData [offset] + 4).ToString ();  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 1] == 0x00) {  	if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  		isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  		startByte = 3;  		break;  	}  	else  		return ("Invalid DVB text string: byte 3 is not a valid value");  }  else  	return ("Invalid DVB text string: byte 2 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 1] == 0x00) {  	if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  		isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  		startByte = 3;  		break;  	}  	else  		return ("Invalid DVB text string: byte 3 is not a valid value");  }  else  	return ("Invalid DVB text string: byte 2 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 1] == 0x00) {  	if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  		isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  		startByte = 3;  		break;  	}  	else  		return ("Invalid DVB text string: byte 3 is not a valid value");  }  else  	return ("Invalid DVB text string: byte 2 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 1] == 0x00) {  	if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  		isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  		startByte = 3;  		break;  	}  	else  		return ("Invalid DVB text string: byte 3 is not a valid value");  }  else  	return ("Invalid DVB text string: byte 2 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  	isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  	startByte = 3;  	break;  }  else  	return ("Invalid DVB text string: byte 3 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  	isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  	startByte = 3;  	break;  }  else  	return ("Invalid DVB text string: byte 3 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  	isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  	startByte = 3;  	break;  }  else  	return ("Invalid DVB text string: byte 3 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: if (byteData [offset + 2] != 0x00 && byteData [offset + 2] != 0x0c) {  	isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  	startByte = 3;  	break;  }  else  	return ("Invalid DVB text string: byte 3 is not a valid value");  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: isoTable = "iso-8859-" + ((int)byteData [offset + 2]).ToString ();  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,GetString,The following statement contains a magic number: startByte = 3;  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds != 0) {  	if (partSeconds < 180)  		return (oldDateTime.AddSeconds (partSeconds * -1));  	else  		return (oldDateTime.AddSeconds (300 - partSeconds));  }  else  	return (oldDateTime);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds != 0) {  	if (partSeconds < 180)  		return (oldDateTime.AddSeconds (partSeconds * -1));  	else  		return (oldDateTime.AddSeconds (300 - partSeconds));  }  else  	return (oldDateTime);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds < 180)  	return (oldDateTime.AddSeconds (partSeconds * -1));  else  	return (oldDateTime.AddSeconds (300 - partSeconds));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds < 180)  	return (oldDateTime.AddSeconds (partSeconds * -1));  else  	return (oldDateTime.AddSeconds (300 - partSeconds));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: return (oldDateTime.AddSeconds (300 - partSeconds));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds != 0) {  	if (partSeconds < 180) {  		if (partSeconds != oldTime.TotalSeconds)  			return (oldTime - getTimeSpan (partSeconds * -1));  		else  			return (new TimeSpan (0' 5' 0));  	}  	else  		return (oldTime + getTimeSpan (300 - partSeconds));  }  else  	return (oldTime);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds != 0) {  	if (partSeconds < 180) {  		if (partSeconds != oldTime.TotalSeconds)  			return (oldTime - getTimeSpan (partSeconds * -1));  		else  			return (new TimeSpan (0' 5' 0));  	}  	else  		return (oldTime + getTimeSpan (300 - partSeconds));  }  else  	return (oldTime);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds != 0) {  	if (partSeconds < 180) {  		if (partSeconds != oldTime.TotalSeconds)  			return (oldTime - getTimeSpan (partSeconds * -1));  		else  			return (new TimeSpan (0' 5' 0));  	}  	else  		return (oldTime + getTimeSpan (300 - partSeconds));  }  else  	return (oldTime);  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds < 180) {  	if (partSeconds != oldTime.TotalSeconds)  		return (oldTime - getTimeSpan (partSeconds * -1));  	else  		return (new TimeSpan (0' 5' 0));  }  else  	return (oldTime + getTimeSpan (300 - partSeconds));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds < 180) {  	if (partSeconds != oldTime.TotalSeconds)  		return (oldTime - getTimeSpan (partSeconds * -1));  	else  		return (new TimeSpan (0' 5' 0));  }  else  	return (oldTime + getTimeSpan (300 - partSeconds));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds < 180) {  	if (partSeconds != oldTime.TotalSeconds)  		return (oldTime - getTimeSpan (partSeconds * -1));  	else  		return (new TimeSpan (0' 5' 0));  }  else  	return (oldTime + getTimeSpan (300 - partSeconds));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: if (partSeconds != oldTime.TotalSeconds)  	return (oldTime - getTimeSpan (partSeconds * -1));  else  	return (new TimeSpan (0' 5' 0));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: return (new TimeSpan (0' 5' 0));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,RoundTime,The following statement contains a magic number: return (oldTime + getTimeSpan (300 - partSeconds));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,getTimeSpan,The following statement contains a magic number: return (new TimeSpan (0' seconds / 60' seconds % 60));  
Magic Number,DVBServices,Utils,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Utils.cs,getTimeSpan,The following statement contains a magic number: return (new TimeSpan (0' seconds / 60' seconds % 60));  
Missing Default,DVBServices,SCSUDecompressor,C:\repos\esurharun_TSDumper\TSDumper.Utility\DVBServices\Decompressors\SCSUDecompressor.cs,Decompress,The following switch statement is missing a default case: switch (byteArray [current]) {  case sq0:  case sq1:  case sq2:  case sq3:  case sq4:  case sq5:  case sq6:  case sq7:  	if (current < (byteArray.Length - 1)) {  		dynamicWindow = staticWindow = (uint)(byteArray [current] - sq0);  		current++;  		if (byteArray [current] < 128) {  			uint temp = byteArray [current] + staticOffset [staticWindow];  			builder.Append ((char)temp);  			_character++;  		}  		else {  			uint temp = (uint)(byteArray [current]);  			temp -= 0x80;  			temp += dynamicOffset [dynamicWindow];  			if (temp < (1 << 16)) {  				builder.Append ((char)temp);  				_character++;  			}  			else {  				temp -= 0x10000;  				builder.Append ((char)(0xD800 + (temp >> 10)));  				_character++;  				builder.Append ((char)(0xDC00 + (temp & (~0xfc00))));  				_character++;  			}  		}  	}  	break;  case sdx:  	current += 2;  	if (current < byteArray.Length)  		defineExtendedWindow ((uint)charFromTwoBytes (byteArray [current - 1]' byteArray [current]));  	break;  case sd0:  case sd1:  case sd2:  case sd3:  case sd4:  case sd5:  case sd6:  case sd7:  	current++;  	if (current < byteArray.Length)  		defineWindow ((uint)(byteArray [current - 1] - sd0)' byteArray [current]);  	break;  case sc0:  case sc1:  case sc2:  case sc3:  case sc4:  case sc5:  case sc6:  case sc7:  	window = (uint)(byteArray [current] - sc0);  	break;  case scu:  	current = expandUnicode (byteArray' current + 1' builder);  	break;  case squ:  	current += 2;  	if (current < byteArray.Length) {  		char temp = charFromTwoBytes (byteArray [current - 1]' byteArray [current]);  		builder.Append ((char)temp);  		_character++;  	}  	break;  case srs:  	throw (new ArgumentException ("SCSU Decompressor failed"));  }  
