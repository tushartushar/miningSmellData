Implementation smell,Namespace,Class,File,Method,Description
Long Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The method has 205 lines of code.
Long Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getLocator,The method has 243 lines of code.
Long Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addBoardFilters,The method has 124 lines of code.
Long Method,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The method has 123 lines of code.
Long Method,DirectShow,DirectShowGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowGraph.cs,TranslateMediaSubType,The method has 263 lines of code.
Long Method,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The method has 109 lines of code.
Complex Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,Cyclomatic complexity of the method is 18
Complex Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getLocator,Cyclomatic complexity of the method is 17
Complex Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,FindTuner,Cyclomatic complexity of the method is 12
Complex Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addBoardFilters,Cyclomatic complexity of the method is 15
Complex Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,Dispose,Cyclomatic complexity of the method is 11
Complex Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getTunerNodes,Cyclomatic complexity of the method is 20
Complex Method,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getSignalStatisticsInterfaces,Cyclomatic complexity of the method is 19
Complex Method,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,Cyclomatic complexity of the method is 10
Complex Method,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,sendCommand,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,getDiseqcHandler,Cyclomatic complexity of the method is 24
Complex Method,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,Cyclomatic complexity of the method is 117
Complex Method,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,Cyclomatic complexity of the method is 12
Complex Method,DirectShow,TechnoTrendDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TechnoTrendDiseqcHandler.cs,getDeviceType,Cyclomatic complexity of the method is 14
Complex Method,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,Cyclomatic complexity of the method is 19
Complex Method,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,Cyclomatic complexity of the method is 9
Complex Method,DirectShow,Win7APIDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\Win7APIDiseqc.cs,Win7APIDiseqcHandler,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,Cyclomatic complexity of the method is 26
Complex Method,DirectShow,DVBS2HandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DVBS2HandlerBase.cs,getDVBS2Handler,Cyclomatic complexity of the method is 9
Complex Method,DirectShow,GenPixDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\GenPixDVBS2Handler.cs,SetDVBS2Parameters,Cyclomatic complexity of the method is 17
Complex Method,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,Cyclomatic complexity of the method is 20
Complex Method,DirectShow,ProfRedDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\ProfRedDVBS2Handler.cs,SetDVBS2Parameters,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,Cyclomatic complexity of the method is 26
Complex Method,DirectShow,TechnoTrendDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TechnoTrendDVBS2Handler.cs,getDeviceType,Cyclomatic complexity of the method is 14
Complex Method,DirectShow,TechnoTrendDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TechnoTrendDVBS2Handler.cs,SetDVBS2Parameters,Cyclomatic complexity of the method is 17
Complex Method,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,SetDVBS2Parameters,Cyclomatic complexity of the method is 17
Complex Method,DirectShow,Win7APIDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\Win7APIDVBS2Handler.cs,Win7APIDVBS2Handler,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,GenericDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\GenericDiseqcHandler.cs,sendRangeCommand,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,GenPixDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\GenPixDiseqcHandler.cs,sendCommand,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,Cyclomatic complexity of the method is 10
Complex Method,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,Cyclomatic complexity of the method is 57
Complex Method,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,processNewSection,Cyclomatic complexity of the method is 11
Complex Method,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,createMpeg2Section,Cyclomatic complexity of the method is 9
Complex Method,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,ChangePidMapping,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,Cyclomatic complexity of the method is 21
Complex Method,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,fillBuffer,Cyclomatic complexity of the method is 8
Complex Method,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,getPacket,Cyclomatic complexity of the method is 14
Complex Method,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,Cyclomatic complexity of the method is 11
Complex Method,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,Cyclomatic complexity of the method is 16
Complex Method,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,Cyclomatic complexity of the method is 15
Complex Method,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,Cyclomatic complexity of the method is 15
Complex Method,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,Cyclomatic complexity of the method is 11
Long Parameter List,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,CreatePSIMemoryFilter,The method has 5 parameters.
Long Parameter List,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,FindTuner,The method has 6 parameters.
Long Parameter List,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,FindTuner,The method has 7 parameters.
Long Parameter List,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,checkTunerAvailability,The method has 5 parameters.
Long Parameter List,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,checkDiseqcAvailability,The method has 5 parameters.
Long Parameter List,DirectShow,TechnoTrendDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TechnoTrendDiseqcHandler.cs,bdaapiSetDiSEqCMsg,The method has 6 parameters.
Long Parameter List,DirectShow,TeviiDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TeviiDiseqcHandler.cs,SendDiSEqC,The method has 5 parameters.
Long Parameter List,DirectShow,IKsControl,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\Interfaces.cs,KsProperty,The method has 5 parameters.
Long Parameter List,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,MapViewOfFile,The method has 5 parameters.
Long Parameter List,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,MapViewOfFile,The method has 5 parameters.
Long Parameter List,DirectShowAPI,IKsPropertySet,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\APIBase.cs,Set,The method has 6 parameters.
Long Parameter List,DirectShowAPI,IKsPropertySet,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\APIBase.cs,Get,The method has 7 parameters.
Long Parameter List,DirectShowAPI,ICaptureGraphBuilder2,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\APIBase.cs,FindInterface,The method has 5 parameters.
Long Parameter List,DirectShowAPI,ICaptureGraphBuilder2,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\APIBase.cs,RenderStream,The method has 5 parameters.
Long Parameter List,DirectShowAPI,ICaptureGraphBuilder2,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\APIBase.cs,ControlStream,The method has 7 parameters.
Long Parameter List,DirectShowAPI,ICaptureGraphBuilder2,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\APIBase.cs,FindPin,The method has 7 parameters.
Long Parameter List,DirectShowAPI,IStreamBufferRecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\StreamBufferEngine.cs,SetAttribute,The method has 5 parameters.
Long Parameter List,DirectShowAPI,IStreamBufferRecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\StreamBufferEngine.cs,GetAttributeByName,The method has 5 parameters.
Long Parameter List,DirectShowAPI,IStreamBufferRecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\StreamBufferEngine.cs,GetAttributeByIndex,The method has 7 parameters.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency); " is 139.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "			reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency); " is 132.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency); " is 137.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ()); " is 129.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ()); " is 131.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ()); " is 131.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency); " is 143.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "			reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency); " is 132.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency); " is 141.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ()); " is 133.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ()); " is 135.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The length of the statement  "		LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ()); " is 135.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuneRequest,The length of the statement  "	if (tuningSpec.Frequency.TunerType == TunerType.Satellite || tuningSpec.Frequency.TunerType == TunerType.Terrestrial || tuningSpec.Frequency.TunerType == TunerType.Cable) { " is 172.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,FindTuner,The length of the statement  "	return (FindTuner (tuners' tunerNodeType' tuningSpec' lastTuner' RunParameters.Instance.Options.Contains ("REPEATDISEQC")' RunParameters.Instance.Options.Contains ("SWITCHAFTERPLAY"))); " is 185.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,checkTunerAvailability,The length of the statement  "	if (tuningSpec.Frequency.TunerType == TunerType.Satellite && ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.DiseqcSwitch != null) " is 139.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,buildGraph,The length of the statement  "	if (tuningSpec.Frequency.TunerType == TunerType.ATSC || tuningSpec.Frequency.TunerType == TunerType.ATSCCable || tuningSpec.Frequency.TunerType == TunerType.ClearQAM) " is 166.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addNetworkProviderFilter,The length of the statement  "		this.networkProviderFilter = FilterGraphTools.AddFilterFromClsid (GraphBuilder' genProviderClsId' "Generic Network Provider"); " is 126.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addNetworkProviderFilter,The length of the statement  "		this.networkProviderFilter = FilterGraphTools.AddFilterFromClsid (GraphBuilder' networkProviderClsId' "DVBT Network Provider"); " is 127.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addNetworkProviderFilter,The length of the statement  "		this.networkProviderFilter = FilterGraphTools.AddFilterFromClsid (GraphBuilder' networkProviderClsId' "DVBS Network Provider"); " is 127.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addNetworkProviderFilter,The length of the statement  "		this.networkProviderFilter = FilterGraphTools.AddFilterFromClsid (GraphBuilder' networkProviderClsId' "ATSC Network Provider"); " is 127.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addNetworkProviderFilter,The length of the statement  "		this.networkProviderFilter = FilterGraphTools.AddFilterFromClsid (GraphBuilder' networkProviderClsId' "DVBC Network Provider"); " is 127.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addPSIMemoryFilter,The length of the statement  "		reply = CreatePSIMemoryFilter (GraphBuilder' RunParameters.Instance.TraceIDs.Contains ("PSIFILTER")' Path.Combine (RunParameters.DataDirectory' "PSI Memory Filter.log")' false' string.Empty); " is 191.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,addPSIMemoryFilter,The length of the statement  "		reply = CreatePSIMemoryFilter (GraphBuilder' RunParameters.Instance.TraceIDs.Contains ("PSIFILTER")' Path.Combine (RunParameters.DataDirectory' "PSI Memory Filter.log")' true' dumpFileName); " is 190.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,connectDownStreamFilters,The length of the statement  "		Logger.Instance.Write ("<E> The MPEG2 demux pin for media subtype " + TranslateMediaSubType (mediaSubType) + " does not exist"); " is 128.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,setDVBS2Parameters,The length of the statement  "		if (satelliteFrequency.Pilot == DomainObjects.Pilot.NotSet && satelliteFrequency.RollOff == DomainObjects.RollOff.NotSet) { " is 123.
Long Statement,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getTunerNodes,The length of the statement  "			Logger.Instance.Write ("Tuner info: Descriptor " + descriptors [index].guidName.ToString () + " " + descriptors [index].guidFunction.ToString () + " " + descriptors [index].ulBdaNodeType); " is 188.
Long Statement,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The length of the statement  "	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' commandBufferLength' commandBuffer' commandBufferLength); " is 172.
Long Statement,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,sendCommand,The length of the statement  "	reply = propertySet.Set (ksPropSetID' ksPropertyLNBControl' commandBuffer' commandBufferLength' commandBuffer' commandBufferLength); " is 132.
Long Statement,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,ProcessDisEqcSwitch,The length of the statement  "	bool reply = diseqcHandler.SendDiseqcCommand (tuningSpec' ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.DiseqcSwitch); " is 129.
Long Statement,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The length of the statement  "		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency); " is 125.
Long Statement,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The length of the statement  "		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL)); " is 151.
Long Statement,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The length of the statement  "			bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency); " is 125.
Long Statement,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The length of the statement  "			bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL)); " is 151.
Long Statement,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The length of the statement  "		reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 188' commandBuffer' 188' out bytesReturned); " is 159.
Long Statement,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The length of the statement  "		reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 11' commandBuffer' 11); " is 138.
Long Statement,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The length of the statement  "		Logger.Instance.Write ("ProfRed/TBS DiSEqC handler: " + getSetString + " command failed error code 0x" + reply.ToString ("X")); " is 127.
Long Statement,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendDiseqcCommand,The length of the statement  "	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL)); " is 151.
Long Statement,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The length of the statement  "			Logger.Instance.Write ("DigitalEverywhere DVB-S2 handler: Set Modulation Type failed error code 0x" + reply.ToString ("X")); " is 124.
Long Statement,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The length of the statement  "		Logger.Instance.Write ("DigitalEverywhere DVB-S2 handler: FEC Rate changed from " + oldCodeRate + " to " + newCodeRate); " is 120.
Long Statement,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The length of the statement  "	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' instanceBuffer' 32' commandBuffer' 4); " is 137.
Long Statement,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The length of the statement  "		reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_ROLL_OFF' instanceBuffer' 32' commandBuffer' 4); " is 140.
Long Statement,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,ClearDVBS2Parameters,The length of the statement  "	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' instanceBuffer' 32' commandBuffer' 4); " is 137.
Long Statement,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The length of the statement  "		reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_NBC_PARAMS' commandBuffer' commandBufferLength' commandBuffer' commandBufferLength' out bytesReturned); " is 195.
Long Statement,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The length of the statement  "		reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_NBC_PARAMS' commandBuffer' commandBufferLength' commandBuffer' commandBufferLength); " is 176.
Long Statement,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,SetDVBS2Parameters,The length of the statement  "			Logger.Instance.Write ("Twinhan/TechniSat DVB-S2 handler: Set Modulation Type failed error code 0x" + reply.ToString ("X")); " is 124.
Long Statement,DirectShow,GenPixDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\GenPixDiseqcHandler.cs,sendCommand,The length of the statement  "	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' replyBuffer' 32' commandBuffer' length); " is 140.
Long Statement,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The length of the statement  "	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' commandBufferLength' commandBuffer' commandBufferLength); " is 172.
Long Statement,DirectShow,DirectShowGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowGraph.cs,FindPin,The length of the statement  "			throw (new InvalidOperationException ("The pin '" + name + "' could not be located for filter '" + filterInfo.achName + "'")); " is 126.
Long Statement,DirectShow,DirectShowGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowGraph.cs,logMediaTypes,The length of the statement  "			if (currentMediaType.majorType == connectedMediaType.majorType && currentMediaType.subType == connectedMediaType.subType) " is 121.
Long Statement,DirectShow,DirectShowGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowGraph.cs,logMediaTypes,The length of the statement  "			LogMessage ("Media type: " + majorType + " ; " + subType + " " + currentMediaType.fixedSizeSamples + " " + currentMediaType.sampleSize + " " + connectedComment); " is 161.
Long Statement,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The length of the statement  "				Logger.Instance.Write (getPidID () + "Continuity count failure: " + continuityCount + ":" + transportPacket.ContinuityCount); " is 125.
Long Statement,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,Run,The length of the statement  "	fileMapping = OpenFileMapping ((int)fileMapAccess.fileMapAllAccess' false' "DVBLogic Plugin Shared Memory " + runReference); " is 124.
Long Statement,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,Load,The length of the statement  "		reply = ((IStreamBufferRecordingAttribute)recordingAttributes).GetAttributeByIndex (index' ref reserved' name' ref nameLength' out attributeType' attributeValue' ref valueLength); " is 179.
Long Statement,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,Load,The length of the statement  "		reply = ((IStreamBufferRecordingAttribute)recordingAttributes).GetAttributeByIndex (index' ref reserved' name' ref nameLength' out attributeType' attributeValue' ref valueLength); " is 179.
Long Statement,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The length of the statement  "		long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7]; " is 224.
Long Statement,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getSection,The length of the statement  "                    Logger.Instance.Write("Section rejected: PID 0x" + mpeg2Section.PID.ToString("X") + " table 0x" + mpeg2Section.Table.ToString("X"));*/} " is 135.
Long Statement,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getNextSection,The length of the statement  "		Logger.Instance.Write ("Transport packet parsing failed at current offset  " + currentOffset + " max offset: " + maxOffset); " is 124.
Long Statement,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getNextSection,The length of the statement  "	/*Logger.Instance.Write("Processing PID 0x" + transportPacket.PID.ToString("X") + " from offset " + currentOffset);*/PidHandler pidHandler = findPidHandler (transportPacket.PID); " is 178.
Long Statement,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getNextSection,The length of the statement  "	/*Logger.Instance.Write("PID handler 0x" + pidHandler.Pid.ToString("X") + " has created " + pidHandler.Sections.Count + " sections");*/return (pidHandler.Sections); " is 164.
Empty Catch Block,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The method has an empty catch block.
Empty Catch Block,DirectShowAPI,FilterGraphTools,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\Support.cs,IsThisComObjectInstalled,The method has an empty catch block.
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  	reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  else  	reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  	reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  else  	reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following statement contains a magic number: reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,checkDiseqcAvailability,The following statement contains a magic number: if (!switchAfterPlay) {  	Logger.Instance.Write ("Processing Diseqc command before running graph");  	switchReply = DiseqcHandlerBase.ProcessDisEqcSwitch (tuningSpec' tuner' graph.tunerFilter);  	Thread.Sleep (500);  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,checkDiseqcAvailability,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getSignalStatisticsInterfaces,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS")) {  		Logger.Instance.Write ("BDA node type " + nodeTypes [nodeTypeIndex] + " has " + interfaceCount + " interfaces");  		for (int interfaceIndex = 0; interfaceIndex < interfaceCount; interfaceIndex++)  			Logger.Instance.Write ("BDA Interface: " + interfaces [interfaceIndex].ToString ());  	}  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getSignalStatisticsInterfaces,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS")) {  		Logger.Instance.Write ("BDA node type " + nodeTypes [nodeTypeIndex] + " has " + interfaceCount + " interfaces");  		for (int interfaceIndex = 0; interfaceIndex < interfaceCount; interfaceIndex++)  			Logger.Instance.Write ("BDA Interface: " + interfaces [interfaceIndex].ToString ());  	}  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getSignalStatisticsInterfaces,The following statement contains a magic number: reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getSignalStatisticsInterfaces,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS"))  		Logger.Instance.Write ("BDA Signal stats interface is " + typeof(IBDA_SignalStatistics).GUID.ToString ());  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_SignalStatistics).GUID) {  			if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS"))  				Logger.Instance.Write ("BDA Signal stats interface located for node type " + nodeTypes [nodeTypeIndex]);  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			IBDA_SignalStatistics signalStats = controlNode as IBDA_SignalStatistics;  			if (signalStats == null)  				Logger.Instance.Write ("BDA Can't get " + action + ": cast of control node failed");  			else {  				if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS"))  					Logger.Instance.Write ("BDA Adding signal stats interface to collection");  				signalStatsCollection.Add (signalStats);  			}  		}  	}  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getSignalStatisticsInterfaces,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS"))  		Logger.Instance.Write ("BDA Signal stats interface is " + typeof(IBDA_SignalStatistics).GUID.ToString ());  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_SignalStatistics).GUID) {  			if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS"))  				Logger.Instance.Write ("BDA Signal stats interface located for node type " + nodeTypes [nodeTypeIndex]);  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			IBDA_SignalStatistics signalStats = controlNode as IBDA_SignalStatistics;  			if (signalStats == null)  				Logger.Instance.Write ("BDA Can't get " + action + ": cast of control node failed");  			else {  				if (RunParameters.Instance.TraceIDs.Contains ("BDASIGSTATS"))  					Logger.Instance.Write ("BDA Adding signal stats interface to collection");  				signalStatsCollection.Add (signalStats);  			}  		}  	}  }  
Magic Number,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getSignalStatisticsInterfaces,The following statement contains a magic number: reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command' BurstModulationType.TONE_BURST_MODULATED);  	if (!reply)  		return (false);  	Thread.Sleep (150);  }  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 160' command.Length);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 164' 0);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 168' 3);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 168' 3);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 172' (byte)modulationType);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 176' (int)DisEqcVersion.DISEQC_VER_1X);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 180' (int)RxMode.RXMODE_NOREPLY);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 184' 1);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 0; index < 4; ++index)  	commandBytes [index] = Marshal.ReadByte (commandBuffer' index);  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 160; index < commandBufferLength; index = (index + 4))  	commandString.Append (" " + Marshal.ReadInt32 (commandBuffer' index));  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 160; index < commandBufferLength; index = (index + 4))  	commandString.Append (" " + Marshal.ReadInt32 (commandBuffer' index));  
Magic Number,DirectShow,ConexantDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ConexantDiseqcHandler.cs,sendCommand,The following statement contains a magic number: index = (index + 4)
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command);  	if (!reply)  		return (false);  	Thread.Sleep (150);  }  
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 2' 0xFF);  
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 3' 0x01);  
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 4' (byte)command.Length);  
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 0; index < command.Length; ++index)  	Marshal.WriteByte (commandBuffer' index + 5' command [index]);  
Magic Number,DirectShow,DigitalEverywhereDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DigitalEverywhereDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' index + 5' command [index]);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: switch (port) {  case "A":  	lnbNumber = 1;  	break;  case "B":  	lnbNumber = 2;  	break;  case "AA":  	lnbNumber = 1;  	break;  case "AB":  	lnbNumber = 2;  	break;  case "BA":  	lnbNumber = 3;  	break;  case "BB":  	lnbNumber = 4;  	break;  case "PORT1":  	lnbNumber = 5;  	break;  case "PORT2":  	lnbNumber = 6;  	break;  case "PORT3":  	lnbNumber = 7;  	break;  case "PORT4":  	lnbNumber = 8;  	break;  case "PORT5":  	lnbNumber = 9;  	break;  case "PORT6":  	lnbNumber = 10;  	break;  case "PORT7":  	lnbNumber = 11;  	break;  case "PORT8":  	lnbNumber = 12;  	break;  case "PORT9":  	lnbNumber = 13;  	break;  case "PORT10":  	lnbNumber = 14;  	break;  case "PORT11":  	lnbNumber = 15;  	break;  case "PORT12":  	lnbNumber = 16;  	break;  case "PORT13":  	lnbNumber = 17;  	break;  case "PORT14":  	lnbNumber = 18;  	break;  case "PORT15":  	lnbNumber = 19;  	break;  case "PORT16":  	lnbNumber = 20;  	break;  case "AAPORT1":  	lnbNumber = 21;  	break;  case "ABPORT1":  	lnbNumber = 22;  	break;  case "BAPORT1":  	lnbNumber = 23;  	break;  case "BBPORT1":  	lnbNumber = 24;  	break;  case "AAPORT2":  	lnbNumber = 25;  	break;  case "ABPORT2":  	lnbNumber = 26;  	break;  case "BAPORT2":  	lnbNumber = 27;  	break;  case "BBPORT2":  	lnbNumber = 28;  	break;  case "AAPORT3":  	lnbNumber = 29;  	break;  case "ABPORT3":  	lnbNumber = 30;  	break;  case "BAPORT3":  	lnbNumber = 31;  	break;  case "BBPORT3":  	lnbNumber = 32;  	break;  case "AAPORT4":  	lnbNumber = 33;  	break;  case "ABPORT4":  	lnbNumber = 34;  	break;  case "BAPORT4":  	lnbNumber = 35;  	break;  case "BBPORT4":  	lnbNumber = 36;  	break;  default:  	lnbNumber = -1;  	break;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 2;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 2;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 4;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 5;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 6;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 7;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 8;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 9;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 10;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 11;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 12;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 13;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 14;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 15;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 16;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 17;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 18;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 19;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 20;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 21;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 22;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 23;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 24;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 25;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 26;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 27;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 28;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 29;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 30;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 31;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 32;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 33;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 34;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 35;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetLnbNumber,The following statement contains a magic number: lnbNumber = 36;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,ConvertToHex,The following statement contains a magic number: for (int inputIndex = 0; inputIndex < byteData.Length; inputIndex++) {  	int hexByteLeft = byteData [inputIndex] >> 4;  	int hexByteRight = byteData [inputIndex] & 0x0f;  	outputChars [outputIndex] = getHex (hexByteLeft);  	outputChars [outputIndex + 1] = getHex (hexByteRight);  	outputIndex += 2;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,ConvertToHex,The following statement contains a magic number: for (int inputIndex = 0; inputIndex < byteData.Length; inputIndex++) {  	int hexByteLeft = byteData [inputIndex] >> 4;  	int hexByteRight = byteData [inputIndex] & 0x0f;  	outputChars [outputIndex] = getHex (hexByteLeft);  	outputChars [outputIndex + 1] = getHex (hexByteRight);  	outputIndex += 2;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,ConvertToHex,The following statement contains a magic number: outputIndex += 2;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,getHex,The following statement contains a magic number: if (value < 10)  	return ((char)('0' + value));  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,getHex,The following statement contains a magic number: return ((char)('a' + (value - 10)));  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 5) {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	//bit 0	(1)	: 0=low band' 1 = hi band  	//bit 1 (2) : 0=vertical' 1 = horizontal  	//bit 3 (4) : 0=satellite position A' 1=satellite position B  	//bit 4 (8) : 0=switch option A' 1=switch option  B  	// LNB    option  position  	// 1        A         A  	// 2        A         B  	// 3        B         A  	// 4        B         B  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  }  else {  	if (lnbNumber < 21) {  		commandBytes [2] = 0x39;  		commandBytes [3] = (byte)(lnbNumber - 5);  	}  	else {  		commandBytes [2] = 0x38;  		commandBytes [3] = 0xf0;  		bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  		bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  		commandBytes [3] |= (byte)(hiBand ? 1 : 0);  		commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  		if (lnbNumber >= 21 && lnbNumber <= 24)  			commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  		else {  			if (lnbNumber >= 25 && lnbNumber <= 28)  				commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  			else {  				if (lnbNumber >= 29 && lnbNumber <= 32)  					commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  				else  					commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  			}  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [2] = 0x38;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] = 0xf0;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)(hiBand ? 1 : 0);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 1) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber < 21) {  	commandBytes [2] = 0x39;  	commandBytes [3] = (byte)(lnbNumber - 5);  }  else {  	commandBytes [2] = 0x38;  	commandBytes [3] = 0xf0;  	bool hiBand = (tuningSpec.Frequency.Frequency > ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	bool isHorizontal = ((tuningSpec.NativeSignalPolarization == Polarisation.LinearH) || (tuningSpec.NativeSignalPolarization == Polarisation.CircularL));  	commandBytes [3] |= (byte)(hiBand ? 1 : 0);  	commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  			else  				commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [2] = 0x39;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] = (byte)(lnbNumber - 5);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] = (byte)(lnbNumber - 5);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [2] = 0x38;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] = 0xf0;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)(hiBand ? 1 : 0);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((isHorizontal) ? 2 : 0);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  		else  			commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 21) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  	else  		commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 25) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  else  	commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 29) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetCommand,The following statement contains a magic number: commandBytes [3] |= (byte)((lnbNumber - 33) << 2);  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber < 21 || lnbNumber > 36)  	return (null);  else {  	if (lnbNumber >= 21 && lnbNumber <= 24)  		commandBytes [3] = 0;  	else {  		if (lnbNumber >= 25 && lnbNumber <= 28)  			commandBytes [3] = 1;  		else {  			if (lnbNumber >= 29 && lnbNumber <= 32)  				commandBytes [3] = 2;  			else  				commandBytes [3] = 3;  		}  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 21 && lnbNumber <= 24)  	commandBytes [3] = 0;  else {  	if (lnbNumber >= 25 && lnbNumber <= 28)  		commandBytes [3] = 1;  	else {  		if (lnbNumber >= 29 && lnbNumber <= 32)  			commandBytes [3] = 2;  		else  			commandBytes [3] = 3;  	}  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: commandBytes [3] = 0;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 25 && lnbNumber <= 28)  	commandBytes [3] = 1;  else {  	if (lnbNumber >= 29 && lnbNumber <= 32)  		commandBytes [3] = 2;  	else  		commandBytes [3] = 3;  }  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: commandBytes [3] = 1;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] = 2;  else  	commandBytes [3] = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] = 2;  else  	commandBytes [3] = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] = 2;  else  	commandBytes [3] = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] = 2;  else  	commandBytes [3] = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] = 2;  else  	commandBytes [3] = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: if (lnbNumber >= 29 && lnbNumber <= 32)  	commandBytes [3] = 2;  else  	commandBytes [3] = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: commandBytes [3] = 2;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: commandBytes [3] = 2;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: commandBytes [3] = 3;  
Magic Number,DirectShow,DiseqcHandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\DiseqcHandlerBase.cs,GetSecondCommand,The following statement contains a magic number: commandBytes [3] = 3;  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processPort,The following statement contains a magic number: if (lnbNumber == 1)  	// mo tone/data burst is the default  	toneDataBurst = 0;  // tone burst for simple A  else {  	if (lnbNumber == 2)  		toneDataBurst = 1;  	// data burst for simple B  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processPort,The following statement contains a magic number: if (lnbNumber == 2)  	toneDataBurst = 1;  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processPort,The following statement contains a magic number: if (commandReply) {  	Thread.Sleep (150);  	commandReply = sendCommand (commandBytes' modulationType' toneDataBurst);  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command' BurstModulationType.TONE_BURST_MODULATED' 2);  	if (!reply)  		return (false);  	Thread.Sleep (150);  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command' BurstModulationType.TONE_BURST_MODULATED' 2);  	if (!reply)  		return (false);  	Thread.Sleep (150);  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  	//send message length  	Marshal.WriteByte (commandBuffer' 161' 0);  	//receive message length              	Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  	//phantom LNB burst - simple A/AA = unmodulated else modulated   	Marshal.WriteInt32 (commandBuffer' 166' 2);  	//phantom no reply   	Marshal.WriteInt32 (commandBuffer' 170' 3);  	//command mode  	Marshal.WriteByte (commandBuffer' 174' 0);  	//22hz off   	Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  	//tone/data  	Marshal.WriteByte (commandBuffer' 176' 0);  	//parity errors  	Marshal.WriteByte (commandBuffer' 177' 0);  	//reply errors   	Marshal.WriteInt32 (commandBuffer' 178' 1);  	//last message  	Marshal.WriteInt32 (commandBuffer' 182' 0);  	//lnb power  }  else  	Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 151' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 161' 0);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 162' (int)modulationType);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 166' 2);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 166' 2);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 170' 3);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 170' 3);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 174' 0);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 175' toneDataBurst);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 176' 0);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 177' 0);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 178' 1);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 182' 0);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (commandBuffer' 10' (byte)command.Length);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 151; index < commandBufferLength; index++)  	commandString.Append (" " + Marshal.ReadByte (commandBuffer' index).ToString ("X"));  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	int bytesReturned;  	reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 188' commandBuffer' 188' out bytesReturned);  	getSetString = "Get";  }  else {  	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 11' commandBuffer' 11);  	getSetString = "Set";  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	int bytesReturned;  	reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 188' commandBuffer' 188' out bytesReturned);  	getSetString = "Get";  }  else {  	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 11' commandBuffer' 11);  	getSetString = "Set";  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	int bytesReturned;  	reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 188' commandBuffer' 188' out bytesReturned);  	getSetString = "Get";  }  else {  	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 11' commandBuffer' 11);  	getSetString = "Set";  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: if (useGet) {  	int bytesReturned;  	reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 188' commandBuffer' 188' out bytesReturned);  	getSetString = "Get";  }  else {  	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 11' commandBuffer' 11);  	getSetString = "Set";  }  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 188' commandBuffer' 188' out bytesReturned);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: reply = propertySet.Get (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 188' commandBuffer' 188' out bytesReturned);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 11' commandBuffer' 11);  
Magic Number,DirectShow,ProfRedDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\ProfRedDiseqcHandler.cs,sendCommand,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' commandBuffer' 11' commandBuffer' 11);  
Magic Number,DirectShow,TechnoTrendDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TechnoTrendDiseqcHandler.cs,getDeviceID,The following statement contains a magic number: if (pKsPin != null) {  	IntPtr raw;  	reply = pKsPin.KsQueryMediums (out raw);  	DsError.ThrowExceptionForHR (reply);  	try {  		RegPinMedium rpm;  		IntPtr addr = new IntPtr (raw.ToInt32 () + 8);  		rpm = (RegPinMedium)Marshal.PtrToStructure (addr' typeof(RegPinMedium));  		return ((int)rpm.dw1);  	}  	finally {  		if (IntPtr.Zero != raw)  			Marshal.FreeCoTaskMem (raw);  	}  }  
Magic Number,DirectShow,TechnoTrendDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TechnoTrendDiseqcHandler.cs,getDeviceID,The following statement contains a magic number: try {  	RegPinMedium rpm;  	IntPtr addr = new IntPtr (raw.ToInt32 () + 8);  	rpm = (RegPinMedium)Marshal.PtrToStructure (addr' typeof(RegPinMedium));  	return ((int)rpm.dw1);  }  finally {  	if (IntPtr.Zero != raw)  		Marshal.FreeCoTaskMem (raw);  }  
Magic Number,DirectShow,TechnoTrendDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TechnoTrendDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,TechnoTrendDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TechnoTrendDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command' tuningSpec.NativeSignalPolarization);  	if (!reply)  		return (false);  	Thread.Sleep (150);  }  
Magic Number,DirectShow,TechnoTrendDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TechnoTrendDiseqcHandler.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,TeviiDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TeviiDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,TeviiDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TeviiDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command' index + 1 == commandStrings.Length);  	if (!reply)  		return (false);  	index++;  	Thread.Sleep (150);  }  
Magic Number,DirectShow,TeviiDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TeviiDiseqcHandler.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,TeviiDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TeviiDiseqcHandler.cs,sendCommand,The following statement contains a magic number: reply = SendDiSEqC (deviceNumber' command' 4' 0' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,TwinhanDiseqcHandler,The following statement contains a magic number: ptrDwBytesReturned = Marshal.AllocCoTaskMem (20);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,TwinhanDiseqcHandler,The following statement contains a magic number: thbdaBuf = Marshal.AllocCoTaskMem (8192);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,TwinhanDiseqcHandler,The following statement contains a magic number: ptrOutBuffer = Marshal.AllocCoTaskMem (8192);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,TwinhanDiseqcHandler,The following statement contains a magic number: ptrOutBuffer2 = Marshal.AllocCoTaskMem (8192);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,TwinhanDiseqcHandler,The following statement contains a magic number: ptrDiseqc = Marshal.AllocCoTaskMem (8192);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 8' 0x90);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 9' 0xf8);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 10' 0x85);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 11' 0x6a);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 12' 0x62);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 13' 0xcb);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 14' 0x3d);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 15' 0x67);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 24' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 32' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: switch (port) {  case "A":  	disEqcPort = 1;  	break;  case "B":  	disEqcPort = 2;  	break;  case "AA":  	disEqcPort = 1;  	break;  case "AB":  	disEqcPort = 2;  	break;  case "BA":  	disEqcPort = 3;  	break;  case "BB":  	disEqcPort = 4;  	break;  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: switch (port) {  case "A":  	disEqcPort = 1;  	break;  case "B":  	disEqcPort = 2;  	break;  case "AA":  	disEqcPort = 1;  	break;  case "AB":  	disEqcPort = 2;  	break;  case "BA":  	disEqcPort = 3;  	break;  case "BB":  	disEqcPort = 4;  	break;  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: switch (port) {  case "A":  	disEqcPort = 1;  	break;  case "B":  	disEqcPort = 2;  	break;  case "AA":  	disEqcPort = 1;  	break;  case "AB":  	disEqcPort = 2;  	break;  case "BA":  	disEqcPort = 3;  	break;  case "BB":  	disEqcPort = 4;  	break;  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: switch (port) {  case "A":  	disEqcPort = 1;  	break;  case "B":  	disEqcPort = 2;  	break;  case "AA":  	disEqcPort = 1;  	break;  case "AB":  	disEqcPort = 2;  	break;  case "BA":  	disEqcPort = 3;  	break;  case "BB":  	disEqcPort = 4;  	break;  }  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: disEqcPort = 2;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: disEqcPort = 2;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: disEqcPort = 3;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: disEqcPort = 4;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: if (tuningSpec.Frequency.Frequency >= (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency)) {  	isHiBand = true;  	turnon22Khz = 2;  }  else  	turnon22Khz = 1;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following statement contains a magic number: turnon22Khz = 2;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 2' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 3' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (ptrDiseqc' 4' satelliteDish.LNBLowBandFrequency / 1000);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (ptrDiseqc' 4' satelliteDish.LNBLowBandFrequency / 1000);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (ptrDiseqc' 8' satelliteDish.LNBHighBandFrequency / 1000);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (ptrDiseqc' 8' satelliteDish.LNBHighBandFrequency / 1000);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (ptrDiseqc' 12' satelliteDish.LNBSwitchFrequency / 1000);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (ptrDiseqc' 12' satelliteDish.LNBSwitchFrequency / 1000);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 16' (byte)turnon22Khz);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 17' (byte)disEqcPort);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 18' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 19' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 8' 0x90);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 9' 0xf8);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 10' 0x85);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 11' 0x6a);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 12' 0x62);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 13' 0xcb);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 14' 0x3d);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 15' 0x67);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_SET_LNB_DATA);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 20' (int)ptrDiseqc.ToInt32 ());  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 24' disEqcLen);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 32' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,setLnbData,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendDiseqcCommand,The following statement contains a magic number: command |= (byte)((isHorizontal) ? 2 : 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendDiseqcCommand,The following statement contains a magic number: command |= (byte)((disEqcPort - 1) << 2);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendDiseqcCommand,The following statement contains a magic number: commandBytes [2] = 0x38;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendDiseqcCommand,The following statement contains a magic number: commandBytes [3] = command;  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 0; index < 12; ++index)  	Marshal.WriteByte (ptrDiseqc' 4 + index' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 0; index < 12; ++index)  	Marshal.WriteByte (ptrDiseqc' 4 + index' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 4 + index' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 0; index < command.Length; ++index)  	Marshal.WriteByte (ptrDiseqc' 4 + index' command [index]);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (ptrDiseqc' 4 + index' command [index]);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 8' 0x90);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 9' 0xf8);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 10' 0x85);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 11' 0x6a);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 12' 0x62);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 13' 0xcb);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 14' 0x3d);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 15' 0x67);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_SET_DiSEqC);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 20' (int)ptrDiseqc.ToInt32 ());  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 24' disEqcLen);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 32' 0);  
Magic Number,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  
Magic Number,DirectShow,Win7APIDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\Win7APIDiseqc.cs,Win7APIDiseqcHandler,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_DiseqCommand).GUID) {  			if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  				Logger.Instance.Write ("BDA DiSEqC interface located for node type " + nodeTypes [nodeTypeIndex]);  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			commandInterface = controlNode as IBDA_DiseqCommand;  			if (commandInterface == null) {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA Can't use DiSEqC interface: cast of control node failed");  			}  			else {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA DiSEqC interface available");  				return;  			}  		}  	}  }  
Magic Number,DirectShow,Win7APIDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\Win7APIDiseqc.cs,Win7APIDiseqcHandler,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_DiseqCommand).GUID) {  			if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  				Logger.Instance.Write ("BDA DiSEqC interface located for node type " + nodeTypes [nodeTypeIndex]);  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			commandInterface = controlNode as IBDA_DiseqCommand;  			if (commandInterface == null) {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA Can't use DiSEqC interface: cast of control node failed");  			}  			else {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA DiSEqC interface available");  				return;  			}  		}  	}  }  
Magic Number,DirectShow,Win7APIDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\Win7APIDiseqc.cs,Win7APIDiseqcHandler,The following statement contains a magic number: reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  
Magic Number,DirectShow,Win7APIDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\Win7APIDiseqc.cs,processPort,The following statement contains a magic number: return (sendCommand (2' commandBytes));  
Magic Number,DirectShow,Win7APIDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\Win7APIDiseqc.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] commandBytes = GetCommand (commandString.Trim ());  	bool sendReply = sendCommand (requestID' commandBytes);  	if (!sendReply)  		return (false);  	Thread.Sleep (150);  	requestID++;  }  
Magic Number,DirectShow,Win7APIDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\Win7APIDiseqc.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: if (satelliteFrequency.Pilot == DomainObjects.Pilot.Off)  	newCodeRate += 64;  else {  	if (satelliteFrequency.Pilot == DomainObjects.Pilot.On)  		newCodeRate += 128;  }  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: if (satelliteFrequency.Pilot == DomainObjects.Pilot.Off)  	newCodeRate += 64;  else {  	if (satelliteFrequency.Pilot == DomainObjects.Pilot.On)  		newCodeRate += 128;  }  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: newCodeRate += 64;  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: if (satelliteFrequency.Pilot == DomainObjects.Pilot.On)  	newCodeRate += 128;  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: newCodeRate += 128;  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: switch (satelliteFrequency.RollOff) {  case DomainObjects.RollOff.RollOff20:  	newCodeRate += 16;  	break;  case DomainObjects.RollOff.RollOff25:  	newCodeRate += 32;  	break;  case DomainObjects.RollOff.RollOff35:  	newCodeRate += 48;  	break;  default:  	break;  }  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: switch (satelliteFrequency.RollOff) {  case DomainObjects.RollOff.RollOff20:  	newCodeRate += 16;  	break;  case DomainObjects.RollOff.RollOff25:  	newCodeRate += 32;  	break;  case DomainObjects.RollOff.RollOff35:  	newCodeRate += 48;  	break;  default:  	break;  }  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: switch (satelliteFrequency.RollOff) {  case DomainObjects.RollOff.RollOff20:  	newCodeRate += 16;  	break;  case DomainObjects.RollOff.RollOff25:  	newCodeRate += 32;  	break;  case DomainObjects.RollOff.RollOff35:  	newCodeRate += 48;  	break;  default:  	break;  }  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: newCodeRate += 16;  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: newCodeRate += 32;  
Magic Number,DirectShow,DigitalEverywhereDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DigitalEverywhereDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: newCodeRate += 48;  
Magic Number,DirectShow,DVBS2HandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DVBS2HandlerBase.cs,FindDemodulator,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  }  
Magic Number,DirectShow,DVBS2HandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DVBS2HandlerBase.cs,FindDemodulator,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  }  
Magic Number,DirectShow,DVBS2HandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DVBS2HandlerBase.cs,FindDemodulator,The following statement contains a magic number: reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  
Magic Number,DirectShow,DVBS2HandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DVBS2HandlerBase.cs,FindDemodulator,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_DigitalDemodulator).GUID) {  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			IBDA_DigitalDemodulator demodulator = controlNode as IBDA_DigitalDemodulator;  			if (demodulator == null)  				Logger.Instance.Write (identifier + " DVB-S2 handler: Can't get demodulator: cast of control node failed");  			else {  				Logger.Instance.Write (identifier + " DVB-S2 handler: Demodulator interface located");  				return (demodulator);  			}  		}  	}  }  
Magic Number,DirectShow,DVBS2HandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DVBS2HandlerBase.cs,FindDemodulator,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_DigitalDemodulator).GUID) {  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			IBDA_DigitalDemodulator demodulator = controlNode as IBDA_DigitalDemodulator;  			if (demodulator == null)  				Logger.Instance.Write (identifier + " DVB-S2 handler: Can't get demodulator: cast of control node failed");  			else {  				Logger.Instance.Write (identifier + " DVB-S2 handler: Demodulator interface located");  				return (demodulator);  			}  		}  	}  }  
Magic Number,DirectShow,DVBS2HandlerBase,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\DVBS2HandlerBase.cs,FindDemodulator,The following statement contains a magic number: reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: if (frequency.SymbolRate != 30000) {  	Marshal.WriteInt32 (commandBuffer' (int)DsUtils.GetNativePilot (frequency.Pilot));  	setting = frequency.Pilot.ToString ();  }  else {  	Logger.Instance.Write ("Hauppauge DVB-S2 handler: Setting pilot to off for symbol rate of 30000");  	Marshal.WriteInt32 (commandBuffer' (int)DirectShowAPI.Pilot.Off);  	setting = "Off";  }  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' instanceBuffer' 32' commandBuffer' 4);  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' instanceBuffer' 32' commandBuffer' 4);  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: if (reply != 0) {  	Logger.Instance.Write ("Hauppauge DVB-S2 handler: Set Pilot command failed error code 0x" + reply.ToString ("X"));  	return (false);  }  else {  	Logger.Instance.Write ("Hauppauge DVB-S2 handler: Pilot set to " + setting);  	Marshal.WriteInt32 (commandBuffer' (int)DsUtils.GetNativeRollOff (frequency.RollOff));  	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_ROLL_OFF' instanceBuffer' 32' commandBuffer' 4);  	if (reply != 0) {  		Logger.Instance.Write ("Hauppauge DVB-S2 handler: Set Rolloff command failed error code 0x" + reply.ToString ("X"));  		return (false);  	}  	else  		Logger.Instance.Write ("Hauppauge DVB-S2 handler: Rolloff set to " + frequency.RollOff);  }  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: if (reply != 0) {  	Logger.Instance.Write ("Hauppauge DVB-S2 handler: Set Pilot command failed error code 0x" + reply.ToString ("X"));  	return (false);  }  else {  	Logger.Instance.Write ("Hauppauge DVB-S2 handler: Pilot set to " + setting);  	Marshal.WriteInt32 (commandBuffer' (int)DsUtils.GetNativeRollOff (frequency.RollOff));  	reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_ROLL_OFF' instanceBuffer' 32' commandBuffer' 4);  	if (reply != 0) {  		Logger.Instance.Write ("Hauppauge DVB-S2 handler: Set Rolloff command failed error code 0x" + reply.ToString ("X"));  		return (false);  	}  	else  		Logger.Instance.Write ("Hauppauge DVB-S2 handler: Rolloff set to " + frequency.RollOff);  }  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_ROLL_OFF' instanceBuffer' 32' commandBuffer' 4);  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_ROLL_OFF' instanceBuffer' 32' commandBuffer' 4);  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,ClearDVBS2Parameters,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' instanceBuffer' 32' commandBuffer' 4);  
Magic Number,DirectShow,HauppaugeDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\HauppaugeDVBS2Handler.cs,ClearDVBS2Parameters,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' instanceBuffer' 32' commandBuffer' 4);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: switch (frequency.RollOff) {  case DomainObjects.RollOff.RollOff20:  	Marshal.WriteInt32 (commandBuffer' 0' 0);  	break;  case DomainObjects.RollOff.RollOff25:  	Marshal.WriteInt32 (commandBuffer' 0' 1);  	break;  case DomainObjects.RollOff.RollOff35:  	Marshal.WriteInt32 (commandBuffer' 0' 2);  	break;  default:  	Marshal.WriteInt32 (commandBuffer' 0' 0xff);  	break;  }  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 0' 2);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: switch (frequency.Pilot) {  case DomainObjects.Pilot.Off:  	Marshal.WriteInt32 (commandBuffer' 4' 0);  	break;  case DomainObjects.Pilot.On:  	Marshal.WriteInt32 (commandBuffer' 4' 1);  	break;  default:  	Marshal.WriteInt32 (commandBuffer' 4' 1);  	break;  }  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: switch (frequency.Pilot) {  case DomainObjects.Pilot.Off:  	Marshal.WriteInt32 (commandBuffer' 4' 0);  	break;  case DomainObjects.Pilot.On:  	Marshal.WriteInt32 (commandBuffer' 4' 1);  	break;  default:  	Marshal.WriteInt32 (commandBuffer' 4' 1);  	break;  }  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: switch (frequency.Pilot) {  case DomainObjects.Pilot.Off:  	Marshal.WriteInt32 (commandBuffer' 4' 0);  	break;  case DomainObjects.Pilot.On:  	Marshal.WriteInt32 (commandBuffer' 4' 1);  	break;  default:  	Marshal.WriteInt32 (commandBuffer' 4' 1);  	break;  }  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 4' 0);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 4' 1);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 4' 1);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 8' 2);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 8' 2);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 12' (int)tuningSpec.NativeFECRate);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 16' (int)ModulationType.ModBpsk);  
Magic Number,DirectShow,TBSDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TBSDVBS2Handler.cs,SetDVBS2Parameters,The following statement contains a magic number: for (int index = 0; index < 20; ++index) {  	int commandByte = Marshal.ReadByte (commandBuffer' index);  	if (commandByte < 0x10)  		commandString.Append ("0" + commandByte.ToString ("X"));  	else  		commandString.Append (commandByte.ToString ("X"));  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	int thbdaLen = 0x28;  	IntPtr thbdaBuf = Marshal.AllocCoTaskMem (thbdaLen);  	try {  		Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  		Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  		Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  		Marshal.WriteByte (thbdaBuf' 8' 0x90);  		Marshal.WriteByte (thbdaBuf' 9' 0xf8);  		Marshal.WriteByte (thbdaBuf' 10' 0x85);  		Marshal.WriteByte (thbdaBuf' 11' 0x6a);  		Marshal.WriteByte (thbdaBuf' 12' 0x62);  		Marshal.WriteByte (thbdaBuf' 13' 0xcb);  		Marshal.WriteByte (thbdaBuf' 14' 0x3d);  		Marshal.WriteByte (thbdaBuf' 15' 0x67);  		Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  		//control code  		Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 24' 0);  		Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  		Marshal.WriteInt32 (thbdaBuf' 32' 0);  		Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  		IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  		if (pin != null) {  			IKsPropertySet propertySet = pin as IKsPropertySet;  			if (propertySet != null) {  				reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  				if (reply == 0)  					success = true;  				Marshal.ReleaseComObject (propertySet);  			}  			Marshal.ReleaseComObject (pin);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (thbdaBuf);  	}  }  finally {  	Marshal.FreeCoTaskMem (ptrDwBytesReturned);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: try {  	Marshal.WriteInt32 (thbdaBuf' 0' 0x255e0082);  	Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  	Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  	Marshal.WriteByte (thbdaBuf' 8' 0x90);  	Marshal.WriteByte (thbdaBuf' 9' 0xf8);  	Marshal.WriteByte (thbdaBuf' 10' 0x85);  	Marshal.WriteByte (thbdaBuf' 11' 0x6a);  	Marshal.WriteByte (thbdaBuf' 12' 0x62);  	Marshal.WriteByte (thbdaBuf' 13' 0xcb);  	Marshal.WriteByte (thbdaBuf' 14' 0x3d);  	Marshal.WriteByte (thbdaBuf' 15' 0x67);  	Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  	//control code  	Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 24' 0);  	Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  	Marshal.WriteInt32 (thbdaBuf' 32' 0);  	Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  	IPin pin = DsFindPin.ByDirection (captureFilter' PinDirection.Input' 0);  	if (pin != null) {  		IKsPropertySet propertySet = pin as IKsPropertySet;  		if (propertySet != null) {  			reply = propertySet.Set (THBDA_TUNER' 0' thbdaBuf' thbdaLen' thbdaBuf' thbdaLen);  			if (reply == 0)  				success = true;  			Marshal.ReleaseComObject (propertySet);  		}  		Marshal.ReleaseComObject (pin);  	}  }  finally {  	Marshal.FreeCoTaskMem (thbdaBuf);  }  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 4' 0x2017);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt16 (thbdaBuf' 6' 0x4b03);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 8' 0x90);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 9' 0xf8);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 10' 0x85);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 11' 0x6a);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 12' 0x62);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 13' 0xcb);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 14' 0x3d);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteByte (thbdaBuf' 15' 0x67);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 16' (int)THBDA_IOCTL_CHECK_INTERFACE);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 20' (int)IntPtr.Zero);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 24' 0);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 28' (int)IntPtr.Zero);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 32' 0);  
Magic Number,DirectShow,TwinhanDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\TwinhanDVBS2Handler.cs,checkTwinhanInterface,The following statement contains a magic number: Marshal.WriteInt32 (thbdaBuf' 36' (int)ptrDwBytesReturned);  
Magic Number,DirectShow,Win7APIDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\Win7APIDVBS2Handler.cs,Win7APIDVBS2Handler,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_DigitalDemodulator2).GUID) {  			if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  				Logger.Instance.Write ("BDA DVB-S2 interface located for node type " + nodeTypes [nodeTypeIndex]);  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			commandInterface = controlNode as IBDA_DigitalDemodulator2;  			if (commandInterface == null) {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA Can't use DVB-S2 interface: cast of control node failed");  			}  			else {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA DVB-S2 interface available");  				return;  			}  		}  	}  }  
Magic Number,DirectShow,Win7APIDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\Win7APIDVBS2Handler.cs,Win7APIDVBS2Handler,The following statement contains a magic number: for (int nodeTypeIndex = 0; nodeTypeIndex < nodeTypeCount; nodeTypeIndex++) {  	int interfaceCount;  	Guid[] interfaces = new Guid[32];  	reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  	DsError.ThrowExceptionForHR (reply);  	for (int searchIndex = 0; searchIndex < interfaceCount; searchIndex++) {  		if (interfaces [searchIndex] == typeof(IBDA_DigitalDemodulator2).GUID) {  			if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  				Logger.Instance.Write ("BDA DVB-S2 interface located for node type " + nodeTypes [nodeTypeIndex]);  			object controlNode;  			reply = topology.GetControlNode (0' 1' nodeTypes [nodeTypeIndex]' out controlNode);  			DsError.ThrowExceptionForHR (reply);  			commandInterface = controlNode as IBDA_DigitalDemodulator2;  			if (commandInterface == null) {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA Can't use DVB-S2 interface: cast of control node failed");  			}  			else {  				if (RunParameters.Instance.TraceIDs.Contains ("BDA"))  					Logger.Instance.Write ("BDA DVB-S2 interface available");  				return;  			}  		}  	}  }  
Magic Number,DirectShow,Win7APIDVBS2Handler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DVBS2Handlers\Win7APIDVBS2Handler.cs,Win7APIDVBS2Handler,The following statement contains a magic number: reply = topology.GetNodeInterfaces (nodeTypes [nodeTypeIndex]' out interfaceCount' 32' interfaces);  
Magic Number,DirectShow,GenPixDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\GenPixDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,GenPixDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\GenPixDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command);  	if (!reply)  		return (false);  	Thread.Sleep (150);  }  
Magic Number,DirectShow,GenPixDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\GenPixDiseqcHandler.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,GenPixDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\GenPixDiseqcHandler.cs,sendCommand,The following statement contains a magic number: reply = propertySet.Set (bdaTunerExtensionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC' replyBuffer' 32' commandBuffer' length);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,processPort,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,processCommands,The following statement contains a magic number: foreach (string commandString in commandStrings) {  	byte[] command = GetCommand (commandString.Trim ());  	bool reply = sendCommand (command' BurstModulationType.TONE_BURST_MODULATED);  	if (!reply)  		return (false);  	Thread.Sleep (150);  }  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,processCommands,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 160' command.Length);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 164' 0);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 168' 3);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 168' 3);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 172' (byte)modulationType);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 176' (int)DisEqcVersion.DISEQC_VER_1X);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 180' (int)RxMode.RXMODE_NOREPLY);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: Marshal.WriteInt32 (commandBuffer' 184' 1);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 0; index < 4; ++index)  	commandBytes [index] = Marshal.ReadByte (commandBuffer' index);  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 160; index < commandBufferLength; index = (index + 4))  	commandString.Append (" " + Marshal.ReadInt32 (commandBuffer' index));  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: for (int index = 160; index < commandBufferLength; index = (index + 4))  	commandString.Append (" " + Marshal.ReadInt32 (commandBuffer' index));  
Magic Number,DirectShow,HauppaugeDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\HaupaugeDiseqcHandler.cs,sendCommand,The following statement contains a magic number: index = (index + 4)
Magic Number,DirectShow,Mpeg2Section,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\Mpeg2Section.cs,calculateCRC,The following statement contains a magic number: for (int index = 0; index < length; index++)  	crc = (crc << 8) ^ crctab [((crc >> 24) ^ byteData [index + offset]) & 0xff];  
Magic Number,DirectShow,Mpeg2Section,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\Mpeg2Section.cs,calculateCRC,The following statement contains a magic number: for (int index = 0; index < length; index++)  	crc = (crc << 8) ^ crctab [((crc >> 24) ^ byteData [index + offset]) & 0xff];  
Magic Number,DirectShow,Mpeg2Section,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\Mpeg2Section.cs,calculateCRC,The following statement contains a magic number: crc = (crc << 8) ^ crctab [((crc >> 24) ^ byteData [index + offset]) & 0xff];  
Magic Number,DirectShow,Mpeg2Section,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\Mpeg2Section.cs,calculateCRC,The following statement contains a magic number: crc = (crc << 8) ^ crctab [((crc >> 24) ^ byteData [index + offset]) & 0xff];  
Magic Number,DirectShow,DirectShowGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowGraph.cs,Pause,The following statement contains a magic number: if (pause) {  	reply = mediaControl.Pause ();  	Thread.Sleep (250);  }  else  	reply = mediaControl.Run ();  
Magic Number,DirectShow,DirectShowGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowGraph.cs,Pause,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: if (continuityCount == -1)  	continuityCount = transportPacket.ContinuityCount;  else {  	continuityCount++;  	if (continuityCount > 15)  		continuityCount = 0;  	if (transportPacket.ContinuityCount != continuityCount) {  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Write (getPidID () + "Continuity count failure: " + continuityCount + ":" + transportPacket.ContinuityCount);  		continuityCount = transportPacket.ContinuityCount;  		status = handlerStatus.awaitingStart;  		discontinuities++;  	}  }  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: if (continuityCount > 15)  	continuityCount = 0;  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: switch (status) {  case handlerStatus.awaitingStart:  	if (!transportPacket.StartIndicator) {  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Write (getPidID () + "Not start block");  		return;  	}  	packetIndex = siPacket.DataIndex;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingLengthByte1:  	packetIndex = siPacket.Index;  	lengthByte1 = siPacket.ByteData [packetIndex];  	if (packetIndex == siPacket.ByteData.Length - 1) {  		status = handlerStatus.awaitingLengthByte2;  		return;  	}  	packetIndex++;  	lengthByte2 = siPacket.ByteData [packetIndex];  	packetIndex++;  	length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  	done = createMpeg2Section (sections);  	if (!done)  		return;  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingLengthByte2:  	packetIndex = siPacket.Index;  	lengthByte2 = siPacket.ByteData [packetIndex];  	packetIndex++;  	length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  	done = createMpeg2Section (sections);  	if (!done)  		return;  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingMoreData:  	packetIndex = siPacket.Index;  	for (; sectionIndex < length + 3; sectionIndex++) {  		if (packetIndex == siPacket.ByteData.Length) {  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Write (getPidID () + "Need more data");  			status = handlerStatus.awaitingMoreData;  			return;  		}  		mpeg2Section.Data [sectionIndex] = siPacket.ByteData [packetIndex];  		packetIndex++;  	}  	if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  		Logger.Instance.Write (getPidID () + "Got table");  	if ((mpeg2Section.Data [1] & 0x80) != 0) {  		bool checkCRC = mpeg2Section.CheckCRC ();  		if (!checkCRC) {  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Write (getPidID () + "CRC failed");  		}  		else {  			sections.Add (mpeg2Section);  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Dump (getPidID () + "MPEG2 Section"' mpeg2Section.Data' mpeg2Section.Data.Length);  		}  	}  	else {  		sections.Add (mpeg2Section);  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Dump (getPidID () + "MPEG2 Section"' mpeg2Section.Data' mpeg2Section.Data.Length);  	}  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  default:  	break;  }  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: switch (status) {  case handlerStatus.awaitingStart:  	if (!transportPacket.StartIndicator) {  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Write (getPidID () + "Not start block");  		return;  	}  	packetIndex = siPacket.DataIndex;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingLengthByte1:  	packetIndex = siPacket.Index;  	lengthByte1 = siPacket.ByteData [packetIndex];  	if (packetIndex == siPacket.ByteData.Length - 1) {  		status = handlerStatus.awaitingLengthByte2;  		return;  	}  	packetIndex++;  	lengthByte2 = siPacket.ByteData [packetIndex];  	packetIndex++;  	length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  	done = createMpeg2Section (sections);  	if (!done)  		return;  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingLengthByte2:  	packetIndex = siPacket.Index;  	lengthByte2 = siPacket.ByteData [packetIndex];  	packetIndex++;  	length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  	done = createMpeg2Section (sections);  	if (!done)  		return;  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingMoreData:  	packetIndex = siPacket.Index;  	for (; sectionIndex < length + 3; sectionIndex++) {  		if (packetIndex == siPacket.ByteData.Length) {  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Write (getPidID () + "Need more data");  			status = handlerStatus.awaitingMoreData;  			return;  		}  		mpeg2Section.Data [sectionIndex] = siPacket.ByteData [packetIndex];  		packetIndex++;  	}  	if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  		Logger.Instance.Write (getPidID () + "Got table");  	if ((mpeg2Section.Data [1] & 0x80) != 0) {  		bool checkCRC = mpeg2Section.CheckCRC ();  		if (!checkCRC) {  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Write (getPidID () + "CRC failed");  		}  		else {  			sections.Add (mpeg2Section);  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Dump (getPidID () + "MPEG2 Section"' mpeg2Section.Data' mpeg2Section.Data.Length);  		}  	}  	else {  		sections.Add (mpeg2Section);  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Dump (getPidID () + "MPEG2 Section"' mpeg2Section.Data' mpeg2Section.Data.Length);  	}  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  default:  	break;  }  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: switch (status) {  case handlerStatus.awaitingStart:  	if (!transportPacket.StartIndicator) {  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Write (getPidID () + "Not start block");  		return;  	}  	packetIndex = siPacket.DataIndex;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingLengthByte1:  	packetIndex = siPacket.Index;  	lengthByte1 = siPacket.ByteData [packetIndex];  	if (packetIndex == siPacket.ByteData.Length - 1) {  		status = handlerStatus.awaitingLengthByte2;  		return;  	}  	packetIndex++;  	lengthByte2 = siPacket.ByteData [packetIndex];  	packetIndex++;  	length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  	done = createMpeg2Section (sections);  	if (!done)  		return;  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingLengthByte2:  	packetIndex = siPacket.Index;  	lengthByte2 = siPacket.ByteData [packetIndex];  	packetIndex++;  	length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  	done = createMpeg2Section (sections);  	if (!done)  		return;  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  case handlerStatus.awaitingMoreData:  	packetIndex = siPacket.Index;  	for (; sectionIndex < length + 3; sectionIndex++) {  		if (packetIndex == siPacket.ByteData.Length) {  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Write (getPidID () + "Need more data");  			status = handlerStatus.awaitingMoreData;  			return;  		}  		mpeg2Section.Data [sectionIndex] = siPacket.ByteData [packetIndex];  		packetIndex++;  	}  	if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  		Logger.Instance.Write (getPidID () + "Got table");  	if ((mpeg2Section.Data [1] & 0x80) != 0) {  		bool checkCRC = mpeg2Section.CheckCRC ();  		if (!checkCRC) {  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Write (getPidID () + "CRC failed");  		}  		else {  			sections.Add (mpeg2Section);  			if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  				Logger.Instance.Dump (getPidID () + "MPEG2 Section"' mpeg2Section.Data' mpeg2Section.Data.Length);  		}  	}  	else {  		sections.Add (mpeg2Section);  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Dump (getPidID () + "MPEG2 Section"' mpeg2Section.Data' mpeg2Section.Data.Length);  	}  	status = handlerStatus.awaitingStart;  	while (packetIndex < siPacket.ByteData.Length)  		processNewSection (byteData' transportPacket' sections);  	break;  default:  	break;  }  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,Process,The following statement contains a magic number: for (; sectionIndex < length + 3; sectionIndex++) {  	if (packetIndex == siPacket.ByteData.Length) {  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Write (getPidID () + "Need more data");  		status = handlerStatus.awaitingMoreData;  		return;  	}  	mpeg2Section.Data [sectionIndex] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,processNewSection,The following statement contains a magic number: length = ((lengthByte1 & 0x0f) * 256) + lengthByte2;  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,createMpeg2Section,The following statement contains a magic number: mpeg2Section.Data = new byte[length + 3];  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,createMpeg2Section,The following statement contains a magic number: mpeg2Section.Length = length + 3;  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,createMpeg2Section,The following statement contains a magic number: mpeg2Section.Data [2] = lengthByte2;  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,createMpeg2Section,The following statement contains a magic number: for (sectionIndex = 3; sectionIndex < length + 3; sectionIndex++) {  	if (packetIndex == siPacket.ByteData.Length) {  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Write (getPidID () + "Need more data");  		status = handlerStatus.awaitingMoreData;  		return (false);  	}  	mpeg2Section.Data [sectionIndex] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,createMpeg2Section,The following statement contains a magic number: for (sectionIndex = 3; sectionIndex < length + 3; sectionIndex++) {  	if (packetIndex == siPacket.ByteData.Length) {  		if (RunParameters.Instance.TraceIDs.Contains ("PIDHANDLER"))  			Logger.Instance.Write (getPidID () + "Need more data");  		status = handlerStatus.awaitingMoreData;  		return (false);  	}  	mpeg2Section.Data [sectionIndex] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,PidHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PidHandler.cs,createMpeg2Section,The following statement contains a magic number: sectionIndex = 3
Magic Number,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,ChangePidMapping,The following statement contains a magic number: for (int index = 0; index < 128; index += 4)  	Marshal.WriteInt32 (bufferAddress' pidListOffset + index' -1);  
Magic Number,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,ChangePidMapping,The following statement contains a magic number: for (int index = 0; index < 128; index += 4)  	Marshal.WriteInt32 (bufferAddress' pidListOffset + index' -1);  
Magic Number,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,ChangePidMapping,The following statement contains a magic number: index += 4
Magic Number,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,ChangePidMapping,The following statement contains a magic number: for (int index = 0; index < pids.Length; index++) {  	Marshal.WriteInt32 (bufferAddress' pidListOffset + pidPointer' pids [index]);  	pidPointer += 4;  }  
Magic Number,DirectShow,PluginDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\PluginDataProvider.cs,ChangePidMapping,The following statement contains a magic number: pidPointer += 4;  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,RecordingAttribute,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\RecordingAttribute.cs,getAttribute,The following statement contains a magic number: switch (attributeType) {  case StreamBufferAttrDataType.Binary:  	RecordingAttribute binaryAttribute = new RecordingAttribute (attributeName' type' attributeValue);  	return (binaryAttribute);  case StreamBufferAttrDataType.Bool:  	RecordingAttribute boolAttribute = new RecordingAttribute (attributeName' type' attributeValue [0] == 0);  	return (boolAttribute);  case StreamBufferAttrDataType.DWord:  	int intValue = attributeValue [0] << 24 | attributeValue [1] << 16 | attributeValue [2] << 8 | attributeValue [3];  	RecordingAttribute intAttribute = new RecordingAttribute (attributeName' type' intValue);  	return (intAttribute);  case StreamBufferAttrDataType.Guid:  	RecordingAttribute guidAttribute = new RecordingAttribute (attributeName' type' new Guid (attributeValue));  	return (guidAttribute);  case StreamBufferAttrDataType.QWord:  	long longValue = attributeValue [0] << 56 | attributeValue [1] << 48 | attributeValue [2] << 40 | attributeValue [3] << 32 | attributeValue [4] << 24 | attributeValue [5] << 16 | attributeValue [6] << 8 | attributeValue [7];  	RecordingAttribute longAttribute = new RecordingAttribute (attributeName' type' longValue);  	return (longAttribute);  case StreamBufferAttrDataType.String:  	Encoding sourceEncoding = Encoding.GetEncoding ("utf-16");  	if (sourceEncoding == null)  		return (null);  	string encodedString = sourceEncoding.GetString (attributeValue' 0' attributeValue.Length);  	RecordingAttribute stringAttribute = new RecordingAttribute (attributeName' type' encodedString);  	return (stringAttribute);  case StreamBufferAttrDataType.Word:  	int shortValue = attributeValue [0] << 8 | attributeValue [1];  	RecordingAttribute shortAttribute = new RecordingAttribute (attributeName' type' shortValue);  	return (shortAttribute);  default:  	return (null);  }  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,Run,The following statement contains a magic number: try {  	fileStream = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read' 2048' false);  }  catch (IOException e) {  	return (e.Message);  }  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,Run,The following statement contains a magic number: fileStream = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read' 2048' false);  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,Run,The following statement contains a magic number: offset = new IntPtr (memoryBlock.ToInt64 () + 136);  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,Stop,The following statement contains a magic number: if (running) {  	backgroundWorker.CancelAsync ();  	bool reply = resetEvent.WaitOne (new TimeSpan (0' 0' 40));  	running = false;  }  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,fillBuffer,The following statement contains a magic number: if (pids == null) {  	Thread.Sleep (100);  	return (false);  }  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,fillBuffer,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,fillBuffer,The following statement contains a magic number: if (size + 136 + packetSize > memorySize) {  	return (false);  }  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,getPacket,The following statement contains a magic number: if (sampleBufferIndex + packetSize >= sampleBufferLength) {  	int readOffset = 0;  	if (sampleBufferLength != 0) {  		if (sampleBufferIndex + packetSize != sampleBufferLength) {  			for (readOffset = 0; sampleBufferIndex < sampleBufferLength; readOffset++) {  				sampleBuffer [readOffset] = sampleBuffer [sampleBufferIndex];  				sampleBufferIndex++;  			}  		}  	}  	sampleBufferLength = fileStream.Read (sampleBuffer' readOffset' (packetSize * 512) - readOffset) + readOffset;  	if (sampleBufferLength < packetSize) {  		sampleBufferLength = 0;  		return (0);  	}  	else  		sampleBufferIndex = 0;  }  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,getPacket,The following statement contains a magic number: sampleBufferLength = fileStream.Read (sampleBuffer' readOffset' (packetSize * 512) - readOffset) + readOffset;  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,ChangePidMapping,The following statement contains a magic number: while (backgroundWorker != null)  	Thread.Sleep (1000);  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,ChangePidMapping,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DirectShow,SimulationDataProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\SimulationDataProvider.cs,ChangePidMapping,The following statement contains a magic number: offset = new IntPtr (memoryBlock.ToInt64 () + 136);  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: try {  	syncByte = byteData [lastIndex];  	lastIndex++;  	errorIndicator = (byteData [lastIndex] & 0x80) != 0;  	startIndicator = (byteData [lastIndex] & 0x40) != 0;  	priorityIndicator = (byteData [lastIndex] & 0x20) != 0;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	scramblingControl = byteData [lastIndex] >> 6;  	adaptionControl = (byteData [lastIndex] & 0x30) >> 4;  	continuityCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (adaptionControl) {  	case 1:  		adaptionLength = 0;  		break;  	case 2:  	case 3:  		adaptionLength = (int)byteData [lastIndex];  		lastIndex += adaptionLength;  		break;  	default:  		break;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	Logger.Instance.Dump ("Failing Transport Packet"' byteData' byteData.Length);  	throw (new ArgumentOutOfRangeException ("Block length: " + byteData.Length + " last index: " + lastIndex));  }  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: try {  	syncByte = byteData [lastIndex];  	lastIndex++;  	errorIndicator = (byteData [lastIndex] & 0x80) != 0;  	startIndicator = (byteData [lastIndex] & 0x40) != 0;  	priorityIndicator = (byteData [lastIndex] & 0x20) != 0;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	scramblingControl = byteData [lastIndex] >> 6;  	adaptionControl = (byteData [lastIndex] & 0x30) >> 4;  	continuityCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (adaptionControl) {  	case 1:  		adaptionLength = 0;  		break;  	case 2:  	case 3:  		adaptionLength = (int)byteData [lastIndex];  		lastIndex += adaptionLength;  		break;  	default:  		break;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	Logger.Instance.Dump ("Failing Transport Packet"' byteData' byteData.Length);  	throw (new ArgumentOutOfRangeException ("Block length: " + byteData.Length + " last index: " + lastIndex));  }  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: try {  	syncByte = byteData [lastIndex];  	lastIndex++;  	errorIndicator = (byteData [lastIndex] & 0x80) != 0;  	startIndicator = (byteData [lastIndex] & 0x40) != 0;  	priorityIndicator = (byteData [lastIndex] & 0x20) != 0;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	scramblingControl = byteData [lastIndex] >> 6;  	adaptionControl = (byteData [lastIndex] & 0x30) >> 4;  	continuityCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (adaptionControl) {  	case 1:  		adaptionLength = 0;  		break;  	case 2:  	case 3:  		adaptionLength = (int)byteData [lastIndex];  		lastIndex += adaptionLength;  		break;  	default:  		break;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	Logger.Instance.Dump ("Failing Transport Packet"' byteData' byteData.Length);  	throw (new ArgumentOutOfRangeException ("Block length: " + byteData.Length + " last index: " + lastIndex));  }  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: try {  	syncByte = byteData [lastIndex];  	lastIndex++;  	errorIndicator = (byteData [lastIndex] & 0x80) != 0;  	startIndicator = (byteData [lastIndex] & 0x40) != 0;  	priorityIndicator = (byteData [lastIndex] & 0x20) != 0;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	scramblingControl = byteData [lastIndex] >> 6;  	adaptionControl = (byteData [lastIndex] & 0x30) >> 4;  	continuityCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (adaptionControl) {  	case 1:  		adaptionLength = 0;  		break;  	case 2:  	case 3:  		adaptionLength = (int)byteData [lastIndex];  		lastIndex += adaptionLength;  		break;  	default:  		break;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	Logger.Instance.Dump ("Failing Transport Packet"' byteData' byteData.Length);  	throw (new ArgumentOutOfRangeException ("Block length: " + byteData.Length + " last index: " + lastIndex));  }  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: try {  	syncByte = byteData [lastIndex];  	lastIndex++;  	errorIndicator = (byteData [lastIndex] & 0x80) != 0;  	startIndicator = (byteData [lastIndex] & 0x40) != 0;  	priorityIndicator = (byteData [lastIndex] & 0x20) != 0;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	scramblingControl = byteData [lastIndex] >> 6;  	adaptionControl = (byteData [lastIndex] & 0x30) >> 4;  	continuityCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (adaptionControl) {  	case 1:  		adaptionLength = 0;  		break;  	case 2:  	case 3:  		adaptionLength = (int)byteData [lastIndex];  		lastIndex += adaptionLength;  		break;  	default:  		break;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	Logger.Instance.Dump ("Failing Transport Packet"' byteData' byteData.Length);  	throw (new ArgumentOutOfRangeException ("Block length: " + byteData.Length + " last index: " + lastIndex));  }  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: try {  	syncByte = byteData [lastIndex];  	lastIndex++;  	errorIndicator = (byteData [lastIndex] & 0x80) != 0;  	startIndicator = (byteData [lastIndex] & 0x40) != 0;  	priorityIndicator = (byteData [lastIndex] & 0x20) != 0;  	pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  	lastIndex += 2;  	scramblingControl = byteData [lastIndex] >> 6;  	adaptionControl = (byteData [lastIndex] & 0x30) >> 4;  	continuityCount = byteData [lastIndex] & 0x0f;  	lastIndex++;  	switch (adaptionControl) {  	case 1:  		adaptionLength = 0;  		break;  	case 2:  	case 3:  		adaptionLength = (int)byteData [lastIndex];  		lastIndex += adaptionLength;  		break;  	default:  		break;  	}  	Validate ();  }  catch (IndexOutOfRangeException) {  	Logger.Instance.Dump ("Failing Transport Packet"' byteData' byteData.Length);  	throw (new ArgumentOutOfRangeException ("Block length: " + byteData.Length + " last index: " + lastIndex));  }  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: pid = ((byteData [lastIndex] & 0x1f) * 256) + byteData [lastIndex + 1];  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: lastIndex += 2;  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: scramblingControl = byteData [lastIndex] >> 6;  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: adaptionControl = (byteData [lastIndex] & 0x30) >> 4;  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: switch (adaptionControl) {  case 1:  	adaptionLength = 0;  	break;  case 2:  case 3:  	adaptionLength = (int)byteData [lastIndex];  	lastIndex += adaptionLength;  	break;  default:  	break;  }  
Magic Number,DirectShow,TransportPacket,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TransportPacket.cs,Process,The following statement contains a magic number: switch (adaptionControl) {  case 1:  	adaptionLength = 0;  	break;  case 2:  case 3:  	adaptionLength = (int)byteData [lastIndex];  	lastIndex += adaptionLength;  	break;  default:  	break;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,Stop,The following statement contains a magic number: if (running) {  	backgroundWorker.CancelAsync ();  	bool reply = resetEvent.WaitOne (new TimeSpan (0' 0' 40));  	running = false;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	siPacket = getPacket (true);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.DataIndex;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (packetIndex == siPacket.ByteData.Length - 1) {  	siPacket = getPacket (false);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.Index;  }  else  	packetIndex++;  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (packetIndex == siPacket.ByteData.Length - 1) {  	siPacket = getPacket (false);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.Index;  }  else  	packetIndex++;  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (length < 2) {  	packetIndex += length;  	return;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: mpeg2Section.Data = new byte[length + 3];  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: mpeg2Section.Length = length + 3;  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: mpeg2Section.Data [2] = lengthByte2;  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: for (int index = 3; index < length + 3; index++) {  	if (packetIndex == siPacket.ByteData.Length) {  		siPacket = getPacket (false);  		if (siPacket == null) {  			Thread.Sleep (500);  			return;  		}  		packetIndex = siPacket.Index;  	}  	mpeg2Section.Data [index] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: for (int index = 3; index < length + 3; index++) {  	if (packetIndex == siPacket.ByteData.Length) {  		siPacket = getPacket (false);  		if (siPacket == null) {  			Thread.Sleep (500);  			return;  		}  		packetIndex = siPacket.Index;  	}  	mpeg2Section.Data [index] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: for (int index = 3; index < length + 3; index++) {  	if (packetIndex == siPacket.ByteData.Length) {  		siPacket = getPacket (false);  		if (siPacket == null) {  			Thread.Sleep (500);  			return;  		}  		packetIndex = siPacket.Index;  	}  	mpeg2Section.Data [index] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (packetIndex == siPacket.ByteData.Length) {  	siPacket = getPacket (false);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.Index;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (fileStream == null)  		fileStream = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read);  	byte[] buffer = new byte[188];  	int readCount = fileStream.Read (buffer' 0' 188);  	if (readCount < 188) {  		fileStream.Close ();  		eof = true;  		return (null);  	}  	blockCount++;  	if (RunParameters.Instance.TraceIDs.Contains ("TSFILEPACKETS"))  		Logger.Instance.Dump ("File Packet " + blockCount' buffer' buffer.Length);  	TransportPacket transportPacket = new TransportPacket ();  	try {  		transportPacket.Process (buffer);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (pids == null || (pids != null && pids.Contains ((short)transportPacket.PID))) {  				if (RunParameters.Instance.TraceIDs.Contains ("TSPIDPACKETS"))  					Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  				if (needPayloadStart) {  					if (transportPacket.StartIndicator) {  						continuityCount = transportPacket.ContinuityCount;  						done = true;  					}  				}  				else {  					if (continuityCount == 15)  						continuityCount = 0;  					else  						continuityCount++;  					if (transportPacket.ContinuityCount == continuityCount)  						done = true;  					else {  						if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  							Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  						needPayloadStart = true;  						return (null);  					}  				}  				if (done) {  					siPacket = new SIPacket ();  					siPacket.Process (buffer' transportPacket);  				}  			}  		}  	}  	catch (ArgumentOutOfRangeException) {  		/*Logger.Instance.Write("Failed to parse transport packet");*/}  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (fileStream == null)  		fileStream = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read);  	byte[] buffer = new byte[188];  	int readCount = fileStream.Read (buffer' 0' 188);  	if (readCount < 188) {  		fileStream.Close ();  		eof = true;  		return (null);  	}  	blockCount++;  	if (RunParameters.Instance.TraceIDs.Contains ("TSFILEPACKETS"))  		Logger.Instance.Dump ("File Packet " + blockCount' buffer' buffer.Length);  	TransportPacket transportPacket = new TransportPacket ();  	try {  		transportPacket.Process (buffer);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (pids == null || (pids != null && pids.Contains ((short)transportPacket.PID))) {  				if (RunParameters.Instance.TraceIDs.Contains ("TSPIDPACKETS"))  					Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  				if (needPayloadStart) {  					if (transportPacket.StartIndicator) {  						continuityCount = transportPacket.ContinuityCount;  						done = true;  					}  				}  				else {  					if (continuityCount == 15)  						continuityCount = 0;  					else  						continuityCount++;  					if (transportPacket.ContinuityCount == continuityCount)  						done = true;  					else {  						if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  							Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  						needPayloadStart = true;  						return (null);  					}  				}  				if (done) {  					siPacket = new SIPacket ();  					siPacket.Process (buffer' transportPacket);  				}  			}  		}  	}  	catch (ArgumentOutOfRangeException) {  		/*Logger.Instance.Write("Failed to parse transport packet");*/}  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (fileStream == null)  		fileStream = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read);  	byte[] buffer = new byte[188];  	int readCount = fileStream.Read (buffer' 0' 188);  	if (readCount < 188) {  		fileStream.Close ();  		eof = true;  		return (null);  	}  	blockCount++;  	if (RunParameters.Instance.TraceIDs.Contains ("TSFILEPACKETS"))  		Logger.Instance.Dump ("File Packet " + blockCount' buffer' buffer.Length);  	TransportPacket transportPacket = new TransportPacket ();  	try {  		transportPacket.Process (buffer);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (pids == null || (pids != null && pids.Contains ((short)transportPacket.PID))) {  				if (RunParameters.Instance.TraceIDs.Contains ("TSPIDPACKETS"))  					Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  				if (needPayloadStart) {  					if (transportPacket.StartIndicator) {  						continuityCount = transportPacket.ContinuityCount;  						done = true;  					}  				}  				else {  					if (continuityCount == 15)  						continuityCount = 0;  					else  						continuityCount++;  					if (transportPacket.ContinuityCount == continuityCount)  						done = true;  					else {  						if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  							Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  						needPayloadStart = true;  						return (null);  					}  				}  				if (done) {  					siPacket = new SIPacket ();  					siPacket.Process (buffer' transportPacket);  				}  			}  		}  	}  	catch (ArgumentOutOfRangeException) {  		/*Logger.Instance.Write("Failed to parse transport packet");*/}  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (fileStream == null)  		fileStream = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read);  	byte[] buffer = new byte[188];  	int readCount = fileStream.Read (buffer' 0' 188);  	if (readCount < 188) {  		fileStream.Close ();  		eof = true;  		return (null);  	}  	blockCount++;  	if (RunParameters.Instance.TraceIDs.Contains ("TSFILEPACKETS"))  		Logger.Instance.Dump ("File Packet " + blockCount' buffer' buffer.Length);  	TransportPacket transportPacket = new TransportPacket ();  	try {  		transportPacket.Process (buffer);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (pids == null || (pids != null && pids.Contains ((short)transportPacket.PID))) {  				if (RunParameters.Instance.TraceIDs.Contains ("TSPIDPACKETS"))  					Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  				if (needPayloadStart) {  					if (transportPacket.StartIndicator) {  						continuityCount = transportPacket.ContinuityCount;  						done = true;  					}  				}  				else {  					if (continuityCount == 15)  						continuityCount = 0;  					else  						continuityCount++;  					if (transportPacket.ContinuityCount == continuityCount)  						done = true;  					else {  						if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  							Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  						needPayloadStart = true;  						return (null);  					}  				}  				if (done) {  					siPacket = new SIPacket ();  					siPacket.Process (buffer' transportPacket);  				}  			}  		}  	}  	catch (ArgumentOutOfRangeException) {  		/*Logger.Instance.Write("Failed to parse transport packet");*/}  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: if (readCount < 188) {  	fileStream.Close ();  	eof = true;  	return (null);  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: try {  	transportPacket.Process (buffer);  	if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  		if (pids == null || (pids != null && pids.Contains ((short)transportPacket.PID))) {  			if (RunParameters.Instance.TraceIDs.Contains ("TSPIDPACKETS"))  				Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  			if (needPayloadStart) {  				if (transportPacket.StartIndicator) {  					continuityCount = transportPacket.ContinuityCount;  					done = true;  				}  			}  			else {  				if (continuityCount == 15)  					continuityCount = 0;  				else  					continuityCount++;  				if (transportPacket.ContinuityCount == continuityCount)  					done = true;  				else {  					if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  						Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  					needPayloadStart = true;  					return (null);  				}  			}  			if (done) {  				siPacket = new SIPacket ();  				siPacket.Process (buffer' transportPacket);  			}  		}  	}  }  catch (ArgumentOutOfRangeException) {  	/*Logger.Instance.Write("Failed to parse transport packet");*/}  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  	if (pids == null || (pids != null && pids.Contains ((short)transportPacket.PID))) {  		if (RunParameters.Instance.TraceIDs.Contains ("TSPIDPACKETS"))  			Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  		if (needPayloadStart) {  			if (transportPacket.StartIndicator) {  				continuityCount = transportPacket.ContinuityCount;  				done = true;  			}  		}  		else {  			if (continuityCount == 15)  				continuityCount = 0;  			else  				continuityCount++;  			if (transportPacket.ContinuityCount == continuityCount)  				done = true;  			else {  				if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  					Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  				needPayloadStart = true;  				return (null);  			}  		}  		if (done) {  			siPacket = new SIPacket ();  			siPacket.Process (buffer' transportPacket);  		}  	}  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: if (pids == null || (pids != null && pids.Contains ((short)transportPacket.PID))) {  	if (RunParameters.Instance.TraceIDs.Contains ("TSPIDPACKETS"))  		Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  	if (needPayloadStart) {  		if (transportPacket.StartIndicator) {  			continuityCount = transportPacket.ContinuityCount;  			done = true;  		}  	}  	else {  		if (continuityCount == 15)  			continuityCount = 0;  		else  			continuityCount++;  		if (transportPacket.ContinuityCount == continuityCount)  			done = true;  		else {  			if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  				Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  			needPayloadStart = true;  			return (null);  		}  	}  	if (done) {  		siPacket = new SIPacket ();  		siPacket.Process (buffer' transportPacket);  	}  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: if (needPayloadStart) {  	if (transportPacket.StartIndicator) {  		continuityCount = transportPacket.ContinuityCount;  		done = true;  	}  }  else {  	if (continuityCount == 15)  		continuityCount = 0;  	else  		continuityCount++;  	if (transportPacket.ContinuityCount == continuityCount)  		done = true;  	else {  		if (RunParameters.Instance.TraceIDs.Contains ("CONTINUITYERRORS"))  			Logger.Instance.Write ("Continuity error: expected " + continuityCount + " got " + transportPacket.ContinuityCount);  		needPayloadStart = true;  		return (null);  	}  }  
Magic Number,DirectShow,TSFileReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSFileReader.cs,getPacket,The following statement contains a magic number: if (continuityCount == 15)  	continuityCount = 0;  else  	continuityCount++;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,Stop,The following statement contains a magic number: if (running) {  	backgroundWorker.CancelAsync ();  	bool reply = resetEvent.WaitOne (new TimeSpan (0' 0' 40));  	running = false;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (packetIndex > siPacket.ByteData.Length - 1) {  	siPacket = getPacket (false);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.DataIndex;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (packetIndex == siPacket.ByteData.Length - 1) {  	siPacket = getPacket (false);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.Index;  }  else  	packetIndex++;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (packetIndex == siPacket.ByteData.Length - 1) {  	siPacket = getPacket (false);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.Index;  }  else  	packetIndex++;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: mpeg2Section.Data = new byte[length + 3];  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: mpeg2Section.Length = length + 3;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: mpeg2Section.Data [2] = lengthByte2;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: for (int index = 3; index < length + 3; index++) {  	if (packetIndex == siPacket.ByteData.Length) {  		siPacket = getPacket (false);  		if (siPacket == null) {  			Thread.Sleep (500);  			return;  		}  		packetIndex = siPacket.Index;  	}  	mpeg2Section.Data [index] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: for (int index = 3; index < length + 3; index++) {  	if (packetIndex == siPacket.ByteData.Length) {  		siPacket = getPacket (false);  		if (siPacket == null) {  			Thread.Sleep (500);  			return;  		}  		packetIndex = siPacket.Index;  	}  	mpeg2Section.Data [index] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: for (int index = 3; index < length + 3; index++) {  	if (packetIndex == siPacket.ByteData.Length) {  		siPacket = getPacket (false);  		if (siPacket == null) {  			Thread.Sleep (500);  			return;  		}  		packetIndex = siPacket.Index;  	}  	mpeg2Section.Data [index] = siPacket.ByteData [packetIndex];  	packetIndex++;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (packetIndex == siPacket.ByteData.Length) {  	siPacket = getPacket (false);  	if (siPacket == null) {  		Thread.Sleep (500);  		return;  	}  	packetIndex = siPacket.Index;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: if (siPacket == null) {  	Thread.Sleep (500);  	return;  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (memoryHandle == 0) {  		bool reply = getMappedMemory ();  		if (!reply) {  			eof = true;  			return (null);  		}  	}  	if (currentOffset > maxOffset)  		return (null);  	byte[] buffer = new byte[188];  	for (int index = 0; index < 188; index++)  		buffer [index] = this.buffer [currentPointer + index];  	currentPointer += 188;  	currentOffset += 188;  	TransportPacket transportPacket = new TransportPacket ();  	transportPacket.Process (buffer);  	if (transportPacket.PID == pid) {  		Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (needPayloadStart) {  				if (transportPacket.StartIndicator)  					done = true;  			}  			else  				done = true;  			if (done) {  				siPacket = new SIPacket ();  				siPacket.Process (buffer' transportPacket);  			}  		}  	}  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (memoryHandle == 0) {  		bool reply = getMappedMemory ();  		if (!reply) {  			eof = true;  			return (null);  		}  	}  	if (currentOffset > maxOffset)  		return (null);  	byte[] buffer = new byte[188];  	for (int index = 0; index < 188; index++)  		buffer [index] = this.buffer [currentPointer + index];  	currentPointer += 188;  	currentOffset += 188;  	TransportPacket transportPacket = new TransportPacket ();  	transportPacket.Process (buffer);  	if (transportPacket.PID == pid) {  		Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (needPayloadStart) {  				if (transportPacket.StartIndicator)  					done = true;  			}  			else  				done = true;  			if (done) {  				siPacket = new SIPacket ();  				siPacket.Process (buffer' transportPacket);  			}  		}  	}  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (memoryHandle == 0) {  		bool reply = getMappedMemory ();  		if (!reply) {  			eof = true;  			return (null);  		}  	}  	if (currentOffset > maxOffset)  		return (null);  	byte[] buffer = new byte[188];  	for (int index = 0; index < 188; index++)  		buffer [index] = this.buffer [currentPointer + index];  	currentPointer += 188;  	currentOffset += 188;  	TransportPacket transportPacket = new TransportPacket ();  	transportPacket.Process (buffer);  	if (transportPacket.PID == pid) {  		Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (needPayloadStart) {  				if (transportPacket.StartIndicator)  					done = true;  			}  			else  				done = true;  			if (done) {  				siPacket = new SIPacket ();  				siPacket.Process (buffer' transportPacket);  			}  		}  	}  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,The following statement contains a magic number: while (!done) {  	if (memoryHandle == 0) {  		bool reply = getMappedMemory ();  		if (!reply) {  			eof = true;  			return (null);  		}  	}  	if (currentOffset > maxOffset)  		return (null);  	byte[] buffer = new byte[188];  	for (int index = 0; index < 188; index++)  		buffer [index] = this.buffer [currentPointer + index];  	currentPointer += 188;  	currentOffset += 188;  	TransportPacket transportPacket = new TransportPacket ();  	transportPacket.Process (buffer);  	if (transportPacket.PID == pid) {  		Logger.Instance.Dump ("File Packet"' buffer' buffer.Length);  		if (!transportPacket.ErrorIndicator && !transportPacket.IsNullPacket) {  			if (needPayloadStart) {  				if (transportPacket.StartIndicator)  					done = true;  			}  			else  				done = true;  			if (done) {  				siPacket = new SIPacket ();  				siPacket.Process (buffer' transportPacket);  			}  		}  	}  }  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,The following statement contains a magic number: for (int index = 0; index < 188; index++)  	buffer [index] = this.buffer [currentPointer + index];  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,The following statement contains a magic number: currentPointer += 188;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getPacket,The following statement contains a magic number: currentOffset += 188;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: Marshal.Copy (memoryPointer' buffer' 0' 10 * (1024 * 1024));  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: Marshal.Copy (memoryPointer' buffer' 0' 10 * (1024 * 1024));  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: Marshal.Copy (memoryPointer' buffer' 0' 10 * (1024 * 1024));  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: maxOffset = (int)buffer [3];  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: maxOffset = (maxOffset * 256) + (int)buffer [2];  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: maxOffset = (maxOffset * 256) + (int)buffer [2];  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: maxOffset = (maxOffset * 256) + (int)buffer [1];  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: maxOffset = (maxOffset * 256) + (int)buffer [0];  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: currentPointer = 12;  
Magic Number,DirectShow,TSMemoryReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSMemoryReader.cs,getMappedMemory,The following statement contains a magic number: Logger.Instance.Dump ("Memory Buffer"' buffer' 2048);  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,Stop,The following statement contains a magic number: if (running) {  	backgroundWorker.CancelAsync ();  	bool reply = resetEvent.WaitOne (new TimeSpan (0' 0' 40));  	running = false;  }  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getSection,The following statement contains a magic number: if (Sections.Count >= parameters.MaxSections) {  	bool waitOver = false;  	do {  		Release ("GetSectionA");  		if (worker.CancellationPending)  			return;  		Thread.Sleep (100);  		Lock ("GetSectionB");  		waitOver = Sections.Count < parameters.MaxSections;  	}  	while (!waitOver);  }  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getSection,The following statement contains a magic number: do {  	Release ("GetSectionA");  	if (worker.CancellationPending)  		return;  	Thread.Sleep (100);  	Lock ("GetSectionB");  	waitOver = Sections.Count < parameters.MaxSections;  }  while (!waitOver);  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getSection,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getNextSection,The following statement contains a magic number: Marshal.Copy (currentPointer' buffer' 0' 188);  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getNextSection,The following statement contains a magic number: currentPointer = new IntPtr (currentPointer.ToInt64 () + 188);  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,getNextSection,The following statement contains a magic number: currentOffset += 188;  
Magic Number,DirectShow,TSStreamReader,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\TSStreamReader.cs,initialize,The following statement contains a magic number: currentPointer = new IntPtr (memoryPointer.ToInt64 () + 136);  
Magic Number,DirectShowAPI,DsMarshaler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\Utils.cs,MarshalManagedToNative,The following statement contains a magic number: for (int x = 0; x < iSize / 4; x++) {  	Marshal.WriteInt32 (p' x * 4' 0);  }  
Magic Number,DirectShowAPI,DsMarshaler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\Utils.cs,MarshalManagedToNative,The following statement contains a magic number: for (int x = 0; x < iSize / 4; x++) {  	Marshal.WriteInt32 (p' x * 4' 0);  }  
Magic Number,DirectShowAPI,DsMarshaler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DirectShowAPI\Utils.cs,MarshalManagedToNative,The following statement contains a magic number: Marshal.WriteInt32 (p' x * 4' 0);  
Duplicate Code,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,getLocator,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 72)' (208' 239))
Missing Default,DirectShow,BDAGraph,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\BDAGraph1.cs,createTuningSpace,The following switch statement is missing a default case: switch (tuningSpec.Frequency.TunerType) {  case TunerType.Satellite: {  	LogMessage ("Creating DVB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("fa4b375a-45b4-4d45-8440-263957b11623"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Satellite);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Terrestrial: {  	LogMessage ("Creating DVB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("216c62df-6d7f-4e9a-8571-05f14edb766a"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Terrestrial);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.Cable: {  	LogMessage ("Creating DVB Cable tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector DVB-C Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(DVBCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ATSC: {  	LogMessage ("Creating ATSC Terrestrial tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Terrestrial Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Antenna);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (69);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (999);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 69");  	break;  }  case TunerType.ATSCCable: {  	LogMessage ("Creating ATSC Cable tuning space");  	tuningSpace = (IATSCTuningSpace)new ATSCTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ATSC Cable Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinPhysicalChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IATSCTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (typeof(ATSCNetworkProvider).GUID);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ClearQAM: {  	LogMessage ("Creating Clear QAM tuning space");  	tuningSpace = (IDigitalCableTuningSpace)new DigitalCableTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector Clear QAM Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_InputType (TunerInputType.Cable);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxChannel (9999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMajorChannel (99);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxMinorChannel (999);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxPhysicalChannel (158);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MaxSourceID (0x7fffffff);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMajorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinMinorChannel (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinPhysicalChannel (2);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDigitalCableTuningSpace)tuningSpace).put_MinSourceID (0);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("143827ab-f77b-498d-81ca-5a007aec28bf"));  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space Max Physical Channel: 158");  	break;  }  case TunerType.ISDBS: {  	LogMessage ("Creating ISDB Satellite tuning space");  	tuningSpace = (ITuningSpace)new DVBSTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-S Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_HighOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	if (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency != 0)  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (((SatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency);  	else  		reply = ((IDVBSTuningSpace)tuningSpace).put_LNBSwitch (20000000);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_LowOscillator (((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_NetworkID (-1);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("b0a4e6a0-6a1a-4b83-bb5b-903e1d90e6b6"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBSTuningSpace)tuningSpace).put_SpectralInversion (SpectralInversion.NotSet);  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBS);  	DsError.ThrowExceptionForHR (reply);  	LogMessage ("Tuning Space LNB Low: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBLowBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB High: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBHighBandFrequency.ToString ());  	LogMessage ("Tuning Space LNB Switch: " + ((ISDBSatelliteFrequency)tuningSpec.Frequency).SatelliteDish.LNBSwitchFrequency.ToString ());  	reply = ((IDVBSTuningSpace)tuningSpace).put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  case TunerType.ISDBT: {  	LogMessage ("Creating ISDB Terrestrial tuning space");  	tuningSpace = (IDVBTuningSpace)new DVBTuningSpace ();  	reply = tuningSpace.put_UniqueName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_FriendlyName ("EPG Collector ISDB-T Tuning Space");  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put__NetworkType (new Guid ("95037f6f-3ac7-4452-b6c4-45a9ce9292a2"));  	DsError.ThrowExceptionForHR (reply);  	reply = ((IDVBTuningSpace)tuningSpace).put_SystemType (DVBSystemType.ISDBT);  	DsError.ThrowExceptionForHR (reply);  	reply = tuningSpace.put_DefaultLocator (getLocator (tuningSpec));  	DsError.ThrowExceptionForHR (reply);  	break;  }  }  
Missing Default,DirectShow,TwinhanDiseqcHandler,C:\repos\esurharun_TSDumper\TSDumper.Utility\DirectShow\DisEqcHandlers\TwinhanDiseqcHandler.cs,SendDiseqcCommand,The following switch statement is missing a default case: switch (port) {  case "A":  	disEqcPort = 1;  	break;  case "B":  	disEqcPort = 2;  	break;  case "AA":  	disEqcPort = 1;  	break;  case "AB":  	disEqcPort = 2;  	break;  case "BA":  	disEqcPort = 3;  	break;  case "BB":  	disEqcPort = 4;  	break;  }  
