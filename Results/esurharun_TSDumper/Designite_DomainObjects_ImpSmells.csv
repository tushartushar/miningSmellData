Implementation smell,Namespace,Class,File,Method,Description
Long Method,DomainObjects,AtscFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscFrequency.cs,load,The method has 174 lines of code.
Long Method,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,load,The method has 125 lines of code.
Long Method,DomainObjects,ClearQamFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamFrequency.cs,load,The method has 174 lines of code.
Long Method,DomainObjects,ISDBSatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteFrequency.cs,load,The method has 111 lines of code.
Long Method,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,Process,The method has 183 lines of code.
Long Method,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processPrograms,The method has 103 lines of code.
Long Method,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The method has 116 lines of code.
Long Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The method has 207 lines of code.
Long Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The method has 179 lines of code.
Long Method,DomainObjects,SatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SatelliteFrequency.cs,load,The method has 225 lines of code.
Long Method,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,CompareForSorting,The method has 119 lines of code.
Complex Method,DomainObjects,AtscFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscFrequency.cs,load,Cyclomatic complexity of the method is 20
Complex Method,DomainObjects,AtscProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscProvider.cs,load,Cyclomatic complexity of the method is 16
Complex Method,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,load,Cyclomatic complexity of the method is 20
Complex Method,DomainObjects,CableProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableProvider.cs,load,Cyclomatic complexity of the method is 17
Complex Method,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,AddChannel,Cyclomatic complexity of the method is 12
Complex Method,DomainObjects,ClearQamFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamFrequency.cs,load,Cyclomatic complexity of the method is 20
Complex Method,DomainObjects,ClearQamProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamProvider.cs,load,Cyclomatic complexity of the method is 17
Complex Method,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,Cyclomatic complexity of the method is 18
Complex Method,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,Cyclomatic complexity of the method is 15
Complex Method,DomainObjects,Country,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Country.cs,load,Cyclomatic complexity of the method is 10
Complex Method,DomainObjects,Country,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Country.cs,Load,Cyclomatic complexity of the method is 16
Complex Method,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,Cyclomatic complexity of the method is 15
Complex Method,DomainObjects,ISDBSatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteFrequency.cs,load,Cyclomatic complexity of the method is 20
Complex Method,DomainObjects,ISDBSatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteFrequency.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,load,Cyclomatic complexity of the method is 17
Complex Method,DomainObjects,ISDBTerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBTerrestrialFrequency.cs,load,Cyclomatic complexity of the method is 14
Complex Method,DomainObjects,ISDBTerrestrialProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBTerrestrialProvider.cs,load,Cyclomatic complexity of the method is 17
Complex Method,DomainObjects,LanguageCode,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LanguageCode.cs,Load,Cyclomatic complexity of the method is 19
Complex Method,DomainObjects,OutputFileAreaRegionChannels,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileAreaRegionChannels.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,DomainObjects,OutputFileBladeRunner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileBladeRunner.cs,Process,Cyclomatic complexity of the method is 11
Complex Method,DomainObjects,OutputFileDVBViewer,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileDVBViewer.cs,processRecordingService,Cyclomatic complexity of the method is 10
Complex Method,DomainObjects,OutputFileDVBViewer,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileDVBViewer.cs,processStationEPG,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processCategory,Cyclomatic complexity of the method is 12
Complex Method,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processPeople,Cyclomatic complexity of the method is 10
Complex Method,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processPrograms,Cyclomatic complexity of the method is 67
Complex Method,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processSchedules,Cyclomatic complexity of the method is 20
Complex Method,DomainObjects,OutputFilePlugin,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFilePlugin.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,OutputFilePlugin,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFilePlugin.cs,checkMidnightBreak,Cyclomatic complexity of the method is 10
Complex Method,DomainObjects,OutputFilePlugin,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFilePlugin.cs,processEPGEntry,Cyclomatic complexity of the method is 20
Complex Method,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,Process,Cyclomatic complexity of the method is 14
Complex Method,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processStationHeader,Cyclomatic complexity of the method is 10
Complex Method,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,Cyclomatic complexity of the method is 34
Complex Method,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,createBladeRunnerChannelFile,Cyclomatic complexity of the method is 9
Complex Method,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,createAreaRegionChannelFile,Cyclomatic complexity of the method is 13
Complex Method,DomainObjects,ParentalRating,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ParentalRating.cs,Load,Cyclomatic complexity of the method is 21
Complex Method,DomainObjects,Region,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Region.cs,AddChannel,Cyclomatic complexity of the method is 9
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,Cyclomatic complexity of the method is 173
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processFrequency,Cyclomatic complexity of the method is 10
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,getCollectionType,Cyclomatic complexity of the method is 36
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,Cyclomatic complexity of the method is 11
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,Cyclomatic complexity of the method is 24
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTuningFile,Cyclomatic complexity of the method is 9
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputGeneralParameters,Cyclomatic complexity of the method is 22
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,Cyclomatic complexity of the method is 23
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputDiagnosticParameters,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputFrequencyParameters,Cyclomatic complexity of the method is 24
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputServiceFilterParameters,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Clone,Cyclomatic complexity of the method is 30
Complex Method,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,Cyclomatic complexity of the method is 29
Complex Method,DomainObjects,TerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialFrequency.cs,load,Cyclomatic complexity of the method is 14
Complex Method,DomainObjects,TerrestrialProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialProvider.cs,load,Cyclomatic complexity of the method is 17
Complex Method,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,load,Cyclomatic complexity of the method is 17
Complex Method,DomainObjects,SignalPolarization,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SignalPolarization.cs,SignalPolarization,Cyclomatic complexity of the method is 15
Complex Method,DomainObjects,SatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SatelliteFrequency.cs,load,Cyclomatic complexity of the method is 29
Complex Method,DomainObjects,SatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SatelliteFrequency.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,DomainObjects,Tuner,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Tuner.cs,Supports,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,AddStation,Cyclomatic complexity of the method is 8
Complex Method,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,CompareForSorting,Cyclomatic complexity of the method is 16
Complex Method,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,load,Cyclomatic complexity of the method is 35
Complex Method,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,Load,Cyclomatic complexity of the method is 16
Complex Method,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,Unload,Cyclomatic complexity of the method is 10
Long Parameter List,DomainObjects,AtscProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscProvider.cs,FindProvider,The method has 5 parameters.
Long Parameter List,DomainObjects,ClearQamProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamProvider.cs,FindProvider,The method has 5 parameters.
Long Parameter List,DomainObjects,ParentalRating,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ParentalRating.cs,ParentalRating,The method has 6 parameters.
Long Parameter List,DomainObjects,SectionMapEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SectionMapEntry.cs,SectionMapEntry,The method has 5 parameters.
Long Parameter List,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,AddMapEntry,The method has 5 parameters.
Long Statement,DomainObjects,Area,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Area.cs,Load,The length of the statement  "		AddRegion (new Region (reader.GetAttribute ("name")' Int32.Parse (reader.GetAttribute ("code")' CultureInfo.InvariantCulture))); " is 128.
Long Statement,DomainObjects,AtscProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscProvider.cs,FindProvider,The length of the statement  "			if (atscFrequency.ChannelNumber == channelNumber && atscFrequency.Frequency == frequency && atscFrequency.SymbolRate == symbolRate && atscFrequency.FEC.Rate == fecRate.Rate && atscFrequency.Modulation == modulation) " is 215.
Long Statement,DomainObjects,CableProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableProvider.cs,FindProvider,The length of the statement  "			if (cableFrequency.Frequency == frequency && cableFrequency.SymbolRate == symbolRate && cableFrequency.FEC.Rate == fecRate.Rate && cableFrequency.Modulation == modulation) " is 171.
Long Statement,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,AddChannel,The length of the statement  "		Logger.Instance.Write ("Adding channel: ONID " + newChannel.OriginalNetworkID + " TSID " + newChannel.TransportStreamID + " SID " + newChannel.ServiceID + " Channel ID: " + newChannel.ChannelID + " User Channel: " + newChannel.UserChannel + " Bqt ID: " + newChannel.BouquetID + " Region: " + newChannel.Region); " is 311.
Long Statement,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,AddChannel,The length of the statement  "		if (oldChannel.OriginalNetworkID == newChannel.OriginalNetworkID && oldChannel.TransportStreamID == newChannel.TransportStreamID && oldChannel.ServiceID == newChannel.ServiceID && oldChannel.ChannelID == newChannel.ChannelID) { " is 227.
Long Statement,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,LogChannelMapping,The length of the statement  "	logger.Write ("Channel: ONID " + OriginalNetworkID + " TSID " + TransportStreamID + " SID " + ServiceID + " Channel ID: " + ChannelID + " User Channel: " + UserChannel + " Bouquet: " + BouquetID + " Region: " + Region + " Flags: " + flagString + " Name: " + stationName); " is 271.
Long Statement,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,ToString,The length of the statement  "	return ("ONID " + OriginalNetworkID + " TSID " + TransportStreamID + " SID " + ServiceID + " Channel ID: " + ChannelID + " User Channel: " + UserChannel + " Bouquet: " + BouquetID + " Region: " + Region + " Station: " + stationName); " is 233.
Long Statement,DomainObjects,ClearQamProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamProvider.cs,FindProvider,The length of the statement  "			if (atscFrequency.ChannelNumber == channelNumber && atscFrequency.Frequency == frequency && atscFrequency.SymbolRate == symbolRate && atscFrequency.FEC.Rate == fecRate.Rate && atscFrequency.Modulation == modulation) " is 215.
Long Statement,DomainObjects,DVBLogicProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBLogicProgramCategory.cs,CheckDescription,The length of the statement  "		if (descriptionPart != "action" && descriptionPart != "comedy" && descriptionPart != "documentary" && descriptionPart != "drama" && descriptionPart != "educational" && descriptionPart != "horror" && descriptionPart != "kids" && descriptionPart != "movie" && descriptionPart != "music" && descriptionPart != "news" && descriptionPart != "reality" && descriptionPart != "romance" && descriptionPart != "scifi" && descriptionPart != "serial" && descriptionPart != "soap" && descriptionPart != "special" && descriptionPart != "sports" && descriptionPart != "thriller" && descriptionPart != "adult") " is 594.
Long Statement,DomainObjects,ChannelFilterEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ChannelFilterEntry.cs,FindEntry,The length of the statement  "		if (filterEntry.OriginalNetworkID == originalNetworkID && filterEntry.TransportStreamID == -1 && filterEntry.StartServiceID == -1 && filterEntry.EndServiceID == -1) " is 164.
Long Statement,DomainObjects,ChannelFilterEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ChannelFilterEntry.cs,FindEntry,The length of the statement  "		if (filterEntry.OriginalNetworkID == originalNetworkID && filterEntry.TransportStreamID == transportStreamID && filterEntry.StartServiceID == -1 && filterEntry.EndServiceID == -1) " is 179.
Long Statement,DomainObjects,ChannelFilterEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ChannelFilterEntry.cs,FindEntry,The length of the statement  "		if (filterEntry.OriginalNetworkID == originalNetworkID && filterEntry.TransportStreamID == transportStreamID && filterEntry.StartServiceID <= serviceID) { " is 154.
Long Statement,DomainObjects,ChannelFilterEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ChannelFilterEntry.cs,FindEntry,The length of the statement  "		if (filterEntry.OriginalNetworkID == originalNetworkID && filterEntry.TransportStreamID == -1 && filterEntry.StartServiceID <= serviceID) { " is 139.
Long Statement,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,AddFrequency,The length of the statement  "				if (oldFrequency.Polarization.PolarizationAbbreviation.CompareTo (newFrequency.Polarization.PolarizationAbbreviation) > 0) { " is 124.
Long Statement,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,FindProvider,The length of the statement  "			if (satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization) " is 217.
Long Statement,DomainObjects,ISDBTerrestrialProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBTerrestrialProvider.cs,Load,The length of the statement  "		ISDBTerrestrialProvider atscProvider = new ISDBTerrestrialProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4)); " is 123.
Long Statement,DomainObjects,OutputFile,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFile.cs,Process,The length of the statement  "	if (RunParameters.Instance.Options.Contains ("DVBVIEWERIMPORT") || RunParameters.Instance.Options.Contains ("DVBVIEWERRECSVCIMPORT")) " is 133.
Long Statement,DomainObjects,OutputFileDVBViewer,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileDVBViewer.cs,processStationEPG,The length of the statement  "		xmlWriter.WriteAttributeString ("stop"' (epgEntry.StartTime + epgEntry.Duration).ToString ("yyyyMMddHHmmss").Replace (":"' "")); " is 128.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,Process,The length of the statement  "			xmlWriter.WriteAttributeString ("publicKey"' "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); " is 369.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,Process,The length of the statement  "			xmlWriter.WriteAttributeString ("publicKey"' "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); " is 369.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processPrograms,The length of the statement  "				xmlWriter.WriteAttributeString ("uid"' "!Program!" + (epgEntry.OriginalNetworkID + ":" + epgEntry.TransportStreamID + ":" + epgEntry.ServiceID + TimeZoneInfo.ConvertTimeToUtc (epgEntry.StartTime).ToString ()).Replace (" "' "").Replace (":"' "").Replace ("/"' "").Replace ("."' "")); " is 282.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processServices,The length of the statement  "			xmlWriter.WriteAttributeString ("uid"' "!Service!" + station.OriginalNetworkID + ":" + station.TransportStreamID + ":" + station.ServiceID); " is 140.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processLineUps,The length of the statement  "				xmlWriter.WriteAttributeString ("uid"' "!Channel!EPGCollector!" + station.OriginalNetworkID + ":" + station.TransportStreamID + ":" + station.ServiceID); " is 153.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,runImportUtility,The length of the statement  "		Logger.Instance.Write ("Windows Media Centre import utility LoadMXF has completed: exit code " + importProcess.ExitCode); " is 121.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,convertDateTimeToString,The length of the statement  "	return (utcTime.Date.ToString ("yyyy-MM-dd") + "T" + utcTime.Hour.ToString ("00") + ":" + utcTime.Minute.ToString ("00") + ":" + utcTime.Second.ToString ("00")); " is 161.
Long Statement,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,getSeriesLink,The length of the statement  "	return (epgEntry.OriginalNetworkID + "-" + epgEntry.TransportStreamID + "-" + epgEntry.ServiceID + "-" + epgEntry.EventName + "-" + epgEntry.Series); " is 149.
Long Statement,DomainObjects,OutputFilePlugin,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFilePlugin.cs,processStationHeader,The length of the statement  "	xmlWriter.WriteAttributeString ("ID"' tvStation.OriginalNetworkID.ToString () + ":" + tvStation.TransportStreamID.ToString () + ":" + tvStation.ServiceID.ToString ()); " is 167.
Long Statement,DomainObjects,OutputFilePlugin,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFilePlugin.cs,processStationHeader,The length of the statement  "	xmlWriter.WriteAttributeString ("LastStart"' getStartTime (tvStation.EPGCollection [tvStation.EPGCollection.Count - 1])); " is 121.
Long Statement,DomainObjects,OutputFilePlugin,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFilePlugin.cs,processEPGEntry,The length of the statement  "            UInt32 seconds = Convert.ToUInt32(Math.Abs(timeSpan.TotalSeconds));*/xmlWriter.WriteElementString ("start_time"' getStartTime (epgEntry)); " is 138.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,Process,The length of the statement  "			xmlWriter.WriteAttributeString ("generator-info-name"' Assembly.GetCallingAssembly ().GetName ().Name + "/" + Assembly.GetCallingAssembly ().GetName ().Version.ToString ()); " is 173.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processStationHeader,The length of the statement  "			xmlWriter.WriteAttributeString ("src"' "file://" + RunParameters.DataDirectory + "\\Images\\" + tvStation.ServiceID + ".png"); " is 126.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "	xmlWriter.WriteAttributeString ("stop"' (epgEntry.StartTime + epgEntry.Duration).ToString ("yyyyMMddHHmmss zzz").Replace (":"' "")); " is 132.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "		xmlWriter.WriteElementString ("title"' TextTranslator.GetTranslatedText (RunParameters.Instance.InputLanguage' RunParameters.Instance.OutputLanguage' whitespace.Replace (epgEntry.EventName.Trim ()' " "))); " is 205.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "		xmlWriter.WriteElementString ("title"' TextTranslator.GetTranslatedText (RunParameters.Instance.InputLanguage' RunParameters.Instance.OutputLanguage' "No Title")); " is 163.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "			xmlWriter.WriteElementString ("sub-title"' TextTranslator.GetTranslatedText (RunParameters.Instance.InputLanguage' RunParameters.Instance.OutputLanguage' whitespace.Replace (epgEntry.EventSubTitle.Trim ()' " "))); " is 213.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "			xmlWriter.WriteElementString ("desc"' TextTranslator.GetTranslatedText (RunParameters.Instance.InputLanguage' RunParameters.Instance.OutputLanguage' whitespace.Replace (epgEntry.ShortDescription.Trim ()' " "))); " is 211.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "				xmlWriter.WriteElementString ("desc"' TextTranslator.GetTranslatedText (RunParameters.Instance.InputLanguage' RunParameters.Instance.OutputLanguage' whitespace.Replace (epgEntry.EventName.Trim ()' " "))); " is 204.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "				xmlWriter.WriteElementString ("desc"' TextTranslator.GetTranslatedText (RunParameters.Instance.InputLanguage' RunParameters.Instance.OutputLanguage' "No Description")); " is 168.
Long Statement,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The length of the statement  "	if ((epgEntry.Directors != null && epgEntry.Directors.Count != 0) || (epgEntry.Cast != null && epgEntry.Cast.Count != 0)) { " is 123.
Long Statement,DomainObjects,ParentalRating,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ParentalRating.cs,Load,The length of the statement  "					ParentalRating parentalRating = new ParentalRating (currentLocation' currentSystem' currentProtocol' reader.GetAttribute ("code").Trim ()' reader.GetAttribute ("rating").Trim ()' reader.GetAttribute ("mpaaRating").Trim ()); " is 223.
Long Statement,DomainObjects,ProtectedResource,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ProtectedResource.cs,Lock,The length of the statement  "		throw (new InvalidOperationException ("Resource requested by " + Thread.CurrentThread.Name + "." + identity + " not released by " + getOwnerThreadName () + "." + this.identity)); " is 178.
Long Statement,DomainObjects,ProtectedResource,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ProtectedResource.cs,Release,The length of the statement  "		throw (new InvalidOperationException ("Thread " + Thread.CurrentThread.Name + "." + identity + " has attempted to release a protected resource not currently locked")); " is 167.
Long Statement,DomainObjects,ProtectedResource,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ProtectedResource.cs,Release,The length of the statement  "		throw (new InvalidOperationException ("Thread " + Thread.CurrentThread.Name + "." + identity + " has attempted to release a protected resource currently owned by " + getOwnerThreadName () + "." + this.identity)); " is 212.
Long Statement,DomainObjects,ProtectedResource,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ProtectedResource.cs,CheckOwnership,The length of the statement  "		throw (new InvalidOperationException ("Type " + this.GetType ().Name + " Thread " + Thread.CurrentThread.Name + " has attempted to access a protected resource that is not locked")); " is 181.
Long Statement,DomainObjects,ProtectedResource,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ProtectedResource.cs,CheckOwnership,The length of the statement  "		throw (new InvalidOperationException ("Type " + this.GetType ().Name + " Thread " + Thread.CurrentThread.Name + " has attempted to access a protected resource currently owned by " + getOwnerThreadName ())); " is 206.
Long Statement,DomainObjects,Region,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Region.cs,AddChannel,The length of the statement  "		if (oldChannel.OriginalNetworkID == newChannel.OriginalNetworkID && oldChannel.TransportStreamID == newChannel.TransportStreamID && oldChannel.ServiceID == newChannel.ServiceID && oldChannel.ChannelID == newChannel.ChannelID) " is 225.
Long Statement,DomainObjects,Region,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Region.cs,addChannelInNameOrder,The length of the statement  "	TVStation newStation = TVStation.FindStation (newChannel.OriginalNetworkID' newChannel.TransportStreamID' newChannel.ServiceID); " is 128.
Long Statement,DomainObjects,Region,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Region.cs,addChannelInNameOrder,The length of the statement  "		TVStation oldStation = TVStation.FindStation (oldChannel.OriginalNetworkID' oldChannel.TransportStreamID' oldChannel.ServiceID); " is 128.
Long Statement,DomainObjects,Region,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Region.cs,FindChannel,The length of the statement  "		if (channel.OriginalNetworkID == originalNetworkID && channel.TransportStreamID == transportStreamID && channel.ServiceID == serviceID) " is 135.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The length of the statement  "			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID); " is 125.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The length of the statement  "			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID); " is 125.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The length of the statement  "				TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID); " is 125.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The length of the statement  "				nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null); " is 132.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The length of the statement  "		TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ())); " is 124.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The length of the statement  "		ChannelFilterEntry.ChannelFilters.Add (new ChannelFilterEntry (originalNetworkID' transportStreamID' startServiceID' endServiceID)); " is 132.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputGeneralParameters,The length of the statement  "	streamWriter.WriteLine (("Timeouts=" + LockTimeout.TotalSeconds + "'" + FrequencyTimeout.TotalSeconds + "'" + Repeats).ToString (CultureInfo.InvariantCulture)); " is 160.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputGeneralParameters,The length of the statement  "		streamWriter.WriteLine ("Timezone=" + timeZone.Hours.ToString ("00") + "." + timeZone.Minutes.ToString ("00") + "'" + nextTimeZone.Hours.ToString ("00") + "." + nextTimeZone.Minutes.ToString ("00") + "'" + nextTimeZoneChange.ToString ("dd/MM/yy") + "'" + nextTimeZoneChange.TimeOfDay.Hours.ToString ("00") + "." + nextTimeZoneChange.TimeOfDay.Minutes.ToString ("00")); " is 368.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,The length of the statement  "		streamWriter.WriteLine ("PluginFrequency=Satellite'" + tuningFrequency.Provider.ToString ().Replace ('''' '+') + "'" + tuningFrequency.Frequency + "'" + (tuningFrequency as SatelliteFrequency).Polarization.PolarizationAbbreviation + "'" + tuningFrequency.CollectionType); " is 271.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,The length of the statement  "		streamWriter.WriteLine ("PluginFrequency=Terrestrial'" + (tuningFrequency.Provider) + "'" + tuningFrequency.Frequency + "''" + tuningFrequency.CollectionType); " is 159.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,The length of the statement  "		streamWriter.WriteLine ("PluginFrequency=Cable'" + (tuningFrequency.Provider) + "'" + tuningFrequency.Frequency + "''" + tuningFrequency.CollectionType); " is 153.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,The length of the statement  "		streamWriter.WriteLine ("PluginFrequency=ATSC'" + (tuningFrequency.Provider) + "'" + tuningFrequency.Frequency + "''" + tuningFrequency.CollectionType); " is 152.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,The length of the statement  "		streamWriter.WriteLine ("PluginFrequency=ClearQAM'" + (tuningFrequency.Provider) + "'" + tuningFrequency.Frequency + "''" + tuningFrequency.CollectionType); " is 156.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,The length of the statement  "		streamWriter.WriteLine ("PluginFrequency=ISDBS'" + (tuningFrequency.Provider) + "'" + tuningFrequency.Frequency + "''" + tuningFrequency.CollectionType); " is 153.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputPluginFrequencyParameters,The length of the statement  "		streamWriter.WriteLine ("PluginFrequency=ISDBT'" + (tuningFrequency.Provider) + "'" + tuningFrequency.Frequency + "''" + tuningFrequency.CollectionType); " is 153.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputSatelliteFrequency,The length of the statement  "		streamWriter.WriteLine ("Dish=" + satelliteFrequency.SatelliteDish.LNBLowBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBHighBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBSwitchFrequency + "'" + satelliteFrequency.SatelliteDish.DiseqcSwitch); " is 264.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputSatelliteFrequency,The length of the statement  "		streamWriter.WriteLine ("Dish=" + satelliteFrequency.SatelliteDish.LNBLowBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBHighBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBSwitchFrequency); " is 210.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputSatelliteFrequency,The length of the statement  "		streamWriter.WriteLine ("ScanningFrequency=" + satelliteFrequency.Frequency + "'" + satelliteFrequency.SymbolRate + "'" + satelliteFrequency.FEC + "'" + satelliteFrequency.Polarization.PolarizationAbbreviation + "'" + satelliteFrequency.CollectionType); " is 253.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputSatelliteFrequency,The length of the statement  "		streamWriter.WriteLine ("ScanningFrequency=" + satelliteFrequency.Frequency + "'" + satelliteFrequency.SymbolRate + "'" + satelliteFrequency.FEC + "'" + satelliteFrequency.Polarization.PolarizationAbbreviation + "'" + satelliteFrequency.Pilot + "'" + satelliteFrequency.RollOff + "'" + satelliteFrequency.Modulation + "'" + satelliteFrequency.CollectionType); " is 359.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputTerrestrialFrequency,The length of the statement  "	streamWriter.WriteLine ("ScanningFrequency=" + terrestrialFrequency.Frequency + "'" + terrestrialFrequency.Bandwidth + "'" + terrestrialFrequency.CollectionType); " is 162.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputCableFrequency,The length of the statement  "	streamWriter.WriteLine ("ScanningFrequency=" + cableFrequency.Frequency + "'" + cableFrequency.SymbolRate + "'" + cableFrequency.FEC + "'" + cableFrequency.Modulation + "'" + cableFrequency.CollectionType); " is 206.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputAtscFrequency,The length of the statement  "	streamWriter.WriteLine ("ScanningFrequency=" + atscFrequency.Frequency + "'" + atscFrequency.ChannelNumber + "'" + atscFrequency.SymbolRate + "'" + atscFrequency.FEC + "'" + atscFrequency.Modulation + "'" + atscFrequency.CollectionType); " is 237.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputClearQamFrequency,The length of the statement  "	streamWriter.WriteLine ("ScanningFrequency=" + clearQamFrequency.Frequency + "'" + clearQamFrequency.ChannelNumber + "'" + clearQamFrequency.SymbolRate + "'" + clearQamFrequency.FEC + "'" + clearQamFrequency.Modulation + "'" + clearQamFrequency.CollectionType); " is 261.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputISDBSatelliteFrequency,The length of the statement  "		streamWriter.WriteLine ("Dish=" + satelliteFrequency.SatelliteDish.LNBLowBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBHighBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBSwitchFrequency + "'" + satelliteFrequency.SatelliteDish.DiseqcSwitch); " is 264.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputISDBSatelliteFrequency,The length of the statement  "		streamWriter.WriteLine ("Dish=" + satelliteFrequency.SatelliteDish.LNBLowBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBHighBandFrequency + "'" + satelliteFrequency.SatelliteDish.LNBSwitchFrequency); " is 210.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputISDBSatelliteFrequency,The length of the statement  "	streamWriter.WriteLine ("ScanningFrequency=" + satelliteFrequency.Frequency + "'" + satelliteFrequency.SymbolRate + "'" + satelliteFrequency.FEC + "'" + satelliteFrequency.Polarization.PolarizationAbbreviation + "'" + satelliteFrequency.CollectionType); " is 253.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputISDBTerrestrialFrequency,The length of the statement  "	streamWriter.WriteLine ("ScanningFrequency=" + terrestrialFrequency.ChannelNumber + "'" + terrestrialFrequency.Frequency + "'" + terrestrialFrequency.Bandwidth + "'" + terrestrialFrequency.CollectionType); " is 205.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputStationParameters,The length of the statement  "		if (station.Excluded || (station.NewName != null && station.NewName.Trim () != string.Empty) || station.LogicalChannelNumber != -1) { " is 133.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputStationParameters,The length of the statement  "			streamWriter.Write ("Station=" + station.OriginalNetworkID + "'" + station.TransportStreamID + "'" + station.ServiceID); " is 120.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputScanListParameters,The length of the statement  "		streamWriter.WriteLine ("Scanned=" + station.OriginalNetworkID + "'" + station.TransportStreamID + "'" + station.ServiceID + "'" + station.LogicalChannelNumber + "'" + station.Name.Replace ("'"' "%%")); " is 202.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputTimeOffsetParameters,The length of the statement  "		streamWriter.WriteLine ("Offset=" + timeOffsetChannel.SourceChannel.Name.Replace ("'"' "%%") + "'" + timeOffsetChannel.SourceChannel.OriginalNetworkID + "'" + timeOffsetChannel.SourceChannel.TransportStreamID + "'" + timeOffsetChannel.SourceChannel.ServiceID + "'" + timeOffsetChannel.DestinationChannel.Name.Replace ("'"' "%%") + "'" + timeOffsetChannel.DestinationChannel.OriginalNetworkID + "'" + timeOffsetChannel.DestinationChannel.TransportStreamID + "'" + timeOffsetChannel.DestinationChannel.ServiceID + "'" + timeOffsetChannel.Offset); " is 544.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputServiceFilterParameters,The length of the statement  "				streamWriter.WriteLine ("IncludeService=" + filterEntry.OriginalNetworkID + "'" + filterEntry.TransportStreamID + "'" + filterEntry.StartServiceID + "'" + filterEntry.EndServiceID); " is 181.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputServiceFilterParameters,The length of the statement  "					streamWriter.WriteLine ("IncludeService=" + filterEntry.OriginalNetworkID + "'" + filterEntry.TransportStreamID + "'" + filterEntry.StartServiceID); " is 148.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Clone,The length of the statement  "		TimeOffsetChannel newOffset = new TimeOffsetChannel (oldOffset.SourceChannel' oldOffset.DestinationChannel' oldOffset.Offset); " is 126.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Clone,The length of the statement  "			ChannelFilterEntry newFilterEntry = new ChannelFilterEntry (oldFilterEntry.OriginalNetworkID' oldFilterEntry.TransportStreamID' oldFilterEntry.StartServiceID' oldFilterEntry.EndServiceID); " is 188.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The length of the statement  "			TVStation newStation = TVStation.FindStation (originalStation.OriginalNetworkID' originalStation.TransportStreamID' originalStation.ServiceID); " is 143.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The length of the statement  "		if (oldOffset.SourceChannel.Name != newOffset.SourceChannel.Name || oldOffset.DestinationChannel.Name != newOffset.DestinationChannel.Name || oldOffset.Offset != newOffset.Offset) " is 179.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The length of the statement  "	if ((originalFilters == null && ChannelFilterEntry.ChannelFilters != null) || originalFilters != null && ChannelFilterEntry.ChannelFilters == null) " is 147.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The length of the statement  "			if (oldFilterEntry.OriginalNetworkID != newFilterEntry.OriginalNetworkID || oldFilterEntry.TransportStreamID != newFilterEntry.TransportStreamID || oldFilterEntry.StartServiceID != newFilterEntry.StartServiceID || oldFilterEntry.EndServiceID != newFilterEntry.EndServiceID) " is 273.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The length of the statement  "			RepeatExclusion newRepeatExclusion = RepeatExclusion.Exclusions [originalRepeatExclusions.IndexOf (oldRepeatExclusion)]; " is 120.
Long Statement,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The length of the statement  "			if (oldRepeatExclusion.Title != newRepeatExclusion.Title || oldRepeatExclusion.Description != newRepeatExclusion.Description) " is 125.
Long Statement,DomainObjects,TerrestrialProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialProvider.cs,Load,The length of the statement  "		TerrestrialProvider terrestrialProvider = new TerrestrialProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4)); " is 122.
Long Statement,DomainObjects,TextTranslator,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TextTranslator.cs,GetTranslatedText,The length of the statement  "                appId + "&text=" + text + "&from=" + actualInputLanguage + "&to=" + actualOutputLanguage);*/string userString = string.Empty; " is 125.
Long Statement,DomainObjects,TextTranslator,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TextTranslator.cs,GetTranslatedText,The length of the statement  "	string buffer = sendWebRequest ("https://ajax.googleapis.com/ajax/services/language/translate?v=1.0" + "&q=" + text.Replace (" "' "%20") + "&langpair=" + actualInputLanguage + "%7C" + actualOutputLanguage + "&key=" + appId + userString); " is 237.
Long Statement,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Write,The length of the statement  "		fileStream = new FileStream (Path.Combine (RunParameters.DataDirectory' logFileName)' FileMode.OpenOrCreate' FileAccess.Write); " is 127.
Long Statement,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,AddFrequency,The length of the statement  "				if (oldFrequency.Polarization.PolarizationAbbreviation.CompareTo (newFrequency.Polarization.PolarizationAbbreviation) > 0) { " is 124.
Long Statement,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,FindProvider,The length of the statement  "			if (satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization) " is 217.
Long Statement,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,AddMapEntry,The length of the statement  "	SectionMapEntry newEntry = new SectionMapEntry (tableID' sectionNumber' lastTableID' lastSectionNumber' segmentLastSectionNumber); " is 130.
Long Statement,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,FindStation,The length of the statement  "		if (tvStation.OriginalNetworkID == originalNetworkID && tvStation.TransportStreamID == transportStreamID && tvStation.ServiceID == serviceID) " is 141.
Long Statement,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,LogIncompleteEITMapEntries,The length of the statement  "				Logger.Instance.Write ("ID: " + station.FullID + " TableID: " + mapEntry.TableID + " Sect No: " + mapEntry.SectionNumber + " Last Table ID: " + mapEntry.LastTableID + " Last Sect No: " + mapEntry.LastSectionNumber + " Seg Last Sect No: " + mapEntry.SegmentLastSectionNumber); " is 275.
Long Statement,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,AddStation,The length of the statement  "			if (oldStation.OriginalNetworkID == newStation.OriginalNetworkID && oldStation.TransportStreamID == newStation.TransportStreamID && oldStation.ServiceID == newStation.ServiceID) { " is 179.
Long Statement,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,AddEPGEntry,The length of the statement  "			if (newEntry.StartTime > oldEntry.StartTime && (newEntry.StartTime + newEntry.Duration) <= (oldEntry.StartTime + oldEntry.Duration)) " is 132.
Long Statement,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,unload,The length of the statement  "	xmlWriter.WriteElementString ("NextFollowingAvailable"' nextFollowingAvailable.ToString (CultureInfo.InvariantCulture)); " is 120.
Long Statement,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,addStation,The length of the statement  "		if (oldStation.OriginalNetworkID == newStation.OriginalNetworkID && oldStation.TransportStreamID == newStation.TransportStreamID && oldStation.ServiceID == newStation.ServiceID) " is 177.
Long Statement,DomainObjects,WMCChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\WMCChannel.cs,LoadDVBTuningInfo,The length of the statement  "	WMCDVBTuningInfo tuningInfo = new WMCDVBTuningInfo (Int32.Parse (reader.GetAttribute ("frequency"))' Int32.Parse (reader.GetAttribute ("onid"))' Int32.Parse (reader.GetAttribute ("tsid"))' Int32.Parse (reader.GetAttribute ("sid"))); " is 232.
Long Statement,DomainObjects,WMCChannel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\WMCChannel.cs,LoadATSCTuningInfo,The length of the statement  "	WMCATSCTuningInfo tuningInfo = new WMCATSCTuningInfo (Int32.Parse (reader.GetAttribute ("frequency"))' Int32.Parse (reader.GetAttribute ("majorChannel"))' Int32.Parse (reader.GetAttribute ("minorChannel"))); " is 207.
Complex Conditional,DomainObjects,AtscProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscProvider.cs,FindProvider,The conditional expression  "atscFrequency.ChannelNumber == channelNumber && atscFrequency.Frequency == frequency && atscFrequency.SymbolRate == symbolRate && atscFrequency.FEC.Rate == fecRate.Rate && atscFrequency.Modulation == modulation"  is complex.
Complex Conditional,DomainObjects,CableProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableProvider.cs,FindProvider,The conditional expression  "cableFrequency.Frequency == frequency && cableFrequency.SymbolRate == symbolRate && cableFrequency.FEC.Rate == fecRate.Rate && cableFrequency.Modulation == modulation"  is complex.
Complex Conditional,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,AddChannel,The conditional expression  "oldChannel.OriginalNetworkID == newChannel.OriginalNetworkID && oldChannel.TransportStreamID == newChannel.TransportStreamID && oldChannel.ServiceID == newChannel.ServiceID && oldChannel.ChannelID == newChannel.ChannelID"  is complex.
Complex Conditional,DomainObjects,ClearQamProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamProvider.cs,FindProvider,The conditional expression  "atscFrequency.ChannelNumber == channelNumber && atscFrequency.Frequency == frequency && atscFrequency.SymbolRate == symbolRate && atscFrequency.FEC.Rate == fecRate.Rate && atscFrequency.Modulation == modulation"  is complex.
Complex Conditional,DomainObjects,DVBLogicProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBLogicProgramCategory.cs,CheckDescription,The conditional expression  "descriptionPart != "action" && descriptionPart != "comedy" && descriptionPart != "documentary" && descriptionPart != "drama" && descriptionPart != "educational" && descriptionPart != "horror" && descriptionPart != "kids" && descriptionPart != "movie" && descriptionPart != "music" && descriptionPart != "news" && descriptionPart != "reality" && descriptionPart != "romance" && descriptionPart != "scifi" && descriptionPart != "serial" && descriptionPart != "soap" && descriptionPart != "special" && descriptionPart != "sports" && descriptionPart != "thriller" && descriptionPart != "adult""  is complex.
Complex Conditional,DomainObjects,ChannelFilterEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ChannelFilterEntry.cs,FindEntry,The conditional expression  "filterEntry.OriginalNetworkID == originalNetworkID && filterEntry.TransportStreamID == -1 && filterEntry.StartServiceID == -1 && filterEntry.EndServiceID == -1"  is complex.
Complex Conditional,DomainObjects,ChannelFilterEntry,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ChannelFilterEntry.cs,FindEntry,The conditional expression  "filterEntry.OriginalNetworkID == originalNetworkID && filterEntry.TransportStreamID == transportStreamID && filterEntry.StartServiceID == -1 && filterEntry.EndServiceID == -1"  is complex.
Complex Conditional,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,FindProvider,The conditional expression  "satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization"  is complex.
Complex Conditional,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The conditional expression  "(epgEntry.Directors != null && epgEntry.Directors.Count != 0) || (epgEntry.Cast != null && epgEntry.Cast.Count != 0)"  is complex.
Complex Conditional,DomainObjects,Region,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Region.cs,AddChannel,The conditional expression  "oldChannel.OriginalNetworkID == newChannel.OriginalNetworkID && oldChannel.TransportStreamID == newChannel.TransportStreamID && oldChannel.ServiceID == newChannel.ServiceID && oldChannel.ChannelID == newChannel.ChannelID"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputStationParameters,The conditional expression  "station.Excluded || (station.NewName != null && station.NewName.Trim () != string.Empty) || station.LogicalChannelNumber != -1"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The conditional expression  "(options == null && oldParameters.Options != null) || (options != null && oldParameters.Options == null)"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The conditional expression  "(traceIDs == null && oldParameters.TraceIDs != null) || (traceIDs != null && oldParameters.TraceIDs == null)"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The conditional expression  "(debugIDs == null && oldParameters.DebugIDs != null) || (debugIDs != null && oldParameters.DebugIDs == null)"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The conditional expression  "(mhw1Pids == null && oldParameters.MHW1Pids != null) || (mhw1Pids != null && oldParameters.MHW1Pids == null)"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The conditional expression  "(mhw2Pids == null && oldParameters.MHW2Pids != null) || (mhw2Pids != null && oldParameters.MHW2Pids == null)"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The conditional expression  "(originalFilters == null && ChannelFilterEntry.ChannelFilters != null) || originalFilters != null && ChannelFilterEntry.ChannelFilters == null"  is complex.
Complex Conditional,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,HasDataChanged,The conditional expression  "oldFilterEntry.OriginalNetworkID != newFilterEntry.OriginalNetworkID || oldFilterEntry.TransportStreamID != newFilterEntry.TransportStreamID || oldFilterEntry.StartServiceID != newFilterEntry.StartServiceID || oldFilterEntry.EndServiceID != newFilterEntry.EndServiceID"  is complex.
Complex Conditional,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,FindProvider,The conditional expression  "satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization"  is complex.
Empty Catch Block,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processGuideImages,The method has an empty catch block.
Empty Catch Block,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processGuideImages,The method has an empty catch block.
Magic Number,DomainObjects,AtscFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscFrequency.cs,ToString,The following statement contains a magic number: return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,AtscProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscProvider.cs,Load,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ("*.xml")) {  	AtscProvider atscProvider = new AtscProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4));  	atscProvider.load (fileInfo);  	AddProvider (atscProvider);  }  
Magic Number,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,ToString,The following statement contains a magic number: if (ChannelNumber == 0)  	return (Frequency / 1000 + " MHz");  else  	return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,ToString,The following statement contains a magic number: if (ChannelNumber == 0)  	return (Frequency / 1000 + " MHz");  else  	return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,ToString,The following statement contains a magic number: return (Frequency / 1000 + " MHz");  
Magic Number,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,ToString,The following statement contains a magic number: return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,CableProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableProvider.cs,Load,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ("*.xml")) {  	CableProvider cableProvider = new CableProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4));  	cableProvider.load (fileInfo);  	AddProvider (cableProvider);  }  
Magic Number,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,LogChannelMapping,The following statement contains a magic number: if (Flags != null) {  	flagString.Append ("0x");  	foreach (byte flagByte in Flags)  		flagString.Append (flagByte.ToString ("X").PadLeft (2' '0'));  }  else  	flagString.Append ("N/A");  
Magic Number,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,LogChannelMapping,The following statement contains a magic number: foreach (byte flagByte in Flags)  	flagString.Append (flagByte.ToString ("X").PadLeft (2' '0'));  
Magic Number,DomainObjects,Channel,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Channel.cs,LogChannelMapping,The following statement contains a magic number: flagString.Append (flagByte.ToString ("X").PadLeft (2' '0'));  
Magic Number,DomainObjects,ClearQamFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamFrequency.cs,ToString,The following statement contains a magic number: return ("Channel " + channelNumber + " (" + (Frequency / 1000) + " MHz)");  
Magic Number,DomainObjects,ClearQamProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamProvider.cs,Load,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ("*.xml")) {  	ClearQamProvider clearQamProvider = new ClearQamProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4));  	clearQamProvider.load (fileInfo);  	AddProvider (clearQamProvider);  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: foreach (string arg in args) {  	Logger.Instance.Write ("Processing command line parameter: " + arg);  	string[] parts = arg.Split (new char[] {  		'='  	});  	switch (parts [0].ToUpperInvariant ()) {  	case "/TUNERS":  		if (args.Length != 1 || parts.Length != 1) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			tunerQueryOnly = true;  			return (true);  		}  	case "/INI":  		if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else  			iniFileName = parts [1];  		break;  	case "/BACKGROUND":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			backgroundMode = true;  			runReference = parts [1];  		}  		break;  	case "/PLUGIN":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			pluginMode = true;  			runReference = parts [1];  		}  		break;  	default:  		Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  		return (false);  	}  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: foreach (string arg in args) {  	Logger.Instance.Write ("Processing command line parameter: " + arg);  	string[] parts = arg.Split (new char[] {  		'='  	});  	switch (parts [0].ToUpperInvariant ()) {  	case "/TUNERS":  		if (args.Length != 1 || parts.Length != 1) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			tunerQueryOnly = true;  			return (true);  		}  	case "/INI":  		if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else  			iniFileName = parts [1];  		break;  	case "/BACKGROUND":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			backgroundMode = true;  			runReference = parts [1];  		}  		break;  	case "/PLUGIN":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			pluginMode = true;  			runReference = parts [1];  		}  		break;  	default:  		Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  		return (false);  	}  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: foreach (string arg in args) {  	Logger.Instance.Write ("Processing command line parameter: " + arg);  	string[] parts = arg.Split (new char[] {  		'='  	});  	switch (parts [0].ToUpperInvariant ()) {  	case "/TUNERS":  		if (args.Length != 1 || parts.Length != 1) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			tunerQueryOnly = true;  			return (true);  		}  	case "/INI":  		if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else  			iniFileName = parts [1];  		break;  	case "/BACKGROUND":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			backgroundMode = true;  			runReference = parts [1];  		}  		break;  	case "/PLUGIN":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			pluginMode = true;  			runReference = parts [1];  		}  		break;  	default:  		Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  		return (false);  	}  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: foreach (string arg in args) {  	Logger.Instance.Write ("Processing command line parameter: " + arg);  	string[] parts = arg.Split (new char[] {  		'='  	});  	switch (parts [0].ToUpperInvariant ()) {  	case "/TUNERS":  		if (args.Length != 1 || parts.Length != 1) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			tunerQueryOnly = true;  			return (true);  		}  	case "/INI":  		if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else  			iniFileName = parts [1];  		break;  	case "/BACKGROUND":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			backgroundMode = true;  			runReference = parts [1];  		}  		break;  	case "/PLUGIN":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			pluginMode = true;  			runReference = parts [1];  		}  		break;  	default:  		Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  		return (false);  	}  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: foreach (string arg in args) {  	Logger.Instance.Write ("Processing command line parameter: " + arg);  	string[] parts = arg.Split (new char[] {  		'='  	});  	switch (parts [0].ToUpperInvariant ()) {  	case "/TUNERS":  		if (args.Length != 1 || parts.Length != 1) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			tunerQueryOnly = true;  			return (true);  		}  	case "/INI":  		if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else  			iniFileName = parts [1];  		break;  	case "/BACKGROUND":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			backgroundMode = true;  			runReference = parts [1];  		}  		break;  	case "/PLUGIN":  		if (args.Length != 2 || parts.Length != 2) {  			Logger.Instance.Write ("Command line parameter wrong");  			return (false);  		}  		else {  			pluginMode = true;  			runReference = parts [1];  		}  		break;  	default:  		Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  		return (false);  	}  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: switch (parts [0].ToUpperInvariant ()) {  case "/TUNERS":  	if (args.Length != 1 || parts.Length != 1) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		tunerQueryOnly = true;  		return (true);  	}  case "/INI":  	if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else  		iniFileName = parts [1];  	break;  case "/BACKGROUND":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		backgroundMode = true;  		runReference = parts [1];  	}  	break;  case "/PLUGIN":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		pluginMode = true;  		runReference = parts [1];  	}  	break;  default:  	Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  	return (false);  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: switch (parts [0].ToUpperInvariant ()) {  case "/TUNERS":  	if (args.Length != 1 || parts.Length != 1) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		tunerQueryOnly = true;  		return (true);  	}  case "/INI":  	if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else  		iniFileName = parts [1];  	break;  case "/BACKGROUND":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		backgroundMode = true;  		runReference = parts [1];  	}  	break;  case "/PLUGIN":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		pluginMode = true;  		runReference = parts [1];  	}  	break;  default:  	Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  	return (false);  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: switch (parts [0].ToUpperInvariant ()) {  case "/TUNERS":  	if (args.Length != 1 || parts.Length != 1) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		tunerQueryOnly = true;  		return (true);  	}  case "/INI":  	if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else  		iniFileName = parts [1];  	break;  case "/BACKGROUND":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		backgroundMode = true;  		runReference = parts [1];  	}  	break;  case "/PLUGIN":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		pluginMode = true;  		runReference = parts [1];  	}  	break;  default:  	Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  	return (false);  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: switch (parts [0].ToUpperInvariant ()) {  case "/TUNERS":  	if (args.Length != 1 || parts.Length != 1) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		tunerQueryOnly = true;  		return (true);  	}  case "/INI":  	if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else  		iniFileName = parts [1];  	break;  case "/BACKGROUND":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		backgroundMode = true;  		runReference = parts [1];  	}  	break;  case "/PLUGIN":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		pluginMode = true;  		runReference = parts [1];  	}  	break;  default:  	Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  	return (false);  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: switch (parts [0].ToUpperInvariant ()) {  case "/TUNERS":  	if (args.Length != 1 || parts.Length != 1) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		tunerQueryOnly = true;  		return (true);  	}  case "/INI":  	if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else  		iniFileName = parts [1];  	break;  case "/BACKGROUND":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		backgroundMode = true;  		runReference = parts [1];  	}  	break;  case "/PLUGIN":  	if (args.Length != 2 || parts.Length != 2) {  		Logger.Instance.Write ("Command line parameter wrong");  		return (false);  	}  	else {  		pluginMode = true;  		runReference = parts [1];  	}  	break;  default:  	Logger.Instance.Write ("Command line parameter not recognized: " + parts [0]);  	return (false);  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: if (parts.Length != 2 || parts [1].Trim ().Length == 0) {  	Logger.Instance.Write ("Command line parameter wrong");  	return (false);  }  else  	iniFileName = parts [1];  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: if (args.Length != 2 || parts.Length != 2) {  	Logger.Instance.Write ("Command line parameter wrong");  	return (false);  }  else {  	backgroundMode = true;  	runReference = parts [1];  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: if (args.Length != 2 || parts.Length != 2) {  	Logger.Instance.Write ("Command line parameter wrong");  	return (false);  }  else {  	backgroundMode = true;  	runReference = parts [1];  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: if (args.Length != 2 || parts.Length != 2) {  	Logger.Instance.Write ("Command line parameter wrong");  	return (false);  }  else {  	pluginMode = true;  	runReference = parts [1];  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,Process,The following statement contains a magic number: if (args.Length != 2 || parts.Length != 2) {  	Logger.Instance.Write ("Command line parameter wrong");  	return (false);  }  else {  	pluginMode = true;  	runReference = parts [1];  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,CommandLine,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CommandLine.cs,GetCompletionCodeDescription,The following statement contains a magic number: switch (code) {  case 0:  	return ("The run completed successfully.");  case 1:  	return ("No DVB tuners installed.");  case 2:  	return ("The initialization file cannot be located.");  case 3:  	return ("The initialization file has a parameter error.");  case 4:  	return ("The command line is incorrect.");  case 5:  	return ("A program exception occurred.");  case 6:  	return ("The EPG data is incomplete.");  case 7:  	return ("The collection was abandoned by the user.");  case 8:  	return ("The initialization file parameters do not mact the tuner configuration.");  case 9:  	return ("The log file cannot be written.");  case 10:  	return ("Some frequencies could not be processed. See the log for details");  case 11:  	return ("The output file could not be created.");  case 12:  	return ("The simulation file could not be located.");  case 13:  	return ("The collection finished normally but no data was collected.");  default:  	return ("The exit code is not recognized.");  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: if (descriptionParts.Length != 2)  	return (false);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: try {  	int contentCode = Int32.Parse (descriptionParts [0].Trim ());  	int subContentCode = Int32.Parse (descriptionParts [1].Trim ());  	switch (contentCode) {  	case 0:  		return (subContentCode == 0);  	case 1:  		return (subContentCode >= 0 && subContentCode <= 8);  	case 2:  		return (subContentCode >= 0 && subContentCode <= 4);  	case 3:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 4:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 5:  		return (subContentCode >= 0 && subContentCode <= 5);  	case 6:  		return (subContentCode >= 0 && subContentCode <= 6);  	case 7:  		return (subContentCode >= 0 && subContentCode <= 11);  	case 8:  		return (subContentCode >= 0 && subContentCode <= 3);  	case 9:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 10:  		return (subContentCode >= 0 && subContentCode <= 7);  	case 11:  		return (subContentCode >= 0 && subContentCode <= 3);  	default:  		return (false);  	}  }  catch (FormatException) {  	return (false);  }  catch (ArithmeticException) {  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: switch (contentCode) {  case 0:  	return (subContentCode == 0);  case 1:  	return (subContentCode >= 0 && subContentCode <= 8);  case 2:  	return (subContentCode >= 0 && subContentCode <= 4);  case 3:  	return (subContentCode >= 0 && subContentCode <= 3);  case 4:  	return (subContentCode >= 0 && subContentCode <= 11);  case 5:  	return (subContentCode >= 0 && subContentCode <= 5);  case 6:  	return (subContentCode >= 0 && subContentCode <= 6);  case 7:  	return (subContentCode >= 0 && subContentCode <= 11);  case 8:  	return (subContentCode >= 0 && subContentCode <= 3);  case 9:  	return (subContentCode >= 0 && subContentCode <= 7);  case 10:  	return (subContentCode >= 0 && subContentCode <= 7);  case 11:  	return (subContentCode >= 0 && subContentCode <= 3);  default:  	return (false);  }  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 8);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 4);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 3);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 11);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 5);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 6);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 11);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 3);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 7);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 7);  
Magic Number,DomainObjects,DVBViewerProgramCategory,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\DVBViewerProgramCategory.cs,CheckDescription,The following statement contains a magic number: return (subContentCode >= 0 && subContentCode <= 3);  
Magic Number,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,ISDBSatelliteProvider,The following statement contains a magic number: longitude = (int)(decimal.Parse (parts [0].Substring (0' parts [0].Length - 2)' CultureInfo.InvariantCulture) * 10);  
Magic Number,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,ISDBSatelliteProvider,The following statement contains a magic number: longitude = (int)(decimal.Parse (parts [0].Substring (0' parts [0].Length - 2)' CultureInfo.InvariantCulture) * 10);  
Magic Number,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,Load,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ("*.xml")) {  	ISDBSatelliteProvider satellite = new ISDBSatelliteProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4));  	satellite.load (fileInfo);  	AddProvider (satellite);  }  
Magic Number,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,FindProvider,The following statement contains a magic number: foreach (ISDBSatelliteProvider provider in Providers) {  	foreach (ISDBSatelliteFrequency satelliteFrequency in provider.Frequencies) {  		if (provider.Longitude == 1600) {  			int count = 0;  			count++;  		}  		if (satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization)  			return (provider);  	}  }  
Magic Number,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,FindProvider,The following statement contains a magic number: foreach (ISDBSatelliteFrequency satelliteFrequency in provider.Frequencies) {  	if (provider.Longitude == 1600) {  		int count = 0;  		count++;  	}  	if (satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization)  		return (provider);  }  
Magic Number,DomainObjects,ISDBSatelliteProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteProvider.cs,FindProvider,The following statement contains a magic number: if (provider.Longitude == 1600) {  	int count = 0;  	count++;  }  
Magic Number,DomainObjects,ISDBTerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBTerrestrialFrequency.cs,ToString,The following statement contains a magic number: return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,ISDBTerrestrialProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBTerrestrialProvider.cs,Load,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ("*.xml")) {  	ISDBTerrestrialProvider atscProvider = new ISDBTerrestrialProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4));  	atscProvider.load (fileInfo);  	AddProvider (atscProvider);  }  
Magic Number,DomainObjects,OutputFileAreaRegionChannels,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileAreaRegionChannels.cs,checkArea,The following statement contains a magic number: if (region == 65535)  	return (true);  
Magic Number,DomainObjects,OutputFileDVBViewer,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileDVBViewer.cs,processStationEPG,The following statement contains a magic number: foreach (EPGEntry epgEntry in tvStation.EPGCollection) {  	xmlWriter.WriteStartElement ("programme");  	xmlWriter.WriteAttributeString ("start"' epgEntry.StartTime.ToString ("yyyyMMddHHmmss").Replace (":"' ""));  	xmlWriter.WriteAttributeString ("stop"' (epgEntry.StartTime + epgEntry.Duration).ToString ("yyyyMMddHHmmss").Replace (":"' ""));  	xmlWriter.WriteAttributeString ("channel"' ((tvStation.TransportStreamID << 16) + tvStation.ServiceID).ToString ());  	xmlWriter.WriteElementString ("eventid"' epgEntry.EventID.ToString ());  	if (epgEntry.EventCategory != null) {  		try {  			xmlWriter.WriteElementString ("content"' Int32.Parse (epgEntry.EventCategory.Trim ()).ToString ());  		}  		catch (FormatException) {  			xmlWriter.WriteElementString ("content"' "48");  		}  		catch (ArithmeticException) {  			xmlWriter.WriteElementString ("content"' "48");  		}  	}  	else  		xmlWriter.WriteElementString ("content"' "48");  	xmlWriter.WriteElementString ("charset"' "255");  	xmlWriter.WriteStartElement ("titles");  	xmlWriter.WriteStartElement ("title");  	if (epgEntry.EventName != null)  		xmlWriter.WriteValue (epgEntry.EventName);  	else  		xmlWriter.WriteValue ("No Title");  	xmlWriter.WriteEndElement ();  	xmlWriter.WriteEndElement ();  	xmlWriter.WriteStartElement ("events");  	xmlWriter.WriteStartElement ("event");  	if (epgEntry.ShortDescription != null)  		xmlWriter.WriteValue (epgEntry.ShortDescription);  	else {  		if (epgEntry.EventName != null)  			xmlWriter.WriteValue (epgEntry.EventName);  		else  			xmlWriter.WriteValue ("No Description");  	}  	xmlWriter.WriteEndElement ();  	xmlWriter.WriteEndElement ();  	xmlWriter.WriteEndElement ();  	epgCount++;  }  
Magic Number,DomainObjects,OutputFileDVBViewer,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileDVBViewer.cs,processStationEPG,The following statement contains a magic number: xmlWriter.WriteAttributeString ("channel"' ((tvStation.TransportStreamID << 16) + tvStation.ServiceID).ToString ());  
Magic Number,DomainObjects,OutputFileDVBViewer,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileDVBViewer.cs,sendGetRequest,The following statement contains a magic number: webRequest.Timeout = 180000;  
Magic Number,DomainObjects,OutputFileDVBViewer,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileDVBViewer.cs,sendPostRequest,The following statement contains a magic number: webRequest.Timeout = 180000;  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processKeywords,The following statement contains a magic number: foreach (KeywordGroup group in groups) {  	xmlWriter.WriteStartElement ("Keyword");  	xmlWriter.WriteAttributeString ("id"' "k" + ((groups.IndexOf (group) + 1)));  	xmlWriter.WriteAttributeString ("word"' group.Name.Trim ());  	xmlWriter.WriteEndElement ();  	foreach (string keyword in group.Keywords) {  		xmlWriter.WriteStartElement ("Keyword");  		xmlWriter.WriteAttributeString ("id"' "k" + (((groups.IndexOf (group) + 1) * 100) + group.Keywords.IndexOf (keyword)));  		xmlWriter.WriteAttributeString ("word"' keyword.Trim ());  		xmlWriter.WriteEndElement ();  	}  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processKeywords,The following statement contains a magic number: foreach (string keyword in group.Keywords) {  	xmlWriter.WriteStartElement ("Keyword");  	xmlWriter.WriteAttributeString ("id"' "k" + (((groups.IndexOf (group) + 1) * 100) + group.Keywords.IndexOf (keyword)));  	xmlWriter.WriteAttributeString ("word"' keyword.Trim ());  	xmlWriter.WriteEndElement ();  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processKeywords,The following statement contains a magic number: xmlWriter.WriteAttributeString ("id"' "k" + (((groups.IndexOf (group) + 1) * 100) + group.Keywords.IndexOf (keyword)));  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processKeywordGroups,The following statement contains a magic number: foreach (KeywordGroup group in groups) {  	xmlWriter.WriteStartElement ("KeywordGroup");  	xmlWriter.WriteAttributeString ("uid"' "!KeywordGroup!k-" + group.Name.ToLowerInvariant ().Replace (' '' '-'));  	xmlWriter.WriteAttributeString ("groupName"' "k" + groupNumber);  	StringBuilder keywordString = new StringBuilder ();  	int keywordNumber = 0;  	foreach (string keyword in group.Keywords) {  		if (keywordString.Length != 0)  			keywordString.Append ("'");  		keywordString.Append ("k" + ((groupNumber * 100) + keywordNumber));  		keywordNumber++;  	}  	xmlWriter.WriteAttributeString ("keywords"' keywordString.ToString ());  	xmlWriter.WriteEndElement ();  	groupNumber++;  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processKeywordGroups,The following statement contains a magic number: foreach (string keyword in group.Keywords) {  	if (keywordString.Length != 0)  		keywordString.Append ("'");  	keywordString.Append ("k" + ((groupNumber * 100) + keywordNumber));  	keywordNumber++;  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processKeywordGroups,The following statement contains a magic number: keywordString.Append ("k" + ((groupNumber * 100) + keywordNumber));  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processGuideImages,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ()) {  	if (fileInfo.Extension.ToLowerInvariant () == ".png") {  		string serviceID = fileInfo.Name.Remove (fileInfo.Name.Length - 4);  		try {  			guideImages.Add (Int32.Parse (serviceID));  			xmlWriter.WriteStartElement ("GuideImage");  			xmlWriter.WriteAttributeString ("id"' "i" + guideImages.Count);  			xmlWriter.WriteAttributeString ("uid"' "!Image!SID" + serviceID);  			xmlWriter.WriteAttributeString ("imageUrl"' "file://" + fileInfo.FullName);  			xmlWriter.WriteEndElement ();  		}  		catch (ArgumentException) {  		}  		catch (ArithmeticException) {  		}  	}  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processGuideImages,The following statement contains a magic number: if (fileInfo.Extension.ToLowerInvariant () == ".png") {  	string serviceID = fileInfo.Name.Remove (fileInfo.Name.Length - 4);  	try {  		guideImages.Add (Int32.Parse (serviceID));  		xmlWriter.WriteStartElement ("GuideImage");  		xmlWriter.WriteAttributeString ("id"' "i" + guideImages.Count);  		xmlWriter.WriteAttributeString ("uid"' "!Image!SID" + serviceID);  		xmlWriter.WriteAttributeString ("imageUrl"' "file://" + fileInfo.FullName);  		xmlWriter.WriteEndElement ();  	}  	catch (ArgumentException) {  	}  	catch (ArithmeticException) {  	}  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processCategoryKeywords,The following statement contains a magic number: if (parts.Length < 2)  	return;  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processCategoryKeywords,The following statement contains a magic number: foreach (KeywordGroup group in groups) {  	if (group.Name == parts [0]) {  		keywordString.Append ("k" + groupNumber);  		int keywordNumber = groupNumber * 100;  		for (int keywordIndex = 1; keywordIndex < group.Keywords.Count; keywordIndex++) {  			keywordNumber++;  			for (int partsIndex = 1; partsIndex < parts.Length; partsIndex++) {  				if (group.Keywords [keywordIndex] == parts [partsIndex])  					keywordString.Append ("'k" + keywordNumber);  			}  		}  		xmlWriter.WriteAttributeString ("keywords"' keywordString.ToString ());  		return;  	}  	groupNumber++;  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,processCategoryKeywords,The following statement contains a magic number: if (group.Name == parts [0]) {  	keywordString.Append ("k" + groupNumber);  	int keywordNumber = groupNumber * 100;  	for (int keywordIndex = 1; keywordIndex < group.Keywords.Count; keywordIndex++) {  		keywordNumber++;  		for (int partsIndex = 1; partsIndex < parts.Length; partsIndex++) {  			if (group.Keywords [keywordIndex] == parts [partsIndex])  				keywordString.Append ("'k" + keywordNumber);  		}  	}  	xmlWriter.WriteAttributeString ("keywords"' keywordString.ToString ());  	return;  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,runImportUtility,The following statement contains a magic number: try {  	importProcess.Start ();  	importProcess.BeginOutputReadLine ();  	importProcess.BeginErrorReadLine ();  	while (!importExited)  		Thread.Sleep (500);  	Logger.Instance.Write ("Windows Media Centre import utility LoadMXF has completed: exit code " + importProcess.ExitCode);  	if (importProcess.ExitCode == 0)  		return (null);  	else  		return ("Failed to load Windows Media Centre data: reply code " + importProcess.ExitCode);  }  catch (Exception e) {  	Logger.Instance.Write ("<e> Failed to run the Windows Media Centre import utility LoadMXF");  	Logger.Instance.Write ("<e> " + e.Message);  	return ("Failed to load Windows Media Centre data due to an exception");  }  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,runImportUtility,The following statement contains a magic number: while (!importExited)  	Thread.Sleep (500);  
Magic Number,DomainObjects,OutputFileMXF,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileMXF.cs,runImportUtility,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DomainObjects,OutputFilePlugin,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFilePlugin.cs,checkNZLTimes,The following statement contains a magic number: if (nextEntry.Duration > new TimeSpan (3' 0' 0))  	return (false);  
Magic Number,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The following statement contains a magic number: if (epgEntry.EpisodeSystemType != null) {  	string series;  	if (epgEntry.Series != null)  		series = epgEntry.Series;  	else  		series = "";  	string episode;  	if (epgEntry.Episode != null)  		episode = epgEntry.Episode;  	else  		episode = "";  	string partNumber;  	if (epgEntry.PartNumber != null)  		partNumber = epgEntry.PartNumber;  	else  		partNumber = "";  	xmlWriter.WriteStartElement ("episode-num");  	xmlWriter.WriteAttributeString ("system"' epgEntry.EpisodeSystemType);  	if (epgEntry.EpisodeSystemParts != 2)  		xmlWriter.WriteString (series + " . " + episode + " . " + partNumber);  	else  		xmlWriter.WriteString (series + " . " + episode);  	xmlWriter.WriteEndElement ();  }  
Magic Number,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,processEPGEntry,The following statement contains a magic number: if (epgEntry.EpisodeSystemParts != 2)  	xmlWriter.WriteString (series + " . " + episode + " . " + partNumber);  else  	xmlWriter.WriteString (series + " . " + episode);  
Magic Number,DomainObjects,OutputFileXML,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\OutputFileXML.cs,checkArea,The following statement contains a magic number: if (region == 65535)  	return (true);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: while (!streamReader.EndOfStream && reply == errorCodeNoError) {  	string line = streamReader.ReadLine ();  	string processLine = line.Replace ((char)0x09' ' ');  	processLine = processLine.Replace ("\ufffd"' "?");  	int commentIndex = processLine.LastIndexOf ("//");  	if (commentIndex != -1)  		processLine = processLine.Substring (0' commentIndex);  	char splitter = ':';  	if (processLine.IndexOf ('=') != -1)  		splitter = '=';  	string[] parts = processLine.Split (new char[] {  		splitter  	});  	if (parts.Length > 0) {  		switch (parts [0].Trim ().ToUpperInvariant ()) {  		case "OUTPUT":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processOutput (parts [1] + ":" + parts [2]);  			else  				reply = processOutput (parts [1]);  			break;  		case "TUNER":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuner (parts [1]);  			break;  		case "SATELLITE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processSatellite (parts [1]);  			break;  		case "DISH":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDish (parts [1]);  			break;  		case "FREQUENCY":  			currentFrequency = null;  			reply = processFrequency (parts [1]);  			break;  		case "SCANNINGFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processFrequency (parts [1]);  			break;  		case "TIMEOUTS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeouts (parts [1]);  			break;  		case "STATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processStation (parts [1]);  			break;  		case "OPTION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOption (parts [1]);  			break;  		case "TRACE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTrace (parts [1]);  			break;  		case "DEBUG":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDebug (parts [1]);  			break;  		case "LOCATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processLocation (parts [1]);  			break;  		case "LANGUAGE":  		case "INPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processInputLanguage (parts [1]);  			break;  		case "OUTPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOutputLanguage (parts [1]);  			break;  		case "TIMEZONE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeZone (parts [1]);  			break;  		case "TSFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processTSFile (parts [1] + ":" + parts [2]);  			else  				reply = processTSFile (parts [1]);  			break;  		case "CHANNELS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processChannel (parts [1]);  			break;  		case "DISEQC":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDiseqc (parts [1]);  			break;  		case "CHARSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processCharSet (parts [1]);  			break;  		case "EITPID":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processEITPid (parts [1]);  			break;  		case "MHW1PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW1Pids (parts [1]);  			break;  		case "MHW2PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW2Pids (parts [1]);  			break;  		case "PLUGINFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processPluginFrequency (parts [1]);  			break;  		case "[DVBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new SatelliteFrequency ();  			break;  		case "[DVBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new TerrestrialFrequency ();  			break;  		case "[DVBC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new CableFrequency ();  			break;  		case "[ATSC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new AtscFrequency ();  			break;  		case "[CLEARQAM]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ClearQamFrequency ();  			break;  		case "[ISDBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBSatelliteFrequency ();  			break;  		case "[ISDBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBTerrestrialFrequency ();  			break;  		case "TUNINGFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuningFile (parts [1]);  			break;  		case "SCANNED":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  			break;  		case "OFFSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOffsetChannel (parts [1]);  			break;  		case "INCLUDESERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processIncludeService (parts [1]);  			break;  		case "MAXSERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMaxService (parts [1]);  			break;  		case "REPEATEXCLUSION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatExclusion (parts [1]);  			break;  		case "REPEATPHRASE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatPhrase (parts [1]);  			break;  		case "WMCIMPORTNAME":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processWMCImportName (parts [1]);  			break;  		case "[GENERAL]":  		case "[DIAGNOSTICS]":  		case "[SCANLIST]":  		case "[STATIONS]":  		case "[OFFSETS]":  		case "[SERVICEFILTERS]":  		case "[REPEATEXCLUSIONS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			break;  		default:  			if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  				Logger.Instance.Write ("Processing ini parameter: " + line);  				reply = processScannedChannel (parts [1]);  			}  			break;  		}  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: while (!streamReader.EndOfStream && reply == errorCodeNoError) {  	string line = streamReader.ReadLine ();  	string processLine = line.Replace ((char)0x09' ' ');  	processLine = processLine.Replace ("\ufffd"' "?");  	int commentIndex = processLine.LastIndexOf ("//");  	if (commentIndex != -1)  		processLine = processLine.Substring (0' commentIndex);  	char splitter = ':';  	if (processLine.IndexOf ('=') != -1)  		splitter = '=';  	string[] parts = processLine.Split (new char[] {  		splitter  	});  	if (parts.Length > 0) {  		switch (parts [0].Trim ().ToUpperInvariant ()) {  		case "OUTPUT":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processOutput (parts [1] + ":" + parts [2]);  			else  				reply = processOutput (parts [1]);  			break;  		case "TUNER":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuner (parts [1]);  			break;  		case "SATELLITE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processSatellite (parts [1]);  			break;  		case "DISH":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDish (parts [1]);  			break;  		case "FREQUENCY":  			currentFrequency = null;  			reply = processFrequency (parts [1]);  			break;  		case "SCANNINGFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processFrequency (parts [1]);  			break;  		case "TIMEOUTS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeouts (parts [1]);  			break;  		case "STATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processStation (parts [1]);  			break;  		case "OPTION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOption (parts [1]);  			break;  		case "TRACE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTrace (parts [1]);  			break;  		case "DEBUG":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDebug (parts [1]);  			break;  		case "LOCATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processLocation (parts [1]);  			break;  		case "LANGUAGE":  		case "INPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processInputLanguage (parts [1]);  			break;  		case "OUTPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOutputLanguage (parts [1]);  			break;  		case "TIMEZONE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeZone (parts [1]);  			break;  		case "TSFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processTSFile (parts [1] + ":" + parts [2]);  			else  				reply = processTSFile (parts [1]);  			break;  		case "CHANNELS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processChannel (parts [1]);  			break;  		case "DISEQC":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDiseqc (parts [1]);  			break;  		case "CHARSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processCharSet (parts [1]);  			break;  		case "EITPID":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processEITPid (parts [1]);  			break;  		case "MHW1PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW1Pids (parts [1]);  			break;  		case "MHW2PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW2Pids (parts [1]);  			break;  		case "PLUGINFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processPluginFrequency (parts [1]);  			break;  		case "[DVBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new SatelliteFrequency ();  			break;  		case "[DVBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new TerrestrialFrequency ();  			break;  		case "[DVBC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new CableFrequency ();  			break;  		case "[ATSC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new AtscFrequency ();  			break;  		case "[CLEARQAM]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ClearQamFrequency ();  			break;  		case "[ISDBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBSatelliteFrequency ();  			break;  		case "[ISDBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBTerrestrialFrequency ();  			break;  		case "TUNINGFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuningFile (parts [1]);  			break;  		case "SCANNED":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  			break;  		case "OFFSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOffsetChannel (parts [1]);  			break;  		case "INCLUDESERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processIncludeService (parts [1]);  			break;  		case "MAXSERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMaxService (parts [1]);  			break;  		case "REPEATEXCLUSION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatExclusion (parts [1]);  			break;  		case "REPEATPHRASE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatPhrase (parts [1]);  			break;  		case "WMCIMPORTNAME":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processWMCImportName (parts [1]);  			break;  		case "[GENERAL]":  		case "[DIAGNOSTICS]":  		case "[SCANLIST]":  		case "[STATIONS]":  		case "[OFFSETS]":  		case "[SERVICEFILTERS]":  		case "[REPEATEXCLUSIONS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			break;  		default:  			if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  				Logger.Instance.Write ("Processing ini parameter: " + line);  				reply = processScannedChannel (parts [1]);  			}  			break;  		}  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: while (!streamReader.EndOfStream && reply == errorCodeNoError) {  	string line = streamReader.ReadLine ();  	string processLine = line.Replace ((char)0x09' ' ');  	processLine = processLine.Replace ("\ufffd"' "?");  	int commentIndex = processLine.LastIndexOf ("//");  	if (commentIndex != -1)  		processLine = processLine.Substring (0' commentIndex);  	char splitter = ':';  	if (processLine.IndexOf ('=') != -1)  		splitter = '=';  	string[] parts = processLine.Split (new char[] {  		splitter  	});  	if (parts.Length > 0) {  		switch (parts [0].Trim ().ToUpperInvariant ()) {  		case "OUTPUT":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processOutput (parts [1] + ":" + parts [2]);  			else  				reply = processOutput (parts [1]);  			break;  		case "TUNER":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuner (parts [1]);  			break;  		case "SATELLITE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processSatellite (parts [1]);  			break;  		case "DISH":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDish (parts [1]);  			break;  		case "FREQUENCY":  			currentFrequency = null;  			reply = processFrequency (parts [1]);  			break;  		case "SCANNINGFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processFrequency (parts [1]);  			break;  		case "TIMEOUTS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeouts (parts [1]);  			break;  		case "STATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processStation (parts [1]);  			break;  		case "OPTION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOption (parts [1]);  			break;  		case "TRACE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTrace (parts [1]);  			break;  		case "DEBUG":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDebug (parts [1]);  			break;  		case "LOCATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processLocation (parts [1]);  			break;  		case "LANGUAGE":  		case "INPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processInputLanguage (parts [1]);  			break;  		case "OUTPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOutputLanguage (parts [1]);  			break;  		case "TIMEZONE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeZone (parts [1]);  			break;  		case "TSFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processTSFile (parts [1] + ":" + parts [2]);  			else  				reply = processTSFile (parts [1]);  			break;  		case "CHANNELS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processChannel (parts [1]);  			break;  		case "DISEQC":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDiseqc (parts [1]);  			break;  		case "CHARSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processCharSet (parts [1]);  			break;  		case "EITPID":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processEITPid (parts [1]);  			break;  		case "MHW1PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW1Pids (parts [1]);  			break;  		case "MHW2PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW2Pids (parts [1]);  			break;  		case "PLUGINFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processPluginFrequency (parts [1]);  			break;  		case "[DVBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new SatelliteFrequency ();  			break;  		case "[DVBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new TerrestrialFrequency ();  			break;  		case "[DVBC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new CableFrequency ();  			break;  		case "[ATSC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new AtscFrequency ();  			break;  		case "[CLEARQAM]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ClearQamFrequency ();  			break;  		case "[ISDBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBSatelliteFrequency ();  			break;  		case "[ISDBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBTerrestrialFrequency ();  			break;  		case "TUNINGFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuningFile (parts [1]);  			break;  		case "SCANNED":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  			break;  		case "OFFSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOffsetChannel (parts [1]);  			break;  		case "INCLUDESERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processIncludeService (parts [1]);  			break;  		case "MAXSERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMaxService (parts [1]);  			break;  		case "REPEATEXCLUSION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatExclusion (parts [1]);  			break;  		case "REPEATPHRASE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatPhrase (parts [1]);  			break;  		case "WMCIMPORTNAME":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processWMCImportName (parts [1]);  			break;  		case "[GENERAL]":  		case "[DIAGNOSTICS]":  		case "[SCANLIST]":  		case "[STATIONS]":  		case "[OFFSETS]":  		case "[SERVICEFILTERS]":  		case "[REPEATEXCLUSIONS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			break;  		default:  			if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  				Logger.Instance.Write ("Processing ini parameter: " + line);  				reply = processScannedChannel (parts [1]);  			}  			break;  		}  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: while (!streamReader.EndOfStream && reply == errorCodeNoError) {  	string line = streamReader.ReadLine ();  	string processLine = line.Replace ((char)0x09' ' ');  	processLine = processLine.Replace ("\ufffd"' "?");  	int commentIndex = processLine.LastIndexOf ("//");  	if (commentIndex != -1)  		processLine = processLine.Substring (0' commentIndex);  	char splitter = ':';  	if (processLine.IndexOf ('=') != -1)  		splitter = '=';  	string[] parts = processLine.Split (new char[] {  		splitter  	});  	if (parts.Length > 0) {  		switch (parts [0].Trim ().ToUpperInvariant ()) {  		case "OUTPUT":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processOutput (parts [1] + ":" + parts [2]);  			else  				reply = processOutput (parts [1]);  			break;  		case "TUNER":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuner (parts [1]);  			break;  		case "SATELLITE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processSatellite (parts [1]);  			break;  		case "DISH":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDish (parts [1]);  			break;  		case "FREQUENCY":  			currentFrequency = null;  			reply = processFrequency (parts [1]);  			break;  		case "SCANNINGFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processFrequency (parts [1]);  			break;  		case "TIMEOUTS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeouts (parts [1]);  			break;  		case "STATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processStation (parts [1]);  			break;  		case "OPTION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOption (parts [1]);  			break;  		case "TRACE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTrace (parts [1]);  			break;  		case "DEBUG":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDebug (parts [1]);  			break;  		case "LOCATION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processLocation (parts [1]);  			break;  		case "LANGUAGE":  		case "INPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processInputLanguage (parts [1]);  			break;  		case "OUTPUTLANGUAGE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOutputLanguage (parts [1]);  			break;  		case "TIMEZONE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTimeZone (parts [1]);  			break;  		case "TSFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			if (parts.Length > 2)  				reply = processTSFile (parts [1] + ":" + parts [2]);  			else  				reply = processTSFile (parts [1]);  			break;  		case "CHANNELS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processChannel (parts [1]);  			break;  		case "DISEQC":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processDiseqc (parts [1]);  			break;  		case "CHARSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processCharSet (parts [1]);  			break;  		case "EITPID":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processEITPid (parts [1]);  			break;  		case "MHW1PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW1Pids (parts [1]);  			break;  		case "MHW2PIDS":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMHW2Pids (parts [1]);  			break;  		case "PLUGINFREQUENCY":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processPluginFrequency (parts [1]);  			break;  		case "[DVBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new SatelliteFrequency ();  			break;  		case "[DVBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new TerrestrialFrequency ();  			break;  		case "[DVBC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new CableFrequency ();  			break;  		case "[ATSC]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new AtscFrequency ();  			break;  		case "[CLEARQAM]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ClearQamFrequency ();  			break;  		case "[ISDBS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBSatelliteFrequency ();  			break;  		case "[ISDBT]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			currentFrequency = new ISDBTerrestrialFrequency ();  			break;  		case "TUNINGFILE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processTuningFile (parts [1]);  			break;  		case "SCANNED":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  			break;  		case "OFFSET":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processOffsetChannel (parts [1]);  			break;  		case "INCLUDESERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processIncludeService (parts [1]);  			break;  		case "MAXSERVICE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processMaxService (parts [1]);  			break;  		case "REPEATEXCLUSION":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatExclusion (parts [1]);  			break;  		case "REPEATPHRASE":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processRepeatPhrase (parts [1]);  			break;  		case "WMCIMPORTNAME":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processWMCImportName (parts [1]);  			break;  		case "[GENERAL]":  		case "[DIAGNOSTICS]":  		case "[SCANLIST]":  		case "[STATIONS]":  		case "[OFFSETS]":  		case "[SERVICEFILTERS]":  		case "[REPEATEXCLUSIONS]":  			Logger.Instance.Write ("Processing ini parameter: " + line);  			break;  		default:  			if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  				Logger.Instance.Write ("Processing ini parameter: " + line);  				reply = processScannedChannel (parts [1]);  			}  			break;  		}  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 0) {  	switch (parts [0].Trim ().ToUpperInvariant ()) {  	case "OUTPUT":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processOutput (parts [1] + ":" + parts [2]);  		else  			reply = processOutput (parts [1]);  		break;  	case "TUNER":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuner (parts [1]);  		break;  	case "SATELLITE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processSatellite (parts [1]);  		break;  	case "DISH":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDish (parts [1]);  		break;  	case "FREQUENCY":  		currentFrequency = null;  		reply = processFrequency (parts [1]);  		break;  	case "SCANNINGFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processFrequency (parts [1]);  		break;  	case "TIMEOUTS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeouts (parts [1]);  		break;  	case "STATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processStation (parts [1]);  		break;  	case "OPTION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOption (parts [1]);  		break;  	case "TRACE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTrace (parts [1]);  		break;  	case "DEBUG":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDebug (parts [1]);  		break;  	case "LOCATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processLocation (parts [1]);  		break;  	case "LANGUAGE":  	case "INPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processInputLanguage (parts [1]);  		break;  	case "OUTPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOutputLanguage (parts [1]);  		break;  	case "TIMEZONE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeZone (parts [1]);  		break;  	case "TSFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processTSFile (parts [1] + ":" + parts [2]);  		else  			reply = processTSFile (parts [1]);  		break;  	case "CHANNELS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processChannel (parts [1]);  		break;  	case "DISEQC":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDiseqc (parts [1]);  		break;  	case "CHARSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processCharSet (parts [1]);  		break;  	case "EITPID":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processEITPid (parts [1]);  		break;  	case "MHW1PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW1Pids (parts [1]);  		break;  	case "MHW2PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW2Pids (parts [1]);  		break;  	case "PLUGINFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processPluginFrequency (parts [1]);  		break;  	case "[DVBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new SatelliteFrequency ();  		break;  	case "[DVBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new TerrestrialFrequency ();  		break;  	case "[DVBC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new CableFrequency ();  		break;  	case "[ATSC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new AtscFrequency ();  		break;  	case "[CLEARQAM]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ClearQamFrequency ();  		break;  	case "[ISDBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBSatelliteFrequency ();  		break;  	case "[ISDBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBTerrestrialFrequency ();  		break;  	case "TUNINGFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuningFile (parts [1]);  		break;  	case "SCANNED":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  		break;  	case "OFFSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOffsetChannel (parts [1]);  		break;  	case "INCLUDESERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processIncludeService (parts [1]);  		break;  	case "MAXSERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMaxService (parts [1]);  		break;  	case "REPEATEXCLUSION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatExclusion (parts [1]);  		break;  	case "REPEATPHRASE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatPhrase (parts [1]);  		break;  	case "WMCIMPORTNAME":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processWMCImportName (parts [1]);  		break;  	case "[GENERAL]":  	case "[DIAGNOSTICS]":  	case "[SCANLIST]":  	case "[STATIONS]":  	case "[OFFSETS]":  	case "[SERVICEFILTERS]":  	case "[REPEATEXCLUSIONS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		break;  	default:  		if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  		}  		break;  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 0) {  	switch (parts [0].Trim ().ToUpperInvariant ()) {  	case "OUTPUT":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processOutput (parts [1] + ":" + parts [2]);  		else  			reply = processOutput (parts [1]);  		break;  	case "TUNER":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuner (parts [1]);  		break;  	case "SATELLITE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processSatellite (parts [1]);  		break;  	case "DISH":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDish (parts [1]);  		break;  	case "FREQUENCY":  		currentFrequency = null;  		reply = processFrequency (parts [1]);  		break;  	case "SCANNINGFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processFrequency (parts [1]);  		break;  	case "TIMEOUTS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeouts (parts [1]);  		break;  	case "STATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processStation (parts [1]);  		break;  	case "OPTION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOption (parts [1]);  		break;  	case "TRACE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTrace (parts [1]);  		break;  	case "DEBUG":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDebug (parts [1]);  		break;  	case "LOCATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processLocation (parts [1]);  		break;  	case "LANGUAGE":  	case "INPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processInputLanguage (parts [1]);  		break;  	case "OUTPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOutputLanguage (parts [1]);  		break;  	case "TIMEZONE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeZone (parts [1]);  		break;  	case "TSFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processTSFile (parts [1] + ":" + parts [2]);  		else  			reply = processTSFile (parts [1]);  		break;  	case "CHANNELS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processChannel (parts [1]);  		break;  	case "DISEQC":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDiseqc (parts [1]);  		break;  	case "CHARSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processCharSet (parts [1]);  		break;  	case "EITPID":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processEITPid (parts [1]);  		break;  	case "MHW1PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW1Pids (parts [1]);  		break;  	case "MHW2PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW2Pids (parts [1]);  		break;  	case "PLUGINFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processPluginFrequency (parts [1]);  		break;  	case "[DVBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new SatelliteFrequency ();  		break;  	case "[DVBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new TerrestrialFrequency ();  		break;  	case "[DVBC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new CableFrequency ();  		break;  	case "[ATSC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new AtscFrequency ();  		break;  	case "[CLEARQAM]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ClearQamFrequency ();  		break;  	case "[ISDBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBSatelliteFrequency ();  		break;  	case "[ISDBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBTerrestrialFrequency ();  		break;  	case "TUNINGFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuningFile (parts [1]);  		break;  	case "SCANNED":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  		break;  	case "OFFSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOffsetChannel (parts [1]);  		break;  	case "INCLUDESERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processIncludeService (parts [1]);  		break;  	case "MAXSERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMaxService (parts [1]);  		break;  	case "REPEATEXCLUSION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatExclusion (parts [1]);  		break;  	case "REPEATPHRASE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatPhrase (parts [1]);  		break;  	case "WMCIMPORTNAME":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processWMCImportName (parts [1]);  		break;  	case "[GENERAL]":  	case "[DIAGNOSTICS]":  	case "[SCANLIST]":  	case "[STATIONS]":  	case "[OFFSETS]":  	case "[SERVICEFILTERS]":  	case "[REPEATEXCLUSIONS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		break;  	default:  		if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  		}  		break;  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 0) {  	switch (parts [0].Trim ().ToUpperInvariant ()) {  	case "OUTPUT":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processOutput (parts [1] + ":" + parts [2]);  		else  			reply = processOutput (parts [1]);  		break;  	case "TUNER":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuner (parts [1]);  		break;  	case "SATELLITE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processSatellite (parts [1]);  		break;  	case "DISH":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDish (parts [1]);  		break;  	case "FREQUENCY":  		currentFrequency = null;  		reply = processFrequency (parts [1]);  		break;  	case "SCANNINGFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processFrequency (parts [1]);  		break;  	case "TIMEOUTS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeouts (parts [1]);  		break;  	case "STATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processStation (parts [1]);  		break;  	case "OPTION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOption (parts [1]);  		break;  	case "TRACE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTrace (parts [1]);  		break;  	case "DEBUG":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDebug (parts [1]);  		break;  	case "LOCATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processLocation (parts [1]);  		break;  	case "LANGUAGE":  	case "INPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processInputLanguage (parts [1]);  		break;  	case "OUTPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOutputLanguage (parts [1]);  		break;  	case "TIMEZONE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeZone (parts [1]);  		break;  	case "TSFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processTSFile (parts [1] + ":" + parts [2]);  		else  			reply = processTSFile (parts [1]);  		break;  	case "CHANNELS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processChannel (parts [1]);  		break;  	case "DISEQC":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDiseqc (parts [1]);  		break;  	case "CHARSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processCharSet (parts [1]);  		break;  	case "EITPID":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processEITPid (parts [1]);  		break;  	case "MHW1PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW1Pids (parts [1]);  		break;  	case "MHW2PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW2Pids (parts [1]);  		break;  	case "PLUGINFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processPluginFrequency (parts [1]);  		break;  	case "[DVBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new SatelliteFrequency ();  		break;  	case "[DVBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new TerrestrialFrequency ();  		break;  	case "[DVBC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new CableFrequency ();  		break;  	case "[ATSC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new AtscFrequency ();  		break;  	case "[CLEARQAM]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ClearQamFrequency ();  		break;  	case "[ISDBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBSatelliteFrequency ();  		break;  	case "[ISDBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBTerrestrialFrequency ();  		break;  	case "TUNINGFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuningFile (parts [1]);  		break;  	case "SCANNED":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  		break;  	case "OFFSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOffsetChannel (parts [1]);  		break;  	case "INCLUDESERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processIncludeService (parts [1]);  		break;  	case "MAXSERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMaxService (parts [1]);  		break;  	case "REPEATEXCLUSION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatExclusion (parts [1]);  		break;  	case "REPEATPHRASE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatPhrase (parts [1]);  		break;  	case "WMCIMPORTNAME":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processWMCImportName (parts [1]);  		break;  	case "[GENERAL]":  	case "[DIAGNOSTICS]":  	case "[SCANLIST]":  	case "[STATIONS]":  	case "[OFFSETS]":  	case "[SERVICEFILTERS]":  	case "[REPEATEXCLUSIONS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		break;  	default:  		if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  		}  		break;  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 0) {  	switch (parts [0].Trim ().ToUpperInvariant ()) {  	case "OUTPUT":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processOutput (parts [1] + ":" + parts [2]);  		else  			reply = processOutput (parts [1]);  		break;  	case "TUNER":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuner (parts [1]);  		break;  	case "SATELLITE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processSatellite (parts [1]);  		break;  	case "DISH":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDish (parts [1]);  		break;  	case "FREQUENCY":  		currentFrequency = null;  		reply = processFrequency (parts [1]);  		break;  	case "SCANNINGFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processFrequency (parts [1]);  		break;  	case "TIMEOUTS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeouts (parts [1]);  		break;  	case "STATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processStation (parts [1]);  		break;  	case "OPTION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOption (parts [1]);  		break;  	case "TRACE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTrace (parts [1]);  		break;  	case "DEBUG":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDebug (parts [1]);  		break;  	case "LOCATION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processLocation (parts [1]);  		break;  	case "LANGUAGE":  	case "INPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processInputLanguage (parts [1]);  		break;  	case "OUTPUTLANGUAGE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOutputLanguage (parts [1]);  		break;  	case "TIMEZONE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTimeZone (parts [1]);  		break;  	case "TSFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		if (parts.Length > 2)  			reply = processTSFile (parts [1] + ":" + parts [2]);  		else  			reply = processTSFile (parts [1]);  		break;  	case "CHANNELS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processChannel (parts [1]);  		break;  	case "DISEQC":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processDiseqc (parts [1]);  		break;  	case "CHARSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processCharSet (parts [1]);  		break;  	case "EITPID":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processEITPid (parts [1]);  		break;  	case "MHW1PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW1Pids (parts [1]);  		break;  	case "MHW2PIDS":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMHW2Pids (parts [1]);  		break;  	case "PLUGINFREQUENCY":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processPluginFrequency (parts [1]);  		break;  	case "[DVBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new SatelliteFrequency ();  		break;  	case "[DVBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new TerrestrialFrequency ();  		break;  	case "[DVBC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new CableFrequency ();  		break;  	case "[ATSC]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new AtscFrequency ();  		break;  	case "[CLEARQAM]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ClearQamFrequency ();  		break;  	case "[ISDBS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBSatelliteFrequency ();  		break;  	case "[ISDBT]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		currentFrequency = new ISDBTerrestrialFrequency ();  		break;  	case "TUNINGFILE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processTuningFile (parts [1]);  		break;  	case "SCANNED":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  		break;  	case "OFFSET":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processOffsetChannel (parts [1]);  		break;  	case "INCLUDESERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processIncludeService (parts [1]);  		break;  	case "MAXSERVICE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processMaxService (parts [1]);  		break;  	case "REPEATEXCLUSION":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatExclusion (parts [1]);  		break;  	case "REPEATPHRASE":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processRepeatPhrase (parts [1]);  		break;  	case "WMCIMPORTNAME":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processWMCImportName (parts [1]);  		break;  	case "[GENERAL]":  	case "[DIAGNOSTICS]":  	case "[SCANLIST]":  	case "[STATIONS]":  	case "[OFFSETS]":  	case "[SERVICEFILTERS]":  	case "[REPEATEXCLUSIONS]":  		Logger.Instance.Write ("Processing ini parameter: " + line);  		break;  	default:  		if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  			Logger.Instance.Write ("Processing ini parameter: " + line);  			reply = processScannedChannel (parts [1]);  		}  		break;  	}  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: switch (parts [0].Trim ().ToUpperInvariant ()) {  case "OUTPUT":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processOutput (parts [1] + ":" + parts [2]);  	else  		reply = processOutput (parts [1]);  	break;  case "TUNER":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuner (parts [1]);  	break;  case "SATELLITE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processSatellite (parts [1]);  	break;  case "DISH":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDish (parts [1]);  	break;  case "FREQUENCY":  	currentFrequency = null;  	reply = processFrequency (parts [1]);  	break;  case "SCANNINGFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processFrequency (parts [1]);  	break;  case "TIMEOUTS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeouts (parts [1]);  	break;  case "STATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processStation (parts [1]);  	break;  case "OPTION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOption (parts [1]);  	break;  case "TRACE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTrace (parts [1]);  	break;  case "DEBUG":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDebug (parts [1]);  	break;  case "LOCATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processLocation (parts [1]);  	break;  case "LANGUAGE":  case "INPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processInputLanguage (parts [1]);  	break;  case "OUTPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOutputLanguage (parts [1]);  	break;  case "TIMEZONE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeZone (parts [1]);  	break;  case "TSFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processTSFile (parts [1] + ":" + parts [2]);  	else  		reply = processTSFile (parts [1]);  	break;  case "CHANNELS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processChannel (parts [1]);  	break;  case "DISEQC":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDiseqc (parts [1]);  	break;  case "CHARSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processCharSet (parts [1]);  	break;  case "EITPID":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processEITPid (parts [1]);  	break;  case "MHW1PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW1Pids (parts [1]);  	break;  case "MHW2PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW2Pids (parts [1]);  	break;  case "PLUGINFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processPluginFrequency (parts [1]);  	break;  case "[DVBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new SatelliteFrequency ();  	break;  case "[DVBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new TerrestrialFrequency ();  	break;  case "[DVBC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new CableFrequency ();  	break;  case "[ATSC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new AtscFrequency ();  	break;  case "[CLEARQAM]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ClearQamFrequency ();  	break;  case "[ISDBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBSatelliteFrequency ();  	break;  case "[ISDBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBTerrestrialFrequency ();  	break;  case "TUNINGFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuningFile (parts [1]);  	break;  case "SCANNED":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processScannedChannel (parts [1]);  	break;  case "OFFSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOffsetChannel (parts [1]);  	break;  case "INCLUDESERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processIncludeService (parts [1]);  	break;  case "MAXSERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMaxService (parts [1]);  	break;  case "REPEATEXCLUSION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatExclusion (parts [1]);  	break;  case "REPEATPHRASE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatPhrase (parts [1]);  	break;  case "WMCIMPORTNAME":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processWMCImportName (parts [1]);  	break;  case "[GENERAL]":  case "[DIAGNOSTICS]":  case "[SCANLIST]":  case "[STATIONS]":  case "[OFFSETS]":  case "[SERVICEFILTERS]":  case "[REPEATEXCLUSIONS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	break;  default:  	if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  	}  	break;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: switch (parts [0].Trim ().ToUpperInvariant ()) {  case "OUTPUT":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processOutput (parts [1] + ":" + parts [2]);  	else  		reply = processOutput (parts [1]);  	break;  case "TUNER":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuner (parts [1]);  	break;  case "SATELLITE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processSatellite (parts [1]);  	break;  case "DISH":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDish (parts [1]);  	break;  case "FREQUENCY":  	currentFrequency = null;  	reply = processFrequency (parts [1]);  	break;  case "SCANNINGFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processFrequency (parts [1]);  	break;  case "TIMEOUTS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeouts (parts [1]);  	break;  case "STATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processStation (parts [1]);  	break;  case "OPTION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOption (parts [1]);  	break;  case "TRACE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTrace (parts [1]);  	break;  case "DEBUG":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDebug (parts [1]);  	break;  case "LOCATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processLocation (parts [1]);  	break;  case "LANGUAGE":  case "INPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processInputLanguage (parts [1]);  	break;  case "OUTPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOutputLanguage (parts [1]);  	break;  case "TIMEZONE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeZone (parts [1]);  	break;  case "TSFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processTSFile (parts [1] + ":" + parts [2]);  	else  		reply = processTSFile (parts [1]);  	break;  case "CHANNELS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processChannel (parts [1]);  	break;  case "DISEQC":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDiseqc (parts [1]);  	break;  case "CHARSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processCharSet (parts [1]);  	break;  case "EITPID":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processEITPid (parts [1]);  	break;  case "MHW1PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW1Pids (parts [1]);  	break;  case "MHW2PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW2Pids (parts [1]);  	break;  case "PLUGINFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processPluginFrequency (parts [1]);  	break;  case "[DVBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new SatelliteFrequency ();  	break;  case "[DVBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new TerrestrialFrequency ();  	break;  case "[DVBC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new CableFrequency ();  	break;  case "[ATSC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new AtscFrequency ();  	break;  case "[CLEARQAM]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ClearQamFrequency ();  	break;  case "[ISDBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBSatelliteFrequency ();  	break;  case "[ISDBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBTerrestrialFrequency ();  	break;  case "TUNINGFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuningFile (parts [1]);  	break;  case "SCANNED":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processScannedChannel (parts [1]);  	break;  case "OFFSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOffsetChannel (parts [1]);  	break;  case "INCLUDESERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processIncludeService (parts [1]);  	break;  case "MAXSERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMaxService (parts [1]);  	break;  case "REPEATEXCLUSION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatExclusion (parts [1]);  	break;  case "REPEATPHRASE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatPhrase (parts [1]);  	break;  case "WMCIMPORTNAME":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processWMCImportName (parts [1]);  	break;  case "[GENERAL]":  case "[DIAGNOSTICS]":  case "[SCANLIST]":  case "[STATIONS]":  case "[OFFSETS]":  case "[SERVICEFILTERS]":  case "[REPEATEXCLUSIONS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	break;  default:  	if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  	}  	break;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: switch (parts [0].Trim ().ToUpperInvariant ()) {  case "OUTPUT":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processOutput (parts [1] + ":" + parts [2]);  	else  		reply = processOutput (parts [1]);  	break;  case "TUNER":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuner (parts [1]);  	break;  case "SATELLITE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processSatellite (parts [1]);  	break;  case "DISH":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDish (parts [1]);  	break;  case "FREQUENCY":  	currentFrequency = null;  	reply = processFrequency (parts [1]);  	break;  case "SCANNINGFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processFrequency (parts [1]);  	break;  case "TIMEOUTS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeouts (parts [1]);  	break;  case "STATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processStation (parts [1]);  	break;  case "OPTION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOption (parts [1]);  	break;  case "TRACE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTrace (parts [1]);  	break;  case "DEBUG":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDebug (parts [1]);  	break;  case "LOCATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processLocation (parts [1]);  	break;  case "LANGUAGE":  case "INPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processInputLanguage (parts [1]);  	break;  case "OUTPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOutputLanguage (parts [1]);  	break;  case "TIMEZONE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeZone (parts [1]);  	break;  case "TSFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processTSFile (parts [1] + ":" + parts [2]);  	else  		reply = processTSFile (parts [1]);  	break;  case "CHANNELS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processChannel (parts [1]);  	break;  case "DISEQC":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDiseqc (parts [1]);  	break;  case "CHARSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processCharSet (parts [1]);  	break;  case "EITPID":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processEITPid (parts [1]);  	break;  case "MHW1PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW1Pids (parts [1]);  	break;  case "MHW2PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW2Pids (parts [1]);  	break;  case "PLUGINFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processPluginFrequency (parts [1]);  	break;  case "[DVBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new SatelliteFrequency ();  	break;  case "[DVBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new TerrestrialFrequency ();  	break;  case "[DVBC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new CableFrequency ();  	break;  case "[ATSC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new AtscFrequency ();  	break;  case "[CLEARQAM]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ClearQamFrequency ();  	break;  case "[ISDBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBSatelliteFrequency ();  	break;  case "[ISDBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBTerrestrialFrequency ();  	break;  case "TUNINGFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuningFile (parts [1]);  	break;  case "SCANNED":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processScannedChannel (parts [1]);  	break;  case "OFFSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOffsetChannel (parts [1]);  	break;  case "INCLUDESERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processIncludeService (parts [1]);  	break;  case "MAXSERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMaxService (parts [1]);  	break;  case "REPEATEXCLUSION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatExclusion (parts [1]);  	break;  case "REPEATPHRASE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatPhrase (parts [1]);  	break;  case "WMCIMPORTNAME":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processWMCImportName (parts [1]);  	break;  case "[GENERAL]":  case "[DIAGNOSTICS]":  case "[SCANLIST]":  case "[STATIONS]":  case "[OFFSETS]":  case "[SERVICEFILTERS]":  case "[REPEATEXCLUSIONS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	break;  default:  	if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  	}  	break;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: switch (parts [0].Trim ().ToUpperInvariant ()) {  case "OUTPUT":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processOutput (parts [1] + ":" + parts [2]);  	else  		reply = processOutput (parts [1]);  	break;  case "TUNER":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuner (parts [1]);  	break;  case "SATELLITE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processSatellite (parts [1]);  	break;  case "DISH":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDish (parts [1]);  	break;  case "FREQUENCY":  	currentFrequency = null;  	reply = processFrequency (parts [1]);  	break;  case "SCANNINGFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processFrequency (parts [1]);  	break;  case "TIMEOUTS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeouts (parts [1]);  	break;  case "STATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processStation (parts [1]);  	break;  case "OPTION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOption (parts [1]);  	break;  case "TRACE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTrace (parts [1]);  	break;  case "DEBUG":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDebug (parts [1]);  	break;  case "LOCATION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processLocation (parts [1]);  	break;  case "LANGUAGE":  case "INPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processInputLanguage (parts [1]);  	break;  case "OUTPUTLANGUAGE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOutputLanguage (parts [1]);  	break;  case "TIMEZONE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTimeZone (parts [1]);  	break;  case "TSFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	if (parts.Length > 2)  		reply = processTSFile (parts [1] + ":" + parts [2]);  	else  		reply = processTSFile (parts [1]);  	break;  case "CHANNELS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processChannel (parts [1]);  	break;  case "DISEQC":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processDiseqc (parts [1]);  	break;  case "CHARSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processCharSet (parts [1]);  	break;  case "EITPID":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processEITPid (parts [1]);  	break;  case "MHW1PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW1Pids (parts [1]);  	break;  case "MHW2PIDS":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMHW2Pids (parts [1]);  	break;  case "PLUGINFREQUENCY":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processPluginFrequency (parts [1]);  	break;  case "[DVBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new SatelliteFrequency ();  	break;  case "[DVBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new TerrestrialFrequency ();  	break;  case "[DVBC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new CableFrequency ();  	break;  case "[ATSC]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new AtscFrequency ();  	break;  case "[CLEARQAM]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ClearQamFrequency ();  	break;  case "[ISDBS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBSatelliteFrequency ();  	break;  case "[ISDBT]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	currentFrequency = new ISDBTerrestrialFrequency ();  	break;  case "TUNINGFILE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processTuningFile (parts [1]);  	break;  case "SCANNED":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processScannedChannel (parts [1]);  	break;  case "OFFSET":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processOffsetChannel (parts [1]);  	break;  case "INCLUDESERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processIncludeService (parts [1]);  	break;  case "MAXSERVICE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processMaxService (parts [1]);  	break;  case "REPEATEXCLUSION":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatExclusion (parts [1]);  	break;  case "REPEATPHRASE":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processRepeatPhrase (parts [1]);  	break;  case "WMCIMPORTNAME":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	reply = processWMCImportName (parts [1]);  	break;  case "[GENERAL]":  case "[DIAGNOSTICS]":  case "[SCANLIST]":  case "[STATIONS]":  case "[OFFSETS]":  case "[SERVICEFILTERS]":  case "[REPEATEXCLUSIONS]":  	Logger.Instance.Write ("Processing ini parameter: " + line);  	break;  default:  	if (parts [0].Trim ().ToUpperInvariant ().StartsWith ("SCANNED")) {  		Logger.Instance.Write ("Processing ini parameter: " + line);  		reply = processScannedChannel (parts [1]);  	}  	break;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 2)  	reply = processOutput (parts [1] + ":" + parts [2]);  else  	reply = processOutput (parts [1]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 2)  	reply = processOutput (parts [1] + ":" + parts [2]);  else  	reply = processOutput (parts [1]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: reply = processOutput (parts [1] + ":" + parts [2]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 2)  	reply = processTSFile (parts [1] + ":" + parts [2]);  else  	reply = processTSFile (parts [1]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: if (parts.Length > 2)  	reply = processTSFile (parts [1] + ":" + parts [2]);  else  	reply = processTSFile (parts [1]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,Process,The following statement contains a magic number: reply = processTSFile (parts [1] + ":" + parts [2]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: if (parameters.Length < 3 || parameters.Length > 4) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: if (parameters.Length < 3 || parameters.Length > 4) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: try {  	satelliteDish.LNBLowBandFrequency = Int32.Parse (parameters [0].Trim ());  	satelliteDish.LNBHighBandFrequency = Int32.Parse (parameters [1].Trim ());  	satelliteDish.LNBSwitchFrequency = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 4)  		satelliteDish.DiseqcSwitch = parameters [3].ToUpperInvariant ().Trim ();  	currentDish = satelliteDish;  	if (currentFrequency as SatelliteFrequency != null)  		(currentFrequency as SatelliteFrequency).SatelliteDish = currentDish;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: try {  	satelliteDish.LNBLowBandFrequency = Int32.Parse (parameters [0].Trim ());  	satelliteDish.LNBHighBandFrequency = Int32.Parse (parameters [1].Trim ());  	satelliteDish.LNBSwitchFrequency = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 4)  		satelliteDish.DiseqcSwitch = parameters [3].ToUpperInvariant ().Trim ();  	currentDish = satelliteDish;  	if (currentFrequency as SatelliteFrequency != null)  		(currentFrequency as SatelliteFrequency).SatelliteDish = currentDish;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: try {  	satelliteDish.LNBLowBandFrequency = Int32.Parse (parameters [0].Trim ());  	satelliteDish.LNBHighBandFrequency = Int32.Parse (parameters [1].Trim ());  	satelliteDish.LNBSwitchFrequency = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 4)  		satelliteDish.DiseqcSwitch = parameters [3].ToUpperInvariant ().Trim ();  	currentDish = satelliteDish;  	if (currentFrequency as SatelliteFrequency != null)  		(currentFrequency as SatelliteFrequency).SatelliteDish = currentDish;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Dish line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: satelliteDish.LNBSwitchFrequency = Int32.Parse (parameters [2].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: if (parameters.Length == 4)  	satelliteDish.DiseqcSwitch = parameters [3].ToUpperInvariant ().Trim ();  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: if (parameters.Length == 4)  	satelliteDish.DiseqcSwitch = parameters [3].ToUpperInvariant ().Trim ();  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processDish,The following statement contains a magic number: satelliteDish.DiseqcSwitch = parameters [3].ToUpperInvariant ().Trim ();  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processFrequency,The following statement contains a magic number: if (parameters.Length == 2)  	return (processBasicFrequency (parameters));  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTerrestrialFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int bandWidth = Int32.Parse (parameters [1].Trim ());  	if (currentFrequency == null) {  		currentFrequency = new TerrestrialFrequency ();  		currentFrequency.Provider = TerrestrialProvider.FindProvider (frequency' bandWidth);  		if (currentFrequency.Provider == null)  			currentFrequency.Provider = new TerrestrialProvider ("Unknown");  	}  	TerrestrialFrequency terrestrialFrequency = currentFrequency as TerrestrialFrequency;  	terrestrialFrequency.Frequency = frequency;  	terrestrialFrequency.Bandwidth = bandWidth;  	int errorCode = getCollectionType (parameters [2].Trim ().ToUpperInvariant ()' terrestrialFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (terrestrialFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: if (parameters.Length != 5 && parameters.Length != 8) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: if (parameters.Length != 5 && parameters.Length != 8) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	Pilot pilot = Pilot.NotSet;  	RollOff rollOff = RollOff.NotSet;  	Modulation modulation = Modulation.QPSK;  	int nextParameter = 4;  	if (parameters.Length == 8) {  		pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  		rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  		modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  		nextParameter = 7;  	}  	if (currentFrequency == null)  		currentFrequency = new SatelliteFrequency ();  	SatelliteFrequency satelliteFrequency = currentFrequency as SatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	satelliteFrequency.Pilot = pilot;  	satelliteFrequency.RollOff = rollOff;  	satelliteFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [nextParameter].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: if (parameters.Length == 8) {  	pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  	rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  	modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  	nextParameter = 7;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: if (parameters.Length == 8) {  	pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  	rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  	modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  	nextParameter = 7;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: if (parameters.Length == 8) {  	pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  	rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  	modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  	nextParameter = 7;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: if (parameters.Length == 8) {  	pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  	rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  	modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  	nextParameter = 7;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: if (parameters.Length == 8) {  	pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  	rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  	modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  	nextParameter = 7;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: pilot = (Pilot)Enum.Parse (typeof(Pilot)' parameters [4]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: rollOff = (RollOff)Enum.Parse (typeof(RollOff)' parameters [5]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [6]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processSatelliteFrequency,The following statement contains a magic number: nextParameter = 7;  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processCableFrequency,The following statement contains a magic number: if (parameters.Length != 5) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processCableFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [3].ToUpperInvariant ()' true);  	if (currentFrequency == null) {  		currentFrequency = new CableFrequency ();  		currentFrequency.Provider = CableProvider.FindProvider (frequency' symbolRate' fecRate' modulation);  		if (currentFrequency.Provider == null)  			currentFrequency.Provider = new CableProvider ("Unknown");  	}  	CableFrequency cableFrequency = currentFrequency as CableFrequency;  	cableFrequency.Frequency = frequency;  	cableFrequency.SymbolRate = symbolRate;  	cableFrequency.FEC = fecRate;  	cableFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' cableFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (cableFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processCableFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [3].ToUpperInvariant ()' true);  	if (currentFrequency == null) {  		currentFrequency = new CableFrequency ();  		currentFrequency.Provider = CableProvider.FindProvider (frequency' symbolRate' fecRate' modulation);  		if (currentFrequency.Provider == null)  			currentFrequency.Provider = new CableProvider ("Unknown");  	}  	CableFrequency cableFrequency = currentFrequency as CableFrequency;  	cableFrequency.Frequency = frequency;  	cableFrequency.SymbolRate = symbolRate;  	cableFrequency.FEC = fecRate;  	cableFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' cableFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (cableFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processCableFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [3].ToUpperInvariant ()' true);  	if (currentFrequency == null) {  		currentFrequency = new CableFrequency ();  		currentFrequency.Provider = CableProvider.FindProvider (frequency' symbolRate' fecRate' modulation);  		if (currentFrequency.Provider == null)  			currentFrequency.Provider = new CableProvider ("Unknown");  	}  	CableFrequency cableFrequency = currentFrequency as CableFrequency;  	cableFrequency.Frequency = frequency;  	cableFrequency.SymbolRate = symbolRate;  	cableFrequency.FEC = fecRate;  	cableFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' cableFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (cableFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processAtscFrequency,The following statement contains a magic number: if (parameters.Length != 6) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processAtscFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	AtscFrequency atscFrequency = currentFrequency as AtscFrequency;  	atscFrequency.Frequency = frequency;  	atscFrequency.ChannelNumber = channelNumber;  	atscFrequency.SymbolRate = symbolRate;  	atscFrequency.FEC = fecRate;  	atscFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' atscFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (atscFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processAtscFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	AtscFrequency atscFrequency = currentFrequency as AtscFrequency;  	atscFrequency.Frequency = frequency;  	atscFrequency.ChannelNumber = channelNumber;  	atscFrequency.SymbolRate = symbolRate;  	atscFrequency.FEC = fecRate;  	atscFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' atscFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (atscFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processAtscFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	AtscFrequency atscFrequency = currentFrequency as AtscFrequency;  	atscFrequency.Frequency = frequency;  	atscFrequency.ChannelNumber = channelNumber;  	atscFrequency.SymbolRate = symbolRate;  	atscFrequency.FEC = fecRate;  	atscFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' atscFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (atscFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processAtscFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	AtscFrequency atscFrequency = currentFrequency as AtscFrequency;  	atscFrequency.Frequency = frequency;  	atscFrequency.ChannelNumber = channelNumber;  	atscFrequency.SymbolRate = symbolRate;  	atscFrequency.FEC = fecRate;  	atscFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' atscFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (atscFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processClearQamFrequency,The following statement contains a magic number: if (parameters.Length != 6) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processClearQamFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	ClearQamFrequency clearQamFrequency = currentFrequency as ClearQamFrequency;  	clearQamFrequency.Frequency = frequency;  	clearQamFrequency.ChannelNumber = channelNumber;  	clearQamFrequency.SymbolRate = symbolRate;  	clearQamFrequency.FEC = fecRate;  	clearQamFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' clearQamFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (clearQamFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processClearQamFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	ClearQamFrequency clearQamFrequency = currentFrequency as ClearQamFrequency;  	clearQamFrequency.Frequency = frequency;  	clearQamFrequency.ChannelNumber = channelNumber;  	clearQamFrequency.SymbolRate = symbolRate;  	clearQamFrequency.FEC = fecRate;  	clearQamFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' clearQamFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (clearQamFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processClearQamFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	ClearQamFrequency clearQamFrequency = currentFrequency as ClearQamFrequency;  	clearQamFrequency.Frequency = frequency;  	clearQamFrequency.ChannelNumber = channelNumber;  	clearQamFrequency.SymbolRate = symbolRate;  	clearQamFrequency.FEC = fecRate;  	clearQamFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' clearQamFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (clearQamFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processClearQamFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int channelNumber = Int32.Parse (parameters [1].Trim ());  	int symbolRate = Int32.Parse (parameters [2].Trim ());  	FECRate fecRate = new FECRate (parameters [3]);  	Modulation modulation = (Modulation)Enum.Parse (typeof(Modulation)' parameters [4].ToUpperInvariant ()' true);  	ClearQamFrequency clearQamFrequency = currentFrequency as ClearQamFrequency;  	clearQamFrequency.Frequency = frequency;  	clearQamFrequency.ChannelNumber = channelNumber;  	clearQamFrequency.SymbolRate = symbolRate;  	clearQamFrequency.FEC = fecRate;  	clearQamFrequency.Modulation = modulation;  	int errorCode = getCollectionType (parameters [5].Trim ().ToUpperInvariant ()' clearQamFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (clearQamFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processISDBTerrestrialFrequency,The following statement contains a magic number: if (parameters.Length != 4) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processISDBTerrestrialFrequency,The following statement contains a magic number: try {  	int channelNumber = Int32.Parse (parameters [0].Trim ());  	int frequency = Int32.Parse (parameters [1].Trim ());  	int bandWidth = Int32.Parse (parameters [2].Trim ());  	if (currentFrequency == null) {  		currentFrequency = new ISDBTerrestrialFrequency ();  		currentFrequency.Provider = ISDBTerrestrialProvider.FindProvider (frequency' bandWidth);  		if (currentFrequency.Provider == null)  			currentFrequency.Provider = new ISDBTerrestrialProvider ("Unknown");  	}  	ISDBTerrestrialFrequency terrestrialFrequency = currentFrequency as ISDBTerrestrialFrequency;  	terrestrialFrequency.ChannelNumber = channelNumber;  	terrestrialFrequency.Frequency = frequency;  	terrestrialFrequency.Bandwidth = bandWidth;  	int errorCode = getCollectionType (parameters [3].Trim ().ToUpperInvariant ()' terrestrialFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (terrestrialFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processISDBTerrestrialFrequency,The following statement contains a magic number: try {  	int channelNumber = Int32.Parse (parameters [0].Trim ());  	int frequency = Int32.Parse (parameters [1].Trim ());  	int bandWidth = Int32.Parse (parameters [2].Trim ());  	if (currentFrequency == null) {  		currentFrequency = new ISDBTerrestrialFrequency ();  		currentFrequency.Provider = ISDBTerrestrialProvider.FindProvider (frequency' bandWidth);  		if (currentFrequency.Provider == null)  			currentFrequency.Provider = new ISDBTerrestrialProvider ("Unknown");  	}  	ISDBTerrestrialFrequency terrestrialFrequency = currentFrequency as ISDBTerrestrialFrequency;  	terrestrialFrequency.ChannelNumber = channelNumber;  	terrestrialFrequency.Frequency = frequency;  	terrestrialFrequency.Bandwidth = bandWidth;  	int errorCode = getCollectionType (parameters [3].Trim ().ToUpperInvariant ()' terrestrialFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	TuningFrequency.FrequencyCollection.Add (terrestrialFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processISDBSatelliteFrequency,The following statement contains a magic number: if (parameters.Length != 5) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processISDBSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	if (currentFrequency == null)  		currentFrequency = new ISDBSatelliteFrequency ();  	ISDBSatelliteFrequency satelliteFrequency = currentFrequency as ISDBSatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	int errorCode = getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processISDBSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	if (currentFrequency == null)  		currentFrequency = new ISDBSatelliteFrequency ();  	ISDBSatelliteFrequency satelliteFrequency = currentFrequency as ISDBSatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	int errorCode = getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processISDBSatelliteFrequency,The following statement contains a magic number: try {  	int frequency = Int32.Parse (parameters [0].Trim ());  	int symbolRate = Int32.Parse (parameters [1].Trim ());  	FECRate fecRate = new FECRate (parameters [2]);  	SignalPolarization polarization = new SignalPolarization (parameters [3].Trim () [0]);  	if (currentFrequency == null)  		currentFrequency = new ISDBSatelliteFrequency ();  	ISDBSatelliteFrequency satelliteFrequency = currentFrequency as ISDBSatelliteFrequency;  	satelliteFrequency.Frequency = frequency;  	satelliteFrequency.SymbolRate = symbolRate;  	satelliteFrequency.FEC = fecRate;  	satelliteFrequency.Polarization = polarization;  	int errorCode = getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' satelliteFrequency);  	if (errorCode != errorCodeNoError)  		return (errorCode);  	satelliteFrequency.SatelliteDish = currentDish;  	if (currentFrequency.Provider == null)  		currentFrequency.Provider = currentSatellite;  	TuningFrequency.FrequencyCollection.Add (satelliteFrequency);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Frequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: if (parameters.Length < 2) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: try {  	int timeoutSeconds = Int32.Parse (parameters [0].Trim ());  	lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	timeoutSeconds = Int32.Parse (parameters [1].Trim ());  	frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	if (parameters.Length == 3)  		repeats = Int32.Parse (parameters [2].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: try {  	int timeoutSeconds = Int32.Parse (parameters [0].Trim ());  	lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	timeoutSeconds = Int32.Parse (parameters [1].Trim ());  	frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	if (parameters.Length == 3)  		repeats = Int32.Parse (parameters [2].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: try {  	int timeoutSeconds = Int32.Parse (parameters [0].Trim ());  	lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	timeoutSeconds = Int32.Parse (parameters [1].Trim ());  	frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	if (parameters.Length == 3)  		repeats = Int32.Parse (parameters [2].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: try {  	int timeoutSeconds = Int32.Parse (parameters [0].Trim ());  	lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	timeoutSeconds = Int32.Parse (parameters [1].Trim ());  	frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	if (parameters.Length == 3)  		repeats = Int32.Parse (parameters [2].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: try {  	int timeoutSeconds = Int32.Parse (parameters [0].Trim ());  	lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	timeoutSeconds = Int32.Parse (parameters [1].Trim ());  	frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	if (parameters.Length == 3)  		repeats = Int32.Parse (parameters [2].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: try {  	int timeoutSeconds = Int32.Parse (parameters [0].Trim ());  	lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	timeoutSeconds = Int32.Parse (parameters [1].Trim ());  	frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  	if (parameters.Length == 3)  		repeats = Int32.Parse (parameters [2].Trim ());  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Timeouts line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: lockTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: frequencyTimeout = new TimeSpan (0' timeoutSeconds / 60' timeoutSeconds % 60);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: if (parameters.Length == 3)  	repeats = Int32.Parse (parameters [2].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: if (parameters.Length == 3)  	repeats = Int32.Parse (parameters [2].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeouts,The following statement contains a magic number: repeats = Int32.Parse (parameters [2].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length < 3 || parameters.Length > 5) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length < 3 || parameters.Length > 5) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length == 3)  	tvStation = new TVStation ("Excluded Station");  else  	tvStation = new TVStation ("Changed Station");  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.OriginalNetworkID = Int32.Parse (parameters [0].Trim ());  	tvStation.TransportStreamID = Int32.Parse (parameters [1].Trim ());  	tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 3) {  		tvStation.Excluded = true;  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.Excluded = tvStation.Excluded;  		return (errorCodeNoError);  	}  	try {  		tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  		if (parameters.Length == 5)  			tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else {  			oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  			oldStation.NewName = tvStation.NewName;  		}  		return (errorCodeNoError);  	}  	catch (FormatException) {  		if (parameters.Length == 5) {  			Logger.Instance.Write ("INI file format error: A Station line is wrong.");  			return (errorCodeFormatError);  		}  		else {  			tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  			if (oldStation == null)  				TVStation.AddStation (tvStation);  			else  				oldStation.NewName = tvStation.NewName;  		}  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.OriginalNetworkID = Int32.Parse (parameters [0].Trim ());  	tvStation.TransportStreamID = Int32.Parse (parameters [1].Trim ());  	tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 3) {  		tvStation.Excluded = true;  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.Excluded = tvStation.Excluded;  		return (errorCodeNoError);  	}  	try {  		tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  		if (parameters.Length == 5)  			tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else {  			oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  			oldStation.NewName = tvStation.NewName;  		}  		return (errorCodeNoError);  	}  	catch (FormatException) {  		if (parameters.Length == 5) {  			Logger.Instance.Write ("INI file format error: A Station line is wrong.");  			return (errorCodeFormatError);  		}  		else {  			tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  			if (oldStation == null)  				TVStation.AddStation (tvStation);  			else  				oldStation.NewName = tvStation.NewName;  		}  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.OriginalNetworkID = Int32.Parse (parameters [0].Trim ());  	tvStation.TransportStreamID = Int32.Parse (parameters [1].Trim ());  	tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 3) {  		tvStation.Excluded = true;  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.Excluded = tvStation.Excluded;  		return (errorCodeNoError);  	}  	try {  		tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  		if (parameters.Length == 5)  			tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else {  			oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  			oldStation.NewName = tvStation.NewName;  		}  		return (errorCodeNoError);  	}  	catch (FormatException) {  		if (parameters.Length == 5) {  			Logger.Instance.Write ("INI file format error: A Station line is wrong.");  			return (errorCodeFormatError);  		}  		else {  			tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  			if (oldStation == null)  				TVStation.AddStation (tvStation);  			else  				oldStation.NewName = tvStation.NewName;  		}  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.OriginalNetworkID = Int32.Parse (parameters [0].Trim ());  	tvStation.TransportStreamID = Int32.Parse (parameters [1].Trim ());  	tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 3) {  		tvStation.Excluded = true;  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.Excluded = tvStation.Excluded;  		return (errorCodeNoError);  	}  	try {  		tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  		if (parameters.Length == 5)  			tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else {  			oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  			oldStation.NewName = tvStation.NewName;  		}  		return (errorCodeNoError);  	}  	catch (FormatException) {  		if (parameters.Length == 5) {  			Logger.Instance.Write ("INI file format error: A Station line is wrong.");  			return (errorCodeFormatError);  		}  		else {  			tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  			if (oldStation == null)  				TVStation.AddStation (tvStation);  			else  				oldStation.NewName = tvStation.NewName;  		}  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.OriginalNetworkID = Int32.Parse (parameters [0].Trim ());  	tvStation.TransportStreamID = Int32.Parse (parameters [1].Trim ());  	tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 3) {  		tvStation.Excluded = true;  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.Excluded = tvStation.Excluded;  		return (errorCodeNoError);  	}  	try {  		tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  		if (parameters.Length == 5)  			tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else {  			oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  			oldStation.NewName = tvStation.NewName;  		}  		return (errorCodeNoError);  	}  	catch (FormatException) {  		if (parameters.Length == 5) {  			Logger.Instance.Write ("INI file format error: A Station line is wrong.");  			return (errorCodeFormatError);  		}  		else {  			tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  			if (oldStation == null)  				TVStation.AddStation (tvStation);  			else  				oldStation.NewName = tvStation.NewName;  		}  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.OriginalNetworkID = Int32.Parse (parameters [0].Trim ());  	tvStation.TransportStreamID = Int32.Parse (parameters [1].Trim ());  	tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 3) {  		tvStation.Excluded = true;  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.Excluded = tvStation.Excluded;  		return (errorCodeNoError);  	}  	try {  		tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  		if (parameters.Length == 5)  			tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else {  			oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  			oldStation.NewName = tvStation.NewName;  		}  		return (errorCodeNoError);  	}  	catch (FormatException) {  		if (parameters.Length == 5) {  			Logger.Instance.Write ("INI file format error: A Station line is wrong.");  			return (errorCodeFormatError);  		}  		else {  			tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  			if (oldStation == null)  				TVStation.AddStation (tvStation);  			else  				oldStation.NewName = tvStation.NewName;  		}  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.OriginalNetworkID = Int32.Parse (parameters [0].Trim ());  	tvStation.TransportStreamID = Int32.Parse (parameters [1].Trim ());  	tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  	if (parameters.Length == 3) {  		tvStation.Excluded = true;  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.Excluded = tvStation.Excluded;  		return (errorCodeNoError);  	}  	try {  		tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  		if (parameters.Length == 5)  			tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else {  			oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  			oldStation.NewName = tvStation.NewName;  		}  		return (errorCodeNoError);  	}  	catch (FormatException) {  		if (parameters.Length == 5) {  			Logger.Instance.Write ("INI file format error: A Station line is wrong.");  			return (errorCodeFormatError);  		}  		else {  			tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  			TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  			if (oldStation == null)  				TVStation.AddStation (tvStation);  			else  				oldStation.NewName = tvStation.NewName;  		}  	}  	catch (ArithmeticException) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: tvStation.ServiceID = Int32.Parse (parameters [2].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length == 3) {  	tvStation.Excluded = true;  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else  		oldStation.Excluded = tvStation.Excluded;  	return (errorCodeNoError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  	if (parameters.Length == 5)  		tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else {  		oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  		oldStation.NewName = tvStation.NewName;  	}  	return (errorCodeNoError);  }  catch (FormatException) {  	if (parameters.Length == 5) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  	else {  		tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.NewName = tvStation.NewName;  	}  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  	if (parameters.Length == 5)  		tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else {  		oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  		oldStation.NewName = tvStation.NewName;  	}  	return (errorCodeNoError);  }  catch (FormatException) {  	if (parameters.Length == 5) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  	else {  		tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.NewName = tvStation.NewName;  	}  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  	if (parameters.Length == 5)  		tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else {  		oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  		oldStation.NewName = tvStation.NewName;  	}  	return (errorCodeNoError);  }  catch (FormatException) {  	if (parameters.Length == 5) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  	else {  		tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.NewName = tvStation.NewName;  	}  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  	if (parameters.Length == 5)  		tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else {  		oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  		oldStation.NewName = tvStation.NewName;  	}  	return (errorCodeNoError);  }  catch (FormatException) {  	if (parameters.Length == 5) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  	else {  		tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.NewName = tvStation.NewName;  	}  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: try {  	tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  	if (parameters.Length == 5)  		tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else {  		oldStation.LogicalChannelNumber = tvStation.LogicalChannelNumber;  		oldStation.NewName = tvStation.NewName;  	}  	return (errorCodeNoError);  }  catch (FormatException) {  	if (parameters.Length == 5) {  		Logger.Instance.Write ("INI file format error: A Station line is wrong.");  		return (errorCodeFormatError);  	}  	else {  		tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  		TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  		if (oldStation == null)  			TVStation.AddStation (tvStation);  		else  			oldStation.NewName = tvStation.NewName;  	}  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: tvStation.LogicalChannelNumber = Int32.Parse (parameters [3].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length == 5)  	tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length == 5)  	tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: tvStation.NewName = parameters [4].Trim ().Replace ("%%"' "'");  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length == 5) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  else {  	tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else  		oldStation.NewName = tvStation.NewName;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: if (parameters.Length == 5) {  	Logger.Instance.Write ("INI file format error: A Station line is wrong.");  	return (errorCodeFormatError);  }  else {  	tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  	TVStation oldStation = TVStation.FindStation (tvStation.OriginalNetworkID' tvStation.TransportStreamID' tvStation.ServiceID);  	if (oldStation == null)  		TVStation.AddStation (tvStation);  	else  		oldStation.NewName = tvStation.NewName;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processStation,The following statement contains a magic number: tvStation.NewName = parameters [3].Trim ().Replace ("%%"' "'");  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processLocation,The following statement contains a magic number: if (parameters.Length > 2) {  	Logger.Instance.Write ("INI file format error: The Location line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processLocation,The following statement contains a magic number: try {  	countryCode = parameters [0].Trim ().ToUpperInvariant ();  	if (parameters.Length == 2)  		region = Int32.Parse (parameters [1].Trim ());  	else  		region = 0;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Location line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The Location line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processLocation,The following statement contains a magic number: if (parameters.Length == 2)  	region = Int32.Parse (parameters [1].Trim ());  else  	region = 0;  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: if (parameters.Length != 1 && parameters.Length != 4) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: try {  	string[] offsetParts = parameters [0].Split (new char[] {  		'.'  	});  	if (offsetParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int hours = Int32.Parse (offsetParts [0].Trim ());  	int minutes = Int32.Parse (offsetParts [1].Trim ());  	timeZone = new TimeSpan (hours' minutes' 0);  	if (parameters.Length == 4) {  		string[] nextParts = parameters [1].Split (new char[] {  			'.'  		});  		if (nextParts.Length != 2) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  		int nextHours = Int32.Parse (nextParts [0].Trim ());  		int nextMinutes = Int32.Parse (nextParts [1].Trim ());  		nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  		try {  			nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  		}  		catch (FormatException) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  	}  	else {  		nextTimeZone = timeZone;  		nextTimeZoneChange = DateTime.MaxValue;  	}  	timeZoneSet = true;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  catch (ArgumentOutOfRangeException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: try {  	string[] offsetParts = parameters [0].Split (new char[] {  		'.'  	});  	if (offsetParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int hours = Int32.Parse (offsetParts [0].Trim ());  	int minutes = Int32.Parse (offsetParts [1].Trim ());  	timeZone = new TimeSpan (hours' minutes' 0);  	if (parameters.Length == 4) {  		string[] nextParts = parameters [1].Split (new char[] {  			'.'  		});  		if (nextParts.Length != 2) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  		int nextHours = Int32.Parse (nextParts [0].Trim ());  		int nextMinutes = Int32.Parse (nextParts [1].Trim ());  		nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  		try {  			nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  		}  		catch (FormatException) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  	}  	else {  		nextTimeZone = timeZone;  		nextTimeZoneChange = DateTime.MaxValue;  	}  	timeZoneSet = true;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  catch (ArgumentOutOfRangeException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: try {  	string[] offsetParts = parameters [0].Split (new char[] {  		'.'  	});  	if (offsetParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int hours = Int32.Parse (offsetParts [0].Trim ());  	int minutes = Int32.Parse (offsetParts [1].Trim ());  	timeZone = new TimeSpan (hours' minutes' 0);  	if (parameters.Length == 4) {  		string[] nextParts = parameters [1].Split (new char[] {  			'.'  		});  		if (nextParts.Length != 2) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  		int nextHours = Int32.Parse (nextParts [0].Trim ());  		int nextMinutes = Int32.Parse (nextParts [1].Trim ());  		nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  		try {  			nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  		}  		catch (FormatException) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  	}  	else {  		nextTimeZone = timeZone;  		nextTimeZoneChange = DateTime.MaxValue;  	}  	timeZoneSet = true;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  catch (ArgumentOutOfRangeException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: try {  	string[] offsetParts = parameters [0].Split (new char[] {  		'.'  	});  	if (offsetParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int hours = Int32.Parse (offsetParts [0].Trim ());  	int minutes = Int32.Parse (offsetParts [1].Trim ());  	timeZone = new TimeSpan (hours' minutes' 0);  	if (parameters.Length == 4) {  		string[] nextParts = parameters [1].Split (new char[] {  			'.'  		});  		if (nextParts.Length != 2) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  		int nextHours = Int32.Parse (nextParts [0].Trim ());  		int nextMinutes = Int32.Parse (nextParts [1].Trim ());  		nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  		try {  			nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  		}  		catch (FormatException) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  	}  	else {  		nextTimeZone = timeZone;  		nextTimeZoneChange = DateTime.MaxValue;  	}  	timeZoneSet = true;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  catch (ArgumentOutOfRangeException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: try {  	string[] offsetParts = parameters [0].Split (new char[] {  		'.'  	});  	if (offsetParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int hours = Int32.Parse (offsetParts [0].Trim ());  	int minutes = Int32.Parse (offsetParts [1].Trim ());  	timeZone = new TimeSpan (hours' minutes' 0);  	if (parameters.Length == 4) {  		string[] nextParts = parameters [1].Split (new char[] {  			'.'  		});  		if (nextParts.Length != 2) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  		int nextHours = Int32.Parse (nextParts [0].Trim ());  		int nextMinutes = Int32.Parse (nextParts [1].Trim ());  		nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  		try {  			nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  		}  		catch (FormatException) {  			Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  			return (errorCodeFormatError);  		}  	}  	else {  		nextTimeZone = timeZone;  		nextTimeZoneChange = DateTime.MaxValue;  	}  	timeZoneSet = true;  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  catch (ArgumentOutOfRangeException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: if (offsetParts.Length != 2) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: if (parameters.Length == 4) {  	string[] nextParts = parameters [1].Split (new char[] {  		'.'  	});  	if (nextParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int nextHours = Int32.Parse (nextParts [0].Trim ());  	int nextMinutes = Int32.Parse (nextParts [1].Trim ());  	nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  	try {  		nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  	}  	catch (FormatException) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  }  else {  	nextTimeZone = timeZone;  	nextTimeZoneChange = DateTime.MaxValue;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: if (parameters.Length == 4) {  	string[] nextParts = parameters [1].Split (new char[] {  		'.'  	});  	if (nextParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int nextHours = Int32.Parse (nextParts [0].Trim ());  	int nextMinutes = Int32.Parse (nextParts [1].Trim ());  	nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  	try {  		nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  	}  	catch (FormatException) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  }  else {  	nextTimeZone = timeZone;  	nextTimeZoneChange = DateTime.MaxValue;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: if (parameters.Length == 4) {  	string[] nextParts = parameters [1].Split (new char[] {  		'.'  	});  	if (nextParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int nextHours = Int32.Parse (nextParts [0].Trim ());  	int nextMinutes = Int32.Parse (nextParts [1].Trim ());  	nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  	try {  		nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  	}  	catch (FormatException) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  }  else {  	nextTimeZone = timeZone;  	nextTimeZoneChange = DateTime.MaxValue;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: if (parameters.Length == 4) {  	string[] nextParts = parameters [1].Split (new char[] {  		'.'  	});  	if (nextParts.Length != 2) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  	int nextHours = Int32.Parse (nextParts [0].Trim ());  	int nextMinutes = Int32.Parse (nextParts [1].Trim ());  	nextTimeZone = new TimeSpan (nextHours' nextMinutes' 0);  	try {  		nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  	}  	catch (FormatException) {  		Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  		return (errorCodeFormatError);  	}  }  else {  	nextTimeZone = timeZone;  	nextTimeZoneChange = DateTime.MaxValue;  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: if (nextParts.Length != 2) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: try {  	nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: try {  	nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The Timezone line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processTimeZone,The following statement contains a magic number: nextTimeZoneChange = DateTime.ParseExact (parameters [2].Trim () + " " + parameters [3].Trim () + ".00"' "dd/MM/yy HH.mm.ss"' null);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processChannel,The following statement contains a magic number: if (parameters.Length > 2) {  	Logger.Instance.Write ("INI file format error: The Channel line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processMHW1Pids,The following statement contains a magic number: if (parameters.Length != 2) {  	Logger.Instance.Write ("INI file format error: The MHW1Pids line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processMHW2Pids,The following statement contains a magic number: if (parameters.Length != 3) {  	Logger.Instance.Write ("INI file format error: The MHW1Pids line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processMHW2Pids,The following statement contains a magic number: try {  	mhw2Pids = new int[] {  		Int32.Parse (parameters [0].Trim ())'  		Int32.Parse (parameters [1].Trim ())'  		Int32.Parse (parameters [2].Trim ())  	};  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: The MHW1Pids line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: The MHW1Pids line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processMHW2Pids,The following statement contains a magic number: mhw2Pids = new int[] {  	Int32.Parse (parameters [0].Trim ())'  	Int32.Parse (parameters [1].Trim ())'  	Int32.Parse (parameters [2].Trim ())  };  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: if (parameters.Length != 5) {  	Logger.Instance.Write ("INI file format error: A PluginFrequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: try {  	pluginFrequency.Frequency = Int32.Parse (parameters [2]);  	if (parameters [0] == "Satellite")  		(pluginFrequency as SatelliteFrequency).Polarization = new SignalPolarization (parameters [3].Trim () [0]);  	return (getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' pluginFrequency));  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A PluginFrequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A PluginFrequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: try {  	pluginFrequency.Frequency = Int32.Parse (parameters [2]);  	if (parameters [0] == "Satellite")  		(pluginFrequency as SatelliteFrequency).Polarization = new SignalPolarization (parameters [3].Trim () [0]);  	return (getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' pluginFrequency));  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A PluginFrequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A PluginFrequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: try {  	pluginFrequency.Frequency = Int32.Parse (parameters [2]);  	if (parameters [0] == "Satellite")  		(pluginFrequency as SatelliteFrequency).Polarization = new SignalPolarization (parameters [3].Trim () [0]);  	return (getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' pluginFrequency));  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A PluginFrequency line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A PluginFrequency line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: pluginFrequency.Frequency = Int32.Parse (parameters [2]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: if (parameters [0] == "Satellite")  	(pluginFrequency as SatelliteFrequency).Polarization = new SignalPolarization (parameters [3].Trim () [0]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: (pluginFrequency as SatelliteFrequency).Polarization = new SignalPolarization (parameters [3].Trim () [0]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processPluginFrequency,The following statement contains a magic number: return (getCollectionType (parameters [4].Trim ().ToUpperInvariant ()' pluginFrequency));  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processScannedChannel,The following statement contains a magic number: if (parameters.Length != 5) {  	Logger.Instance.Write ("INI file format error: A Scanned line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processScannedChannel,The following statement contains a magic number: try {  	int originalNetworkID = Int32.Parse (parameters [0].Trim ());  	int transportStreamID = Int32.Parse (parameters [1].Trim ());  	int serviceID = Int32.Parse (parameters [2].Trim ());  	TVStation station = TVStation.FindStation (originalNetworkID' transportStreamID' serviceID);  	if (station != null)  		station.Name = parameters [4].Trim ().Replace ("%%"' "'");  	else {  		TVStation newStation = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  		newStation.OriginalNetworkID = originalNetworkID;  		newStation.TransportStreamID = transportStreamID;  		newStation.ServiceID = serviceID;  		TVStation.AddStation (newStation);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Scanned line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Scanned line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processScannedChannel,The following statement contains a magic number: try {  	int originalNetworkID = Int32.Parse (parameters [0].Trim ());  	int transportStreamID = Int32.Parse (parameters [1].Trim ());  	int serviceID = Int32.Parse (parameters [2].Trim ());  	TVStation station = TVStation.FindStation (originalNetworkID' transportStreamID' serviceID);  	if (station != null)  		station.Name = parameters [4].Trim ().Replace ("%%"' "'");  	else {  		TVStation newStation = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  		newStation.OriginalNetworkID = originalNetworkID;  		newStation.TransportStreamID = transportStreamID;  		newStation.ServiceID = serviceID;  		TVStation.AddStation (newStation);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Scanned line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Scanned line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processScannedChannel,The following statement contains a magic number: try {  	int originalNetworkID = Int32.Parse (parameters [0].Trim ());  	int transportStreamID = Int32.Parse (parameters [1].Trim ());  	int serviceID = Int32.Parse (parameters [2].Trim ());  	TVStation station = TVStation.FindStation (originalNetworkID' transportStreamID' serviceID);  	if (station != null)  		station.Name = parameters [4].Trim ().Replace ("%%"' "'");  	else {  		TVStation newStation = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  		newStation.OriginalNetworkID = originalNetworkID;  		newStation.TransportStreamID = transportStreamID;  		newStation.ServiceID = serviceID;  		TVStation.AddStation (newStation);  	}  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: A Scanned line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: A Scanned line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processScannedChannel,The following statement contains a magic number: if (station != null)  	station.Name = parameters [4].Trim ().Replace ("%%"' "'");  else {  	TVStation newStation = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	newStation.OriginalNetworkID = originalNetworkID;  	newStation.TransportStreamID = transportStreamID;  	newStation.ServiceID = serviceID;  	TVStation.AddStation (newStation);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processScannedChannel,The following statement contains a magic number: if (station != null)  	station.Name = parameters [4].Trim ().Replace ("%%"' "'");  else {  	TVStation newStation = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	newStation.OriginalNetworkID = originalNetworkID;  	newStation.TransportStreamID = transportStreamID;  	newStation.ServiceID = serviceID;  	TVStation.AddStation (newStation);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processScannedChannel,The following statement contains a magic number: station.Name = parameters [4].Trim ().Replace ("%%"' "'");  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: if (parameters.Length != 9) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: try {  	TVStation sourceChannel = new TVStation (parameters [0].Trim ().Replace ("%%"' "'"));  	sourceChannel.OriginalNetworkID = Int32.Parse (parameters [1].Trim ());  	sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  	sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  	TVStation destinationChannel = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  	destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  	destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  	TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ()));  	TimeOffsetChannel.Channels.Add (channel);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: try {  	TVStation sourceChannel = new TVStation (parameters [0].Trim ().Replace ("%%"' "'"));  	sourceChannel.OriginalNetworkID = Int32.Parse (parameters [1].Trim ());  	sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  	sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  	TVStation destinationChannel = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  	destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  	destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  	TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ()));  	TimeOffsetChannel.Channels.Add (channel);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: try {  	TVStation sourceChannel = new TVStation (parameters [0].Trim ().Replace ("%%"' "'"));  	sourceChannel.OriginalNetworkID = Int32.Parse (parameters [1].Trim ());  	sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  	sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  	TVStation destinationChannel = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  	destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  	destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  	TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ()));  	TimeOffsetChannel.Channels.Add (channel);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: try {  	TVStation sourceChannel = new TVStation (parameters [0].Trim ().Replace ("%%"' "'"));  	sourceChannel.OriginalNetworkID = Int32.Parse (parameters [1].Trim ());  	sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  	sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  	TVStation destinationChannel = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  	destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  	destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  	TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ()));  	TimeOffsetChannel.Channels.Add (channel);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: try {  	TVStation sourceChannel = new TVStation (parameters [0].Trim ().Replace ("%%"' "'"));  	sourceChannel.OriginalNetworkID = Int32.Parse (parameters [1].Trim ());  	sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  	sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  	TVStation destinationChannel = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  	destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  	destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  	TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ()));  	TimeOffsetChannel.Channels.Add (channel);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: try {  	TVStation sourceChannel = new TVStation (parameters [0].Trim ().Replace ("%%"' "'"));  	sourceChannel.OriginalNetworkID = Int32.Parse (parameters [1].Trim ());  	sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  	sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  	TVStation destinationChannel = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  	destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  	destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  	TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ()));  	TimeOffsetChannel.Channels.Add (channel);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: try {  	TVStation sourceChannel = new TVStation (parameters [0].Trim ().Replace ("%%"' "'"));  	sourceChannel.OriginalNetworkID = Int32.Parse (parameters [1].Trim ());  	sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  	sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  	TVStation destinationChannel = new TVStation (parameters [4].Trim ().Replace ("%%"' "'"));  	destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  	destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  	destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  	TimeOffsetChannel channel = new TimeOffsetChannel (sourceChannel' destinationChannel' Int32.Parse (parameters [8].Trim ()));  	TimeOffsetChannel.Channels.Add (channel);  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An Offset line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: sourceChannel.TransportStreamID = Int32.Parse (parameters [2].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: sourceChannel.ServiceID = Int32.Parse (parameters [3].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: destinationChannel.OriginalNetworkID = Int32.Parse (parameters [5].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: destinationChannel.TransportStreamID = Int32.Parse (parameters [6].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processOffsetChannel,The following statement contains a magic number: destinationChannel.ServiceID = Int32.Parse (parameters [7].Trim ());  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: if (parameters.Length > 4) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: try {  	int originalNetworkID = Int32.Parse (parameters [0]);  	int transportStreamID = -1;  	int startServiceID = -1;  	int endServiceID = -1;  	if (ChannelFilterEntry.ChannelFilters == null)  		ChannelFilterEntry.ChannelFilters = new Collection<ChannelFilterEntry> ();  	if (parameters.Length > 1)  		transportStreamID = Int32.Parse (parameters [1]);  	if (parameters.Length > 2)  		startServiceID = Int32.Parse (parameters [2]);  	if (parameters.Length > 3)  		endServiceID = Int32.Parse (parameters [3]);  	ChannelFilterEntry.ChannelFilters.Add (new ChannelFilterEntry (originalNetworkID' transportStreamID' startServiceID' endServiceID));  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: try {  	int originalNetworkID = Int32.Parse (parameters [0]);  	int transportStreamID = -1;  	int startServiceID = -1;  	int endServiceID = -1;  	if (ChannelFilterEntry.ChannelFilters == null)  		ChannelFilterEntry.ChannelFilters = new Collection<ChannelFilterEntry> ();  	if (parameters.Length > 1)  		transportStreamID = Int32.Parse (parameters [1]);  	if (parameters.Length > 2)  		startServiceID = Int32.Parse (parameters [2]);  	if (parameters.Length > 3)  		endServiceID = Int32.Parse (parameters [3]);  	ChannelFilterEntry.ChannelFilters.Add (new ChannelFilterEntry (originalNetworkID' transportStreamID' startServiceID' endServiceID));  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: try {  	int originalNetworkID = Int32.Parse (parameters [0]);  	int transportStreamID = -1;  	int startServiceID = -1;  	int endServiceID = -1;  	if (ChannelFilterEntry.ChannelFilters == null)  		ChannelFilterEntry.ChannelFilters = new Collection<ChannelFilterEntry> ();  	if (parameters.Length > 1)  		transportStreamID = Int32.Parse (parameters [1]);  	if (parameters.Length > 2)  		startServiceID = Int32.Parse (parameters [2]);  	if (parameters.Length > 3)  		endServiceID = Int32.Parse (parameters [3]);  	ChannelFilterEntry.ChannelFilters.Add (new ChannelFilterEntry (originalNetworkID' transportStreamID' startServiceID' endServiceID));  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: try {  	int originalNetworkID = Int32.Parse (parameters [0]);  	int transportStreamID = -1;  	int startServiceID = -1;  	int endServiceID = -1;  	if (ChannelFilterEntry.ChannelFilters == null)  		ChannelFilterEntry.ChannelFilters = new Collection<ChannelFilterEntry> ();  	if (parameters.Length > 1)  		transportStreamID = Int32.Parse (parameters [1]);  	if (parameters.Length > 2)  		startServiceID = Int32.Parse (parameters [2]);  	if (parameters.Length > 3)  		endServiceID = Int32.Parse (parameters [3]);  	ChannelFilterEntry.ChannelFilters.Add (new ChannelFilterEntry (originalNetworkID' transportStreamID' startServiceID' endServiceID));  }  catch (FormatException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  catch (ArithmeticException) {  	Logger.Instance.Write ("INI file format error: An ExcludeService line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: if (parameters.Length > 2)  	startServiceID = Int32.Parse (parameters [2]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: if (parameters.Length > 2)  	startServiceID = Int32.Parse (parameters [2]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: startServiceID = Int32.Parse (parameters [2]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: if (parameters.Length > 3)  	endServiceID = Int32.Parse (parameters [3]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: if (parameters.Length > 3)  	endServiceID = Int32.Parse (parameters [3]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processIncludeService,The following statement contains a magic number: endServiceID = Int32.Parse (parameters [3]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,processRepeatExclusion,The following statement contains a magic number: if (parameters.Length != 2) {  	Logger.Instance.Write ("INI file format error: A RepeatExclusion line is wrong.");  	return (errorCodeFormatError);  }  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputGeneralParameters,The following statement contains a magic number: if (mhw2Pids != null)  	streamWriter.WriteLine ("MHW2Pids=" + mhw2Pids [0] + "'" + mhw2Pids [1] + "'" + mhw2Pids [2]);  
Magic Number,DomainObjects,RunParameters,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\RunParameters.cs,outputGeneralParameters,The following statement contains a magic number: streamWriter.WriteLine ("MHW2Pids=" + mhw2Pids [0] + "'" + mhw2Pids [1] + "'" + mhw2Pids [2]);  
Magic Number,DomainObjects,TerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialFrequency.cs,ToString,The following statement contains a magic number: if (ChannelNumber == 0)  	return (Frequency / 1000 + " MHz");  else  	return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,TerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialFrequency.cs,ToString,The following statement contains a magic number: if (ChannelNumber == 0)  	return (Frequency / 1000 + " MHz");  else  	return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,TerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialFrequency.cs,ToString,The following statement contains a magic number: return (Frequency / 1000 + " MHz");  
Magic Number,DomainObjects,TerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialFrequency.cs,ToString,The following statement contains a magic number: return ("Channel " + ChannelNumber + " (" + Frequency / 1000 + " MHz)");  
Magic Number,DomainObjects,TerrestrialProvider,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialProvider.cs,Load,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ("*.xml")) {  	TerrestrialProvider terrestrialProvider = new TerrestrialProvider (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4));  	terrestrialProvider.load (fileInfo);  	AddProvider (terrestrialProvider);  }  
Magic Number,DomainObjects,TextTranslator,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TextTranslator.cs,GetTranslatedText,The following statement contains a magic number: index1 += 17;  
Magic Number,DomainObjects,TextTranslator,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TextTranslator.cs,sendWebRequest,The following statement contains a magic number: webRequest.Timeout = 20000;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = extendedMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = extendedMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = normalMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = normalMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: if (RunParameters.Instance.DebugIDs.Contains ("EXTENDEDLOGFILE")) {  	maxFileSize = extendedMb * 1024 * 1024;  	fileSize = extendedMb.ToString ();  }  else {  	maxFileSize = normalMb * 1024 * 1024;  	fileSize = normalMb.ToString ();  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = extendedMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = extendedMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = normalMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Logger,The following statement contains a magic number: maxFileSize = normalMb * 1024 * 1024;  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Write,The following statement contains a magic number: if (fileStream.Length + message.Length + 13 > maxFileSize) {  	fileStream.SetLength (0);  	resetMessage = "Log file reset";  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Dump,The following statement contains a magic number: for (int index = 0; index < length; index++) {  	if (lineIndex == 16) {  		Write (loggerLineHex.ToString () + "  " + loggerLineChar.ToString ());  		loggerLineHex.Remove (0' loggerLineHex.Length);  		loggerLineChar.Remove (0' loggerLineChar.Length);  		loggerLineHex.Append (index.ToString ("0000 "));  		lineIndex = 0;  	}  	loggerLineHex.Append (getHex (buffer [index + offset] >> 4));  	loggerLineHex.Append (getHex (buffer [index + offset] & 0x0f));  	loggerLineHex.Append (' ');  	if (buffer [index + offset] > ' ' - 1 && buffer [index + offset] < 0x7f)  		loggerLineChar.Append ((char)buffer [index + offset]);  	else  		loggerLineChar.Append ('.');  	lineIndex++;  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Dump,The following statement contains a magic number: for (int index = 0; index < length; index++) {  	if (lineIndex == 16) {  		Write (loggerLineHex.ToString () + "  " + loggerLineChar.ToString ());  		loggerLineHex.Remove (0' loggerLineHex.Length);  		loggerLineChar.Remove (0' loggerLineChar.Length);  		loggerLineHex.Append (index.ToString ("0000 "));  		lineIndex = 0;  	}  	loggerLineHex.Append (getHex (buffer [index + offset] >> 4));  	loggerLineHex.Append (getHex (buffer [index + offset] & 0x0f));  	loggerLineHex.Append (' ');  	if (buffer [index + offset] > ' ' - 1 && buffer [index + offset] < 0x7f)  		loggerLineChar.Append ((char)buffer [index + offset]);  	else  		loggerLineChar.Append ('.');  	lineIndex++;  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Dump,The following statement contains a magic number: if (lineIndex == 16) {  	Write (loggerLineHex.ToString () + "  " + loggerLineChar.ToString ());  	loggerLineHex.Remove (0' loggerLineHex.Length);  	loggerLineChar.Remove (0' loggerLineChar.Length);  	loggerLineHex.Append (index.ToString ("0000 "));  	lineIndex = 0;  }  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,Dump,The following statement contains a magic number: loggerLineHex.Append (getHex (buffer [index + offset] >> 4));  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,getHex,The following statement contains a magic number: if (dataChar < 10)  	return ((char)('0' + dataChar));  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,getHex,The following statement contains a magic number: return ((char)('a' + dataChar - 10));  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,DecrementProtocolIndent,The following statement contains a magic number: if (protocolIndent.Length > 3)  	protocolIndent = protocolIndent.Remove (protocolIndent.Length - 4);  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,DecrementProtocolIndent,The following statement contains a magic number: if (protocolIndent.Length > 3)  	protocolIndent = protocolIndent.Remove (protocolIndent.Length - 4);  
Magic Number,DomainObjects,Logger,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Logger.cs,DecrementProtocolIndent,The following statement contains a magic number: protocolIndent = protocolIndent.Remove (protocolIndent.Length - 4);  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: if (logLine.Length < 14) {  	text = logLine;  	return;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: try {  	time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  	text = logLine.Substring (13);  }  catch (FormatException) {  	text = logLine;  }  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: time = new DateTime (1' 1' 1' Int32.Parse (logLine.Substring (0' 2))' Int32.Parse (logLine.Substring (3' 2))' Int32.Parse (logLine.Substring (6' 2))' Int32.Parse (logLine.Substring (9' 3)));  
Magic Number,DomainObjects,LogRecord,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\LogRecord.cs,LogRecord,The following statement contains a magic number: text = logLine.Substring (13);  
Magic Number,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,Satellite,The following statement contains a magic number: longitude = (int)(decimal.Parse (parts [0].Substring (0' parts [0].Length - 2)' CultureInfo.InvariantCulture) * 10);  
Magic Number,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,Satellite,The following statement contains a magic number: longitude = (int)(decimal.Parse (parts [0].Substring (0' parts [0].Length - 2)' CultureInfo.InvariantCulture) * 10);  
Magic Number,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,Load,The following statement contains a magic number: foreach (FileInfo fileInfo in directoryInfo.GetFiles ("*.xml")) {  	Satellite satellite = new Satellite (fileInfo.Name.Substring (0' fileInfo.Name.Length - 4));  	satellite.load (fileInfo);  	AddProvider (satellite);  }  
Magic Number,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,FindProvider,The following statement contains a magic number: foreach (Satellite provider in Providers) {  	foreach (SatelliteFrequency satelliteFrequency in provider.Frequencies) {  		if (provider.Longitude == 1600) {  			int count = 0;  			count++;  		}  		if (satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization)  			return (provider);  	}  }  
Magic Number,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,FindProvider,The following statement contains a magic number: foreach (SatelliteFrequency satelliteFrequency in provider.Frequencies) {  	if (provider.Longitude == 1600) {  		int count = 0;  		count++;  	}  	if (satelliteFrequency.Frequency == frequency && satelliteFrequency.SymbolRate == symbolRate && satelliteFrequency.FEC.Rate == fecRate.Rate && satelliteFrequency.Polarization.Polarization == polarization.Polarization)  		return (provider);  }  
Magic Number,DomainObjects,Satellite,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\Satellite.cs,FindProvider,The following statement contains a magic number: if (provider.Longitude == 1600) {  	int count = 0;  	count++;  }  
Magic Number,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,checkTransportStream,The following statement contains a magic number: if (scheduleAvailable) {  	reply = checkTable (scheduleStartTable' 8);  	if (!reply)  		return (false);  	for (int table = scheduleStartTable + 1; table < highestTable + 1; table++) {  		reply = checkTable (table' 8);  		if (!reply)  			return (false);  	}  }  
Magic Number,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,checkTransportStream,The following statement contains a magic number: if (scheduleAvailable) {  	reply = checkTable (scheduleStartTable' 8);  	if (!reply)  		return (false);  	for (int table = scheduleStartTable + 1; table < highestTable + 1; table++) {  		reply = checkTable (table' 8);  		if (!reply)  			return (false);  	}  }  
Magic Number,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,checkTransportStream,The following statement contains a magic number: reply = checkTable (scheduleStartTable' 8);  
Magic Number,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,checkTransportStream,The following statement contains a magic number: for (int table = scheduleStartTable + 1; table < highestTable + 1; table++) {  	reply = checkTable (table' 8);  	if (!reply)  		return (false);  }  
Magic Number,DomainObjects,TVStation,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TVStation.cs,checkTransportStream,The following statement contains a magic number: reply = checkTable (table' 8);  
Magic Number,DomainObjects,WMCUtility,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\WMCUtility.cs,Run,The following statement contains a magic number: try {  	process.Start ();  	process.BeginOutputReadLine ();  	process.BeginErrorReadLine ();  	while (!exited)  		Thread.Sleep (500);  	Logger.Instance.Write ("Windows Media Centre Utility has completed: exit code " + process.ExitCode);  	if (process.ExitCode == 0)  		return (null);  	else  		return ("Windows Media Centre failed: reply code " + process.ExitCode);  }  catch (Exception e) {  	Logger.Instance.Write ("<e> Failed to run the Windows Media Centre Utility");  	Logger.Instance.Write ("<e> " + e.Message);  	return ("Failed to run Windows Media Centre Utility due to an exception");  }  
Magic Number,DomainObjects,WMCUtility,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\WMCUtility.cs,Run,The following statement contains a magic number: while (!exited)  	Thread.Sleep (500);  
Magic Number,DomainObjects,WMCUtility,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\WMCUtility.cs,Run,The following statement contains a magic number: Thread.Sleep (500);  
Missing Default,DomainObjects,AtscFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "BPSK":  	modulation = Modulation.BPSK;  	break;  case "OQPSK":  	modulation = Modulation.OQPSK;  	break;  case "PSK8":  	modulation = Modulation.PSK8;  	break;  case "QAM1024":  	modulation = Modulation.QAM1024;  	break;  case "QAM112":  	modulation = Modulation.QAM112;  	break;  case "QAM128":  	modulation = Modulation.QAM128;  	break;  case "QAM16":  	modulation = Modulation.QAM16;  	break;  case "QAM160":  	modulation = Modulation.QAM160;  	break;  case "QAM192":  	modulation = Modulation.QAM192;  	break;  case "QAM224":  	modulation = Modulation.QAM224;  	break;  case "QAM256":  	modulation = Modulation.QAM256;  	break;  case "QAM32":  	modulation = Modulation.QAM32;  	break;  case "QAM320":  	modulation = Modulation.QAM320;  	break;  case "QAM384":  	modulation = Modulation.QAM384;  	break;  case "QAM448":  	modulation = Modulation.QAM448;  	break;  case "QAM512":  	modulation = Modulation.QAM512;  	break;  case "QAM64":  	modulation = Modulation.QAM64;  	break;  case "QAM640":  	modulation = Modulation.QAM640;  	break;  case "QAM768":  	modulation = Modulation.QAM768;  	break;  case "QAM80":  	modulation = Modulation.QAM80;  	break;  case "QAM896":  	modulation = Modulation.QAM896;  	break;  case "QAM96":  	modulation = Modulation.QAM96;  	break;  case "QPSK":  	modulation = Modulation.QPSK;  	break;  case "VSB16":  	modulation = Modulation.VSB16;  	break;  case "VSB8":  	modulation = Modulation.VSB8;  	break;  }  
Missing Default,DomainObjects,AtscFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "Rate1_2":  	fec = new FECRate (FECRate.FECRate12);  	break;  case "Rate1_3":  	fec = new FECRate (FECRate.FECRate13);  	break;  case "Rate1_4":  	fec = new FECRate (FECRate.FECRate14);  	break;  case "Rate2_3":  	fec = new FECRate (FECRate.FECRate23);  	break;  case "Rate2_5":  	fec = new FECRate (FECRate.FECRate25);  	break;  case "Rate3_4":  	fec = new FECRate (FECRate.FECRate34);  	break;  case "Rate3_5":  	fec = new FECRate (FECRate.FECRate35);  	break;  case "Rate4_5":  	fec = new FECRate (FECRate.FECRate45);  	break;  case "Rate5_11":  	fec = new FECRate (FECRate.FECRate511);  	break;  case "Rate5_6":  	fec = new FECRate (FECRate.FECRate56);  	break;  case "Rate6_7":  	fec = new FECRate (FECRate.FECRate67);  	break;  case "Rate7_8":  	fec = new FECRate (FECRate.FECRate78);  	break;  case "Rate8_9":  	fec = new FECRate (FECRate.FECRate89);  	break;  case "Rate9_10":  	fec = new FECRate (FECRate.FECRate910);  	break;  }  
Missing Default,DomainObjects,AtscFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\AtscFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "EIT":  	CollectionType = CollectionType.EIT;  	break;  case "MHEG5":  	CollectionType = CollectionType.MHEG5;  	break;  case "OPENTV":  	CollectionType = CollectionType.OpenTV;  	break;  case "MHW1":  	CollectionType = CollectionType.MediaHighway1;  	break;  case "MHW2":  	CollectionType = CollectionType.MediaHighway2;  	break;  case "FREESAT":  	CollectionType = CollectionType.FreeSat;  	break;  case "PSIP":  	CollectionType = CollectionType.PSIP;  	break;  case "DISHNETWORK":  	CollectionType = CollectionType.DishNetwork;  	break;  case "BELLTV":  	CollectionType = CollectionType.BellTV;  	break;  case "SIEHFERNINFO":  	CollectionType = CollectionType.SiehfernInfo;  	break;  }  
Missing Default,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "ModBPSK":  	modulation = Modulation.BPSK;  	break;  case "ModOQPSK":  	modulation = Modulation.OQPSK;  	break;  case "ModPSK8":  	modulation = Modulation.PSK8;  	break;  case "Mod1024Qam":  	modulation = Modulation.QAM1024;  	break;  case "Mod112Qam":  	modulation = Modulation.QAM112;  	break;  case "Mod128Qam":  	modulation = Modulation.QAM128;  	break;  case "Mod16Qam":  	modulation = Modulation.QAM16;  	break;  case "Mod160Qam":  	modulation = Modulation.QAM160;  	break;  case "Mod192Qam":  	modulation = Modulation.QAM192;  	break;  case "Mod224Qam":  	modulation = Modulation.QAM224;  	break;  case "Mod256Qam":  	modulation = Modulation.QAM256;  	break;  case "Mod32Qam":  	modulation = Modulation.QAM32;  	break;  case "Mod320Qam":  	modulation = Modulation.QAM320;  	break;  case "Mod384Qam":  	modulation = Modulation.QAM384;  	break;  case "Mod448Qam":  	modulation = Modulation.QAM448;  	break;  case "Mod512Qam":  	modulation = Modulation.QAM512;  	break;  case "Mod64Qam":  	modulation = Modulation.QAM64;  	break;  case "Mod640Qam":  	modulation = Modulation.QAM640;  	break;  case "Mod768Qam":  	modulation = Modulation.QAM768;  	break;  case "Mod80Qam":  	modulation = Modulation.QAM80;  	break;  case "Mod896Qam":  	modulation = Modulation.QAM896;  	break;  case "Mod96Qam":  	modulation = Modulation.QAM96;  	break;  case "ModQPSK":  	modulation = Modulation.QPSK;  	break;  }  
Missing Default,DomainObjects,CableFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\CableFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "EIT":  	CollectionType = CollectionType.EIT;  	break;  case "MHEG5":  	CollectionType = CollectionType.MHEG5;  	break;  case "OPENTV":  	CollectionType = CollectionType.OpenTV;  	break;  case "MHW1":  	CollectionType = CollectionType.MediaHighway1;  	break;  case "MHW2":  	CollectionType = CollectionType.MediaHighway2;  	break;  case "FREESAT":  	CollectionType = CollectionType.FreeSat;  	break;  case "PSIP":  	CollectionType = CollectionType.PSIP;  	break;  case "DISHNETWORK":  	CollectionType = CollectionType.DishNetwork;  	break;  case "BELLTV":  	CollectionType = CollectionType.BellTV;  	break;  case "SIEHFERNINFO":  	CollectionType = CollectionType.SiehfernInfo;  	break;  }  
Missing Default,DomainObjects,ClearQamFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "BPSK":  	modulation = Modulation.BPSK;  	break;  case "OQPSK":  	modulation = Modulation.OQPSK;  	break;  case "PSK8":  	modulation = Modulation.PSK8;  	break;  case "QAM1024":  	modulation = Modulation.QAM1024;  	break;  case "QAM112":  	modulation = Modulation.QAM112;  	break;  case "QAM128":  	modulation = Modulation.QAM128;  	break;  case "QAM16":  	modulation = Modulation.QAM16;  	break;  case "QAM160":  	modulation = Modulation.QAM160;  	break;  case "QAM192":  	modulation = Modulation.QAM192;  	break;  case "QAM224":  	modulation = Modulation.QAM224;  	break;  case "QAM256":  	modulation = Modulation.QAM256;  	break;  case "QAM32":  	modulation = Modulation.QAM32;  	break;  case "QAM320":  	modulation = Modulation.QAM320;  	break;  case "QAM384":  	modulation = Modulation.QAM384;  	break;  case "QAM448":  	modulation = Modulation.QAM448;  	break;  case "QAM512":  	modulation = Modulation.QAM512;  	break;  case "QAM64":  	modulation = Modulation.QAM64;  	break;  case "QAM640":  	modulation = Modulation.QAM640;  	break;  case "QAM768":  	modulation = Modulation.QAM768;  	break;  case "QAM80":  	modulation = Modulation.QAM80;  	break;  case "QAM896":  	modulation = Modulation.QAM896;  	break;  case "QAM96":  	modulation = Modulation.QAM96;  	break;  case "QPSK":  	modulation = Modulation.QPSK;  	break;  case "VSB16":  	modulation = Modulation.VSB16;  	break;  case "VSB8":  	modulation = Modulation.VSB8;  	break;  }  
Missing Default,DomainObjects,ClearQamFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "Rate1_2":  	fec = new FECRate (FECRate.FECRate12);  	break;  case "Rate1_3":  	fec = new FECRate (FECRate.FECRate13);  	break;  case "Rate1_4":  	fec = new FECRate (FECRate.FECRate14);  	break;  case "Rate2_3":  	fec = new FECRate (FECRate.FECRate23);  	break;  case "Rate2_5":  	fec = new FECRate (FECRate.FECRate25);  	break;  case "Rate3_4":  	fec = new FECRate (FECRate.FECRate34);  	break;  case "Rate3_5":  	fec = new FECRate (FECRate.FECRate35);  	break;  case "Rate4_5":  	fec = new FECRate (FECRate.FECRate45);  	break;  case "Rate5_11":  	fec = new FECRate (FECRate.FECRate511);  	break;  case "Rate5_6":  	fec = new FECRate (FECRate.FECRate56);  	break;  case "Rate6_7":  	fec = new FECRate (FECRate.FECRate67);  	break;  case "Rate7_8":  	fec = new FECRate (FECRate.FECRate78);  	break;  case "Rate8_9":  	fec = new FECRate (FECRate.FECRate89);  	break;  case "Rate9_10":  	fec = new FECRate (FECRate.FECRate910);  	break;  }  
Missing Default,DomainObjects,ClearQamFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ClearQamFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "EIT":  	CollectionType = CollectionType.EIT;  	break;  case "MHEG5":  	CollectionType = CollectionType.MHEG5;  	break;  case "OPENTV":  	CollectionType = CollectionType.OpenTV;  	break;  case "MHW1":  	CollectionType = CollectionType.MediaHighway1;  	break;  case "MHW2":  	CollectionType = CollectionType.MediaHighway2;  	break;  case "FREESAT":  	CollectionType = CollectionType.FreeSat;  	break;  case "PSIP":  	CollectionType = CollectionType.PSIP;  	break;  case "DISHNETWORK":  	CollectionType = CollectionType.DishNetwork;  	break;  case "BELLTV":  	CollectionType = CollectionType.BellTV;  	break;  case "SIEHFERNINFO":  	CollectionType = CollectionType.SiehfernInfo;  	break;  }  
Missing Default,DomainObjects,ISDBSatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "CircularL":  	polarization = new SignalPolarization (SignalPolarization.CircularLeft);  	break;  case "CircularR":  	polarization = new SignalPolarization (SignalPolarization.CircularRight);  	break;  case "LinearH":  	polarization = new SignalPolarization (SignalPolarization.LinearHorizontal);  	break;  case "LinearV":  	polarization = new SignalPolarization (SignalPolarization.LinearVertical);  	break;  }  
Missing Default,DomainObjects,ISDBSatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "Rate1_2":  	fec = new FECRate (FECRate.FECRate12);  	break;  case "Rate1_3":  	fec = new FECRate (FECRate.FECRate13);  	break;  case "Rate1_4":  	fec = new FECRate (FECRate.FECRate14);  	break;  case "Rate2_3":  	fec = new FECRate (FECRate.FECRate23);  	break;  case "Rate2_5":  	fec = new FECRate (FECRate.FECRate25);  	break;  case "Rate3_4":  	fec = new FECRate (FECRate.FECRate34);  	break;  case "Rate3_5":  	fec = new FECRate (FECRate.FECRate35);  	break;  case "Rate4_5":  	fec = new FECRate (FECRate.FECRate45);  	break;  case "Rate5_11":  	fec = new FECRate (FECRate.FECRate511);  	break;  case "Rate5_6":  	fec = new FECRate (FECRate.FECRate56);  	break;  case "Rate6_7":  	fec = new FECRate (FECRate.FECRate67);  	break;  case "Rate7_8":  	fec = new FECRate (FECRate.FECRate78);  	break;  case "Rate8_9":  	fec = new FECRate (FECRate.FECRate89);  	break;  case "Rate9_10":  	fec = new FECRate (FECRate.FECRate910);  	break;  }  
Missing Default,DomainObjects,ISDBSatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBSatelliteFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "EIT":  	CollectionType = CollectionType.EIT;  	break;  case "MHEG5":  	CollectionType = CollectionType.MHEG5;  	break;  case "OPENTV":  	CollectionType = CollectionType.OpenTV;  	break;  case "MHW1":  	CollectionType = CollectionType.MediaHighway1;  	break;  case "MHW2":  	CollectionType = CollectionType.MediaHighway2;  	break;  case "FREESAT":  	CollectionType = CollectionType.FreeSat;  	break;  case "PSIP":  	CollectionType = CollectionType.PSIP;  	break;  case "DISHNETWORK":  	CollectionType = CollectionType.DishNetwork;  	break;  case "BELLTV":  	CollectionType = CollectionType.BellTV;  	break;  case "SIEHFERNINFO":  	CollectionType = CollectionType.SiehfernInfo;  	break;  }  
Missing Default,DomainObjects,ISDBTerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\ISDBTerrestrialFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "EIT":  	CollectionType = CollectionType.EIT;  	break;  case "MHEG5":  	CollectionType = CollectionType.MHEG5;  	break;  case "OPENTV":  	CollectionType = CollectionType.OpenTV;  	break;  case "MHW1":  	CollectionType = CollectionType.MediaHighway1;  	break;  case "MHW2":  	CollectionType = CollectionType.MediaHighway2;  	break;  case "FREESAT":  	CollectionType = CollectionType.FreeSat;  	break;  case "PSIP":  	CollectionType = CollectionType.PSIP;  	break;  case "DISHNETWORK":  	CollectionType = CollectionType.DishNetwork;  	break;  case "BELLTV":  	CollectionType = CollectionType.BellTV;  	break;  case "SIEHFERNINFO":  	CollectionType = CollectionType.SiehfernInfo;  	break;  }  
Missing Default,DomainObjects,TerrestrialFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\TerrestrialFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "EIT":  	CollectionType = CollectionType.EIT;  	break;  case "MHEG5":  	CollectionType = CollectionType.MHEG5;  	break;  case "OPENTV":  	CollectionType = CollectionType.OpenTV;  	break;  case "MHW1":  	CollectionType = CollectionType.MediaHighway1;  	break;  case "MHW2":  	CollectionType = CollectionType.MediaHighway2;  	break;  case "FREESAT":  	CollectionType = CollectionType.FreeSat;  	break;  case "PSIP":  	CollectionType = CollectionType.PSIP;  	break;  case "DISHNETWORK":  	CollectionType = CollectionType.DishNetwork;  	break;  case "BELLTV":  	CollectionType = CollectionType.BellTV;  	break;  case "SIEHFERNINFO":  	CollectionType = CollectionType.SiehfernInfo;  	break;  }  
Missing Default,DomainObjects,SatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SatelliteFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "CircularL":  	polarization = new SignalPolarization (SignalPolarization.CircularLeft);  	break;  case "CircularR":  	polarization = new SignalPolarization (SignalPolarization.CircularRight);  	break;  case "LinearH":  	polarization = new SignalPolarization (SignalPolarization.LinearHorizontal);  	break;  case "LinearV":  	polarization = new SignalPolarization (SignalPolarization.LinearVertical);  	break;  }  
Missing Default,DomainObjects,SatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SatelliteFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "Rate1_2":  	fec = new FECRate (FECRate.FECRate12);  	break;  case "Rate1_3":  	fec = new FECRate (FECRate.FECRate13);  	break;  case "Rate1_4":  	fec = new FECRate (FECRate.FECRate14);  	break;  case "Rate2_3":  	fec = new FECRate (FECRate.FECRate23);  	break;  case "Rate2_5":  	fec = new FECRate (FECRate.FECRate25);  	break;  case "Rate3_4":  	fec = new FECRate (FECRate.FECRate34);  	break;  case "Rate3_5":  	fec = new FECRate (FECRate.FECRate35);  	break;  case "Rate4_5":  	fec = new FECRate (FECRate.FECRate45);  	break;  case "Rate5_11":  	fec = new FECRate (FECRate.FECRate511);  	break;  case "Rate5_6":  	fec = new FECRate (FECRate.FECRate56);  	break;  case "Rate6_7":  	fec = new FECRate (FECRate.FECRate67);  	break;  case "Rate7_8":  	fec = new FECRate (FECRate.FECRate78);  	break;  case "Rate8_9":  	fec = new FECRate (FECRate.FECRate89);  	break;  case "Rate9_10":  	fec = new FECRate (FECRate.FECRate910);  	break;  }  
Missing Default,DomainObjects,SatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SatelliteFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "EIT":  	CollectionType = CollectionType.EIT;  	break;  case "MHEG5":  	CollectionType = CollectionType.MHEG5;  	break;  case "OPENTV":  	CollectionType = CollectionType.OpenTV;  	break;  case "MHW1":  	CollectionType = CollectionType.MediaHighway1;  	break;  case "MHW2":  	CollectionType = CollectionType.MediaHighway2;  	break;  case "FREESAT":  	CollectionType = CollectionType.FreeSat;  	break;  case "PSIP":  	CollectionType = CollectionType.PSIP;  	break;  case "DISHNETWORK":  	CollectionType = CollectionType.DishNetwork;  	break;  case "BELLTV":  	CollectionType = CollectionType.BellTV;  	break;  case "SIEHFERNINFO":  	CollectionType = CollectionType.SiehfernInfo;  	break;  }  
Missing Default,DomainObjects,SatelliteFrequency,C:\repos\esurharun_TSDumper\TSDumper.Utility\DomainObjects\SatelliteFrequency.cs,load,The following switch statement is missing a default case: switch (reader.ReadString ()) {  case "ModBPSK":  	modulation = Modulation.BPSK;  	break;  case "ModOQPSK":  	modulation = Modulation.OQPSK;  	break;  case "Mod8Psk":  	modulation = Modulation.PSK8;  	break;  case "Mod1024Qam":  	modulation = Modulation.QAM1024;  	break;  case "Mod112Qam":  	modulation = Modulation.QAM112;  	break;  case "Mod128Qam":  	modulation = Modulation.QAM128;  	break;  case "Mod16Qam":  	modulation = Modulation.QAM16;  	break;  case "Mod160Qam":  	modulation = Modulation.QAM160;  	break;  case "Mod192Qam":  	modulation = Modulation.QAM192;  	break;  case "Mod224Qam":  	modulation = Modulation.QAM224;  	break;  case "Mod256Qam":  	modulation = Modulation.QAM256;  	break;  case "Mod32Qam":  	modulation = Modulation.QAM32;  	break;  case "Mod320Qam":  	modulation = Modulation.QAM320;  	break;  case "Mod384Qam":  	modulation = Modulation.QAM384;  	break;  case "Mod448Qam":  	modulation = Modulation.QAM448;  	break;  case "Mod512Qam":  	modulation = Modulation.QAM512;  	break;  case "Mod64Qam":  	modulation = Modulation.QAM64;  	break;  case "Mod640Qam":  	modulation = Modulation.QAM640;  	break;  case "Mod768Qam":  	modulation = Modulation.QAM768;  	break;  case "Mod80Qam":  	modulation = Modulation.QAM80;  	break;  case "Mod896Qam":  	modulation = Modulation.QAM896;  	break;  case "Mod96Qam":  	modulation = Modulation.QAM96;  	break;  case "ModQPSK":  	modulation = Modulation.QPSK;  	break;  }  
