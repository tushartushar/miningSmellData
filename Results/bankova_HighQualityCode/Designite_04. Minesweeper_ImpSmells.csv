Implementation smell,Namespace,Class,File,Method,Description
Long Method,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The method has 106 lines of code.
Complex Method,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,Cyclomatic complexity of the method is 31
Complex Method,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,CalculateBombsInCells,Cyclomatic complexity of the method is 17
Long Parameter List,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The method has 5 parameters.
Long Statement,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The length of the statement  "			Console.WriteLine ("Let's play mines”. Test your luck to find all fields without mines." + Environment.NewLine + " Command 'top' shows the rating' 'restart' starts new game'" + Environment.NewLine + "'exit' means Goodbye!"); " is 224.
Long Statement,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The length of the statement  "			if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) { " is 173.
Complex Conditional,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The conditional expression  "int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)"  is complex.
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: do {  	if (isNewGame) {  		Console.WriteLine ("Let's play mines”. Test your luck to find all fields without mines." + Environment.NewLine + " Command 'top' shows the rating' 'restart' starts new game'" + Environment.NewLine + "'exit' means Goodbye!");  		CreateField (playField);  		isNewGame = false;  	}  	Console.Write ("Enter row and column : ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		GetRating (champions);  		break;  	case "restart":  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		CreateField (playField);  		hitBomb = false;  		isNewGame = false;  		break;  	case "exit":  		Console.WriteLine ("Good-bye!");  		break;  	case "turn":  		if (bombsField [row' col] != '*') {  			if (bombsField [row' col] == '-') {  				RevealCell (playField' bombsField' row' col);  				openCellsCount++;  			}  			if (MAX_OPEN_CELLS == openCellsCount) {  				hasWon = true;  			}  			else {  				CreateField (playField);  			}  		}  		else {  			hitBomb = true;  		}  		break;  	default:  		Console.WriteLine (Environment.NewLine + "Error! Invalid command" + Environment.NewLine);  		break;  	}  	if (hitBomb) {  		CreateField (bombsField);  		Console.Write (Environment.NewLine + "You are dead. Your points are {0}. " + "Write your name: "' openCellsCount);  		string playerName = Console.ReadLine ();  		Score currentPlayerScore = new Score (playerName' openCellsCount);  		if (champions.Count < 5) {  			champions.Add (currentPlayerScore);  		}  		else {  			for (int i = 0; i < champions.Count; i++) {  				if (champions [i].Points < currentPlayerScore.Points) {  					champions.Insert (i' currentPlayerScore);  					champions.RemoveAt (champions.Count - 1);  					break;  				}  			}  		}  		champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Name.CompareTo (firstPlayer.Name));  		champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Points.CompareTo (firstPlayer.Points));  		GetRating (champions);  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		openCellsCount = 0;  		hitBomb = false;  		isNewGame = true;  	}  	if (hasWon) {  		Console.WriteLine (Environment.NewLine + "Well done! No blood was shown in all 35 moves");  		CreateField (bombsField);  		Console.WriteLine ("Write your name' please: ");  		string successfulPlayerName = Console.ReadLine ();  		Score currentPlayerScore = new Score (successfulPlayerName' openCellsCount);  		champions.Add (currentPlayerScore);  		GetRating (champions);  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		openCellsCount = 0;  		hasWon = false;  		isNewGame = true;  	}  }  while (command != "exit");  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: do {  	if (isNewGame) {  		Console.WriteLine ("Let's play mines”. Test your luck to find all fields without mines." + Environment.NewLine + " Command 'top' shows the rating' 'restart' starts new game'" + Environment.NewLine + "'exit' means Goodbye!");  		CreateField (playField);  		isNewGame = false;  	}  	Console.Write ("Enter row and column : ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		GetRating (champions);  		break;  	case "restart":  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		CreateField (playField);  		hitBomb = false;  		isNewGame = false;  		break;  	case "exit":  		Console.WriteLine ("Good-bye!");  		break;  	case "turn":  		if (bombsField [row' col] != '*') {  			if (bombsField [row' col] == '-') {  				RevealCell (playField' bombsField' row' col);  				openCellsCount++;  			}  			if (MAX_OPEN_CELLS == openCellsCount) {  				hasWon = true;  			}  			else {  				CreateField (playField);  			}  		}  		else {  			hitBomb = true;  		}  		break;  	default:  		Console.WriteLine (Environment.NewLine + "Error! Invalid command" + Environment.NewLine);  		break;  	}  	if (hitBomb) {  		CreateField (bombsField);  		Console.Write (Environment.NewLine + "You are dead. Your points are {0}. " + "Write your name: "' openCellsCount);  		string playerName = Console.ReadLine ();  		Score currentPlayerScore = new Score (playerName' openCellsCount);  		if (champions.Count < 5) {  			champions.Add (currentPlayerScore);  		}  		else {  			for (int i = 0; i < champions.Count; i++) {  				if (champions [i].Points < currentPlayerScore.Points) {  					champions.Insert (i' currentPlayerScore);  					champions.RemoveAt (champions.Count - 1);  					break;  				}  			}  		}  		champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Name.CompareTo (firstPlayer.Name));  		champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Points.CompareTo (firstPlayer.Points));  		GetRating (champions);  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		openCellsCount = 0;  		hitBomb = false;  		isNewGame = true;  	}  	if (hasWon) {  		Console.WriteLine (Environment.NewLine + "Well done! No blood was shown in all 35 moves");  		CreateField (bombsField);  		Console.WriteLine ("Write your name' please: ");  		string successfulPlayerName = Console.ReadLine ();  		Score currentPlayerScore = new Score (successfulPlayerName' openCellsCount);  		champions.Add (currentPlayerScore);  		GetRating (champions);  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		openCellsCount = 0;  		hasWon = false;  		isNewGame = true;  	}  }  while (command != "exit");  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: do {  	if (isNewGame) {  		Console.WriteLine ("Let's play mines”. Test your luck to find all fields without mines." + Environment.NewLine + " Command 'top' shows the rating' 'restart' starts new game'" + Environment.NewLine + "'exit' means Goodbye!");  		CreateField (playField);  		isNewGame = false;  	}  	Console.Write ("Enter row and column : ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		GetRating (champions);  		break;  	case "restart":  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		CreateField (playField);  		hitBomb = false;  		isNewGame = false;  		break;  	case "exit":  		Console.WriteLine ("Good-bye!");  		break;  	case "turn":  		if (bombsField [row' col] != '*') {  			if (bombsField [row' col] == '-') {  				RevealCell (playField' bombsField' row' col);  				openCellsCount++;  			}  			if (MAX_OPEN_CELLS == openCellsCount) {  				hasWon = true;  			}  			else {  				CreateField (playField);  			}  		}  		else {  			hitBomb = true;  		}  		break;  	default:  		Console.WriteLine (Environment.NewLine + "Error! Invalid command" + Environment.NewLine);  		break;  	}  	if (hitBomb) {  		CreateField (bombsField);  		Console.Write (Environment.NewLine + "You are dead. Your points are {0}. " + "Write your name: "' openCellsCount);  		string playerName = Console.ReadLine ();  		Score currentPlayerScore = new Score (playerName' openCellsCount);  		if (champions.Count < 5) {  			champions.Add (currentPlayerScore);  		}  		else {  			for (int i = 0; i < champions.Count; i++) {  				if (champions [i].Points < currentPlayerScore.Points) {  					champions.Insert (i' currentPlayerScore);  					champions.RemoveAt (champions.Count - 1);  					break;  				}  			}  		}  		champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Name.CompareTo (firstPlayer.Name));  		champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Points.CompareTo (firstPlayer.Points));  		GetRating (champions);  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		openCellsCount = 0;  		hitBomb = false;  		isNewGame = true;  	}  	if (hasWon) {  		Console.WriteLine (Environment.NewLine + "Well done! No blood was shown in all 35 moves");  		CreateField (bombsField);  		Console.WriteLine ("Write your name' please: ");  		string successfulPlayerName = Console.ReadLine ();  		Score currentPlayerScore = new Score (successfulPlayerName' openCellsCount);  		champions.Add (currentPlayerScore);  		GetRating (champions);  		playField = CreatePlayfield ();  		bombsField = PutBombs ();  		openCellsCount = 0;  		hasWon = false;  		isNewGame = true;  	}  }  while (command != "exit");  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  	command = "turn";  }  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: if (hitBomb) {  	CreateField (bombsField);  	Console.Write (Environment.NewLine + "You are dead. Your points are {0}. " + "Write your name: "' openCellsCount);  	string playerName = Console.ReadLine ();  	Score currentPlayerScore = new Score (playerName' openCellsCount);  	if (champions.Count < 5) {  		champions.Add (currentPlayerScore);  	}  	else {  		for (int i = 0; i < champions.Count; i++) {  			if (champions [i].Points < currentPlayerScore.Points) {  				champions.Insert (i' currentPlayerScore);  				champions.RemoveAt (champions.Count - 1);  				break;  			}  		}  	}  	champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Name.CompareTo (firstPlayer.Name));  	champions.Sort ((Score firstPlayer' Score secondPlayer) => secondPlayer.Points.CompareTo (firstPlayer.Points));  	GetRating (champions);  	playField = CreatePlayfield ();  	bombsField = PutBombs ();  	openCellsCount = 0;  	hitBomb = false;  	isNewGame = true;  }  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,Main,The following statement contains a magic number: if (champions.Count < 5) {  	champions.Add (currentPlayerScore);  }  else {  	for (int i = 0; i < champions.Count; i++) {  		if (champions [i].Points < currentPlayerScore.Points) {  			champions.Insert (i' currentPlayerScore);  			champions.RemoveAt (champions.Count - 1);  			break;  		}  	}  }  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,PutBombs,The following statement contains a magic number: while (bombMap.Count < 15) {  	Random random = new Random ();  	int location = random.Next (50);  	if (!bombMap.Contains (location)) {  		bombMap.Add (location);  	}  }  
Magic Number,MineSweeper,Mine,C:\repos\bankova_HighQualityCode\NamingIdentifiers\MineTest.cs,PutBombs,The following statement contains a magic number: while (bombMap.Count < 15) {  	Random random = new Random ();  	int location = random.Next (50);  	if (!bombMap.Contains (location)) {  		bombMap.Add (location);  	}  }  
