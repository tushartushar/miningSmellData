Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Poker,Card,C:\repos\bankova_HighQualityCode\TDD\Card.cs,ToString,Cyclomatic complexity of the method is 54
Complex Method,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,CalculatePreviousCard,Cyclomatic complexity of the method is 13
Complex Conditional,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsStraightFlush,The conditional expression  "countFacesMax == 1 && countOfFacesTotal == 5 && coutOfSuits == 1 && IsConsecutive (hand)"  is complex.
Complex Conditional,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsStraight,The conditional expression  "countFacesMax == 1 && countOfFacesTotal == 5 && coutOfSuits != 1 && IsConsecutive (hand)"  is complex.
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsValidHand,The following statement contains a magic number: if (hand.Cards.Count != 5) {  	return false;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsStraightFlush,The following statement contains a magic number: if (countFacesMax == 1 && countOfFacesTotal == 5 && coutOfSuits == 1 && IsConsecutive (hand)) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsFourOfAKind,The following statement contains a magic number: if (countFacesMax == 4) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsFullHouse,The following statement contains a magic number: if (countFacesMax == 3 && countOfFacesTotal == 2) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsFullHouse,The following statement contains a magic number: if (countFacesMax == 3 && countOfFacesTotal == 2) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsFlush,The following statement contains a magic number: if (countSuitMax == 5) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsStraight,The following statement contains a magic number: if (countFacesMax == 1 && countOfFacesTotal == 5 && coutOfSuits != 1 && IsConsecutive (hand)) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsThreeOfAKind,The following statement contains a magic number: if (countFacesMax == 3) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsTwoPair,The following statement contains a magic number: if (countFacesMax == 2 && countOfFacesTotal == 3) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsTwoPair,The following statement contains a magic number: if (countFacesMax == 2 && countOfFacesTotal == 3) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsOnePair,The following statement contains a magic number: if (countFacesMax == 2 && countOfFacesTotal == 4) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsOnePair,The following statement contains a magic number: if (countFacesMax == 2 && countOfFacesTotal == 4) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsHighCard,The following statement contains a magic number: if (countFacesMax == 1 && countOfFacesTotal == 5 && !IsConsecutive (hand)) {  	return true;  }  
Magic Number,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,IsConsecutive,The following statement contains a magic number: if (countconsequative == 4) {  	return true;  }  
Missing Default,Poker,PokerHandsChecker,C:\repos\bankova_HighQualityCode\TDD\PokerHandsChecker.cs,CalculatePreviousCard,The following switch statement is missing a default case: switch (previousCardFace) {  case "Ace":  	return "King";  case "King":  	return "Queen";  case "Queen":  	return "Jack";  case "Jack":  	return "Ten";  case "Ten":  	return "Nine";  case "Nine":  	return "Eight";  case "Eight":  	return "Seven";  case "Seven":  	return "Six";  case "Six":  	return "Five";  case "Five":  	return "Four";  case "Four":  	return "Three";  case "Three":  	return "Two";  case "Two":  	return "Ace";  }  
