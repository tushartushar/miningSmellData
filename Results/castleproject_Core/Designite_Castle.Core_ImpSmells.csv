Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Castle.Components.DictionaryAdapter,DictionaryAdapterBase,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterBase.Copy.cs,CancelEdit,Cyclomatic complexity of the method is 12
Complex Method,Castle.Components.DictionaryAdapter,DictionaryAdapterBase,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterBase.Copy.cs,EndEdit,Cyclomatic complexity of the method is 8
Complex Method,Castle.Components.DictionaryAdapter,OnDemandAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\OnDemandAttribute.cs,GetPropertyValue,Cyclomatic complexity of the method is 17
Complex Method,Castle.Components.DictionaryAdapter,OnDemandAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\OnDemandAttribute.cs,GetInferredType,Cyclomatic complexity of the method is 8
Complex Method,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,InternalGetAdapterMeta,Cyclomatic complexity of the method is 10
Complex Method,Castle.Components.DictionaryAdapter,PropertyDescriptor,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\PropertyDescriptor.cs,MergeBehavior,Cyclomatic complexity of the method is 8
Complex Method,Castle.Core.Internal,CollectionExtensions,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\CollectionExtensions.cs,AreEquivalent,Cyclomatic complexity of the method is 8
Complex Method,Castle.Core.Internal,InterfaceAttributeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\InterfaceAttributeUtil.cs,CollectTypes,Cyclomatic complexity of the method is 10
Complex Method,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,FromExpression,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy,ProxyGenerationOptions,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ArgumentReference,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\ArgumentReference.cs,LoadReference,Cyclomatic complexity of the method is 16
Complex Method,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ConvertExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\ConvertExpression.cs,Emit,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,Cyclomatic complexity of the method is 33
Complex Method,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 11
Complex Method,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateConstructor,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,CacheKey,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,ClassProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 11
Complex Method,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 10
Complex Method,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators,MetaMethod,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaMethod.cs,ObtainAttributes,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,MetaProperty,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaProperty.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters,GenericUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,ExtractCorrectType,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters,OpCodeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\OpCodeUtil.cs,EmitLoadOpCodeForDefaultValueOfType,Cyclomatic complexity of the method is 17
Complex Method,Castle.DynamicProxy.Generators.Emitters,OpCodeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\OpCodeUtil.cs,GetUnderlyingTypeOfEnum,Cyclomatic complexity of the method is 10
Long Parameter List,Castle.Components.DictionaryAdapter,ComponentAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\ComponentAttribute.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,NewGuidAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\NewGuidAttribute.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,OnDemandAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\OnDemandAttribute.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,StringFormatAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\StringFormatAttribute.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,StringListAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\StringListAttribute.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,DefaultPropertyGetter,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DefaultPropertyGetter.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,DictionaryAdapterMeta,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterMeta.cs,DictionaryAdapterMeta,The method has 8 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,IDictionaryPropertyGetter,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\IDictionaryPropertyGetter.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.Components.DictionaryAdapter,PropertyDescriptor,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\PropertyDescriptor.cs,GetPropertyValue,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CustomAttributeInfo,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy,IProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\IProxyGenerator.cs,CreateInterfaceProxyWithTarget,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,IProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\IProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,IProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\IProxyGenerator.cs,CreateClassProxyWithTarget,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,IProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\IProxyGenerator.cs,CreateClassProxyWithTarget,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,IProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\IProxyGenerator.cs,CreateClassProxyWithTarget,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy,IProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\IProxyGenerator.cs,CreateClassProxy,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,ModuleScope,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ModuleScope.cs,ModuleScope,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy,ModuleScope,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ModuleScope.cs,ModuleScope,The method has 7 parameters.
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxy,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Internal,CompositionInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\CompositionInvocation.cs,CompositionInvocation,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Internal,AttributeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\AttributeUtil.cs,GetSettersAndFields,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy.Internal,InheritanceInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\InheritanceInvocation.cs,InheritanceInvocation,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,MetaEvent,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,MetaEvent,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,CompositionInvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CompositionInvocationTypeGenerator.cs,CompositionInvocationTypeGenerator,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithoutTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithoutTargetGenerator.cs,AddMappingForTargetType,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,AddMappingForTargetType,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,Init,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetInterfaceGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetInterfaceGenerator.cs,AddMappingForTargetType,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,InvocationTypeGenerator,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,GetCallbackMethodInvocation,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,MetaMethod,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaMethod.cs,MetaMethod,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,MethodWithInvocationGenerator,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy.Generators,MetaProperty,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaProperty.cs,MetaProperty,The method has 7 parameters.
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,CreateTypeBuilder,The method has 6 parameters.
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,MethodEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\MethodEmitter.cs,MethodEmitter,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,NestedClassEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\NestedClassEmitter.cs,NestedClassEmitter,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,NestedClassEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\NestedClassEmitter.cs,CreateTypeBuilder,The method has 5 parameters.
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,PropertyEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\PropertyEmitter.cs,PropertyEmitter,The method has 5 parameters.
Long Identifier,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,ClassProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithoutTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithoutTargetGenerator.cs,AddMappingForTargetType,The length of the parameter interfaceTypeImplementerMapping is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,ThrowInvalidBaseType,The length of the parameter doesNotHaveAccessibleParameterlessConstructor is 45.
Long Identifier,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,GetCallbackMethodInvocation,The length of the parameter methodOnTargetInvocationExpression is 34.
Long Identifier,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the parameter methodOnTargetInvocationExpression is 34.
Long Statement,Castle.Components.DictionaryAdapter,RemoveIfAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\RemoveIfAttribute.cs,Construct,The length of the statement  "	throw new ArgumentException (string.Format ("{0} is not a concrete type implementing {1} with a default constructor"' type.FullName' typeof(TBase).FullName)); " is 158.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterBase,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterBase.Copy.cs,CopyTo,The length of the statement  "		throw new ArgumentException (string.Format ("Unable to copy to {0}.  The type must be assignable from {1}."' other.Meta.Type.FullName' Meta.Type.FullName)); " is 156.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterBase,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterBase.Copy.cs,ShouldClearProperty,The length of the statement  "	return property == null || property.Setters.OfType<RemoveIfAttribute> ().Where (remove => remove.ShouldRemove (value)).Any (); " is 126.
Long Statement,Castle.Components.DictionaryAdapter,ComponentAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\ComponentAttribute.cs,GetPropertyValue,The length of the statement  "			component = dictionaryAdapter.This.Factory.GetAdapter (property.Property.PropertyType' dictionaryAdapter.This.Dictionary' descriptor); " is 134.
Long Statement,Castle.Components.DictionaryAdapter,OnDemandAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\OnDemandAttribute.cs,GetPropertyValue,The length of the statement  "				property.SetPropertyValue (dictionaryAdapter' property.PropertyName' ref storedValue' dictionaryAdapter.This.Descriptor); " is 121.
Long Statement,Castle.Components.DictionaryAdapter,StringListAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\StringListAttribute.cs,GetPropertyValue,The length of the statement  "			if (genericDef == typeof(IList<>) || genericDef == typeof(ICollection<>) || genericDef == typeof(List<>) || genericDef == typeof(IEnumerable<>)) { " is 146.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateAdapterType,The length of the statement  "	var typeBuilder = moduleBuilder.DefineType ("CastleDictionaryAdapterType"' TypeAttributes.Public | TypeAttributes.Class | TypeAttributes.BeforeFieldInit); " is 154.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateAdapterMeta,The length of the statement  "	var creator = (Func<DictionaryAdapterInstance' IDictionaryAdapter>)implementation.GetTypeInfo ().GetDeclaredMethod ("__Create").CreateDelegate (typeof(Func<DictionaryAdapterInstance' IDictionaryAdapter>)); " is 205.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateAdapterMeta,The length of the statement  "	var meta = new DictionaryAdapterMeta (type' implementation' typeBehaviors' initializers.MetaInitializers.ToArray ()' initializers.Initializers.ToArray ()' propertyMap' this' creator); " is 183.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateAdapterConstructor,The length of the statement  "	var constructorBuilder = typeBuilder.DefineConstructor (MethodAttributes.Public | MethodAttributes.HideBySig' CallingConventions.Standard' ConstructorParameterTypes); " is 166.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateAdapterFactoryMethod,The length of the statement  "	var factoryBuilder = typeBuilder.DefineMethod ("__Create"' MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.HideBySig' typeof(IDictionaryAdapter)' ConstructorParameterTypes); " is 194.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateMetaProperty,The length of the statement  "	const MethodAttributes propAttribs = MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.Final; " is 202.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateAdapterProperty,The length of the statement  "	const MethodAttributes propAttribs = MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig | MethodAttributes.Virtual; " is 148.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreatePropertyGetMethod,The length of the statement  "	var getMethodBuilder = typeBuilder.DefineMethod ("get_" + descriptor.PropertyName' propAttribs' descriptor.PropertyType' null); " is 127.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,GetPropertyDescriptors,The length of the statement  "	var interfaceBehaviors = typeBehaviors = ExpandBehaviors (InterfaceAttributeUtil.GetAttributes (type' true)).ToArray (); " is 120.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,GetPropertyDescriptors,The length of the statement  "	var defaultFetch = typeBehaviors.OfType<FetchAttribute> ().Select (b => (bool?)b.Fetch).FirstOrDefault ().GetValueOrDefault (); " is 127.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,GetPropertyDescriptors,The length of the statement  "	initializers.AddBehaviors (typeBehaviors.OfType<IDictionaryMetaInitializer> ().Cast<IDictionaryBehavior> ()).AddBehaviors (typeBehaviors.OfType<IDictionaryInitializer> ().Cast<IDictionaryBehavior> ()); " is 201.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,GetPropertyDescriptors,The length of the statement  "		var propertyDescriptor = new PropertyDescriptor (property' propertyBehaviors).AddBehaviors (propertyBehaviors.OfType<IDictionaryBehavior> ()).AddBehaviors (interfaceBehaviors.OfType<IDictionaryBehavior> ().Where (b => b is IDictionaryKeyBuilder == false)); " is 256.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterMeta,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterMeta.cs,CreateDescriptor,The length of the statement  "	var descriptor = (sharedAnnotations != null) ? new PropertyDescriptor (sharedAnnotations.ToArray ()) : new PropertyDescriptor (); " is 129.
Long Statement,Castle.Components.DictionaryAdapter,PropertyDescriptor,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\PropertyDescriptor.cs,ObtainTypeConverter,The length of the statement  "	TypeConverter = (converterType != null) ? (TypeConverter)Activator.CreateInstance (converterType) : TypeDescriptor.GetConverter (PropertyType); " is 143.
Long Statement,Castle.Core.Internal,InterfaceAttributeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\InterfaceAttributeUtil.cs,HandleAttributeConflict,The length of the statement  "	var message = string.Format ("Cannot determine inherited attributes for interface type {0}.  " + "Conflicting attributes of type {1} exist in the inheritance graph."' CurrentType.FullName' attributeType.FullName); " is 213.
Long Statement,Castle.Core.Internal,WeakKeyComparer,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\WeakKeyComparer.cs,Equals,The length of the statement  "	return (keyA != null) ? (keyB != null) ? comparer.Equals (keyA' keyB) : false // live object cannot equal a collected object " is 124.
Long Statement,Castle.Core.Internal,WeakKeyDictionary,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\WeakKeyDictionary.cs,Contains,The length of the statement  "	return dictionary.TryGetValue (item.Key' out candidate) && EqualityComparer<TValue>.Default.Equals (candidate' item.Value); " is 123.
Long Statement,Castle.Core.Internal,SlimReadWriteLock,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\SlimReadWriteLock.cs,ForReadingUpgradeable,The length of the statement  "	return new SlimUpgradeableReadLockHolder (locker' waitForLock' locker.IsUpgradeableReadLockHeld || locker.IsWriteLockHeld); " is 123.
Long Statement,Castle.DynamicProxy,ExceptionMessageBuilder,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ExceptionMessageBuilder.cs,CreateMessageForInaccessibleType,The length of the statement  "	string inaccessibleTypeDescription = inaccessibleType == typeToProxy ? "it" : "type " + inaccessibleType.GetBestName (); " is 120.
Long Statement,Castle.DynamicProxy,AbstractInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\AbstractInvocation.cs,GetConcreteMethodInvocationTarget,The length of the statement  "	Debug.Assert (method == null || method.IsGenericMethodDefinition == false' "method == null || method.IsGenericMethodDefinition == false"); " is 138.
Long Statement,Castle.DynamicProxy,AbstractInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\AbstractInvocation.cs,Proceed,The length of the statement  "	if (interceptors == null)// not yet fully initialized? probably' an intercepted method is called while we are being deserialized " is 128.
Long Statement,Castle.DynamicProxy,AbstractInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\AbstractInvocation.cs,Proceed,The length of the statement  "			var message = "This is a DynamicProxy2 error: invocation.Proceed() has been called more times than expected." + "This usually signifies a bug in the calling code. Make sure that" + interceptorsCount + " selected for the method '" + Method + "'" + "calls invocation.Proceed() at most once."; " is 290.
Long Statement,Castle.DynamicProxy,AbstractInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\AbstractInvocation.cs,ThrowOnNoTarget,The length of the statement  "	var message = string.Format ("This is a DynamicProxy2 error: {0} for method '{1}' which {2}. " + "When calling {3} there is no implementation to 'proceed' to and " + "it is the responsibility of the interceptor to mimic the implementation " + "(set return value' out arguments etc)"' interceptorsMessage' Method' methodKindIs' methodKindDescription); " is 350.
Long Statement,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,FromExpression,The length of the statement  "			throw new ArgumentException ("The expression must be either a simple constructor call or an object initializer expression"); " is 124.
Long Statement,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,FromExpression,The length of the statement  "	return new CustomAttributeInfo (newExpression.Constructor' ctorArguments.ToArray ()' namedProperties.ToArray ()' propertyValues.ToArray ()' namedFields.ToArray ()' fieldValues.ToArray ()); " is 188.
Long Statement,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,Equals,The length of the statement  "	return constructor.Equals (other.constructor) && constructorArgs.SequenceEqual (other.constructorArgs' ValueComparer) && AreMembersEquivalent (properties' other.properties) && AreMembersEquivalent (fields' other.fields); " is 220.
Long Statement,Castle.DynamicProxy,DefaultProxyBuilder,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\DefaultProxyBuilder.cs,AssertValidTypeForTarget,The length of the statement  "		throw new GeneratorException (string.Format ("Can not create proxy for type {0} because type {1} is an open generic type."' target.GetBestName ()' type.GetBestName ())); " is 169.
Long Statement,Castle.DynamicProxy,DefaultProxyBuilder,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\DefaultProxyBuilder.cs,IsInternal,The length of the statement  "	var isNestedAndInternal = isTargetNested && (target.GetTypeInfo ().IsNestedAssembly || target.GetTypeInfo ().IsNestedFamORAssem); " is 129.
Long Statement,Castle.DynamicProxy,ModuleScope,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ModuleScope.cs,GetKeyPair,The length of the statement  "	using (var stream = typeof(ModuleScope).GetTypeInfo ().Assembly.GetManifestResourceStream ("Castle.DynamicProxy.DynProxy.snk")) { " is 129.
Long Statement,Castle.DynamicProxy,ModuleScope,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ModuleScope.cs,GetKeyPair,The length of the statement  "			throw new MissingManifestResourceException ("Should have a Castle.DynamicProxy.DynProxy.snk as an embedded resource' so Dynamic Proxy could sign generated assembly"); " is 166.
Long Statement,Castle.DynamicProxy,ModuleScope,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ModuleScope.cs,ObtainDynamicModuleWithStrongName,The length of the statement  "		throw new InvalidOperationException ("Usage of signed module has been disabled. Use unsigned module or enable signed module."); " is 127.
Long Statement,Castle.DynamicProxy,ModuleScope,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ModuleScope.cs,CreateModule,The length of the statement  "						assemblyName' AssemblyBuilderAccess.RunAndSave' signStrongName ? StrongNamedModuleDirectory : WeakNamedModuleDirectory);" is 120.
Long Statement,Castle.DynamicProxy,ProxyGenerationOptions,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,Initialize,The length of the statement  "			throw new InvalidMixinConfigurationException ("There is a problem with the mixins added to this ProxyGenerationOptions: " + ex.Message' ex); " is 140.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "	// NOTE: we don't need to document exception case where interface type is null' since it can never be for a generic method. " is 123.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "	// If we leave target as being of type TInterface we also have covered exception where target does not implement TInterface. " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "	return (TInterface)CreateInterfaceProxyWithTarget (typeof(TInterface)' target' ProxyGenerationOptions.Default' interceptors); " is 125.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "	return CreateInterfaceProxyWithTarget (interfaceToProxy' additionalInterfacesToProxy' target' ProxyGenerationOptions.Default' interceptors); " is 140.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "	var generatedType = CreateInterfaceProxyTypeWithTarget (interfaceToProxy' additionalInterfacesToProxy' targetType' options); " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,GetConstructorArguments,The length of the statement  "	// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The length of the statement  "	return CreateInterfaceProxyWithTargetInterface (interfaceToProxy' target' ProxyGenerationOptions.Default' interceptors); " is 120.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The length of the statement  "	return (TInterface)CreateInterfaceProxyWithTargetInterface (typeof(TInterface)' target' ProxyGenerationOptions.Default' interceptors); " is 134.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The length of the statement  "	return CreateInterfaceProxyWithTargetInterface (interfaceToProxy' additionalInterfacesToProxy' target' ProxyGenerationOptions.Default' interceptors); " is 149.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The length of the statement  "	var generatedType = CreateInterfaceProxyTypeWithTargetInterface (interfaceToProxy' additionalInterfacesToProxy' options); " is 121.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithoutTarget,The length of the statement  "	return CreateInterfaceProxyWithoutTarget (interfaceToProxy' Type.EmptyTypes' ProxyGenerationOptions.Default' interceptor); " is 122.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithoutTarget,The length of the statement  "	return CreateInterfaceProxyWithoutTarget (interfaceToProxy' Type.EmptyTypes' ProxyGenerationOptions.Default' interceptors); " is 123.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithoutTarget,The length of the statement  "	return CreateInterfaceProxyWithoutTarget (interfaceToProxy' additionalInterfacesToProxy' ProxyGenerationOptions.Default' interceptors); " is 135.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "	return (TClass)CreateClassProxyWithTarget (typeof(TClass)' Type.EmptyTypes' target' ProxyGenerationOptions.Default' new object[0]' interceptors); " is 145.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "	return (TClass)CreateClassProxyWithTarget (typeof(TClass)' Type.EmptyTypes' target' options' new object[0]' interceptors); " is 122.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "	return CreateClassProxyWithTarget (classToProxy' additionalInterfacesToProxy' target' ProxyGenerationOptions.Default' new object[0]' interceptors); " is 147.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "	return CreateClassProxyWithTarget (classToProxy' Type.EmptyTypes' target' ProxyGenerationOptions.Default' constructorArguments' interceptors); " is 142.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "	return CreateClassProxyWithTarget (classToProxy' Type.EmptyTypes' target' ProxyGenerationOptions.Default' new object[0]' interceptors); " is 135.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "	return CreateClassProxyWithTarget (classToProxy' additionalInterfacesToProxy' target' options' new object[0]' interceptors); " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "	// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxy,The length of the statement  "	// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CheckNotGenericTypeDefinition,The length of the statement  "		throw new GeneratorException (string.Format ("Can not create proxy for type {0} because it is an open generic type."' type.GetBestName ())); " is 140.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyTypeWithTarget,The length of the statement  "	return ProxyBuilder.CreateInterfaceProxyTypeWithTarget (interfaceToProxy' additionalInterfacesToProxy' targetType' options); " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyTypeWithTargetInterface,The length of the statement  "	return ProxyBuilder.CreateInterfaceProxyTypeWithTargetInterface (interfaceToProxy' additionalInterfacesToProxy' options); " is 121.
Long Statement,Castle.Core,ProxyServices,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\ProxyServices.cs,IsDynamicProxy,The length of the statement  "	return (assemblyName.StartsWith ("DynamicAssemblyProxyGen"' StringComparison.Ordinal) || assemblyName.StartsWith ("DynamicProxyGenAssembly2"' StringComparison.Ordinal)); " is 169.
Long Statement,Castle.Core.Logging,ConsoleLogger,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Logging\ConsoleLogger.cs,Log,The length of the statement  "		Console.Out.WriteLine ("[{0}] '{1}' {2}: {3} {4}"' loggerLevel' loggerName' exception.GetType ().FullName' exception.Message' exception.StackTrace); " is 148.
Long Statement,Castle.Core.Logging,StreamLogger,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Logging\StreamLogger.cs,Log,The length of the statement  "		writer.WriteLine ("[{0}] '{1}' {2}: {3} {4}"' loggerLevel' loggerName' exception.GetType ().FullName' exception.Message' exception.StackTrace); " is 143.
Long Statement,Castle.Core.Logging,TraceLogger,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Logging\TraceLogger.cs,IsSourceConfigured,The length of the statement  "	if (source.Listeners.Count == 1 && source.Listeners [0] is DefaultTraceListener && source.Listeners [0].Name == "Default") { " is 124.
Long Statement,Castle.DynamicProxy.Generators.Emitters.SimpleAST,DefaultValueExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\DefaultValueExpression.cs,IsPrimitiveOrClass,The length of the statement  "	return ((type.GetTypeInfo ().IsClass || type.GetTypeInfo ().IsInterface) && type.GetTypeInfo ().IsGenericParameter == false && type.GetTypeInfo ().IsByRef == false); " is 165.
Long Statement,Castle.DynamicProxy.Internal,CompositionInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\CompositionInvocation.cs,EnsureValidProxyTarget,The length of the statement  "	var message = "This is a DynamicProxy2 error: target of proxy has been set to the proxy itself. " + "This would result in recursively calling proxy methods over and over again until stack overflow' which may destabilize your program." + "This usually signifies a bug in the calling code. Make sure no interceptor sets proxy as its own target."; " is 344.
Long Statement,Castle.DynamicProxy.Internal,CompositionInvocation,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\CompositionInvocation.cs,EnsureValidTarget,The length of the statement  "	var message = "This is a DynamicProxy2 error: target of invocation has been set to the proxy itself. " + "This may result in recursively calling the method over and over again until stack overflow' which may destabilize your program." + "This usually signifies a bug in the calling code. Make sure no interceptor sets proxy as its invocation target."; " is 351.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,GetAllFields,The length of the statement  "		var currentFields = currentType.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static); " is 135.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,IsGetType,The length of the statement  "	return methodInfo.DeclaringType == typeof(object) && string.Equals ("GetType"' methodInfo.Name' StringComparison.OrdinalIgnoreCase); " is 132.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,IsMemberwiseClone,The length of the statement  "	return methodInfo.DeclaringType == typeof(object) && string.Equals ("MemberwiseClone"' methodInfo.Name' StringComparison.OrdinalIgnoreCase); " is 140.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,SetStaticField,The length of the statement  "		throw new ProxyGenerationException (string.Format ("Could not find field named '{0}' on type {1}. This is likely a bug in DynamicProxy. Please report it."' fieldName' type)); " is 174.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,SetStaticField,The length of the statement  "		throw new ProxyGenerationException (string.Format ("Could not find field named '{0}' on type {1}. This is likely a bug in DynamicProxy. Please report it."' fieldName' type)' e); " is 177.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,SetStaticField,The length of the statement  "						"There was an error trying to set field named '{0}' on type {1}. This is likely a bug in DynamicProxy. Please report it."'" is 122.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,SetStaticField,The length of the statement  "		throw new ProxyGenerationException (string.Format ("There was an error in static constructor on type {0}. This is likely a bug in DynamicProxy. Please report it."' type)' e); " is 174.
Long Statement,Castle.DynamicProxy.Internal,TypeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\TypeUtil.cs,Sort,The length of the statement  "	Array.Sort (array' (l' r) => string.Compare (l.AssemblyQualifiedName' r.AssemblyQualifiedName' StringComparison.OrdinalIgnoreCase)); " is 132.
Long Statement,Castle.DynamicProxy.Internal,AttributeUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\AttributeUtil.cs,GetNonInheritableAttributes,The length of the statement  "			var message = string.Format ("Due to limitations in CLR' DynamicProxy was unable to successfully replicate non-inheritable attribute {0} on {1}{2}. " + "To avoid this error you can chose not to replicate this attribute type by calling '{3}.Add(typeof({0}))'."' attributeType.FullName' member.DeclaringType.FullName'  " is 315.
Long Statement,Castle.DynamicProxy.Internal,InternalsUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\InternalsUtil.cs,CreateInstructionsToMakeVisible,The length of the statement  "		assemblyToBeVisibleTo = ReferencesCastleCore (targetAssembly) ? "InternalsVisible.ToDynamicProxyGenAssembly2" : '"' + InternalsVisible.ToDynamicProxyGenAssembly2 + '"'; " is 168.
Long Statement,Castle.DynamicProxy.Internal,InternalsUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\InternalsUtil.cs,CreateInstructionsToMakeVisible,The length of the statement  "	var instructionsFormat = "Make it public' or internal and mark your assembly with " + "[assembly: InternalsVisibleTo({0})] attribute' because assembly {1} " + "is{2} strong-named."; " is 181.
Long Statement,Castle.DynamicProxy.Internal,InternalsUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\InternalsUtil.cs,CreateInstructionsToMakeVisible,The length of the statement  "	var instructions = String.Format (instructionsFormat' assemblyToBeVisibleTo' GetAssemblyName (targetAssembly)' strongNamedOrNotIndicator); " is 138.
Long Statement,Castle.DynamicProxy.Internal,InvocationHelper,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\InvocationHelper.cs,GetMethodOnType,The length of the statement  "	Debug.Assert (proxiedMethod.DeclaringType.IsAssignableFrom (type)' "proxiedMethod.DeclaringType.IsAssignableFrom(type)"); " is 121.
Long Statement,Castle.DynamicProxy.Internal,InvocationHelper,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Internal\InvocationHelper.cs,ObtainMethod,The length of the statement  "		throw new ArgumentException (string.Format ("Could not find method overriding {0} on type {1}. This is most likely a bug. Please report it."' proxiedMethod' type)); " is 164.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyWithTargetTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyWithTargetTargetContributor.cs,CollectElementsToProxyInternal,The length of the statement  "		var item = new InterfaceMembersOnClassCollector (@interface' true' targetType.GetTypeInfo ().GetRuntimeInterfaceMap (@interface)) { " is 131.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyWithTargetTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyWithTargetTargetContributor.cs,GetMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' @class.GetField ("__interceptors")' invocation' (c' m) => c.GetField ("__target").ToExpression ()' overrideMethod' null); " is 171.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyWithTargetTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyWithTargetTargetContributor.cs,BuildInvocationType,The length of the statement  "		return new InheritanceInvocationTypeGenerator (targetType' method' null' null).Generate (@class' options' namingScope).BuildType (); " is 132.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyWithTargetTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyWithTargetTargetContributor.cs,BuildInvocationType,The length of the statement  "	return new CompositionInvocationTypeGenerator (method.Method.DeclaringType' method' method.Method' false' null).Generate (@class' options' namingScope).BuildType (); " is 165.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyWithTargetTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyWithTargetTargetContributor.cs,IndirectlyCalledMethodGenerator,The length of the statement  "	var invocation = new CompositionInvocationTypeGenerator (targetType' method' null' false' contributor).Generate (proxy' options' namingScope).BuildType (); " is 155.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyWithTargetTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyWithTargetTargetContributor.cs,IndirectlyCalledMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' proxy.GetField ("__interceptors")' invocation' (c' m) => c.GetField ("__target").ToExpression ()' overrideMethod' contributor); " is 177.
Long Statement,Castle.DynamicProxy.Contributors,CompositeTypeContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\CompositeTypeContributor.cs,AddInterfaceToProxy,The length of the statement  "	Debug.Assert (!interfaces.Contains (@interface)' "!interfaces.ContainsKey(@interface)"' "Shouldn't be adding same interface twice..."); " is 135.
Long Statement,Castle.DynamicProxy.Contributors,DelegateTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\DelegateTypeGenerator.cs,BuildConstructor,The length of the statement  "	var constructor = emitter.CreateConstructor (new ArgumentReference (typeof(object))' new ArgumentReference (typeof(IntPtr))); " is 125.
Long Statement,Castle.DynamicProxy.Contributors,DelegateTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\DelegateTypeGenerator.cs,BuildInvokeMethod,The length of the statement  "	var invoke = @delegate.CreateMethod ("Invoke"' MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.NewSlot | MethodAttributes.Virtual' @delegate.GetClosedParameterType (method.MethodOnTarget.ReturnType)' paramTypes); " is 236.
Long Statement,Castle.DynamicProxy.Contributors,DelegateTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\DelegateTypeGenerator.cs,GetEmitter,The length of the statement  "	var suggestedName = string.Format ("Castle.Proxies.Delegates.{0}_{1}"' methodInfo.DeclaringType.Name' method.Method.Name); " is 122.
Long Statement,Castle.DynamicProxy.Contributors,DelegateTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\DelegateTypeGenerator.cs,GetEmitter,The length of the statement  "	var @delegate = new ClassEmitter (@class.ModuleScope' uniqueName' typeof(MulticastDelegate)' Type.EmptyTypes' DelegateFlags); " is 125.
Long Statement,Castle.DynamicProxy.Contributors,InvocationWithDelegateContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InvocationWithDelegateContributor.cs,BuildDelegateToken,The length of the statement  "	var createDelegate = new MethodInvocationExpression (null' DelegateMethods.CreateDelegate' new TypeTokenExpression (delegateType)' NullExpression.Instance' new MethodTokenExpression (method.MethodOnTarget)); " is 207.
Long Statement,Castle.DynamicProxy.Contributors,InvocationWithGenericDelegateContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InvocationWithGenericDelegateContributor.cs,GetDelegate,The length of the statement  "	invokeMethodOnTarget.CodeBuilder.AddStatement (SetDelegate (localReference' localTarget' closedDelegateType' closedMethodOnTarget)); " is 132.
Long Statement,Castle.DynamicProxy.Contributors,InvocationWithGenericDelegateContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InvocationWithGenericDelegateContributor.cs,SetDelegate,The length of the statement  "	var delegateCreateDelegate = new MethodInvocationExpression (null' DelegateMethods.CreateDelegate' new TypeTokenExpression (closedDelegateType)' localTarget' new MethodTokenExpression (closedMethodOnTarget)); " is 208.
Long Statement,Castle.DynamicProxy.Contributors,OptionallyForwardingMethodGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\OptionallyForwardingMethodGenerator.cs,BuildProxiedMethodBody,The length of the statement  "	emitter.CodeBuilder.AddStatement (new ExpressionStatement (new IfNullExpression (targetReference' IfNull (emitter.ReturnType)' IfNotNull (targetReference)))); " is 158.
Long Statement,Castle.DynamicProxy.Contributors,OptionallyForwardingMethodGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\OptionallyForwardingMethodGenerator.cs,IfNotNull,The length of the statement  "	expression.AddStatement (new ReturnStatement (new MethodInvocationExpression (targetReference' MethodToOverride' arguments) { " is 125.
Long Statement,Castle.DynamicProxy.Contributors,OptionallyForwardingMethodGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\OptionallyForwardingMethodGenerator.cs,InitOutParameters,The length of the statement  "			expression.AddStatement (new AssignArgumentStatement (new ArgumentReference (parameter.ParameterType' index + 1)' new DefaultValueExpression (parameter.ParameterType))); " is 169.
Long Statement,Castle.DynamicProxy.Contributors,MinimialisticMethodGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MinimialisticMethodGenerator.cs,InitOutParameters,The length of the statement  "			emitter.CodeBuilder.AddStatement (new AssignArgumentStatement (new ArgumentReference (parameter.ParameterType' index + 1)' new DefaultValueExpression (parameter.ParameterType))); " is 178.
Long Statement,Castle.DynamicProxy.Contributors,InterfaceProxyWithoutTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InterfaceProxyWithoutTargetContributor.cs,GetMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' @class.GetField ("__interceptors")' invocation' getTargetExpression' overrideMethod' null); " is 141.
Long Statement,Castle.DynamicProxy.Contributors,InterfaceProxyWithoutTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InterfaceProxyWithoutTargetContributor.cs,GetInvocationType,The length of the statement  "	invocation = new CompositionInvocationTypeGenerator (method.Method.DeclaringType' method' method.Method' canChangeTarget' null).Generate (emitter' options' namingScope).BuildType (); " is 182.
Long Statement,Castle.DynamicProxy.Contributors,DelegateProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\DelegateProxyTargetContributor.cs,GetMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' @class.GetField ("__interceptors")' invocation' (c' m) => c.GetField ("__target").ToExpression ()' overrideMethod' null); " is 171.
Long Statement,Castle.DynamicProxy.Contributors,DelegateProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\DelegateProxyTargetContributor.cs,GetInvocationType,The length of the statement  "	invocation = new CompositionInvocationTypeGenerator (method.Method.DeclaringType' method' method.Method' false' null).Generate (emitter' options' namingScope).BuildType (); " is 172.
Long Statement,Castle.DynamicProxy.Contributors,MixinContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MixinContributor.cs,AddEmptyInterface,The length of the statement  "	Debug.Assert (!interfaces.Contains (@interface)' "!interfaces.Contains(@interface)"' "Shouldn't be adding same interface twice..."); " is 132.
Long Statement,Castle.DynamicProxy.Contributors,MixinContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MixinContributor.cs,AddEmptyInterface,The length of the statement  "	Debug.Assert (!empty.Contains (@interface)' "!empty.Contains(@interface)"' "Shouldn't be adding same interface twice..."); " is 122.
Long Statement,Castle.DynamicProxy.Contributors,MixinContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MixinContributor.cs,GetMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' @class.GetField ("__interceptors")' invocation' getTargetExpression' overrideMethod' null); " is 141.
Long Statement,Castle.DynamicProxy.Contributors,MixinContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MixinContributor.cs,BuildGetTargetExpression,The length of the statement  "	return (c' m) => new NullCoalescingOperatorExpression (new AsTypeReference (c.GetField ("__target")' m.DeclaringType).ToExpression ()' fields [m.DeclaringType].ToExpression ()); " is 177.
Long Statement,Castle.DynamicProxy.Contributors,MixinContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MixinContributor.cs,GetInvocationType,The length of the statement  "	invocation = new CompositionInvocationTypeGenerator (method.Method.DeclaringType' method' method.Method' canChangeTarget' null).Generate (emitter' options' namingScope).BuildType (); " is 182.
Long Statement,Castle.DynamicProxy.Contributors,ForwardingMethodGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ForwardingMethodGenerator.cs,BuildProxiedMethodBody,The length of the statement  "	emitter.CodeBuilder.AddStatement (new ReturnStatement (new MethodInvocationExpression (targetReference' MethodToOverride' arguments) { " is 134.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,CollectElementsToProxyInternal,The length of the statement  "		var item = new InterfaceMembersOnClassCollector (@interface' true' targetType.GetTypeInfo ().GetRuntimeInterfaceMap (@interface)) { " is 131.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,GetMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' @class.GetField ("__interceptors")' invocation' (c' m) => new TypeTokenExpression (targetType)' overrideMethod' null); " is 168.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,BuildInvocationType,The length of the statement  "		return new InheritanceInvocationTypeGenerator (targetType' method' null' null).Generate (@class' options' namingScope).BuildType (); " is 132.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,BuildInvocationType,The length of the statement  "	return new InheritanceInvocationTypeGenerator (callback.DeclaringType' method' callback' null).Generate (@class' options' namingScope).BuildType (); " is 148.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,CreateCallbackMethod,The length of the statement  "	callBackMethod.CodeBuilder.AddStatement (new ReturnStatement (new MethodInvocationExpression (SelfReference.Self' targetMethod' exps))); " is 136.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,ExplicitlyImplementedInterfaceMethodGenerator,The length of the statement  "	var invocation = new InheritanceInvocationTypeGenerator (targetType' method' null' contributor).Generate (@class' options' namingScope).BuildType (); " is 149.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,ExplicitlyImplementedInterfaceMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' @class.GetField ("__interceptors")' invocation' (c' m) => new TypeTokenExpression (targetType)' overrideMethod' contributor); " is 175.
Long Statement,Castle.DynamicProxy.Contributors,ClassProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ClassProxyTargetContributor.cs,GetContributor,The length of the statement  "	return new InvocationWithGenericDelegateContributor (@delegate' method' new FieldReference (InvocationMethods.ProxyObject)); " is 124.
Long Statement,Castle.DynamicProxy.Contributors,InterfaceProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InterfaceProxyTargetContributor.cs,GetCollectorForInterface,The length of the statement  "	return new InterfaceMembersOnClassCollector (@interface' false' proxyTargetType.GetTypeInfo ().GetRuntimeInterfaceMap (@interface)); " is 132.
Long Statement,Castle.DynamicProxy.Contributors,InterfaceProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InterfaceProxyTargetContributor.cs,GetMethodGenerator,The length of the statement  "	return new MethodWithInvocationGenerator (method' @class.GetField ("__interceptors")' invocation' (c' m) => c.GetField ("__target").ToExpression ()' overrideMethod' null); " is 171.
Long Statement,Castle.DynamicProxy.Contributors,InterfaceProxyTargetContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\InterfaceProxyTargetContributor.cs,GetInvocationType,The length of the statement  "	invocation = new CompositionInvocationTypeGenerator (method.Method.DeclaringType' method' method.Method' canChangeTarget' null).Generate (@class' options' namingScope).BuildType (); " is 181.
Long Statement,Castle.DynamicProxy.Contributors,MembersCollector,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,CollectMembersToProxy,The length of the statement  "		throw new InvalidOperationException (string.Format ("Can't call 'CollectMembersToProxy' method twice. This usually signifies a bug in custom {0}."' typeof(ITypeContributor))); " is 175.
Long Statement,Castle.DynamicProxy.Contributors,MembersCollector,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,AddProperty,The length of the statement  "	properties [property] = new MetaProperty (property.Name' property.PropertyType' property.DeclaringType' getter' setter' nonInheritableAttributes.Select (a => a.Builder)' arguments.Select (a => a.ParameterType).ToArray ()); " is 222.
Long Statement,Castle.DynamicProxy.Contributors,MembersCollector,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,AddEvent,The length of the statement  "	events [@event] = new MetaEvent (@event.Name' @event.DeclaringType' @event.EventHandlerType' adder' remover' EventAttributes.None); " is 131.
Long Statement,Castle.DynamicProxy.Contributors,MembersCollector,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The length of the statement  "			Logger.DebugFormat ("Excluded non-overridable method {0} on {1} because it cannot be intercepted."' method.Name' method.DeclaringType.FullName); " is 144.
Long Statement,Castle.DynamicProxy.Contributors,MembersCollector,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The length of the statement  "		Logger.DebugFormat ("Excluded sealed method {0} on {1} because it cannot be intercepted."' method.Name' method.DeclaringType.FullName); " is 135.
Long Statement,Castle.DynamicProxy.Contributors,ProxyInstanceContributor,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\ProxyInstanceContributor.cs,ImplementProxyTargetAccessor,The length of the statement  "	dynProxyGetTarget.CodeBuilder.AddStatement (new ReturnStatement (new ConvertExpression (typeof(object)' targetType' GetTargetReferenceExpression (emitter)))); " is 158.
Long Statement,Castle.DynamicProxy.Generators,DelegateProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\DelegateProxyGenerator.cs,GetTypeImplementerMapping,The length of the statement  "	var proxyInstance = new ClassProxyInstanceContributor (targetType' methodsToSkip' Type.EmptyTypes' ProxyTypeConstants.ClassWithTarget); " is 135.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetGeneratedType,The length of the statement  "	var cacheKey = new CacheKey (targetType.GetTypeInfo ()' targetType' additionalInterfacesToProxy' ProxyGenerationOptions); " is 121.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the statement  "	var proxyInstance = new ClassProxyWithTargetInstanceContributor (targetType' methodsToSkip' additionalInterfacesToProxy' ProxyTypeConstants.ClassWithTarget); " is 157.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the statement  "				if (additionalInterfacesToProxy.Contains (mixinInterface) && typeImplementerMapping.ContainsKey (mixinInterface) == false) { " is 124.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the statement  "	var additionalInterfacesContributor = new InterfaceProxyWithoutTargetContributor (namingScope' (c' m) => NullExpression.Instance) { " is 131.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,EnsureDoesNotImplementIProxyTargetAccessor,The length of the statement  "	var message = string.Format ("Target type for the proxy implements {0} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to proxy an existing proxy?"' typeof(IProxyTargetAccessor)); " is 239.
Long Statement,Castle.DynamicProxy.Generators,GeneratorUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\GeneratorUtil.cs,GetArguments,The length of the statement  "	return new AssignStatement (invocationArgs' new MethodInvocationExpression (invocation' InvocationMethods.GetArguments)); " is 121.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,EnsureOptionsOverrideEqualsAndGetHashCode,The length of the statement  "			Logger.WarnFormat ("The IProxyGenerationHook type {0} does not override both Equals and GetHashCode. " + "If these are not correctly overridden caching will fail to work causing performance problems."' options.Hook.GetType ().FullName); " is 236.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateParameterlessConstructor,The length of the statement  "	var defaultConstructor = baseClass.GetConstructor (BindingFlags.Public | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 125.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateParameterlessConstructor,The length of the statement  "		defaultConstructor = baseClass.GetConstructor (BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 124.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateParameterlessConstructor,The length of the statement  "	constructor.CodeBuilder.AddStatement (new AssignStatement (interceptorField' new NewArrayExpression (1' typeof(IInterceptor)))); " is 128.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateParameterlessConstructor,The length of the statement  "	constructor.CodeBuilder.AddStatement (new AssignArrayStatement (interceptorField' 0' new NewInstanceExpression (typeof(StandardInterceptor)' new Type[0]))); " is 156.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,HandleExplicitlyPassedProxyTargetAccessor,The length of the statement  "		message = string.Format ("Target type for the proxy implements {0} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to proxy an existing proxy?"' interfaceName); " is 220.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,HandleExplicitlyPassedProxyTargetAccessor,The length of the statement  "		message = string.Format ("Mixin type {0} implements {1} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to mix in an existing proxy?"' mixinType.Name' interfaceName); " is 226.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,HandleExplicitlyPassedProxyTargetAccessor,The length of the statement  "		message = string.Format ("You passed {0} as one of additional interfaces to proxy which is a DynamicProxy infrastructure interface and is implemented by every proxy anyway. Please remove it from the list of additional interfaces to proxy."' interfaceName); " is 256.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,HandleExplicitlyPassedProxyTargetAccessor,The length of the statement  "		message = string.Format ("It looks like we have a bug with regards to how we handle {0}. Please report it."' interfaceName); " is 124.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,IsConstructorVisible,The length of the statement  "	return constructor.IsPublic || constructor.IsFamily || constructor.IsFamilyOrAssembly || (constructor.IsAssembly && InternalsUtil.IsInternalToDynamicProxy (constructor.DeclaringType.GetTypeInfo ().Assembly)); " is 208.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,The length of the statement  "	var proxyInstance = new ClassProxyInstanceContributor (targetType' methodsToSkip' interfaces' ProxyTypeConstants.Class); " is 120.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,The length of the statement  "	var additionalInterfacesContributor = new InterfaceProxyWithoutTargetContributor (namingScope' (c' m) => NullExpression.Instance) { " is 131.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,EnsureDoesNotImplementIProxyTargetAccessor,The length of the statement  "	var message = string.Format ("Target type for the proxy implements {0} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to proxy an existing proxy?"' typeof(IProxyTargetAccessor)); " is 239.
Long Statement,Castle.DynamicProxy.Generators,CompositionInvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CompositionInvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the statement  "	invokeMethodOnTarget.CodeBuilder.AddStatement (new ExpressionStatement (new MethodInvocationExpression (SelfReference.Self' InvocationMethods.EnsureValidTarget))); " is 163.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the statement  "	var target = AddMappingForTargetType (typeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces' namingScope); " is 132.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,EnsureValidBaseType,The length of the statement  "		throw new ArgumentException ("Base type for proxy is null reference. Please set it to System.Object or some other valid type."); " is 128.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,EnsureValidBaseType,The length of the statement  "	var constructor = type.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' Type.EmptyTypes' null); " is 138.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,ThrowInvalidBaseType,The length of the statement  "	var format = "Type {0} is not valid base type for interface proxy' because {1}. Only a non-sealed class with non-private default constructor can be used as base type for interface proxy. Please use some other valid type."; " is 222.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetInterfaceGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetInterfaceGenerator.cs,AddMappingForTargetType,The length of the statement  "	var contributor = new InterfaceProxyWithTargetInterfaceTargetContributor (proxyTargetType' AllowChangeTarget' namingScope) { " is 124.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,GetCallbackMethodInvocation,The length of the statement  "	var methodOnTargetInvocationExpression = new MethodInvocationExpression (new AsTypeReference (targetField' callbackMethod.DeclaringType)' callbackMethod' args) { " is 161.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the statement  "			invokeMethodOnTarget.CodeBuilder.AddStatement (new AssignStatement (localReference' new ConvertExpression (paramType.GetElementType ()' new MethodInvocationExpression (SelfReference.Self' InvocationMethods.GetArgumentValue' new LiteralIntExpression (i))))); " is 257.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the statement  "			args [i] = new ConvertExpression (paramType' new MethodInvocationExpression (SelfReference.Self' InvocationMethods.GetArgumentValue' new LiteralIntExpression (i))); " is 164.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the statement  "	var methodOnTargetInvocationExpression = GetCallbackMethodInvocation (invocation' args' callbackMethod' targetField' invokeMethodOnTarget); " is 139.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the statement  "		var setRetVal = new MethodInvocationExpression (SelfReference.Self' InvocationMethods.SetReturnValue' new ConvertExpression (typeof(object)' returnValue.Type' returnValue.ToExpression ())); " is 189.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,AssignBackByRefArguments,The length of the statement  "		invokeMethodOnTarget.CodeBuilder.AddStatement (new ExpressionStatement (new MethodInvocationExpression (SelfReference.Self' InvocationMethods.SetArgumentValue' new LiteralIntExpression (index)' new ConvertExpression (typeof(object)' localReference.Type' new ReferenceExpression (localReference))))); " is 299.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,EmitCallEnsureValidTarget,The length of the statement  "	return invokeMethodOnTarget.CodeBuilder.AddStatement (new ExpressionStatement (new MethodInvocationExpression (SelfReference.Self' InvocationMethods.EnsureValidTarget))); " is 170.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,GetEmitter,The length of the statement  "	var suggestedName = string.Format ("Castle.Proxies.Invocations.{0}_{1}"' methodInfo.DeclaringType.Name' methodInfo.Name); " is 121.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementChangeInvocationTarget,The length of the statement  "	changeInvocationTarget.CodeBuilder.AddStatement (new AssignStatement (targetField' new ConvertExpression (targetType' changeInvocationTarget.Arguments [0].ToExpression ()))); " is 174.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementChangeProxyTarget,The length of the statement  "	changeInvocationTarget.CodeBuilder.AddStatement (new ExpressionStatement (new ConvertExpression (@class.TypeBuilder.AsType ()' new FieldReference (InvocationMethods.ProxyObject).ToExpression ()))); " is 197.
Long Statement,Castle.DynamicProxy.Generators,MethodSignatureComparer,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodSignatureComparer.cs,Equals,The length of the statement  "	return EqualNames (x' y) && EqualGenericParameters (x' y) && EqualSignatureTypes (x.ReturnType' y.ReturnType) && EqualParameters (x' y); " is 136.
Long Statement,Castle.DynamicProxy.Generators,MethodFinder,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodFinder.cs,GetAllInstanceMethods,The length of the statement  "			cachedMethodInfosByType.Add (type' RemoveDuplicates (type.GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))); " is 142.
Long Statement,Castle.DynamicProxy.Generators,MetaMethod,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaMethod.cs,ObtainAttributes,The length of the statement  "	if (InternalsUtil.IsInternal (methodInfo) && InternalsUtil.IsInternalToDynamicProxy (methodInfo.DeclaringType.GetTypeInfo ().Assembly)) { " is 137.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,BuildMethodInterceptorsField,The length of the statement  "	var methodInterceptors = @class.CreateField (namingScope.GetUniqueName (string.Format ("interceptors_{0}"' method.Name))' typeof(IInterceptor[])' false); " is 153.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,BuildProxiedMethodBody,The length of the statement  "		var proxiedMethodToken = @class.CreateStaticField (namingScope.GetUniqueName ("token_" + MethodToOverride.Name)' typeof(MethodInfo)); " is 133.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,BuildProxiedMethodBody,The length of the statement  "		@class.ClassConstructor.CodeBuilder.AddStatement (new AssignStatement (proxiedMethodToken' new MethodTokenExpression (MethodToOverride))); " is 138.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,BuildProxiedMethodBody,The length of the statement  "	emitter.CodeBuilder.AddStatement (new AssignStatement (invocationLocal' new NewInstanceExpression (constructor' ctorArguments))); " is 129.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,SetMethodInterceptors,The length of the statement  "	var selectInterceptors = new MethodInvocationExpression (selector' InterceptorSelectorMethods.SelectInterceptors' new MethodInvocationExpression (null' TypeUtilMethods.GetTypeOrNull' getTargetExpression (@class' MethodToOverride))' proxiedMethodTokenExpression' interceptors.ToExpression ()) { " is 293.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,SetMethodInterceptors,The length of the statement  "	emitter.CodeBuilder.AddExpression (new IfNullExpression (methodInterceptorsField' new AssignStatement (methodInterceptorsField' new NullCoalescingOperatorExpression (selectInterceptors' emptyInterceptors)))); " is 208.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,EmitLoadGenricMethodArguments,The length of the statement  "	methodEmitter.CodeBuilder.AddStatement (new AssignStatement (genericParamsArrayLocal' new NewArrayExpression (genericParameters.Length' typeof(Type)))); " is 152.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,EmitLoadGenricMethodArguments,The length of the statement  "		methodEmitter.CodeBuilder.AddStatement (new AssignArrayStatement (genericParamsArrayLocal' i' new TypeTokenExpression (genericParameters [i]))); " is 144.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,EmitLoadGenricMethodArguments,The length of the statement  "	methodEmitter.CodeBuilder.AddExpression (new MethodInvocationExpression (invocationLocal' InvocationMethods.SetGenericMethodArguments' new ReferenceExpression (genericParamsArrayLocal))); " is 187.
Long Statement,Castle.DynamicProxy.Generators.Emitters,AbstractTypeEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\AbstractTypeEmitter.cs,DefineCustomAttributeFor,The length of the statement  "		throw new ArgumentException ("Invalid field reference.This reference does not point to field on type being generated"' "field"); " is 128.
Long Statement,Castle.DynamicProxy.Generators.Emitters,AbstractTypeEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\AbstractTypeEmitter.cs,CreateType,The length of the statement  "		var message = "This is a DynamicProxy2 error: It looks like you enoutered a bug in Visual Studio debugger' " + "which causes this exception when proxying types with generic methods having constraints on their generic arguments." + "This code will work just fine without the debugger attached. " + "If you wish to use debugger you may have to switch to Visual Studio 2010 where this bug was fixed."; " is 398.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "			genericArgumentsOfConstraint [i] = AdjustConstraintToNewGenericParameters (genericArgumentsOfConstraint [i]' methodToCopyGenericsFrom' originalGenericParameters' newGenericParameters); " is 184.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "			Trace.Assert (index != -1' "When a generic method parameter has a constraint on another method parameter' both parameters must be declared on the same method."); " is 161.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "			Trace.Assert (methodToCopyGenericsFrom.DeclaringType.GetTypeInfo ().IsGenericType && constraint.DeclaringType == methodToCopyGenericsFrom.DeclaringType.GetGenericTypeDefinition ()' "When a generic method parameter has a constraint on a generic type parameter' the generic type must be the declaring typer of the method."); " is 322.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustGenericConstraints,The length of the statement  "		adjustedConstraints [i] = AdjustConstraintToNewGenericParameters (constraints [i]' methodToCopyGenericsFrom' originalGenericArguments' newGenericParameters); " is 157.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,CopyGenericArguments,The length of the statement  "			var constraints = AdjustGenericConstraints (methodToCopyGenericsFrom' newGenericParameters' originalGenericArguments' originalGenericArguments [i].GetTypeInfo ().GetGenericParameterConstraints ()); " is 197.
Long Statement,Castle.DynamicProxy.Generators.Emitters,StrongNameUtil,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\StrongNameUtil.cs,ContainsPublicKey,The length of the statement  "	// Pulled from a comment on http://www.flawlesscode.com/post/2008/08/Mocking-and-IOC-in-Silverlight-2-Castle-Project-and-Moq-ports.aspx " is 135.
Long Statement,Castle.DynamicProxy.Generators.Emitters.CodeBuilders,ConstructorCodeBuilder,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\CodeBuilders\ConstructorCodeBuilder.cs,InvokeBaseConstructor,The length of the statement  "	AddStatement (new ConstructorInvocationStatement (constructor' ArgumentsUtil.ConvertArgumentReferenceToExpression (arguments))); " is 128.
Long Statement,Castle.Core.Resource,AssemblyResource,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Resource\AssemblyResource.cs,CreateResourceFromUri,The length of the statement  "		String message = String.Format (CultureInfo.InvariantCulture' "The assembly resource {0} could not be located"' resourcePath); " is 126.
Long Statement,Castle.Core.Resource,AssemblyBundleResource,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Resource\AssemblyBundleResource.cs,GetStreamReader,The length of the statement  "		throw new ResourceException ("AssemblyBundleResource does not support paths with more than 2 levels in depth. See " + resource.Path); " is 133.
Long Statement,Castle.Core.Resource,FileResource,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Resource\FileResource.cs,CheckFileExists,The length of the statement  "		String message = String.Format (CultureInfo.InvariantCulture' "File {0} could not be found"' new FileInfo (path).FullName); " is 123.
Complex Conditional,Castle.Components.DictionaryAdapter,StringListAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\StringListAttribute.cs,GetPropertyValue,The conditional expression  "genericDef == typeof(IList<>) || genericDef == typeof(ICollection<>) || genericDef == typeof(List<>) || genericDef == typeof(IEnumerable<>)"  is complex.
Complex Conditional,Castle.DynamicProxy.Contributors,MembersCollector,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The conditional expression  "(method.IsPublic || method.IsFamily || method.IsAssembly || method.IsFamilyOrAssembly) == false"  is complex.
Complex Conditional,Castle.DynamicProxy.Generators,MethodFinder,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MethodFinder.cs,MakeFilteredCopy,The conditional expression  "(method.IsPublic && includePublic) || (!method.IsPublic && includeNonPublic)"  is complex.
Complex Conditional,Castle.Core.Resource,CustomUri,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Resource\CustomUri.cs,ParseIdentifier,The conditional expression  "comma == -1 && !(identifier [0] == '\\' && identifier [1] == '\\') && identifier [0] != '/'"  is complex.
Virtual Method Call from Constructor,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The constructor "ClassEmitter" calls a virtual method "InitializeGenericArgumentsFromBases".
Magic Number,Castle.Components.DictionaryAdapter,RemoveIfAttribute,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Attributes\RemoveIfAttribute.cs,RemoveIfAttribute,The following statement contains a magic number: ExecutionOrder += 10;  
Magic Number,Castle.Components.DictionaryAdapter,VirtualSite,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Util\VirtualSite.cs,GetHashCode,The following statement contains a magic number: return 0x72F10A3D + 37 * TargetComparer.GetHashCode (target) + 37 * MemberComparer.GetHashCode (member);  
Magic Number,Castle.Components.DictionaryAdapter,VirtualSite,F:\newReposMay17\castleproject_Core\src\Castle.Core\Components.DictionaryAdapter\Util\VirtualSite.cs,GetHashCode,The following statement contains a magic number: return 0x72F10A3D + 37 * TargetComparer.GetHashCode (target) + 37 * MemberComparer.GetHashCode (member);  
Magic Number,Castle.Core.Internal,WeakKeyDictionary,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\WeakKeyDictionary.cs,Add,The following statement contains a magic number: Age (2);  
Magic Number,Castle.Core.Internal,WeakKeyDictionary,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Internal\WeakKeyDictionary.cs,Remove,The following statement contains a magic number: Age (4);  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = constructor.GetHashCode ();  	hashCode = (hashCode * 397) ^ CombineHashCodes (constructorArgs);  	hashCode = (hashCode * 397) ^ CombineMemberHashCodes (properties);  	hashCode = (hashCode * 397) ^ CombineMemberHashCodes (fields);  	return hashCode;  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = constructor.GetHashCode ();  	hashCode = (hashCode * 397) ^ CombineHashCodes (constructorArgs);  	hashCode = (hashCode * 397) ^ CombineMemberHashCodes (properties);  	hashCode = (hashCode * 397) ^ CombineMemberHashCodes (fields);  	return hashCode;  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = constructor.GetHashCode ();  	hashCode = (hashCode * 397) ^ CombineHashCodes (constructorArgs);  	hashCode = (hashCode * 397) ^ CombineMemberHashCodes (properties);  	hashCode = (hashCode * 397) ^ CombineMemberHashCodes (fields);  	return hashCode;  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CombineHashCodes (constructorArgs);  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CombineMemberHashCodes (properties);  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CombineMemberHashCodes (fields);  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CombineHashCodes,The following statement contains a magic number: unchecked {  	int hashCode = 173;  	foreach (object value in values) {  		hashCode = (hashCode * 397) ^ ValueComparer.GetHashCode (value);  	}  	return hashCode;  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CombineHashCodes,The following statement contains a magic number: unchecked {  	int hashCode = 173;  	foreach (object value in values) {  		hashCode = (hashCode * 397) ^ ValueComparer.GetHashCode (value);  	}  	return hashCode;  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CombineHashCodes,The following statement contains a magic number: foreach (object value in values) {  	hashCode = (hashCode * 397) ^ ValueComparer.GetHashCode (value);  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CombineHashCodes,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ValueComparer.GetHashCode (value);  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CombineMemberHashCodes,The following statement contains a magic number: unchecked {  	// Just sum the hashcodes of all key-value pairs' because  	// we don't want to take order into account.  	int hashCode = 0;  	foreach (var kvp in dict) {  		int keyHashCode = kvp.Key.GetHashCode ();  		int valueHashCode = ValueComparer.GetHashCode (kvp.Value);  		hashCode += (keyHashCode * 397) ^ valueHashCode;  	}  	return hashCode;  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CombineMemberHashCodes,The following statement contains a magic number: foreach (var kvp in dict) {  	int keyHashCode = kvp.Key.GetHashCode ();  	int valueHashCode = ValueComparer.GetHashCode (kvp.Value);  	hashCode += (keyHashCode * 397) ^ valueHashCode;  }  
Magic Number,Castle.DynamicProxy,CustomAttributeInfo,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\CustomAttributeInfo.cs,CombineMemberHashCodes,The following statement contains a magic number: hashCode += (keyHashCode * 397) ^ valueHashCode;  
Magic Number,Castle.DynamicProxy,MixinData,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\MixinData.cs,GetHashCode,The following statement contains a magic number: foreach (var mixinImplementation in mixinsImpl) {  	hashCode = 29 * hashCode + mixinImplementation.GetType ().GetHashCode ();  }  
Magic Number,Castle.DynamicProxy,MixinData,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\MixinData.cs,GetHashCode,The following statement contains a magic number: hashCode = 29 * hashCode + mixinImplementation.GetType ().GetHashCode ();  
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (Selector != null ? 1 : 0);  
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + MixinData.GetHashCode ();  
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (BaseTypeForInterfaceProxy != null ? BaseTypeForInterfaceProxy.GetHashCode () : 0);  
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + CollectionExtensions.GetContentsHashCode (AdditionalAttributes);  
Magic Number,Castle.Core,Pair,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Pair.cs,GetHashCode,The following statement contains a magic number: return first.GetHashCode () + 29 * second.GetHashCode ();  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ArgumentReference,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\ArgumentReference.cs,LoadReference,The following statement contains a magic number: switch (Position) {  case 0:  	gen.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldarg_3);  	break;  default:  	gen.Emit (OpCodes.Ldarg_S' Position);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ArgumentReference,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\ArgumentReference.cs,LoadReference,The following statement contains a magic number: switch (Position) {  case 0:  	gen.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldarg_3);  	break;  default:  	gen.Emit (OpCodes.Ldarg_S' Position);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value) {  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	gen.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value) {  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	gen.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value) {  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	gen.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value) {  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	gen.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value) {  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	gen.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value) {  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	gen.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value) {  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	gen.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,Castle.DynamicProxy.Generators,CacheKey,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: foreach (var inter in interfaces) {  	result += 29 + inter.GetHashCode ();  }  
Magic Number,Castle.DynamicProxy.Generators,CacheKey,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: result += 29 + inter.GetHashCode ();  
Magic Number,Castle.DynamicProxy.Generators,CacheKey,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: if (options != null) {  	result = 29 * result + options.GetHashCode ();  }  
Magic Number,Castle.DynamicProxy.Generators,CacheKey,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + options.GetHashCode ();  
Magic Number,Castle.DynamicProxy.Generators,CacheKey,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: if (type != null) {  	result = 29 * result + type.GetHashCode ();  }  
Magic Number,Castle.DynamicProxy.Generators,CacheKey,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + type.GetHashCode ();  
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = (adder.Method != null ? adder.Method.GetHashCode () : 0);  	result = (result * 397) ^ (remover.Method != null ? remover.Method.GetHashCode () : 0);  	result = (result * 397) ^ Attributes.GetHashCode ();  	return result;  }  
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = (adder.Method != null ? adder.Method.GetHashCode () : 0);  	result = (result * 397) ^ (remover.Method != null ? remover.Method.GetHashCode () : 0);  	result = (result * 397) ^ Attributes.GetHashCode ();  	return result;  }  
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (remover.Method != null ? remover.Method.GetHashCode () : 0);  
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Attributes.GetHashCode ();  
Magic Number,Castle.DynamicProxy.Generators,MetaProperty,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaProperty.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((GetMethod != null ? GetMethod.GetHashCode () : 0) * 397) ^ (SetMethod != null ? SetMethod.GetHashCode () : 0);  }  
Magic Number,Castle.DynamicProxy.Generators,MetaProperty,F:\newReposMay17\castleproject_Core\src\Castle.Core\DynamicProxy\Generators\MetaProperty.cs,GetHashCode,The following statement contains a magic number: return ((GetMethod != null ? GetMethod.GetHashCode () : 0) * 397) ^ (SetMethod != null ? SetMethod.GetHashCode () : 0);  
Magic Number,Castle.Core.Resource,AssemblyBundleResource,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Resource\AssemblyBundleResource.cs,GetStreamReader,The following statement contains a magic number: if (paths.Length != 2) {  	throw new ResourceException ("AssemblyBundleResource does not support paths with more than 2 levels in depth. See " + resource.Path);  }  
Magic Number,Castle.Core.Resource,CustomUri,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Resource\CustomUri.cs,ParseIdentifier,The following statement contains a magic number: if (identifier [0] == '\\' && identifier [1] == '\\') {  	// Unc  	isUnc = true;  	isFile = true;  	scheme = UriSchemeFile;  	translateSlashes = false;  } else if (identifier [comma + 1] == '/' && identifier [comma + 2] == '/') {  	// Extract scheme  	scheme = identifier.Substring (0' comma);  	isFile = (scheme == UriSchemeFile);  	isAssembly = (scheme == UriSchemeAssembly);  	identifier = identifier.Substring (comma + SchemeDelimiter.Length);  } else {  	isFile = true;  	scheme = UriSchemeFile;  }  
Magic Number,Castle.Core.Resource,CustomUri,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Resource\CustomUri.cs,ParseIdentifier,The following statement contains a magic number: if (identifier [comma + 1] == '/' && identifier [comma + 2] == '/') {  	// Extract scheme  	scheme = identifier.Substring (0' comma);  	isFile = (scheme == UriSchemeFile);  	isAssembly = (scheme == UriSchemeAssembly);  	identifier = identifier.Substring (comma + SchemeDelimiter.Length);  } else {  	isFile = true;  	scheme = UriSchemeFile;  }  
Missing Default,Castle.Core.Logging,TraceLogger,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Logging\TraceLogger.cs,MapLoggerLevel,The following switch statement is missing a default case: switch (level) {  case SourceLevels.All:  	return LoggerLevel.Debug;  case SourceLevels.Verbose:  	return LoggerLevel.Debug;  case SourceLevels.Information:  	return LoggerLevel.Info;  case SourceLevels.Warning:  	return LoggerLevel.Warn;  case SourceLevels.Error:  	return LoggerLevel.Error;  case SourceLevels.Critical:  	return LoggerLevel.Fatal;  }  
Missing Default,Castle.Core.Logging,TraceLogger,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Logging\TraceLogger.cs,MapSourceLevels,The following switch statement is missing a default case: switch (level) {  case LoggerLevel.Debug:  	return SourceLevels.Verbose;  case LoggerLevel.Info:  	return SourceLevels.Information;  case LoggerLevel.Warn:  	return SourceLevels.Warning;  case LoggerLevel.Error:  	return SourceLevels.Error;  case LoggerLevel.Fatal:  	return SourceLevels.Critical;  }  
Missing Default,Castle.Core.Logging,TraceLogger,F:\newReposMay17\castleproject_Core\src\Castle.Core\Core\Logging\TraceLogger.cs,MapTraceEventType,The following switch statement is missing a default case: switch (level) {  case LoggerLevel.Debug:  	return TraceEventType.Verbose;  case LoggerLevel.Info:  	return TraceEventType.Information;  case LoggerLevel.Warn:  	return TraceEventType.Warning;  case LoggerLevel.Error:  	return TraceEventType.Error;  case LoggerLevel.Fatal:  	return TraceEventType.Critical;  }  
