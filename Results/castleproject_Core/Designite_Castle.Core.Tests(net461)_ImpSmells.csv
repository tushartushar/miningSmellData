Implementation smell,Namespace,Class,File,Method,Description
Long Method,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The method has 116 lines of code.
Long Parameter List,Castle.Components.DictionaryAdapter.Tests,CustomGetter,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\CustomGetter.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter.Tests,TestDictionaryValidator,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\TestDictionaryValidator.cs,ApplyValidationRules,The method has 5 parameters. Parameters: dictionaryAdapter' rules' property' propertyValue' errors
Long Parameter List,Castle.Components.DictionaryAdapter.Tests,XmlStructureComparer,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\XmlStructureComparer.cs,Traverse,The method has 5 parameters. Parameters: startElement' defaultResult' childSelector' childVisitor' primitiveVisitor
Long Parameter List,Castle.Components.DictionaryAdapter.Xml.Tests,TestScenario,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlReferenceManagerTestCase.cs,SetValue,The method has 5 parameters. Parameters: parentNode' childName' oldValue' newValue' expectedResult
Long Parameter List,Castle.DynamicProxy.Tests,ISimpleInterface_Do,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,ISimpleInterface_Do,The method has 5 parameters. Parameters: simpleClass' fakeProxy' interceptorsDo' tokenDo' objArray
Long Parameter List,Castle.DynamicProxy.Tests.Classes,ComplexNonInheritableAttribute,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\HasNonInheritableAttribute.cs,ComplexNonInheritableAttribute,The method has 5 parameters. Parameters: id' num' isSomething' name' access
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find2Invo<T>,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find2Invo,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find1Invo,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find1Invo,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find1InvoA,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find1InvoA,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find3Invo<T>,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find3Invo,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Identifier,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_method_names_when_implementing_same_generic_interface_several_times,The length of the parameter nestedGenericBoolInterfaceType is 30.
Long Identifier,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_property_accessor_names_when_implementing_same_generic_interface_several_times,The length of the parameter nestedGenericBoolInterfaceType is 30.
Long Identifier,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_event_accessor_names_when_implementing_same_generic_interface_several_times,The length of the parameter nestedGenericBoolInterfaceType is 30.
Long Identifier,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_member_names_when_implementing_same_generic_interface_with_two_type_args_several_times,The length of the parameter intNestedGenericBoolInterfaceType is 33.
Long Identifier,Castle.DynamicProxy.Tests,ConstructorWithAttributesOnParametersTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ConstructorWithAttributesOnParametersTestCase.cs,CustomAttributesOnParametersAreCopiedToProxiedObjectConstructor,The length of the parameter paramWithRequiredAttributeCount is 31.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithoutTarget,The length of the parameter someInstanceOfProxyWithoutSelector is 34.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithoutTarget,The length of the parameter someInstanceOfProxyWithSelector is 31.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget,The length of the parameter someInstanceOfProxyWithoutSelector is 34.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget,The length of the parameter someInstanceOfProxyWithSelector is 31.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTargetInterface,The length of the parameter someInstanceOfProxyWithoutSelector is 34.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTargetInterface,The length of the parameter someInstanceOfProxyWithSelector is 31.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_ClassProxy,The length of the parameter someInstanceOfProxyWithoutSelector is 34.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_ClassProxy,The length of the parameter someInstanceOfProxyWithSelector is 31.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_ClassProxyWithTarget,The length of the parameter someInstanceOfProxyWithoutSelector is 34.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_ClassProxyWithTarget,The length of the parameter someInstanceOfProxyWithSelector is 31.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget2,The length of the parameter someInstanceOfProxyWithSelector1 is 32.
Long Identifier,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget2,The length of the parameter someInstanceOfProxyWithSelector2 is 32.
Long Statement,Castle.Components.DictionaryAdapter.Tests,TestDictionaryValidator,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\TestDictionaryValidator.cs,Validate,The length of the statement  "				var propertyRules = AttributesUtil.GetAttributes<ValidationRuleAttribute>(property.Property).Select(x => (IValidationRule)x); " is 125.
Long Statement,Castle.Components.DictionaryAdapter.Tests,TestDictionaryValidator,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\TestDictionaryValidator.cs,Validate,The length of the statement  "			var propertyRules = AttributesUtil.GetAttributes<ValidationRuleAttribute>(property.Property).Select(x => (IValidationRule)x); " is 125.
Long Statement,Castle.Components.DictionaryAdapter.Xml.Tests,XmlNodeListTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\Collections\XmlNodeListTestCase.cs,SetItemToNull,The length of the statement  "			CustomAssert.AreXmlEquivalent(Xml("<Foo $xsi> <Strings> <string xsi:nil='true'/> <string>b</string> </Strings> </Foo>")' xml); " is 126.
Long Statement,Castle.Components.DictionaryAdapter.Xml.Tests,XmlNodeListTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\Collections\XmlNodeListTestCase.cs,Insert,The length of the statement  "			CustomAssert.AreXmlEquivalent(Xml("<Foo> <Strings> <string>a</string> <string>c</string> <string>b</string> </Strings> </Foo>")' xml); " is 134.
Long Statement,Castle.Components.DictionaryAdapter.Xml.Tests,NodeCopyScenario2,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlReferenceManagerTestCase.cs,Reset_Primary,The length of the statement  "				CustomAssert.AreXmlEquivalent(Xml("<Root $x> <A/> <B C='c' x:id='1'> d <E>f</E> g </B> <C x:ref='1'/> </Root>")' Document); " is 123.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelTrace,The length of the statement  "			Assert.IsTrue(logger.IsTraceEnabled' "LevelFilteredLogger.IsTraceEnabled is not returning true when the level is Trace"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelTrace,The length of the statement  "			Assert.IsTrue(logger.IsDebugEnabled' "LevelFilteredLogger.IsDebugEnabled is not returning true when the level is Trace"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelTrace,The length of the statement  "			Assert.IsTrue(logger.IsErrorEnabled' "LevelFilteredLogger.IsErrorEnabled is not returning true when the level is Trace"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelTrace,The length of the statement  "			Assert.IsTrue(logger.IsFatalEnabled' "LevelFilteredLogger.IsFatalErrorEnabled is not returning true when the level is Trace"); " is 126.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelDebug,The length of the statement  "			Assert.IsFalse(logger.IsTraceEnabled' "LevelFilteredLogger.IsTraceEnabled is not returning false when the level is Debug"); " is 123.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelDebug,The length of the statement  "			Assert.IsTrue(logger.IsDebugEnabled' "LevelFilteredLogger.IsDebugEnabled is not returning true when the level is Debug"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelDebug,The length of the statement  "			Assert.IsTrue(logger.IsErrorEnabled' "LevelFilteredLogger.IsErrorEnabled is not returning true when the level is Debug"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelDebug,The length of the statement  "			Assert.IsTrue(logger.IsFatalEnabled' "LevelFilteredLogger.IsFatalErrorEnabled is not returning true when the level is Debug"); " is 126.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelInfo,The length of the statement  "			Assert.IsFalse(logger.IsTraceEnabled' "LevelFilteredLogger.IsTraceEnabled is not returning false when the level is Info"); " is 122.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelInfo,The length of the statement  "			Assert.IsFalse(logger.IsDebugEnabled' "LevelFilteredLogger.IsDebugEnabled is not returning false when the level is Info"); " is 122.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelInfo,The length of the statement  "			Assert.IsTrue(logger.IsErrorEnabled' "LevelFilteredLogger.IsErrorEnabled is not returning true when the level is Info"); " is 120.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelInfo,The length of the statement  "			Assert.IsTrue(logger.IsFatalEnabled' "LevelFilteredLogger.IsFatalErrorEnabled is not returning true when the level is Info"); " is 125.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelWarn,The length of the statement  "			Assert.IsFalse(logger.IsTraceEnabled' "LevelFilteredLogger.IsTraceEnabled is not returning false when the level is Warn"); " is 122.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelWarn,The length of the statement  "			Assert.IsFalse(logger.IsDebugEnabled' "LevelFilteredLogger.IsDebugEnabled is not returning false when the level is Warn"); " is 122.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelWarn,The length of the statement  "			Assert.IsFalse(logger.IsInfoEnabled' "LevelFilteredLogger.IsInfoEnabled is not returning false when the level is Warn"); " is 120.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelWarn,The length of the statement  "			Assert.IsTrue(logger.IsErrorEnabled' "LevelFilteredLogger.IsErrorEnabled is not returning true when the level is Warn"); " is 120.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelWarn,The length of the statement  "			Assert.IsTrue(logger.IsFatalEnabled' "LevelFilteredLogger.IsFatalErrorEnabled is not returning true when the level is Warn"); " is 125.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelError,The length of the statement  "			Assert.IsFalse(logger.IsTraceEnabled' "LevelFilteredLogger.IsTraceEnabled is not returning false when the level is Error"); " is 123.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelError,The length of the statement  "			Assert.IsFalse(logger.IsDebugEnabled' "LevelFilteredLogger.IsDebugEnabled is not returning false when the level is Error"); " is 123.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelError,The length of the statement  "			Assert.IsFalse(logger.IsInfoEnabled' "LevelFilteredLogger.IsInfoEnabled is not returning false when the level is Error"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelError,The length of the statement  "			Assert.IsFalse(logger.IsWarnEnabled' "LevelFilteredLogger.IsWarnEnabled is not returning false when the level is Error"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelError,The length of the statement  "			Assert.IsTrue(logger.IsErrorEnabled' "LevelFilteredLogger.IsErrorEnabled is not returning true when the level is Error"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelError,The length of the statement  "			Assert.IsTrue(logger.IsFatalEnabled' "LevelFilteredLogger.IsFatalErrorEnabled is not returning true when the level is Error"); " is 126.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelFatal,The length of the statement  "			Assert.IsFalse(logger.IsTraceEnabled' "LevelFilteredLogger.IsTraceEnabled is not returning false when the level is Fatal"); " is 123.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelFatal,The length of the statement  "			Assert.IsFalse(logger.IsDebugEnabled' "LevelFilteredLogger.IsDebugEnabled is not returning false when the level is Fatal"); " is 123.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelFatal,The length of the statement  "			Assert.IsFalse(logger.IsInfoEnabled' "LevelFilteredLogger.IsInfoEnabled is not returning false when the level is Fatal"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelFatal,The length of the statement  "			Assert.IsFalse(logger.IsWarnEnabled' "LevelFilteredLogger.IsWarnEnabled is not returning false when the level is Fatal"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelFatal,The length of the statement  "			Assert.IsFalse(logger.IsErrorEnabled' "LevelFilteredLogger.IsErrorEnabled is not returning false when the level is Fatal"); " is 123.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelFatal,The length of the statement  "			Assert.IsTrue(logger.IsFatalEnabled' "LevelFilteredLogger.IsFatalErrorEnabled is not returning true when the level is Fatal"); " is 126.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelOff,The length of the statement  "			Assert.IsFalse(logger.IsTraceEnabled' "LevelFilteredLogger.IsTraceEnabled is not returning false when the level is Off"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelOff,The length of the statement  "			Assert.IsFalse(logger.IsDebugEnabled' "LevelFilteredLogger.IsDebugEnabled is not returning false when the level is Off"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelOff,The length of the statement  "			Assert.IsFalse(logger.IsErrorEnabled' "LevelFilteredLogger.IsErrorEnabled is not returning false when the level is Off"); " is 121.
Long Statement,Castle.Core.Logging.Tests,PropertyTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,LevelOff,The length of the statement  "			Assert.IsFalse(logger.IsFatalEnabled' "LevelFilteredLogger.IsFatalErrorEnabled is not returning false when the level is Off"); " is 126.
Long Statement,Castle.Core.Logging.Tests,StreamLoggerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\StreamLoggerTests.cs,ValidateCall,The length of the statement  "				Assert.AreEqual(expectedException.GetType().FullName' match.Groups["type"].Value' "StreamLogger.Log did not write the correct Exception Type"); " is 143.
Long Statement,Castle.Core.Logging.Tests,StreamLoggerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\StreamLoggerTests.cs,ValidateCall,The length of the statement  "				// Assert.AreEqual(expectedException.Message' match.Groups["message"].Value' "StreamLogger.Log did not write the correct Exception Message"); " is 141.
Long Statement,Castle.Core.Logging.Tests,Listener,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\TraceLoggerTests.cs,AssertContains,The length of the statement  "				Assert.IsTrue(traces[traceName].ToString().Contains(expected)' string.Format("Trace text expected to contain '{0}'"' expected)); " is 128.
Long Statement,Castle.Core.Resource.Tests,AssemblyResourceFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Resource\AssemblyResourceFactoryTestCase.cs,CreateWithAbsolutePath,The length of the statement  "			var resource = resFactory.Create(new CustomUri("assembly://" + AssemblyName + "/Castle.Core.Tests.Resource.file1.txt")); " is 120.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForNonPublicClass,The length of the statement  "				"Can not create proxy for type System.Text.Latin1Encoding because it is not accessible. Make it public' or internal and mark your assembly with " + " is 147.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForNonPublicClass,The length of the statement  "				"[assembly: InternalsVisibleTo(\"DynamicProxyGenAssembly2' PublicKey=002400000480000094000000060200000024000052534131000400000100010" + " is 135.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForNonPublicClass,The length of the statement  "				"0c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0" + " is 135.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForNonPublicClass,The length of the statement  "				"a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")] " + " is 135.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The length of the statement  "					"This is a DynamicProxy2 error: The interceptor attempted to 'Proceed' for method 'Void Dispose()' which has no target. " + " is 123.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The length of the statement  "					"When calling method without target there is no implementation to 'proceed' to and it is the responsibility of the interceptor " + " is 130.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,Finalize_method_is_proxied_even_though_its_not_the_best_idea_ever,The length of the statement  "			Assert.AreNotEqual(typeof(HasFinalizeMethod)' finalize.DeclaringType' "Finalize method is not a finalizer and should have been proxied"); " is 137.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_implement_explicitly_duplicate_interface_members,The length of the statement  "			MethodInfo method2 = type.GetMethod("Castle.DynamicProxy.Tests.Interfaces.IIdenticalTwo.Foo"' BindingFlags.Instance | BindingFlags.Public); " is 139.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_method_names_when_implementing_same_generic_interface_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithNonGenericMethod`1[Int32].SomeMethod"' intMethod.Name); " is 121.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_method_names_when_implementing_same_generic_interface_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithNonGenericMethod`1[IGenericWithNonGenericMethod`1[Boolean]].SomeMethod"' nestedGenericBoolMethod.Name); " is 169.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_property_accessor_names_when_implementing_same_generic_interface_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithProperty`1[IGenericWithProperty`1[Boolean]].get_SomeProperty"' nestedGenericBoolGetter.Name); " is 159.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_property_accessor_names_when_implementing_same_generic_interface_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithProperty`1[IGenericWithProperty`1[Boolean]].set_SomeProperty"' nestedGenericBoolSetter.Name); " is 159.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_event_accessor_names_when_implementing_same_generic_interface_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithEvent`1[IGenericWithEvent`1[Boolean]].add_SomeEvent"' nestedGenericBoolAdder.Name); " is 149.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_event_accessor_names_when_implementing_same_generic_interface_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithEvent`1[IGenericWithEvent`1[Boolean]].remove_SomeEvent"' nestedGenericBoolRemover.Name); " is 154.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_member_names_when_implementing_same_generic_interface_with_two_type_args_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithNonGenericMethod`2[Int32'Boolean].SomeMethod"' intBoolMethod.Name); " is 133.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Should_choose_noncolliding_member_names_when_implementing_same_generic_interface_with_two_type_args_several_times,The length of the statement  "			Assert.AreEqual("Castle.DynamicProxy.Tests.Interfaces.IGenericWithNonGenericMethod`2[Int32'IGenericWithNonGenericMethod`1[Boolean]].SomeMethod"' intNestedGenericBoolMethod.Name); " is 178.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Cannot_proxy_open_generic_type,The length of the statement  "			var ex = Assert.Throws<GeneratorException>(() => generator.CreateInterfaceProxyWithoutTarget(typeof(IList<>)' new IInterceptor[0])); " is 132.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Cannot_proxy_open_generic_type,The length of the statement  "			Assert.AreEqual("Can not create proxy for type System.Collections.Generic.IList`1 because it is an open generic type."' ex.Message); " is 132.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Cannot_proxy_generic_type_with_open_generic_type_parameter,The length of the statement  "			var ex = Assert.Throws<GeneratorException>(() => generator.CreateInterfaceProxyWithoutTarget(targetType' new IInterceptor[0])); " is 127.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Cannot_proxy_inaccessible_interface,The length of the statement  "				"Can not create proxy for type Castle.DynamicProxy.Tests.BasicInterfaceProxyTestCase+PrivateInterface because it is not accessible. Make it public' or internal"' " is 161.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Cannot_proxy_generic_interface_with_inaccessible_type_argument,The length of the statement  "				"Can not create proxy for type System.Collections.Generic.IList`1[[Castle.DynamicProxy.Tests.BasicInterfaceProxyTestCase+PrivateInterface' Castle.Core.Tests' Version=0.0.0.0' Culture=neutral' PublicKeyToken=407dd0808d44fbdc]] because type Castle.DynamicProxy.Tests.BasicInterfaceProxyTestCase+PrivateInterface is not accessible. Make it public' or internal"' " is 358.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Cannot_proxy_generic_interface_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var expected = string.Format("Can not create proxy for type {0} because type {1} is not accessible. Make it public' or internal"' " is 129.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,Cannot_proxy_generic_interface_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var exception = Assert.Throws<GeneratorException>(() => generator.CreateInterfaceProxyWithoutTarget(typeof(IList<IList<PrivateInterface>>)' new IInterceptor[0])); " is 162.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,BasicInterfaceProxyWithValidTarget_ThrowsIfInterceptorCallsProceed,The length of the statement  "				"This is a DynamicProxy2 error: The interceptor attempted to 'Proceed' for method 'Int32 Sum(Int32' Int32)' which has no target. " + " is 132.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,BasicInterfaceProxyWithValidTarget_ThrowsIfInterceptorCallsProceed,The length of the statement  "				"When calling method without target there is no implementation to 'proceed' to and it is the responsibility of the interceptor " + " is 130.
Long Statement,Castle.DynamicProxy.Tests,BugsReportedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BugsReportedTestCase.cs,CallingProceedWithInterceptorOnAbstractMethodShouldThrowException,The length of the statement  "				"This is a DynamicProxy2 error: The interceptor attempted to 'Proceed' for method 'System.String Foo()' which is abstract. " + " is 126.
Long Statement,Castle.DynamicProxy.Tests,BugsReportedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BugsReportedTestCase.cs,CallingProceedWithoutInterceptorOnAbstractMethodShouldThrowException,The length of the statement  "				"This is a DynamicProxy2 error: There are no interceptors specified for method 'System.String Foo()' which is abstract. " + " is 123.
Long Statement,Castle.DynamicProxy.Tests,CacheKeyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CacheKeyTestCase.cs,EqualWithProxyForType,The length of the statement  "			CacheKey key1 = new CacheKey(typeof (NonPublicConstructorClass).GetTypeInfo()' null' null' ProxyGenerationOptions.Default); " is 123.
Long Statement,Castle.DynamicProxy.Tests,CacheKeyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CacheKeyTestCase.cs,EqualWithProxyForType,The length of the statement  "			CacheKey key2 = new CacheKey(typeof (NonPublicConstructorClass).GetTypeInfo()' null' null' ProxyGenerationOptions.Default); " is 123.
Long Statement,Castle.DynamicProxy.Tests,CacheKeyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CacheKeyTestCase.cs,EqualNullAndEmptyInterfaces,The length of the statement  "			CacheKey key1 = new CacheKey(typeof (NonPublicConstructorClass).GetTypeInfo()' null' null' ProxyGenerationOptions.Default); " is 123.
Long Statement,Castle.DynamicProxy.Tests,ChangeProxyTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ChangeProxyTargetTestCase.cs,Should_Change_Target_Proxy_For_Generic_Interfaces_Recommended_Approach,The length of the statement  "			var proxy1 = generator.CreateInterfaceProxyWithTargetInterface<IEventHandler<EventArgs1>>(null' new[] { lazyInterceptor1 }); " is 124.
Long Statement,Castle.DynamicProxy.Tests,ChangeProxyTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ChangeProxyTargetTestCase.cs,Should_Change_Target_Proxy_For_Generic_Interfaces_Recommended_Approach,The length of the statement  "			var proxy2 = generator.CreateInterfaceProxyWithTargetInterface<IEventHandler<EventArgs2>>(null' new[] { lazyInterceptor2 }); " is 124.
Long Statement,Castle.DynamicProxy.Tests,ChangeProxyTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ChangeProxyTargetTestCase.cs,Should_Change_Target_Proxy_For_Generic_Interfaces_Obsolete_Approach,The length of the statement  "			var proxy1 = generator.CreateInterfaceProxyWithTargetInterface<IEventHandler<EventArgs1>>(null' new[] { lazyInterceptor1 }); " is 124.
Long Statement,Castle.DynamicProxy.Tests,ChangeProxyTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ChangeProxyTargetTestCase.cs,Should_Change_Target_Proxy_For_Generic_Interfaces_Obsolete_Approach,The length of the statement  "			var proxy2 = generator.CreateInterfaceProxyWithTargetInterface<IEventHandler<EventArgs2>>(null' new[] { lazyInterceptor2 }); " is 124.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_open_generic_type,The length of the statement  "			var exception = Assert.Throws<GeneratorException>(() => generator.CreateClassProxy(typeof(List<>)' new IInterceptor[0])); " is 121.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_open_generic_type,The length of the statement  "			Assert.AreEqual(exception.Message' "Can not create proxy for type System.Collections.Generic.List`1 because it is an open generic type."); " is 138.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_inaccessible_class,The length of the statement  "			var ex = Assert.Throws<GeneratorException>(() => generator.CreateClassProxy(typeof(PrivateClass)' new IInterceptor[0])); " is 120.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_inaccessible_class,The length of the statement  "			var expectedMessage = "Can not create proxy for type Castle.DynamicProxy.Tests.ClassProxyConstructorsTestCase+PrivateClass because it is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(InternalsVisible.ToDynamicProxyGenAssembly2)] attribute' because assembly Castle.Core.Tests is strong-named."; " is 349.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_inaccessible_class,The length of the statement  "			var expectedMessage = "Can not create proxy for type Castle.DynamicProxy.Tests.ClassProxyConstructorsTestCase+PrivateClass because it is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(\"DynamicProxyGenAssembly2' PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")] attribute' because assembly Castle.Core.Tests is strong-named."; " is 666.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_generic_class_with_inaccessible_type_argument,The length of the statement  "				"Can not create proxy for type System.Collections.Generic.List`1[[Castle.DynamicProxy.Tests.ClassProxyConstructorsTestCase+PrivateClass' Castle.Core.Tests' Version=0.0.0.0' Culture=neutral' PublicKeyToken=407dd0808d44fbdc]] because type Castle.DynamicProxy.Tests.ClassProxyConstructorsTestCase+PrivateClass is not accessible. Make it public' or internal"' " is 355.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_generic_class_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var ex = Assert.Throws<GeneratorException>(() => generator.CreateClassProxy(typeof(List<List<PrivateClass>>)' new IInterceptor[0])); " is 132.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Cannot_proxy_generic_class_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var expected = string.Format("Can not create proxy for type {0} because type {1} is not accessible. Make it public' or internal"' " is 129.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Cannot_proxy_inaccessible_class,The length of the statement  "				"Can not create proxy for type Castle.DynamicProxy.Tests.ClassProxyWithTargetTestCase+PrivateClass because it is not accessible. Make it public' or internal"' " is 158.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Cannot_proxy_generic_class_with_inaccessible_type_argument,The length of the statement  "				"Can not create proxy for type System.Collections.Generic.List`1[[Castle.DynamicProxy.Tests.ClassProxyWithTargetTestCase+PrivateClass' Castle.Core.Tests' Version=0.0.0.0' Culture=neutral' PublicKeyToken=407dd0808d44fbdc]] because type Castle.DynamicProxy.Tests.ClassProxyWithTargetTestCase+PrivateClass is not accessible. Make it public' or internal"' " is 351.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Cannot_proxy_generic_class_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var ex = Assert.Throws<GeneratorException>(() => generator.CreateClassProxyWithTarget(new List<List<PrivateClass>>()' new IInterceptor[0])); " is 140.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Cannot_proxy_generic_class_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var expected = string.Format("Can not create proxy for type {0} because type {1} is not accessible. Make it public' or internal"' " is 129.
Long Statement,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods,The length of the statement  "			object[] attributes = instance.GetType().GetTypeInfo().GetCustomAttributes(typeof (NonInheritableAttribute)' false).ToArray(); " is 126.
Long Statement,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods,The length of the statement  "			attributes = instance.GetType().GetMethod("OnMethod").GetCustomAttributes(typeof (NonInheritableAttribute)' false).ToArray(); " is 125.
Long Statement,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The length of the statement  "			object[] attributes = instance.GetType().GetTypeInfo().GetCustomAttributes(typeof (ComplexNonInheritableAttribute)' false).ToArray(); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The length of the statement  "			attributes = instance.GetType().GetMethod("Do1").GetCustomAttributes(typeof (ComplexNonInheritableAttribute)' false).ToArray(); " is 127.
Long Statement,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The length of the statement  "			attributes = instance.GetType().GetMethod("Do2").GetCustomAttributes(typeof (ComplexNonInheritableAttribute)' false).ToArray(); " is 127.
Long Statement,Castle.DynamicProxy.Tests,ConstructorWithAttributesOnParametersTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ConstructorWithAttributesOnParametersTestCase.cs,CustomAttributesOnParametersAreCopiedToProxiedObjectConstructor,The length of the statement  "			var requiredObj = generator.CreateClassProxy(typeof(ClassWithAttributesOnConstructorParameters)' new object[] { 10'"" }); " is 121.
Long Statement,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,CreateClassProxy_GivenAdditionalInterfaceWithOverloadedGenericMethodsHavingGenericParameter_SuccessfullyCreatesProxyInstance,The length of the statement  "			var instance = generator.CreateClassProxy(typeof(object)' new Type[] { typeof(InterfaceWithOverloadedGenericMethod) }' interceptor); " is 132.
Long Statement,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericClassProxyTestCase.cs,MethodInfoClosedInGenTypeGenMethodRefType,The length of the statement  "			GenClassWithGenMethods<List<object>> proxy = generator.CreateClassProxy<GenClassWithGenMethods<List<object>>>(interceptor); " is 123.
Long Statement,Castle.DynamicProxy.Tests,InheritedInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InheritedInterfacesTestCase.cs,Should_not_have_duplicated_properties_for_interface_proxy_with_inherited_target_and_two_inherited_additional_interfaces,The length of the statement  "			PropertyInfo[] properties = o.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,Castle.DynamicProxy.Tests,InParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InParamsTestCase.cs,By_reference_In_parameter_has_IsReadOnlyAttribute,The length of the statement  "			Assert.True(parameter.GetCustomAttributes().Any(a => a.GetType().FullName == "System.Runtime.CompilerServices.IsReadOnlyAttribute")); " is 133.
Long Statement,Castle.DynamicProxy.Tests,InParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InParamsTestCase.cs,Parameter_other_than_by_reference_In_does_not_have_IsReadOnlyAttribute,The length of the statement  "			Assert.False(parameter.GetCustomAttributes().Any(a => a.GetType().FullName == "System.Runtime.CompilerServices.IsReadOnlyAttribute")); " is 134.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTargetTypeTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTargetTypeTestCase.cs,When_using_CreateClassProxy_SelectInterceptors_receives_type_equal_to_proxied_type,The length of the statement  "			var proxy = generator.CreateClassProxy<Foo>(new ProxyGenerationOptions { Selector = selector }' new DoNothingInterceptor()); " is 124.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTargetTypeTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTargetTypeTestCase.cs,When_using_CreateClassProxyWithTarget_SelectInterceptors_receives_type_equal_to_type_of_target,The length of the statement  "			var proxy = generator.CreateClassProxyWithTarget<Foo>(new FooTarget()' new ProxyGenerationOptions { Selector = selector }' new DoNothingInterceptor()); " is 151.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTargetTypeTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTargetTypeTestCase.cs,When_using_CreateInterfaceProxyWithoutTarget_SelectInterceptors_receives_type_equal_to_null,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithoutTarget<IFoo>(new ProxyGenerationOptions { Selector = selector }' new DoNothingInterceptor()); " is 142.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTargetTypeTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTargetTypeTestCase.cs,When_using_CreateInterfaceProxyWithTarget_SelectInterceptors_receives_type_equal_to_type_of_target,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTarget<IFoo>(new FooTarget()' new ProxyGenerationOptions { Selector = selector }' new DoNothingInterceptor()); " is 156.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTargetTypeTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTargetTypeTestCase.cs,When_using_CreateInterfaceProxyWithTargetInterface_SelectInterceptors_receives_type_equal_to_type_of_target,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTargetInterface<IFoo>(new FooTarget()' new ProxyGenerationOptions { Selector = selector }' new DoNothingInterceptor()); " is 165.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,BasicCase,The length of the statement  "			var target = generator.CreateInterfaceProxyWithTarget(typeof(ISimpleInterface)' new SimpleClass()' options' new StandardInterceptor()) as ISimpleInterface; " is 155.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The length of the statement  "			var proxy1 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options1' new SetReturnValueInterceptor(2)); " is 132.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The length of the statement  "			var proxy2 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options2' new SetReturnValueInterceptor(2)); " is 132.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithoutTarget,The length of the statement  "			var someInstanceOfProxyWithoutSelector = (IService2)generator.CreateInterfaceProxyWithoutTarget(typeof(IService2)' new DoNothingInterceptor()); " is 143.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithoutTarget,The length of the statement  "			var someInstanceOfProxyWithSelector = (IService2)generator.CreateInterfaceProxyWithoutTarget(typeof(IService2)' new ProxyGenerationOptions " is 138.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget,The length of the statement  "			var someInstanceOfProxyWithoutSelector = (IService2)generator.CreateInterfaceProxyWithTarget(typeof(IService2)' new Service2()' new StandardInterceptor()); " is 155.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget,The length of the statement  "			var someInstanceOfProxyWithSelector = (IService2)generator.CreateInterfaceProxyWithTarget(typeof(IService2)' new Service2()' " is 124.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTargetInterface,The length of the statement  "			var someInstanceOfProxyWithoutSelector = (IService2)generator.CreateInterfaceProxyWithTargetInterface(typeof(IService2)' new Service2()' new StandardInterceptor()); " is 164.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTargetInterface,The length of the statement  "			var someInstanceOfProxyWithSelector = (IService2)generator.CreateInterfaceProxyWithTargetInterface(typeof(IService2)' new Service2()' " is 133.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_ClassProxy,The length of the statement  "			var someInstanceOfProxyWithoutSelector = (Component2)generator.CreateClassProxy(typeof(Component2)' new StandardInterceptor()); " is 127.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_ClassProxyWithTarget,The length of the statement  "			var someInstanceOfProxyWithoutSelector = (Component2)generator.CreateClassProxyWithTarget(typeof(Component2)' new Component2()' new StandardInterceptor()); " is 155.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_ClassProxyWithTarget,The length of the statement  "			var someInstanceOfProxyWithSelector = (Component2)generator.CreateClassProxyWithTarget(typeof(Component2)' new Component2()' " is 124.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget2,The length of the statement  "			var someInstanceOfProxyWithSelector1 = (IService2)generator.CreateInterfaceProxyWithTarget(typeof(IService2)' new Service2()' " is 125.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget2,The length of the statement  "			var someInstanceOfProxyWithSelector2 = (IService2)generator.CreateInterfaceProxyWithTarget(typeof(IService2)' new Service2()' " is 125.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Cannot_proxy_inaccessible_interface,The length of the statement  "				"Can not create proxy for type Castle.DynamicProxy.Tests.InterceptorSelectorTestCase+PrivateInterface because it is not accessible. Make it public' or internal"' " is 161.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Cannot_proxy_generic_interface_with_inaccessible_type_argument,The length of the statement  "				"Can not create proxy for type System.Collections.Generic.IList`1[[Castle.DynamicProxy.Tests.InterceptorSelectorTestCase+PrivateInterface' Castle.Core.Tests' Version=0.0.0.0' Culture=neutral' PublicKeyToken=407dd0808d44fbdc]] because type Castle.DynamicProxy.Tests.InterceptorSelectorTestCase+PrivateInterface is not accessible. Make it public' or internal"' " is 358.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Cannot_proxy_generic_interface_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			Assert.Throws<GeneratorException>(() => generator.CreateInterfaceProxyWithTarget<IList<IList<PrivateInterface>>>(new List<IList<PrivateInterface>>()' new IInterceptor[0])); " is 172.
Long Statement,Castle.DynamicProxy.Tests,FakeProxy,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Do,The length of the statement  "				interceptors_Do = __selector.SelectInterceptors(TypeUtil.GetTypeOrNull(__target)' token_Do' __interceptors) ?? new IInterceptor[0]; " is 131.
Long Statement,Castle.DynamicProxy.Tests,InterceptorsMustReturnNonNullValueTypesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorsMustReturnNonNullValueTypesTestCase.cs,Proxy_method_that_swallows_exception_and_returns_null_struct,The length of the statement  "			Assert.AreEqual("Interceptors failed to set a return value' or swallowed the exception thrown by the target"' ex.Message); " is 122.
Long Statement,Castle.DynamicProxy.Tests,InterceptorsMustReturnNonNullValueTypesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorsMustReturnNonNullValueTypesTestCase.cs,Proxy_method_that_returns_clears_return_value_or_throws,The length of the statement  "			Assert.AreEqual("Interceptors failed to set a return value' or swallowed the exception thrown by the target"' ex.Message); " is 122.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyBaseTypeTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyBaseTypeTestCase.cs,Class_with_no_default_ctor_as_base_type,The length of the statement  "					"Type {0} is not valid base type for interface proxy' because it does not have accessible parameterless constructor. " + " is 120.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyBaseTypeTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyBaseTypeTestCase.cs,Class_with_private_default_ctor_as_base_type,The length of the statement  "					"Type {0} is not valid base type for interface proxy' because it does not have accessible parameterless constructor. " + " is 120.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Cannot_proxy_inaccessible_interface,The length of the statement  "				"Can not create proxy for type Castle.DynamicProxy.Tests.InterfaceProxyWithTargetInterfaceTestCase+PrivateInterface because it is not accessible. Make it public' or internal"' " is 175.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Cannot_proxy_generic_interface_with_inaccessible_type_argument,The length of the statement  "				generator.CreateInterfaceProxyWithTargetInterface<IList<PrivateInterface>>(new List<PrivateInterface>()' new IInterceptor[0])); " is 127.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Cannot_proxy_generic_interface_with_inaccessible_type_argument,The length of the statement  "				"Can not create proxy for type System.Collections.Generic.IList`1[[Castle.DynamicProxy.Tests.InterfaceProxyWithTargetInterfaceTestCase+PrivateInterface' Castle.Core.Tests' Version=0.0.0.0' Culture=neutral' PublicKeyToken=407dd0808d44fbdc]] because type Castle.DynamicProxy.Tests.InterfaceProxyWithTargetInterfaceTestCase+PrivateInterface is not accessible. Make it public' or internal"' " is 386.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Cannot_proxy_generic_interface_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var ex = Assert.Throws<GeneratorException>(() => generator.CreateInterfaceProxyWithTargetInterface<IList<IList<PrivateInterface>>>(new List<IList<PrivateInterface>>()' new IInterceptor[0])); " is 190.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Cannot_proxy_generic_interface_with_type_argument_that_has_inaccessible_type_argument,The length of the statement  "			var expected = string.Format("Can not create proxy for type {0} because type {1} is not accessible. Make it public' or internal"' " is 129.
Long Statement,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,ClassProxy_MethodInvocationTarget_should_be_base_Method_for_interface_methods_implemented_virtually,The length of the statement  "			var proxy = generator.CreateClassProxy(typeof(ClassWithVirtualInterface)' new[] { typeof(ISimpleInterface) }' interceptor) as ISimpleInterface; " is 143.
Long Statement,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinTestCase.cs,MixinWithSameInterface_InterfaceWithTarget_AdditionalInterfaces,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTarget(typeof(IService)' new Type[] {typeof (ISimpleMixin)}' new ServiceImpl()' options' interceptor); " is 148.
Long Statement,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinTestCase.cs,MixinWithSameInterface_InterfaceWithTarget_AdditionalInterfaces_Derived,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTarget(typeof(IService)' new Type[] { typeof(IDerivedSimpleMixin) }' new ServiceImpl()' options' interceptor); " is 156.
Long Statement,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_and_mixin_should_forward_to_target,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTarget(typeof (IService)' Type.EmptyTypes' target' MixIn(mixin)) as IService; " is 123.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_DifferentAdditionalAttributes,The length of the statement  "			var info1 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_DifferentAdditionalAttributes,The length of the statement  "			var info2 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test2" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_SameAdditionalAttributes,The length of the statement  "			var info1 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test" }); " is 132.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_SameAdditionalAttributes,The length of the statement  "			var info2 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test" }); " is 132.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info11 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info12 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info21 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test2" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info22 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test2" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_DifferentAdditionalAttributesDuplicateEntries,The length of the statement  "			var info11 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_DifferentAdditionalAttributesDuplicateEntries,The length of the statement  "			var info12 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_DifferentAdditionalAttributesDuplicateEntries,The length of the statement  "			var info13 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,Equals_DifferentAdditionalAttributesDuplicateEntries,The length of the statement  "			var info2 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test2" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_EqualOptions_SameAdditionalAttributes,The length of the statement  "			var info1 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new [] { typeof(string) })' new object[] { "Test" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_EqualOptions_SameAdditionalAttributes,The length of the statement  "			var info2 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new [] { typeof(string) })' new object[] { "Test" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_EqualOptions_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info11 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_EqualOptions_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info12 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_EqualOptions_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info21 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test2" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_EqualOptions_SameAdditionalAttributesDifferentOrder,The length of the statement  "			var info22 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test2" }); " is 134.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_DifferentOptions_DifferentAdditionalAttributes,The length of the statement  "			var info1 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_DifferentOptions_DifferentAdditionalAttributes,The length of the statement  "			var info2 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test2" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_DifferentOptions_SameAdditionalAttributesButDuplicateEntries,The length of the statement  "			var info1 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_DifferentOptions_SameAdditionalAttributesButDuplicateEntries,The length of the statement  "			var info2 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_DifferentOptions_SameAdditionalAttributesButDuplicateEntries,The length of the statement  "			var info3 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,GetHashCode_DifferentOptions_SameAdditionalAttributesButDuplicateEntries,The length of the statement  "			var info4 = new CustomAttributeInfo(typeof(DescriptionAttribute).GetConstructor(new[] { typeof(string) })' new object[] { "Test1" }); " is 133.
Long Statement,Castle.DynamicProxy.Tests,ProxyTargetAccessorHandlingTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyTargetAccessorHandlingTestCase.cs,InterfaceProxyWithTarget_Target_derived,The length of the statement  "				generator.CreateInterfaceProxyWithTarget(typeof(IProxyTargetAccessorDerived)' new ImplementsProxyTargetAccessorDerived())); " is 123.
Long Statement,Castle.DynamicProxy.Tests,ProxyTypeCachingWithDifferentHooksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyTypeCachingWithDifferentHooksTestCase.cs,CreateProxyWithHook,The length of the statement  "			return generator.CreateInterfaceProxyWithoutTarget(typeof(IEmpty)' new ProxyGenerationOptions(new THook())' new DoNothingInterceptor()); " is 136.
Long Statement,Castle.DynamicProxy.Tests,ProxyUtilTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyUtilTestCase.cs,IsAccessibleWithReason_Inaccessible_Method_Populates_ReasonMethodIsNotAccessible,The length of the statement  "			var expectedReason = "Can not create proxy for method Void " + method.Name + "() because it or its declaring type is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(InternalsVisible.ToDynamicProxyGenAssembly2)] attribute' because assembly Castle.Core.Tests is strong-named."; " is 329.
Long Statement,Castle.DynamicProxy.Tests,ProxyUtilTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyUtilTestCase.cs,IsAccessibleWithReason_Inaccessible_Method_Populates_ReasonMethodIsNotAccessible,The length of the statement  "			var expectedReason = "Can not create proxy for method Void " + method.Name + "() because it or its declaring type is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(\"DynamicProxyGenAssembly2' PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")] attribute' because assembly Castle.Core.Tests is strong-named."; " is 646.
Complex Conditional,Castle.DynamicProxy.Tests.Interceptors,RequiredParamInterceptor,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Interceptors\RequiredParamInterceptor.cs,Intercept,The conditional expression  "(required.BadValue == null && args[i] == null) ||  						(required.BadValue != null && required.BadValue.Equals(args[i]))"  is complex.
Virtual Method Call from Constructor,Castle.DynamicProxy.Tests.Classes,ClassCallingVirtualMethodFromCtor,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassCallingVirtualMethodFromCtor.cs,ClassCallingVirtualMethodFromCtor,The constructor "ClassCallingVirtualMethodFromCtor" calls a virtual method "VirtualMethod".
Empty Catch Block,Castle.DynamicProxy.Tests,SwallowExceptionInterceptor,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorsMustReturnNonNullValueTypesTestCase.cs,Intercept,The method has an empty catch block.
Empty Catch Block,Castle.DynamicProxy.Tests.Interceptors,ProceedNTimesInterceptor,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Interceptors\ProceedNTimesInterceptor.cs,Intercept,The method has an empty catch block.
Magic Number,Castle.Components.DictionaryAdapter.Tests,AdaptingGenericDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\AdaptingGenericDictionaryTestCase.cs,Should_Handle_String_Object,The following statement contains a magic number: var dictionary = new Dictionary<string' object>  			{  				{ "Team"' "Giants" }'  				{ "Points"' 48 }  			};
Magic Number,Castle.Components.DictionaryAdapter.Tests,AdaptingGenericDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\AdaptingGenericDictionaryTestCase.cs,Should_Handle_String_Object,The following statement contains a magic number: Assert.AreEqual(48' player.Points);
Magic Number,Castle.Components.DictionaryAdapter.Tests,AdaptingGenericDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\AdaptingGenericDictionaryTestCase.cs,Should_Handle_String_String,The following statement contains a magic number: Assert.AreEqual(23' player.Points);
Magic Number,Castle.Components.DictionaryAdapter.Tests,AdaptingGenericDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\AdaptingGenericDictionaryTestCase.cs,Can_Save_Everything_As_A_String,The following statement contains a magic number: player.Points = 23;
Magic Number,Castle.Components.DictionaryAdapter.Tests,AdaptingGenericDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\AdaptingGenericDictionaryTestCase.cs,Can_Save_Everything_As_A_String,The following statement contains a magic number: Assert.AreEqual(23' player.Points);
Magic Number,Castle.Components.DictionaryAdapter.Tests,AdaptingNameValueCollectionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\AdaptingNameValueCollectionsTestCase.cs,Adapter_OnNameValueCollectionWithPropertyBinder_CanGetProperties,The following statement contains a magic number: int legs = 2;
Magic Number,Castle.Components.DictionaryAdapter.Tests,AdaptingNameValueCollectionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\AdaptingNameValueCollectionsTestCase.cs,Adapter_OnNameValueCollectionWithPropertyBinder_CanSetProperties,The following statement contains a magic number: int legs = 2;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CreateAdapter_AdaptingGenericInterfaceWithComponent_Works,The following statement contains a magic number: container.Item.Age = 5;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CreateAdapter_AdaptingGenericInterfaceWithComponent_Works,The following statement contains a magic number: Assert.AreEqual(5' container.Item.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: person.Age = 37;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(37' dictionary["Age"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' dictionary["DOB"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' dictionary["DOB"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_NoPrefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' dictionary["DOB"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: person.Age = 37;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(37' dictionary["Age"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' dictionary["DOB"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' dictionary["DOB"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_Prefix_UpdatesDictionary,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' dictionary["DOB"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: person.Age = 37;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: Assert.AreEqual(37' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' person.DOB);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' person.DOB);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_NoPrefix_Matches,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' person.DOB);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: person.Age = 37;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: person.DOB = new DateTime(1970' 7' 19);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: Assert.AreEqual(37' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' person.DOB);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' person.DOB);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_Prefix_Matches,The following statement contains a magic number: Assert.AreEqual(new DateTime(1970' 7' 19)' person.DOB);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_TypePrefix_Matches,The following statement contains a magic number: person.Height = 72;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_TypePrefix_Matches,The following statement contains a magic number: Assert.AreEqual(72' person.Height);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_TypePrefix_Matches,The following statement contains a magic number: Assert.AreEqual(72' dictionary["Castle.Components.DictionaryAdapter.Tests.IPersonWithTypePrefixOverride#Height"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_WithSeveralDifferentOverridesWithDifferentPrefixes_DictionaryKeysHaveCorrectPrefixes,The following statement contains a magic number: const int numberOfFeet = 2;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapterAndRead_WithSeveralDifferentOverridesWithDifferentPrefixes_DictionaryKeysHaveCorrectPrefixes,The following statement contains a magic number: const int numberOfFingers = 3;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CreateAdapter_WithSubstitionOnInterface_WorksFine,The following statement contains a magic number: person.Max_Width = 22;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CreateAdapter_WithSubstitionOnInterface_WorksFine,The following statement contains a magic number: Assert.AreEqual(22' dictionary["Max Width"]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: dictionary["Int"] = string.Format("{0}"' 22);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: dictionary["Float"] = string.Format("{0}"' 98.6);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: dictionary["Double"] = string.Format("{0}"' 3.14D);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: dictionary["Decimal"] = string.Format("{0}"' 100M);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(22' conversions.Int);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(98.6f' conversions.Float);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(3.14' conversions.Double);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(100m' conversions.Decimal);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				var today = DateTime.Today;  				var guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.Int = 22;  				conversions.Float = 98.6F;  				conversions.Double = 3.14;  				conversions.Decimal = 100;  				conversions.DateTime = today;  				conversions.Guid = guid;  				conversions.Phone = new Phone("2124751012"' "22");    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["Int"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["Float"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["Double"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["Decimal"]);  				Assert.AreEqual(today.ToString("yyyy-MM-dd")' dictionary["DateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["Guid"]);  				Assert.AreEqual("2124751012'22"' dictionary["Phone"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: dictionary["NullInt"] = string.Format("{0}"' 22);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: dictionary["NullFloat"] = string.Format("{0}"' 98.6);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: dictionary["NullDouble"] = string.Format("{0}"' 3.14D);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: dictionary["NullDecimal"] = string.Format("{0}"' 100M);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(22' conversions.NullInt);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(98.6f' conversions.NullFloat);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(3.14' conversions.NullDouble);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: Assert.AreEqual(100m' conversions.NullDecimal);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithDefaultNullableConversions_WorksFine,The following statement contains a magic number: UsingCulture(CultureInfo.InvariantCulture' () =>  			{  				DateTime? today = DateTime.Today;  				Guid? guid = Guid.NewGuid();    				var conversions = factory.GetAdapter<IConversionsToString>(dictionary);  				conversions.NullInt = 22;  				conversions.NullFloat = 98.6F;  				conversions.NullDouble = 3.14;  				conversions.NullDecimal = 100;  				conversions.NullDateTime = today;  				conversions.NullGuid = guid;    				Assert.AreEqual(string.Format("{0}"' 22)' dictionary["NullInt"]);  				Assert.AreEqual(string.Format("{0}"' 98.6)' dictionary["NullFloat"]);  				Assert.AreEqual(string.Format("{0}"' 3.14D)' dictionary["NullDouble"]);  				Assert.AreEqual(string.Format("{0}"' 100M)' dictionary["NullDecimal"]);  				Assert.AreEqual(today.Value.ToString("yyyy-MM-dd")' dictionary["NullDateTime"]);  				Assert.AreEqual(guid.ToString()' dictionary["NullGuid"]);  			});
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(5' names.Count);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual("Kaitlyn"' names[2]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual("Lauren"' names[3]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual("Matthew"' names[4]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(5' ages.Count);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(37' ages[0]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(36' ages[1]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(5' ages[2]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(5' ages[2]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(3' ages[3]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(3' ages[3]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,ReadAdapter_WithStringLists_WorksFine,The following statement contains a magic number: Assert.AreEqual(1' ages[4]);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithStringLists_WorksFine,The following statement contains a magic number: ages.Add(37);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithStringLists_WorksFine,The following statement contains a magic number: ages.Add(36);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithStringLists_WorksFine,The following statement contains a magic number: ages.Add(5);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,UpdateAdapter_WithStringLists_WorksFine,The following statement contains a magic number: ages.Add(3);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanObtainDictionaryAdapterMeta,The following statement contains a magic number: Assert.AreEqual(9' adapter.This.Properties.Count);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,DictionaryAdapterMetaIsExplicitImplementation,The following statement contains a magic number: Assert.AreEqual(3' adapter.This.Properties.Count);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanFetchPropertiesOnType,The following statement contains a magic number: Assert.AreEqual(2' getter.PropertiesFetched.Count);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanSuppressPropertyChangedEventsForSingleProperty,The following statement contains a magic number: person.Max_Width = 10;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanEditToplevelAndNestedPropertiesAndAcceptChanges,The following statement contains a magic number: person.Age = 22;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanEditCollectionPropertiesAndAcceptChanges,The following statement contains a magic number: Assert.AreEqual(2' container.GenericItems.Count);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndAcceptChanges,The following statement contains a magic number: person.Age = 39;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndAcceptChanges,The following statement contains a magic number: Assert.AreEqual(39' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndAcceptChanges,The following statement contains a magic number: Assert.AreEqual(39' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelAllChanges,The following statement contains a magic number: person.Age = 21;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelAllChanges,The following statement contains a magic number: Assert.AreEqual(21' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelAllChanges,The following statement contains a magic number: person.Age = 39;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelAllChanges,The following statement contains a magic number: Assert.AreEqual(39' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelAllChanges,The following statement contains a magic number: Assert.AreEqual(21' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelInnerChanges,The following statement contains a magic number: person.Age = 21;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelInnerChanges,The following statement contains a magic number: Assert.AreEqual(21' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelInnerChanges,The following statement contains a magic number: person.Age = 39;
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelInnerChanges,The following statement contains a magic number: Assert.AreEqual(39' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanPerformMultiLevelEditAndCancelInnerChanges,The following statement contains a magic number: Assert.AreEqual(21' person.Age);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillNotRaisePropertyChangedEventWhenEditsAreCancelled,The following statement contains a magic number: Assert.AreEqual(2' notifyCalled);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillRaisePropertyChangedEventWhenNestedEditsAreCancelled,The following statement contains a magic number: Assert.AreEqual(2' notifyCalled);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillRaisePropertyChangedEventsForReadonlyProperties,The following statement contains a magic number: Assert.AreEqual(2' notifications);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillRaisePropertyChangedEventsForReadonlyPropertyWhenEditing,The following statement contains a magic number: Assert.AreEqual(2' notifications);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillRaisePropertyChangedEventsForReadonlyPropertyWhenCancelEditing,The following statement contains a magic number: Assert.AreEqual(3' notifications);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanGetSimplePropertyOnDemand,The following statement contains a magic number: Assert.AreEqual(5' container.Count);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: container.Positions = new[] { 2' 4' 6' 8 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: container.Positions = new[] { 2' 4' 6' 8 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: container.Positions = new[] { 2' 4' 6' 8 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: container.Positions = new[] { 2' 4' 6' 8 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: Assert.AreEqual(20' container.ReducePositions.Value);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: container.Positions = new[] { 1' 2' 3' 4 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: container.Positions = new[] { 1' 2' 3' 4 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: container.Positions = new[] { 1' 2' 3' 4 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,CanUseDynamicValues,The following statement contains a magic number: Assert.AreEqual(10' container.ReducePositions.Value);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillGetNotificedWhenDynamicValueChanges,The following statement contains a magic number: container.PropertyChanged += (s' e) =>  			{  				if (e.PropertyName == "ReducePositions")  				{  					notifyCalled = true;  					Assert.AreEqual(10' ((PropertyChangedEventArgsEx)e).NewValue);  				}  			};
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillGetNotificedWhenDynamicValueChanges,The following statement contains a magic number: container.Positions = new[] { 1' 2' 3' 4 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillGetNotificedWhenDynamicValueChanges,The following statement contains a magic number: container.Positions = new[] { 1' 2' 3' 4 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillGetNotificedWhenDynamicValueChanges,The following statement contains a magic number: container.Positions = new[] { 1' 2' 3' 4 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,WillGetNotificedWhenDynamicValueChanges,The following statement contains a magic number: Assert.AreEqual(10' container.ReducePositions.Value);
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,Can_Remove_Empty_Arrays,The following statement contains a magic number: empty.ArrayValue = new int[] { 1' 2' 3 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,Can_Remove_Empty_Arrays,The following statement contains a magic number: empty.ArrayValue = new int[] { 1' 2' 3 };
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,Can_Remove_Empty_Collections,The following statement contains a magic number: empty.CollectionValue = new List<double>(new[] { 1.1' 2.2' 3.3 });
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,Can_Remove_Empty_Collections,The following statement contains a magic number: empty.CollectionValue = new List<double>(new[] { 1.1' 2.2' 3.3 });
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,Can_Remove_Empty_Collections,The following statement contains a magic number: empty.CollectionValue = new List<double>(new[] { 1.1' 2.2' 3.3 });
Magic Number,Castle.Components.DictionaryAdapter.Tests,DictionaryAdapterFactoryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\DictionaryAdapterFactoryTestCase.cs,Can_Remove_Empty_Nullables,The following statement contains a magic number: empty.NullableValue = 3.0F;
Magic Number,Castle.Components.DictionaryAdapter.Tests,ValidateStringLengthAtLeast,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\TestDictionaryValidator.cs,Apply,The following statement contains a magic number: propertyValue == null || (propertyValue is String && ((String)propertyValue).Length < 10)
Magic Number,Castle.Components.DictionaryAdapter.Tests,XmlStructureComparer,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\XmlStructureComparer.cs,VisitChildForHashCode,The following statement contains a magic number: hashCode = (hashCode << 3 | hashCode >> 29) ^ part0;
Magic Number,Castle.Components.DictionaryAdapter.Tests,XmlStructureComparer,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\XmlStructureComparer.cs,VisitChildForHashCode,The following statement contains a magic number: hashCode = (hashCode << 3 | hashCode >> 29) ^ part0;
Magic Number,Castle.Components.DictionaryAdapter.Tests,XmlStructureComparer,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\XmlStructureComparer.cs,VisitChildForHashCode,The following statement contains a magic number: hashCode = (hashCode << 7 | hashCode >> 25) ^ part1;
Magic Number,Castle.Components.DictionaryAdapter.Tests,XmlStructureComparer,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\XmlStructureComparer.cs,VisitChildForHashCode,The following statement contains a magic number: hashCode = (hashCode << 7 | hashCode >> 25) ^ part1;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,ArrayBehavior,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\Behaviors\XmlArrayBehaviorTestCase.cs,GetProperty_ArrayBehavior_Array_Element,The following statement contains a magic number: Assert.AreEqual(2' array.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,ArrayBehavior,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\Behaviors\XmlArrayBehaviorTestCase.cs,SetProperty_ArrayBehavior_Array,The following statement contains a magic number: Assert.AreEqual(2' array.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,ElementBehavior_CollectionProperty,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\Behaviors\XmlElementBehaviorTestCase.cs,GetProperty,The following statement contains a magic number: Assert.AreEqual(2' array.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,MultiElementBehavior,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\Behaviors\XmlElementBehaviorTestCase.cs,GetProperty_ElementBehavior_Array_Element,The following statement contains a magic number: Assert.AreEqual(2' array.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var minAge = 30;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var startsOn = new DateTime(2010' 2' 21);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var startsOn = new DateTime(2010' 2' 21);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var startsOn = new DateTime(2010' 2' 21);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var endsOn = new DateTime(2010' 4' 18);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var endsOn = new DateTime(2010' 4' 18);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var endsOn = new DateTime(2010' 4' 18);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var team1Balance = 450.00M;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var team2Balance = 655.50M;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>{0}</Name>  					 <MinimumAge>{1}</MinimumAge>  					 <Division>{2}</Division>  					 <StartsOn>{3}</StartsOn>  					 <EndsOn>{4}</EndsOn>  					 <Address xmlns='Common'>  						<Line1>{5}</Line1>  						<City>{6}</City>  						<State>{7}</State>  						<ZipCode>{8}</ZipCode>  					 </Address>  					 <League>  						<Team Name='{9}'>  						   <AmountDue>{10}</AmountDue>  						   <Roster>  							  <Participant FirstName='{11}' lastName='{12}'>  							  </Participant>  							  <Participant FirstName='{13}' lastName='{14}'>  							  </Participant>  						   </Roster>  						</Team>  						<Team Name='{15}'>  						   <AmountDue>{16}</AmountDue>  						   <Roster>  							  <Participant FirstName='{17}' lastName='{18}'>  							  </Participant>  						   </Roster>  						</Team>  					 </League>  					 <Documentation xmlns=''>  					  <Notes>notes</Notes>  					 </Documentation>  					 <Tag>{19}</Tag>  					 <Tag>{20}</Tag>  					 <Tag>{21}</Tag>  					 <ExtraStuff>  						<LicenseNo>{22}</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				name' minAge' division'  				XmlConvert.ToString(startsOn' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(endsOn' XmlDateTimeSerializationMode.Local)'  				line1' city' state' zipCode'  				team1Name' XmlConvert.ToString(team1Balance)'  				team1Player1FirstName' team1Player1LastName'  				team1Player2FirstName' team1Player2LastName'  				team2Name' XmlConvert.ToString(team2Balance)'  				team2Player1FirstName' team2Player1LastName'  				tags[0]' tags[1]' tags[2]'  				licenseNo);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: Assert.AreEqual(2' season.Teams.Count);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: Assert.AreEqual(2' season.Teams[0].Players.Count);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: Assert.AreEqual(2' season.TeamsArray.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: Assert.AreEqual(3' season.Tags.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanReadProperties,The following statement contains a magic number: Assert.Contains(tags[2]' season.Tags);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var minAge = 30;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var startsOn = new DateTime(2010' 2' 21);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var startsOn = new DateTime(2010' 2' 21);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var startsOn = new DateTime(2010' 2' 21);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var endsOn = new DateTime(2010' 4' 18);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var endsOn = new DateTime(2010' 4' 18);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var endsOn = new DateTime(2010' 4' 18);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var team1Balance = 450.00M;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var team3Balance = 175.15M;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: Assert.AreEqual(3' season.Teams.Count);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: Assert.AreEqual(team3Name' season.Teams[2].Name);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: Assert.AreEqual(team3Balance' season.Teams[2].Balance);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanWriteProperties,The following statement contains a magic number: Assert.AreEqual(2' season.Teams.Count);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <Address xmlns='Common'>  						<Line1>2922 South Highway 205</Line1>  						<City>Rockwall</City>  						<State>TX</State>  						<ZipCode>75032</ZipCode>  					 </Address>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						   <Roster>  							  <Participant FirstName='Mickey' lastName='Mouse'>  							  </Participant>  							  <Participant FirstName='Donald' lastName='Ducks'>  							  </Participant>  						   </Roster>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <Tag>Soccer</Tag>  					 <Tag>Cheetahs</Tag>  					 <Tag>Hot Shots</Tag>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <Address xmlns='Common'>  						<Line1>2922 South Highway 205</Line1>  						<City>Rockwall</City>  						<State>TX</State>  						<ZipCode>75032</ZipCode>  					 </Address>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						   <Roster>  							  <Participant FirstName='Mickey' lastName='Mouse'>  							  </Participant>  							  <Participant FirstName='Donald' lastName='Ducks'>  							  </Participant>  						   </Roster>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <Tag>Soccer</Tag>  					 <Tag>Cheetahs</Tag>  					 <Tag>Hot Shots</Tag>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <Address xmlns='Common'>  						<Line1>2922 South Highway 205</Line1>  						<City>Rockwall</City>  						<State>TX</State>  						<ZipCode>75032</ZipCode>  					 </Address>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						   <Roster>  							  <Participant FirstName='Mickey' lastName='Mouse'>  							  </Participant>  							  <Participant FirstName='Donald' lastName='Ducks'>  							  </Participant>  						   </Roster>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <Tag>Soccer</Tag>  					 <Tag>Cheetahs</Tag>  					 <Tag>Hot Shots</Tag>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <Address xmlns='Common'>  						<Line1>2922 South Highway 205</Line1>  						<City>Rockwall</City>  						<State>TX</State>  						<ZipCode>75032</ZipCode>  					 </Address>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						   <Roster>  							  <Participant FirstName='Mickey' lastName='Mouse'>  							  </Participant>  							  <Participant FirstName='Donald' lastName='Ducks'>  							  </Participant>  						   </Roster>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <Tag>Soccer</Tag>  					 <Tag>Cheetahs</Tag>  					 <Tag>Hot Shots</Tag>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <Address xmlns='Common'>  						<Line1>2922 South Highway 205</Line1>  						<City>Rockwall</City>  						<State>TX</State>  						<ZipCode>75032</ZipCode>  					 </Address>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						   <Roster>  							  <Participant FirstName='Mickey' lastName='Mouse'>  							  </Participant>  							  <Participant FirstName='Donald' lastName='Ducks'>  							  </Participant>  						   </Roster>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <Tag>Soccer</Tag>  					 <Tag>Cheetahs</Tag>  					 <Tag>Hot Shots</Tag>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: var xml = string.Format(  				@"<Season xmlns='RISE' xmlns:rise='RISE'>  					 <Name>Soccer Adult Spring II 2010</Name>  					 <MinimumAge>16</MinimumAge>  					 <Division>Male</Division>  					 <StartsOn>{0}</StartsOn>  					 <EndsOn>{1}</EndsOn>  					 <Address xmlns='Common'>  						<Line1>2922 South Highway 205</Line1>  						<City>Rockwall</City>  						<State>TX</State>  						<ZipCode>75032</ZipCode>  					 </Address>  					 <League>  						<Team name='Hit And Run'>  						   <AmountDue>100.50</AmountDue>  						   <Roster>  							  <Participant FirstName='Mickey' lastName='Mouse'>  							  </Participant>  							  <Participant FirstName='Donald' lastName='Ducks'>  							  </Participant>  						   </Roster>  						</Team>  						<Team name='Nemisis'>  						   <AmountDue>250.00</AmountDue>  						</Team>  					 </League>  					 <Tag>Soccer</Tag>  					 <Tag>Cheetahs</Tag>  					 <Tag>Hot Shots</Tag>  					 <ExtraStuff>  						<LicenseNo>9999</LicenseNo>  					 </ExtraStuff>  				  </Season>"'  				XmlConvert.ToString(new DateTime(2010' 7' 19)' XmlDateTimeSerializationMode.Local)'  				XmlConvert.ToString(new DateTime(2010' 9' 20)' XmlDateTimeSerializationMode.Local));
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: Assert.AreEqual(season2.Tags[2]' season1.Tags[2]);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Adapter_OnXml_CanCopySubTree,The following statement contains a magic number: Assert.AreEqual(season2.Tags[2]' season1.Tags[2]);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_Nullable_Attribute,The following statement contains a magic number: Assert.AreEqual(2' team.GamesPlayed);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_Nullable_Element,The following statement contains a magic number: Assert.AreEqual(15' team.MaxPlayers);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_Nullable_Attribute,The following statement contains a magic number: team.GamesPlayed = 2;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_Nullable_Attribute,The following statement contains a magic number: Assert.AreEqual(2' team.GamesPlayed);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_Nullable_Element,The following statement contains a magic number: team.MaxPlayers = 15;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_Nullable_Element,The following statement contains a magic number: Assert.AreEqual(15' team.MaxPlayers);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Coerce_Xml_Without_Namespace,The following statement contains a magic number: team.Balance = 200.00M;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Detect_Circularities,The following statement contains a magic number: var books = starWars.Select((title' i) =>  			{  				XmlDocument bookDoc = null;  				var book = CreateXmlAdapter<IBook>(null' ref bookDoc);  				book.Title = title;  				book.DDC.Category = 8;  				book.DDC.SubCategory = 1;  				book.DDC.SubDivision = i;  				book.Printed = i % 2 == 0;  				return book;  			}).ToList();
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Detect_Circularities,The following statement contains a magic number: var books = starWars.Select((title' i) =>  			{  				XmlDocument bookDoc = null;  				var book = CreateXmlAdapter<IBook>(null' ref bookDoc);  				book.Title = title;  				book.DDC.Category = 8;  				book.DDC.SubCategory = 1;  				book.DDC.SubDivision = i;  				book.Printed = i % 2 == 0;  				return book;  			}).ToList();
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: var employee = new Employee  			{  				Name = "Dave"'  				Supervisor = manager'  				Job = new Employment { Title = "Consultant"' Salary = 100000M }'  				Metadata = new Metadata { Tag = "Cool!" }'  				Key = new byte[] { 0x01' 0x02' 0x03 }  			};
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: var group = new Group  			{  				Id = 2'  				Owner = manager'  				Employees = new Employee[] { employee' manager }'  				Tags = new[] { "Primary"' "Local" }'  				Codes = Enumerable.Range(1' 5).ToList()'  				Comment = "Nothing important"'  				ExtraInfo = new object[] { 43' "Extra"' manager }  			};
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: var group = new Group  			{  				Id = 2'  				Owner = manager'  				Employees = new Employee[] { employee' manager }'  				Tags = new[] { "Primary"' "Local" }'  				Codes = Enumerable.Range(1' 5).ToList()'  				Comment = "Nothing important"'  				ExtraInfo = new object[] { 43' "Extra"' manager }  			};
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: var group = new Group  			{  				Id = 2'  				Owner = manager'  				Employees = new Employee[] { employee' manager }'  				Tags = new[] { "Primary"' "Local" }'  				Codes = Enumerable.Range(1' 5).ToList()'  				Comment = "Nothing important"'  				ExtraInfo = new object[] { 43' "Extra"' manager }  			};
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: Assert.AreEqual(2' groupRead.Id);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: Assert.AreEqual(2' employeesRead.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: Assert.AreEqual(3' extraInfoRead.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: Assert.IsInstanceOf<IManager>(extraInfoRead[2]);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_From_Standard_Xml_Serialization,The following statement contains a magic number: var managerExtra = (IManager)extraInfoRead[2];
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Read_Nillables_From_Standard_Xml_Serialization,The following statement contains a magic number: var group = new Group  			{  				Id = 2'  				Employees = new Employee[] { null' manager }  			};
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: employee.Job = new Employment  			{  				Title = "Consultant"'  				Salary = 100000M  			};
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: group.Id = 2;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: group.Codes = Enumerable.Range(1' 5).ToList();
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: group.ExtraInfo = new object[] { 43' "Extra"' manager };
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: Assert.AreEqual(2' groupRead.Id);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: Assert.AreEqual(2' employeesRead.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: Assert.AreEqual(3' groupRead.ExtraInfo.Length);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: Assert.IsInstanceOf<Manager>(groupRead.ExtraInfo[2]);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_To_Standard_Xml_Serialization,The following statement contains a magic number: var managerExtra = (Manager)groupRead.ExtraInfo[2];
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlAdapterAcceptanceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlAdapterAcceptanceTestCase.cs,Can_Write_Nillables_To_Standard_Xml_Serialization,The following statement contains a magic number: group.Id = 2;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XPathCompilerTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlApis\XPathCompilerTestCase.cs,MultipleSteps,The following statement contains a magic number: Assert.AreEqual(2' p.Depth);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XPathCompilerTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlApis\XPathCompilerTestCase.cs,MultipleStepsWithSelfReference,The following statement contains a magic number: Assert.AreEqual(2' p.Depth);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XPathCompilerTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlApis\XPathCompilerTestCase.cs,PredicateWithMultipleTerms,The following statement contains a magic number: Assert.AreEqual(2' s.Dependencies.Count);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XPathCompilerTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlApis\XPathCompilerTestCase.cs,MultiplePredicates,The following statement contains a magic number: Assert.AreEqual(2' s.Dependencies.Count);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,WithValidXml,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlReferenceManagerTestCase.cs,Set_ValueType,The following statement contains a magic number: var value   = 42 as object;
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,WithValidXml,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlReferenceManagerTestCase.cs,Set_ValueType,The following statement contains a magic number: Assert.AreEqual(42' value);
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,SByte_Roundtrip,The following statement contains a magic number: TestSimpleSerializer((sbyte) 42' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Int16_Roundtrip,The following statement contains a magic number: TestSimpleSerializer((short) 42' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Int32_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(42' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Int64_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(42L' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Byte_Roundtrip,The following statement contains a magic number: TestSimpleSerializer((byte) 42' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,UInt16_Roundtrip,The following statement contains a magic number: TestSimpleSerializer((ushort) 42' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,UInt32_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(42U' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,UInt64_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(42UL' "42");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Single_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(3.1337E+16F' "3.1337E+16");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Double_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(3.1337E+16D' "3.1337E+16");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Decimal_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(3.1337M' "3.1337");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,TimeSpan_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new TimeSpan(1' 2' 3' 4' 567)'  				"P1DT2H3M4.567S");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,TimeSpan_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new TimeSpan(1' 2' 3' 4' 567)'  				"P1DT2H3M4.567S");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,TimeSpan_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new TimeSpan(1' 2' 3' 4' 567)'  				"P1DT2H3M4.567S");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,TimeSpan_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new TimeSpan(1' 2' 3' 4' 567)'  				"P1DT2H3M4.567S");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTime_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTime(2011' 9' 5' 15' 14' 31' 123' DateTimeKind.Utc)'  				"2011-09-05T15:14:31.123Z");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTime_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTime(2011' 9' 5' 15' 14' 31' 123' DateTimeKind.Utc)'  				"2011-09-05T15:14:31.123Z");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTime_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTime(2011' 9' 5' 15' 14' 31' 123' DateTimeKind.Utc)'  				"2011-09-05T15:14:31.123Z");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTime_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTime(2011' 9' 5' 15' 14' 31' 123' DateTimeKind.Utc)'  				"2011-09-05T15:14:31.123Z");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTime_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTime(2011' 9' 5' 15' 14' 31' 123' DateTimeKind.Utc)'  				"2011-09-05T15:14:31.123Z");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTime_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTime(2011' 9' 5' 15' 14' 31' 123' DateTimeKind.Utc)'  				"2011-09-05T15:14:31.123Z");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTime_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTime(2011' 9' 5' 15' 14' 31' 123' DateTimeKind.Utc)'  				"2011-09-05T15:14:31.123Z");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,DateTimeOffset_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(  				new DateTimeOffset(2011' 9' 5' 15' 14' 31' 123' new TimeSpan(-5' 0' 0))'  				"2011-09-05T15:14:31.123-05:00");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,ByteArray_RoundTrip,The following statement contains a magic number: TestSimpleSerializer(new byte[] { 1' 2' 3 }' "AQID");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,ByteArray_RoundTrip,The following statement contains a magic number: TestSimpleSerializer(new byte[] { 1' 2' 3 }' "AQID");
Magic Number,Castle.Components.DictionaryAdapter.Xml.Tests,XmlTypeSerializerTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlTypeSerializerTests.cs,Dynamic_Roundtrip,The following statement contains a magic number: TestSimpleSerializer(42' "42"' typeof(object));
Magic Number,Castle.Core.Internal.Tests,MockAttribute,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\InterfaceAttributeUtilTestCase.cs,GetHashCode,The following statement contains a magic number: return 17  					+ GetType().GetHashCode()  					+ IdComparer.GetHashCode(Id);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterAdd_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterAdd_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterAdd_Keys_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterAdd_Keys_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterAdd_Values_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterAdd_Values_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_Count,The following statement contains a magic number: Assert.AreEqual(2' Dictionary.Count);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_Keys_Count,The following statement contains a magic number: Assert.AreEqual(2' Dictionary.Keys.Count);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_Values_Count,The following statement contains a magic number: Assert.AreEqual(2' Dictionary.Values.Count);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_Keys_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_Keys_CopyTo,The following statement contains a magic number: Assert.AreEqual(original[2]' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,AfterCollect_Values_CopyTo,The following statement contains a magic number: Assert.AreEqual(Item.Value' modified[2]);
Magic Number,Castle.Core.Internal.Tests,WeakKeyDictionaryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Internal\WeakKeyDictionaryTestCase.cs,TriggerAutomaticTrim,The following statement contains a magic number: i < 128
Magic Number,Castle.Core.Logging.Tests,LoggingTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,DebugWithArgs,The following statement contains a magic number: logger.DebugFormat("{0} {1} {2}"' "Debug"' "message"' 3);
Magic Number,Castle.Core.Logging.Tests,LoggingTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,InfoWithArgs,The following statement contains a magic number: logger.InfoFormat("{0} {1} {2}"' "Info"' "message"' 3);
Magic Number,Castle.Core.Logging.Tests,LoggingTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,WarnWithArgs,The following statement contains a magic number: logger.WarnFormat("{0} {1} {2}"' "Warn"' "message"' 3);
Magic Number,Castle.Core.Logging.Tests,LoggingTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,ErrorWithArgs,The following statement contains a magic number: logger.ErrorFormat("{0} {1} {2}"' "Error"' "message"' 3);
Magic Number,Castle.Core.Logging.Tests,LoggingTests,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\Logging\LevelFilteredLoggerTests.cs,FatalErrorWithArgs,The following statement contains a magic number: logger.FatalFormat("{0} {1} {2}"' "FatalError"' "message"' 3);
Magic Number,Castle.Core.Tests,ReflectionBasedDictionaryAdapterTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\ReflectionBasedDictionaryAdapterTestCase.cs,EnumeratorIteration,The following statement contains a magic number: var dict = new ReflectionBasedDictionaryAdapter(new {foo = 1' name = "jonh"' age = 25});
Magic Number,Castle.Core.Tests,ReflectionBasedDictionaryAdapterTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\ReflectionBasedDictionaryAdapterTestCase.cs,EnumeratorIteration,The following statement contains a magic number: Assert.AreEqual(3' dict.Count);
Magic Number,Castle.Core.Tests,ReflectionBasedDictionaryAdapterTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\ReflectionBasedDictionaryAdapterTestCase.cs,Using_anonymous_types_works_without_exception,The following statement contains a magic number: var target = new { foo = 1' name = "john"' age = 25 };
Magic Number,Castle.Core.Tests,ReflectionBasedDictionaryAdapterTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\ReflectionBasedDictionaryAdapterTestCase.cs,Using_anonymous_types_works_without_exception,The following statement contains a magic number: Assert.AreEqual(3' dict.Count);
Magic Number,Castle.Core.Tests,ReflectionBasedDictionaryAdapterTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Core.Tests\ReflectionBasedDictionaryAdapterTestCase.cs,Using_anonymous_types_works_without_exception,The following statement contains a magic number: Assert.AreEqual(25' dict["age"]);
Magic Number,Castle.DynamicProxy.Tests,AccessLevelTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\AccessLevelTestCase.cs,ProtectedMethods,The following statement contains a magic number: Assert.AreEqual(2' logger.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,AsyncInterceptor,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\AsyncInterceptorTestCase.cs,InterceptAsyncMethod,The following statement contains a magic number: await Task.Delay(10).ConfigureAwait(false);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(44' instance.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(44' instance.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(44' instance.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((byte)45' instance.Sum((byte)20' (byte)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((byte)45' instance.Sum((byte)20' (byte)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((byte)45' instance.Sum((byte)20' (byte)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45L' instance.Sum(20L' 25L));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45L' instance.Sum(20L' 25L));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45L' instance.Sum(20L' 25L));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((short)45' instance.Sum((short)20' (short)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((short)45' instance.Sum((short)20' (short)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((short)45' instance.Sum((short)20' (short)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45f' instance.Sum(20f' 25f));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45f' instance.Sum(20f' 25f));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45f' instance.Sum(20f' 25f));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45.0' instance.Sum(20.0' 25.0));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45.0' instance.Sum(20.0' 25.0));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45.0' instance.Sum(20.0' 25.0));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((ushort)45' instance.Sum((ushort)20' (ushort)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((ushort)45' instance.Sum((ushort)20' (ushort)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((ushort)45' instance.Sum((ushort)20' (ushort)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((uint)45' instance.Sum((uint)20' (uint)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((uint)45' instance.Sum((uint)20' (uint)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((uint)45' instance.Sum((uint)20' (uint)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((ulong)45' instance.Sum((ulong)20' (ulong)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((ulong)45' instance.Sum((ulong)20' (ulong)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual((ulong)45' instance.Sum((ulong)20' (ulong)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithIndexer,The following statement contains a magic number: type["name"] = 10;
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithIndexer,The following statement contains a magic number: Assert.AreEqual(10' type["name"]);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassWithInheritance,The following statement contains a magic number: extended.Sum2(1' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassWithInheritance,The following statement contains a magic number: extended.Sum(1' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The following statement contains a magic number: Assert.AreEqual(44' inter.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The following statement contains a magic number: Assert.AreEqual(44' inter.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The following statement contains a magic number: Assert.AreEqual(44' inter.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithConstructors,The following statement contains a magic number: proxy = generator.CreateClassProxy(typeof(ClassWithConstructors)' new object[] {"name"' 10}'  			                                   new StandardInterceptor());
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithConstructors,The following statement contains a magic number: Assert.AreEqual(10' classProxy.X);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyTypeWithMultiDimentionalArrayAsParameters,The following statement contains a magic number: int['] x = new int[1'2];
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,VirtualCallFromCtor,The following statement contains a magic number: Assert.AreEqual(7' proxy.Result);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassImplementingInterfaceVitrually,The following statement contains a magic number: var interceptor = new SetReturnValueInterceptor(123);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassImplementingInterfaceVitrually,The following statement contains a magic number: Assert.AreEqual(123' (proxy as ClassWithVirtualInterface).Do());
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassImplementingInterfaceVitrually,The following statement contains a magic number: Assert.AreEqual(123' (proxy as ISimpleInterface).Do());
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,BasicInterfaceProxyWithValidTarget,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,BasicInterfaceProxyWithValidTarget,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,InterfaceInheritance,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,InterfaceInheritance,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ProxyTypeWithMultiDimentionalArrayAsParameter,The following statement contains a magic number: proxy.Do(new[] { 1' 2' 3 });
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ProxyTypeWithMultiDimentionalArrayAsParameter,The following statement contains a magic number: proxy.Do(new[] { 1' 2' 3 });
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ProxyTypeWithMultiDimentionalArrayAsParameter,The following statement contains a magic number: proxy.Do2(new['] { { 1' 2 }' { 3' 4 } });
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ProxyTypeWithMultiDimentionalArrayAsParameter,The following statement contains a magic number: proxy.Do2(new['] { { 1' 2 }' { 3' 4 } });
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ProxyTypeWithMultiDimentionalArrayAsParameter,The following statement contains a magic number: proxy.Do2(new['] { { 1' 2 }' { 3' 4 } });
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ChangingInvocationTargetSucceeds,The following statement contains a magic number: Assert.AreEqual(20' service.Sum(10' 10));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ChangingInvocationTargetSucceeds,The following statement contains a magic number: Assert.AreEqual(20' service.Sum(10' 10));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ChangingInvocationTargetSucceeds,The following statement contains a magic number: Assert.AreEqual(20' service.Sum(10' 10));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,BasicInterfaceProxyWithValidTarget_ThrowsIfInterceptorCallsProceed,The following statement contains a magic number: var exception = (NotImplementedException) Assert.Throws(typeof (NotImplementedException)' () =>  			                                                                                          service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: var service = (IService)  			              generator.CreateInterfaceProxyWithoutTarget(  			              	typeof (IService)' new SetReturnValueInterceptor(3));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: var result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: var result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanThrowExceptionFromInterceptorOfInterfaceMethod,The following statement contains a magic number: var ex = Assert.Throws<ThrowingInterceptorException>(() => service.Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanThrowExceptionFromInterceptorOfInterfaceMethod,The following statement contains a magic number: var ex = Assert.Throws<ThrowingInterceptorException>(() => service.Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: var service = (IService)  			              generator.CreateInterfaceProxyWithoutTarget(  			              	typeof (IService)' new AssertCannotChangeTargetInterceptor()' new SetReturnValueInterceptor(3));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: var result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: var result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Can_pass_params_arguments_inline_implicitly,The following statement contains a magic number: generator.CreateClassProxy(typeof(HasCtorWithIntAndParamsArgument)' new object[] { 5 });
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_class_with_no_default_ctor,The following statement contains a magic number: var proxy = generator.CreateClassProxyWithTarget(typeof(VirtualClassWithNoDefaultCtor)'  			                                                 new VirtualClassWithNoDefaultCtor(42)'  			                                                 new object[] {12});
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_class_with_no_default_ctor,The following statement contains a magic number: var proxy = generator.CreateClassProxyWithTarget(typeof(VirtualClassWithNoDefaultCtor)'  			                                                 new VirtualClassWithNoDefaultCtor(42)'  			                                                 new object[] {12});
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_class_with_no_default_ctor,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_virtual_class_with_protected_generic_method,The following statement contains a magic number: var proxy = generator.CreateClassProxyWithTarget(new VirtualClassWithProtectedGenericMethod(42));
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_virtual_class_with_protected_generic_method,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_class_with_protected_generic_method,The following statement contains a magic number: var proxy = generator.CreateClassProxyWithTarget(new ClassWithProtectedGenericMethod(42));
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_class_with_protected_generic_method,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_virtual_class_with_protected_method,The following statement contains a magic number: var proxy = generator.CreateClassProxyWithTarget(new VirtualClassWithProtectedMethod(42));
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_virtual_class_with_protected_method,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_class_with_protected_method,The following statement contains a magic number: var proxy = generator.CreateClassProxyWithTarget(new ClassWithProtectedMethod(42));
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_class_with_protected_method,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_purely_virtual_class,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.DynamicProxy.Tests,ClassProxyWithTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassProxyWithTargetTestCase.cs,Can_proxy_purely_virtual_inherited_abstract_class,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(2' att.Num);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(2' att.Id);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(3' att.Num);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(3' att.Id);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(4' att.Num);
Magic Number,Castle.DynamicProxy.Tests,ConstructorWithAttributesOnParametersTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ConstructorWithAttributesOnParametersTestCase.cs,CustomAttributesOnParametersAreCopiedToProxiedObjectConstructor,The following statement contains a magic number: var requiredObj = generator.CreateClassProxy(typeof(ClassWithAttributesOnConstructorParameters)' new object[] { 10'"" });
Magic Number,Castle.DynamicProxy.Tests,ConstructorWithAttributesOnParametersTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ConstructorWithAttributesOnParametersTestCase.cs,CustomAttributesOnParametersAreCopiedToProxiedObjectConstructor,The following statement contains a magic number: Assert.AreEqual(2' paramWithRequiredAttributeCount);
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Constructor_Arguments_Are_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Constructor_Arguments_Are_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Constructor_Arguments_Are_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Constructor_Arguments_Are_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Constructor_Arguments_Are_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Constructor_Arguments_Are_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Different_Type_With_Same_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Different_Type_With_Same_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Different_Type_With_Same_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Different_Type_With_Same_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute2(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Different_Type_With_Same_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute2(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Different_Type_With_Same_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute2(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(99' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(99' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(99' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Array_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Array_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Array_Arguments_Are_Not_Equal,The following statement contains a magic number: var x = CustomAttributeInfo.FromExpression(() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Array_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(99' "foo"' new[] { 1' 2' 4 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Array_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(99' "foo"' new[] { 1' 2' 4 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Constructor_Array_Arguments_Are_Not_Equal,The following statement contains a magic number: var y = CustomAttributeInfo.FromExpression(() => new MyAttribute1(99' "foo"' new[] { 1' 2' 4 }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Properties_Are_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Properties_Are_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Properties_Are_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Properties_Are_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Properties_Are_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Properties_Are_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Properties_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Properties_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Properties_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Properties_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 99' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Properties_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 99' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Properties_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 99' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Properties_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Properties_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Properties_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Properties_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 99' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 4 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Properties_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 99' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 4 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Properties_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { IntProperty = 99' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 4 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Fields_Are_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Fields_Are_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Fields_Are_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Fields_Are_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Fields_Are_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Same_Fields_Are_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Fields_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Fields_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Fields_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Fields_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 99' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Fields_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 99' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Fields_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 99' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Fields_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Fields_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Fields_Are_Not_Equal,The following statement contains a magic number: var x =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Fields_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 99' stringField = "foo"' arrayField = new[] { 1' 2' 4 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Fields_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 99' stringField = "foo"' arrayField = new[] { 1' 2' 4 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,Attributes_Of_Same_Type_With_Different_Array_Fields_Are_Not_Equal,The following statement contains a magic number: var y =  				CustomAttributeInfo.FromExpression(  					() => new MyAttribute1 { intField = 99' stringField = "foo"' arrayField = new[] { 1' 2' 4 } });
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 })'  				new CustomAttributeInfo(ctorWithArgs' new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 })'  				new CustomAttributeInfo(ctorWithArgs' new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 })'  				new CustomAttributeInfo(ctorWithArgs' new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 })'  				new CustomAttributeInfo(ctorWithArgs' new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 })'  				new CustomAttributeInfo(ctorWithArgs' new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1(42' "foo"' new[] { 1' 2' 3 })'  				new CustomAttributeInfo(ctorWithArgs' new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new [] {intProperty' stringProperty' arrayProperty}'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new [] {intProperty' stringProperty' arrayProperty}'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new [] {intProperty' stringProperty' arrayProperty}'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new [] {intProperty' stringProperty' arrayProperty}'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new [] {intProperty' stringProperty' arrayProperty}'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { IntProperty = 42' StringProperty = "foo"' ArrayProperty = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new [] {intProperty' stringProperty' arrayProperty}'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new[] { intField' stringField' arrayField }'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new[] { intField' stringField' arrayField }'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new[] { intField' stringField' arrayField }'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new[] { intField' stringField' arrayField }'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new[] { intField' stringField' arrayField }'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: yield return CreateFromExpressionTestCase(  				() => new MyAttribute1 { intField = 42' stringField = "foo"' arrayField = new[] { 1' 2' 3 } }'  				new CustomAttributeInfo(  					defaultCtor'  					new object[0]'  					new[] { intField' stringField' arrayField }'  					new object[] { 42' "foo"' new[] { 1' 2' 3 } }));
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: int arg1 = 42;
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: int[] arg3 = { 1' 2' 3 };
Magic Number,Castle.DynamicProxy.Tests,CustomAttributeInfoTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\CustomAttributeInfoTestCase.cs,FromExpressionTestCases,The following statement contains a magic number: int[] arg3 = { 1' 2' 3 };
Magic Number,Castle.DynamicProxy.Tests,DelegateMixinTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateMixinTestCase.cs,Can_mixin_several_different_delegate_types_simultaneously,The following statement contains a magic number: intAction.Invoke(42);
Magic Number,Castle.DynamicProxy.Tests,Target,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateMixinTestCase.cs,CompareTo,The following statement contains a magic number: return 123;
Magic Number,Castle.DynamicProxy.Tests,DelegateProxyTestCasE,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateProxyTestCase.cs,Can_intercept_call_to_delegate,The following statement contains a magic number: var proxy = GetProxyInstance<Func<int>>(() =>  			                                        	{  			                                        		Assert.Fail("Shouldn't have gone that far");  			                                        		return 5;  			                                        	}' new SetReturnValueInterceptor(3));
Magic Number,Castle.DynamicProxy.Tests,DelegateProxyTestCasE,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateProxyTestCase.cs,Can_intercept_call_to_delegate,The following statement contains a magic number: var proxy = GetProxyInstance<Func<int>>(() =>  			                                        	{  			                                        		Assert.Fail("Shouldn't have gone that far");  			                                        		return 5;  			                                        	}' new SetReturnValueInterceptor(3));
Magic Number,Castle.DynamicProxy.Tests,DelegateProxyTestCasE,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateProxyTestCase.cs,Can_intercept_call_to_delegate,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,DelegateProxyTestCasE,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateProxyTestCase.cs,Can_intercept_call_to_delegate_no_target,The following statement contains a magic number: var proxy = GetProxyInstance<Func<int>>(null' new SetReturnValueInterceptor(3));
Magic Number,Castle.DynamicProxy.Tests,DelegateProxyTestCasE,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateProxyTestCase.cs,Can_intercept_call_to_delegate_no_target,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,DelegateProxyTestCasE,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateProxyTestCase.cs,Can_proxy_delegate_with_no_target,The following statement contains a magic number: var proxy = GetProxyInstance<Func<int>>(() => 5);
Magic Number,Castle.DynamicProxy.Tests,DelegateProxyTestCasE,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\DelegateProxyTestCase.cs,Can_proxy_delegate_with_no_target,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitGenericInterface,The following statement contains a magic number: var result = proxy.DoSomething(4);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitGenericInterface,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitGenericMethod_with_base_call,The following statement contains a magic number: Assert.AreEqual(7' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitGenericMethod_without_base_call,The following statement contains a magic number: var proxy = (IGenericInterface)generator.CreateClassProxy(typeof(GenericMethodExplicit)'  			                                                          new[] { typeof(IGenericInterface) }'  			                                                          interceptor'  			                                                          new SetReturnValueInterceptor(5));
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitGenericMethod_without_base_call,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithBaseCalls,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithoutBaseCalls,The following statement contains a magic number: Assert.AreEqual(3' interceptor.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithoutBaseCalls,The following statement contains a magic number: Assert.AreEqual("DoVirtual"' interceptor.Invocations[2]);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitMethodOutArguments,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitMethodRefArguments,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,NonVirtualExplicitInterfaceMethods_AreIgnored_OnClassProxy,The following statement contains a magic number: Assert.AreEqual(2' interceptor.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,NonVirtualExplicitInterfaceMethods_AreIgnored_OnClassProxy,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(13' hook.AskedMembers.Count' "Asked members");
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(2' hook.NonVirtualMembers.Count' "Non-virtual members");
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForConcreteClassProxy,The following statement contains a magic number: proxy.Sum(1' 2);
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForInterfaceProxy,The following statement contains a magic number: Assert.AreEqual(10' hook.AskedMembers.Count);
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForInterfaceProxy,The following statement contains a magic number: Assert.AreEqual(3' proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForInterfaceProxy,The following statement contains a magic number: Assert.AreEqual(3' proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookDetectsNonVirtualAlthoughInterfaceImplementation,The following statement contains a magic number: Assert.AreEqual(3' hook.AskedMembers.Count);
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenerationHookTestCase.cs,HookDetectsNonVirtualAlthoughInterfaceImplementation,The following statement contains a magic number: Assert.AreEqual(11' hook.NonVirtualMembers.Count);
Magic Number,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericClassProxyTestCase.cs,GenericProxyWithIndexer,The following statement contains a magic number: type["name"] = 10;
Magic Number,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericClassProxyTestCase.cs,GenericProxyWithIndexer,The following statement contains a magic number: Assert.AreEqual(10' type["name"]);
Magic Number,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericClassProxyTestCase.cs,ProxyWithGenericArgumentsAndMethodGenericArgumentsWithOneNotDefinedOnType,The following statement contains a magic number: int value1 = 10;
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenericArgumentAndGenericMethod,The following statement contains a magic number: proxy.DoSomething(10L' 1);
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenericArgumentAndGenericMethodAndGenericReturn,The following statement contains a magic number: Assert.AreEqual(10L' proxy.DoSomething(10L' 1));
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenericArgumentAndGenericMethodAndGenericReturn,The following statement contains a magic number: Assert.AreEqual(10L' proxy.DoSomething(10L' 1));
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenInterfaceWithGenericArrays,The following statement contains a magic number: var items = new[] { 1' 2' 3 };
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenInterfaceWithGenericArrays,The following statement contains a magic number: var items = new[] { 1' 2' 3 };
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenInterfaceWithGenericArrays,The following statement contains a magic number: Assert.AreEqual(3' items.Length);
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,TypeGetMethodsIsStable,The following statement contains a magic number: Assert.AreEqual(4' typeof(IGenInterfaceHierarchyBase<int>).GetMethods().Length);
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,MethodFinderIsStable,The following statement contains a magic number: Assert.AreEqual(4' MethodFinder.GetAllInstanceMethods(  				typeof(IGenInterfaceHierarchyBase<int>)' BindingFlags.Public | BindingFlags.Instance).Length);
Magic Number,Castle.DynamicProxy.Tests,InheritedInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InheritedInterfacesTestCase.cs,Should_not_have_duplicated_events_for_interface_proxy_with_inherited_target_and_two_inherited_additional_interfaces,The following statement contains a magic number: Assert.AreEqual(3' events.Length);
Magic Number,Castle.DynamicProxy.Tests,InheritedInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InheritedInterfacesTestCase.cs,Should_not_have_duplicated_properties_for_interface_proxy_with_inherited_target_and_two_inherited_additional_interfaces,The following statement contains a magic number: Assert.AreEqual(3' properties.Length);
Magic Number,Castle.DynamicProxy.Tests,InParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InParamsTestCase.cs,By_value_parameter_cannot_modify_argument_var,The following statement contains a magic number: var different = new ReadOnlyStruct(x.Value + 100);
Magic Number,Castle.DynamicProxy.Tests,InParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InParamsTestCase.cs,By_referece_In_parameter_cannot_modify_argument_var,The following statement contains a magic number: var different = new ReadOnlyStruct(x.Value + 100);
Magic Number,Castle.DynamicProxy.Tests,InParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InParamsTestCase.cs,By_reference_Ref_parameter_can_modify_argument_var,The following statement contains a magic number: var different = new ReadOnlyStruct(x.Value + 100);
Magic Number,Castle.DynamicProxy.Tests,InParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InParamsTestCase.cs,By_reference_Out_parameter_can_modify_argument_var,The following statement contains a magic number: var different = new ReadOnlyStruct(x.Value + 100);
Magic Number,Castle.DynamicProxy.Tests,InterceptionRetryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptionRetryTestCase.cs,Interceptor_can_proceed_multiple_times,The following statement contains a magic number: var interceptor = new ProceedNTimesInterceptor(3);
Magic Number,Castle.DynamicProxy.Tests,InterceptionRetryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptionRetryTestCase.cs,Interceptor_can_proceed_multiple_times,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,Castle.DynamicProxy.Tests,InterceptionRetryTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptionRetryTestCase.cs,Interceptor_can_proceed_multiple_times_after_exception_from_within,The following statement contains a magic number: var interceptor = new ProceedNTimesInterceptor(5);
Magic Number,Castle.DynamicProxy.Tests,Foo,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTargetTypeTestCase.cs,Bar,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests,Foo,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTargetTypeTestCase.cs,Test,The following statement contains a magic number: return new IntPtr(3);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForGenericMethods,The following statement contains a magic number: Assert.AreEqual(2' countingInterceptor.Count);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForMethods,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForMixins,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForMultipleGenericMethods,The following statement contains a magic number: Assert.AreEqual(2' countingInterceptor.Count);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForProperties,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The following statement contains a magic number: var proxy1 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options1' new SetReturnValueInterceptor(2));
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The following statement contains a magic number: var proxy2 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options2' new SetReturnValueInterceptor(2));
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy1 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy1 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy2 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy2 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Can_proxy_same_type_with_and_without_selector_InterfaceProxyWithTarget2,The following statement contains a magic number: var someInstanceOfProxyWithSelector2 = (IService2)generator.CreateInterfaceProxyWithTarget(typeof(IService2)' new Service2()'  			                                                                                           new ProxyGenerationOptions { Selector = new SelectorWithState(2) }'  			                                                                                           new StandardInterceptor());
Magic Number,Castle.DynamicProxy.Tests,SimpleClass,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Do,The following statement contains a magic number: return 3;
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceAdditionalInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceAdditionalInterfacesTestCase.cs,Can_call_target__method_with_out_argument,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceAdditionalInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceAdditionalInterfacesTestCase.cs,Can_call_target__method_with_ref_argument,The following statement contains a magic number: var result = 2;
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceAdditionalInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceAdditionalInterfacesTestCase.cs,Can_call_target__method_with_ref_argument,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,When_target_does_implement_additional_interface_method_should_forward,The following statement contains a magic number: Assert.AreEqual(2' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,TargetInterface_methods_should_be_forwarded_to_target,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Mixin_methods_should_be_forwarded_to_target_if_implements_mixin_interface,The following statement contains a magic number: Assert.AreEqual(2' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Invocation_should_be_IChangeInvocationTarget_for_AdditionalInterfaces_methods,The following statement contains a magic number: Assert.AreEqual(20' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Invocation_should_be_IChangeInvocationTarget_for_target_methods,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Invocation_should_be_IChangeInvocationTarget_for_Mixin_methods,The following statement contains a magic number: Assert.AreEqual(2' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Null_target_can_be_replaced,The following statement contains a magic number: Assert.AreEqual(3' ((IOne) proxy).OneMethod());
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,ClassProxy_MethodInvocationTarget_should_be_base_Method,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,ClassProxy_MethodInvocationTarget_should_be_base_Method,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_null,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_null,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_updated_when_target_changes,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_updated_when_target_changes,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,ProceedInfo_Invoke_proceeds_to_same_interceptor_on_repeated_calls,The following statement contains a magic number: Assert.AreEqual(2' secondInterceptorInvokeCount);
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,ProceedInfo_Invoke_of_different_instances_captured_at_same_time_proceed_to_same_interceptor,The following statement contains a magic number: Assert.AreEqual(2' secondInterceptorInvokeCount);
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,Proxy_with_several_interceptors_ProceedInfo_Invoke_proceeds_in_correct_order,The following statement contains a magic number: var interceptors = new IInterceptor[]  			{  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(1); // (This statement is expected to be the first one  					                    //  recorded' because it has the smallest number.)  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(5); // (This statement is expected to be the last one  					                    //  recorded' because it has the largest number.)  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(2);  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(4);  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(3);  					invocation.ReturnValue = 42;  				})'  			};
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,Proxy_with_several_interceptors_ProceedInfo_Invoke_proceeds_in_correct_order,The following statement contains a magic number: var interceptors = new IInterceptor[]  			{  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(1); // (This statement is expected to be the first one  					                    //  recorded' because it has the smallest number.)  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(5); // (This statement is expected to be the last one  					                    //  recorded' because it has the largest number.)  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(2);  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(4);  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(3);  					invocation.ReturnValue = 42;  				})'  			};
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,Proxy_with_several_interceptors_ProceedInfo_Invoke_proceeds_in_correct_order,The following statement contains a magic number: var interceptors = new IInterceptor[]  			{  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(1); // (This statement is expected to be the first one  					                    //  recorded' because it has the smallest number.)  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(5); // (This statement is expected to be the last one  					                    //  recorded' because it has the largest number.)  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(2);  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(4);  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(3);  					invocation.ReturnValue = 42;  				})'  			};
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,Proxy_with_several_interceptors_ProceedInfo_Invoke_proceeds_in_correct_order,The following statement contains a magic number: var interceptors = new IInterceptor[]  			{  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(1); // (This statement is expected to be the first one  					                    //  recorded' because it has the smallest number.)  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(5); // (This statement is expected to be the last one  					                    //  recorded' because it has the largest number.)  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(2);  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(4);  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(3);  					invocation.ReturnValue = 42;  				})'  			};
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,Proxy_with_several_interceptors_ProceedInfo_Invoke_proceeds_in_correct_order,The following statement contains a magic number: var interceptors = new IInterceptor[]  			{  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(1); // (This statement is expected to be the first one  					                    //  recorded' because it has the smallest number.)  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(5); // (This statement is expected to be the last one  					                    //  recorded' because it has the largest number.)  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(2);  					var proceed = invocation.CaptureProceedInfo();  					proceed.Invoke();  					breadcrumbs.Add(4);  				})'  				new WithCallbackInterceptor(invocation =>  				{  					breadcrumbs.Add(3);  					invocation.ReturnValue = 42;  				})'  			};
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,Proxy_with_several_interceptors_ProceedInfo_Invoke_proceeds_in_correct_order,The following statement contains a magic number: Assert.AreEqual(42' returnValue);
Magic Number,Castle.DynamicProxy.Tests,InvocationProceedTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationProceedTestCase.cs,Proxy_with_several_interceptors_ProceedInfo_Invoke_proceeds_in_correct_order,The following statement contains a magic number: CollectionAssert.AreEqual(Enumerable.Range(1' 5)' breadcrumbs);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(2' interceptor.Invocation.Arguments.Length);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.Arguments[0]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.Arguments[1]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.GetArgumentValue(0));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.GetArgumentValue(1));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(45' interceptor.Invocation.ReturnValue);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(2' interceptor.Invocation.Arguments.Length);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.Arguments[0]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.Arguments[1]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.GetArgumentValue(0));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.GetArgumentValue(1));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(45' interceptor.Invocation.ReturnValue);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,MixinsAreSortedByInterface,The following statement contains a magic number: Assert.AreEqual(2' mixins1.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,MixinsAreSortedByInterface,The following statement contains a magic number: Assert.AreEqual(2' mixins2.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,MixinInterfaces_SortedLikeMixins,The following statement contains a magic number: Assert.AreEqual(2' mixinInterfaces1.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,MixinInterfaces_SortedLikeMixins,The following statement contains a magic number: Assert.AreEqual(2' mixinInterfaces2.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreEqual(2' mixinData.GetMixinPosition(typeof(ISimpleMixin)));
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreEqual(3' mixinData.GetMixinPosition(typeof(IThird)));
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreSame(simpleMixin' mixins[2]);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreSame(complexMixin' mixins[3]);
Magic Number,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinTestCase.cs,TwoMixins,The following statement contains a magic number: Assert.AreEqual(3' other.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\MixinTestCase.cs,TwoMixins,The following statement contains a magic number: Assert.AreEqual(3' other.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_double_parameters,The following statement contains a magic number: Assert.DoesNotThrow(() => result = proxy.Sum(1D' 2D));
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_IntPtr,The following statement contains a magic number: var result = new IntPtr(123);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_Nullable_parameters,The following statement contains a magic number: var result = new int?(5);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_Nullable_parameters,The following statement contains a magic number: result = new int?(5);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_Nullable_parameters,The following statement contains a magic number: result = new int?(5);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_out_decimal,The following statement contains a magic number: decimal result = 12M;
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_out_IntPtr,The following statement contains a magic number: var result = new IntPtr(123);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method_explicit,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method_out_ref_parameters,The following statement contains a magic number: Assert.AreEqual(5' result[0]);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method_out_ref_parameters,The following statement contains a magic number: Assert.AreEqual(5' result[0]);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_WithTarget,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_WithTargetInterface,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_explicit_WithTarget,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_explicit_WithTargetInterface,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_out_ref_parameters_WithTarget,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_out_ref_parameters_WithTarget,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_out_ref_parameters_WithTargetInterface,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_out_ref_parameters_WithTargetInterface,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_withouth_target_and_mixin_should_forward_to_null_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_withouth_target_and_mixin_should_forward_to_null_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_of_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_of_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_and_additionalInterface_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_with_derived_target_interface_forwards_base_to_target_derived_to_mixin,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_and_target_implement_additionalInterface_forwards_to_target,The following statement contains a magic number: Assert.AreEqual(3' (proxy as ISimpleMixin).DoSomething());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_and_target_implement_additionalInterface_forwards_to_target,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_same_as_additionalInterface_forwards_to_mixin,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_with_derived_base_forwards_to_mixin,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanAffectValueOfOutParameter,The following statement contains a magic number: var interceptor =  				new WithCallbackInterceptor(delegate(IInvocation invocation) { invocation.Arguments[0] = 5; });
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanAffectValueOfOutParameter,The following statement contains a magic number: Assert.AreEqual(5' i);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: var i = 3;
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: var interceptor = new WithCallbackInterceptor(delegate(IInvocation invocation)  			{  				invocation.Arguments[0] = 5;  				invocation.Arguments[1] = "aaa";  				invocation.Arguments[3] = "bbb";  			});
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: var interceptor = new WithCallbackInterceptor(delegate(IInvocation invocation)  			{  				invocation.Arguments[0] = 5;  				invocation.Arguments[1] = "aaa";  				invocation.Arguments[3] = "bbb";  			});
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: Assert.AreEqual(5' i);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateProxyWithRefParam,The following statement contains a magic number: var i = 3;
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateProxyWithRefParam,The following statement contains a magic number: var interceptor =  				new WithCallbackInterceptor(delegate(IInvocation invocation) { invocation.Arguments[0] = 5; });
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateProxyWithRefParam,The following statement contains a magic number: Assert.AreEqual(5' i);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateProxyWithStructRefParam,The following statement contains a magic number: var s = new MyStruct(10);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,CanCreateProxyWithStructRefParam,The following statement contains a magic number: Assert.AreEqual(20' s.Value);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_class_proxy_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(42' retVal);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_class_proxy_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_class_proxy_mixin_uncaught,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_class_proxy_uncaught,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_class_proxy_with_target_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(42' retVal);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_class_proxy_with_target_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_class_proxy_with_target_uncaught,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_interface_proxy_with_target_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(42' retVal);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_interface_proxy_with_target_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_interface_proxy_with_target_interface_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(42' retVal);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_interface_proxy_with_target_interface_caught_by_interceptor,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_interface_proxy_with_target_interface_uncaught,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,OutRefParamsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,Exception_during_method_out_ref_arguments_set_interface_proxy_with_target_uncaught,The following statement contains a magic number: Assert.AreEqual(23' param1);
Magic Number,Castle.DynamicProxy.Tests,ClassHasMethodThrowException,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,MethodWithRefParam,The following statement contains a magic number: refParam = 23;
Magic Number,Castle.DynamicProxy.Tests,ClassHasMethodThrowException,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,MethodWithRefParam,The following statement contains a magic number: refParam == 23
Magic Number,Castle.DynamicProxy.Tests,ClassHasMethodThrowException,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,MethodWithRefParam,The following statement contains a magic number: return 42;
Magic Number,Castle.DynamicProxy.Tests,MyClass,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\OutRefParamsTestCase.cs,MyMethodWithStruct,The following statement contains a magic number: s.Value = 2*s.Value;
Magic Number,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,MixinData_ReInitializeWhenMixinsChanged,The following statement contains a magic number: Assert.AreEqual (2' new List<object>(data2.Mixins).Count);
Magic Number,Castle.DynamicProxy.Tests,ProxyUtilTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\ProxyUtilTestCase.cs,CreateDelegateToMixin_can_deal_with_multiple_Invoke_overloads,The following statement contains a magic number: intAction.Invoke(42);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,CanGetCorrectValuesFromIntPtr,The following statement contains a magic number: var buffer = o.Buffer(15);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal,The following statement contains a magic number: var target =  				generator.CreateInterfaceProxyWithoutTarget<IDecimalOutParam>(new SetOutputParameter(1.234M));
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal,The following statement contains a magic number: Assert.AreEqual(1.234M' fuel);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal_UsingGenericMethods,The following statement contains a magic number: var target =  				generator.CreateInterfaceProxyWithoutTarget<IDecimalOutParam>(new SetOutputParameter(1.234M));
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal_UsingGenericMethods,The following statement contains a magic number: Assert.AreEqual(1.234M' fuel);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,GenericClassWithGenericMethodWitoutTarget,The following statement contains a magic number: var interceptor = new SetReturnValueInterceptor(3);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,GenericClassWithGenericMethodWitoutTarget,The following statement contains a magic number: Assert.AreEqual(3' o);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,InternalClassWithInternalMethodAndProperty,The following statement contains a magic number: Assert.AreEqual(2' logging.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,UsingEvents_Class,The following statement contains a magic number: Assert.AreEqual(2' logger.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,UsingEvents_Interface,The following statement contains a magic number: Assert.AreEqual(2' logger.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,SkipCallingMethodInterceptorWithOutputParams,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\RhinoMocksTestCase.cs,Intercept,The following statement contains a magic number: invocation.ReturnValue = 5;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassCallingVirtualMethodFromCtor,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassCallingVirtualMethodFromCtor.cs,VirtualMethod,The following statement contains a magic number: return 7;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassOverridingEqualsAndGetHashCode,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassOverridingEqualsAndGetHashCode.cs,GetHashCode,The following statement contains a magic number: int hash = 7;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassOverridingEqualsAndGetHashCode,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassOverridingEqualsAndGetHashCode.cs,GetHashCode,The following statement contains a magic number: hash = 31*hash + Id.GetHashCode();
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithAsynchronousMethod,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassWithAsynchronousMethod.cs,Method,The following statement contains a magic number: await Task.Delay(10).ConfigureAwait(false);
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithExplicitInterface,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassWithExplicitInterface.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithExplicitInterface,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassWithExplicitInterface.cs,DoVirtual,The following statement contains a magic number: return 7;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithInterface,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassWithInterface.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithVirtualInterface,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\ClassWithVirtualInterface.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Age = 10;
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Age2 = 11;
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Maxval = 12;
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Maxval2 = 13;
Magic Number,Castle.DynamicProxy.Tests.Classes,HasTwoProtectedMethods,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\HasTwoProtectedMethods.cs,Method1,The following statement contains a magic number: return 42;
Magic Number,Castle.DynamicProxy.Tests.Classes,InheritsAbstractClassWithMethod,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\InheritsAbstractClassWithMethod.cs,Method,The following statement contains a magic number: return 42;
Magic Number,Castle.DynamicProxy.Tests.Classes,VirtualClassWithMethod,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\VirtualClassWithMethod.cs,Method,The following statement contains a magic number: return 42;
Magic Number,Castle.DynamicProxy.Tests.Classes,VirtualClassWithPublicField,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Classes\VirtualClassWithPublicField.cs,Method,The following statement contains a magic number: return 42;
Magic Number,Castle.DynamicProxy.Tests.Explicit,GenericMethodExplicit,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Explicit\GenericMethodExplicit.cs,GenericMethod,The following statement contains a magic number: return (T)(object)7;
Magic Number,Castle.DynamicProxy.Tests.Explicit,SimpleInterfaceExplicit,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Explicit\SimpleInterfaceExplicit.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Explicit,SimpleInterfaceExplicit,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Explicit\SimpleInterfaceExplicit.cs,DoVirtual,The following statement contains a magic number: return 7;
Magic Number,Castle.DynamicProxy.Tests.Explicit,TwoInterfacesExplicit,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Explicit\TwoInterfacesExplicit.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Explicit,WithRefOutExplicit,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Explicit\WithRefOutExplicit.cs,Did,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.Explicit,WithRefOutExplicit,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Explicit\WithRefOutExplicit.cs,Do,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.GenClasses,SubClassWithGenArgs<T;Z;Y>,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\GenClasses\ClassWithGenArgs.cs,DoSomething,The following statement contains a magic number: int x = 1 + 10;
Magic Number,Castle.DynamicProxy.Tests.Interceptors,AddTwoInterceptor,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Interceptors\AddTwoInterceptor.cs,Intercept,The following statement contains a magic number: ret += 2;
Magic Number,Castle.DynamicProxy.Tests.InterClasses,OneTwo,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterClasses\OneTwo.cs,OneMethod,The following statement contains a magic number: return 3;
Magic Number,Castle.DynamicProxy.Tests.InterClasses,OneTwo,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterClasses\OneTwo.cs,TwoMethod,The following statement contains a magic number: return 2;
Magic Number,Castle.DynamicProxy.Tests.InterClasses,Two,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterClasses\Two.cs,TwoMethod,The following statement contains a magic number: return 20;
Magic Number,Castle.DynamicProxy.Tests.InterClasses,WithRefOut,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterClasses\WithRefOut.cs,Do,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.InterClasses,WithRefOut,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterClasses\WithRefOut.cs,Did,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.InterClasses,WithRefOutAndEmpty,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterClasses\WithRefOutEmpty.cs,Did,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.InterClasses,WithRefOutAndEmpty,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\InterClasses\WithRefOutEmpty.cs,Do,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.Mixins,ClassImplementingIDerivedSimpleMixin,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Mixins\ClassImplementingIDerivedSImpleMixin.cs,DoSomething,The following statement contains a magic number: return 3;
Magic Number,Castle.DynamicProxy.Tests.Mixins,ClassImplementingIDerivedSimpleMixin,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\Mixins\ClassImplementingIDerivedSImpleMixin.cs,DoSomethingDerived,The following statement contains a magic number: return 2;
Missing Default,Castle.Components.DictionaryAdapter.Xml.Tests,TestScenario,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\Components.DictionaryAdapter.Tests\Xml\XmlReferenceManagerTestCase.cs,SetValue,The following switch statement is missing a default case: switch (expectedResult)  				{  					case SetResult.ProceedUntracked:  						Assert.True(proceed);  						Assert.AreEqual(newValue' value);  						Assert.IsNull(token);  						break;    					case SetResult.ProceedTracked:  						Assert.True(proceed);  						Assert.AreEqual(newValue' value);  						Assert.NotNull(token);  						Manager.OnAssignedValue(node' value' value' token);  						break;    					case SetResult.Return:  						Assert.False(proceed);  						Assert.AreEqual(newValue' value);  						Assert.IsNull(token);  						break;  				}
Missing Default,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,CreateProxyWithAdditionalInterface,The following switch statement is missing a default case: switch (kind)  			{  				case ProxyKind.Class:  					return (TType) generator.CreateClassProxy(typeof (object)' interfaces' options);  				case ProxyKind.WithoutTarget:  					return (TType) generator.CreateInterfaceProxyWithoutTarget(typeof (IEmpty)' interfaces' options);  				case ProxyKind.WithTarget:  					return (TType) generator.CreateInterfaceProxyWithTarget(typeof (IEmpty)' interfaces' new Empty()' options);  				case ProxyKind.WithTargetInterface:  					return (TType) generator.CreateInterfaceProxyWithTargetInterface(typeof (IEmpty)' interfaces' new Empty()' options);  			}
Missing Default,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Core\src\Castle.Core.Tests\DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,CreateProxyWithMixin,The following switch statement is missing a default case: switch (kind)  			{  				case ProxyKind.Class:  					return (TType) generator.CreateClassProxy(typeof (object)' Type.EmptyTypes' options);  				case ProxyKind.WithoutTarget:  					return (TType) generator.CreateInterfaceProxyWithoutTarget(typeof (IEmpty)' Type.EmptyTypes' options);  				case ProxyKind.WithTarget:  					return (TType) generator.CreateInterfaceProxyWithTarget(typeof (IEmpty)' Type.EmptyTypes' new Empty()' options);  				case ProxyKind.WithTargetInterface:  					return (TType) generator.CreateInterfaceProxyWithTargetInterface(typeof (IEmpty)' new Empty()' options);  			}
