Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,Cyclomatic complexity of the method is 11
Complex Method,SoundFingerprinting.InMemory,TrackDao,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\InMemory\TrackDao.cs,DeleteTrack,Cyclomatic complexity of the method is 9
Complex Method,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,Cyclomatic complexity of the method is 17
Complex Method,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateScenarious,Cyclomatic complexity of the method is 12
Long Parameter List,SoundFingerprinting.Query,ConfidenceCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\ConfidenceCalculator.cs,CalculateConfidence,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Query,ConfidenceCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\ConfidenceCalculator.cs,GetConfidenceForSmallSnippetFoundInLongOrigin,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Query,ConfidenceCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\ConfidenceCalculator.cs,GetConfidenceForSmallSnippetFoundInLongQuery,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Query,IConfidenceCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\IConfidenceCalculator.cs,CalculateConfidence,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Query,IQueryMath,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\IQueryMath.cs,GetBestCandidates,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Query,QueryMath,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\QueryMath.cs,GetBestCandidates,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Query,QueryResultValidatorService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\QueryResultValidatorService.cs,Validate,The method has 7 parameters.
Long Parameter List,SoundFingerprinting.Query,ResultEntry,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\ResultEntry.cs,ResultEntry,The method has 9 parameters.
Long Parameter List,SoundFingerprinting.DAO.Data,SubFingerprintData,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\DAO\Data\SubFingerprintData.cs,SubFingerprintData,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.DAO.Data,TrackData,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\DAO\Data\TrackData.cs,TrackData,The method has 6 parameters.
Long Parameter List,SoundFingerprinting.DAO.Data,TrackData,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\DAO\Data\TrackData.cs,TrackData,The method has 7 parameters.
Long Parameter List,SoundFingerprinting.Data,HashedFingerprint,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Data\HashedFingerprint.cs,HashedFingerprint,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Utils,FastFingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FastFingerprintDescriptor.cs,Find,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Utils,FastFingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FastFingerprintDescriptor.cs,Partition,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,TestRunner,The method has 7 parameters.
Long Parameter List,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The method has 5 parameters.
Long Parameter List,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,GetTestRunnerEventArgsForFinishedTestIteration,The method has 8 parameters.
Long Parameter List,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,GetTestRunnerEventArgs,The method has 6 parameters.
Long Parameter List,SoundFingerprinting.Utils,TestRunnerWriter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerWriter.cs,SaveTestIterationToFolder,The method has 6 parameters.
Long Identifier,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CutLogarithmizedSpectrum,The length of the parameter strideBetweenConsecutiveImages is 30.
Long Statement,SoundFingerprinting.Command,FingerprintCommand,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Command\FingerprintCommand.cs,Hash,The length of the statement  "	return Task.Factory.StartNew (createFingerprintsMethod).ContinueWith (fingerprintsResult => HashFingerprints (fingerprintsResult.Result)' TaskContinuationOptions.ExecuteSynchronously); " is 184.
Long Statement,SoundFingerprinting.Command,FingerprintCommand,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Command\FingerprintCommand.cs,From,The length of the statement  "		AudioSamples audioSamples = audioService.ReadMonoSamplesFromFile (pathToAudioFile' FingerprintConfiguration.SampleRate); " is 120.
Long Statement,SoundFingerprinting.Command,FingerprintCommand,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Command\FingerprintCommand.cs,From,The length of the statement  "		AudioSamples audioSamples = audioService.ReadMonoSamplesFromFile (pathToAudioFile' FingerprintConfiguration.SampleRate' secondsToProcess' startAtSecond); " is 153.
Long Statement,SoundFingerprinting.Command,FingerprintCommand,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Command\FingerprintCommand.cs,HashFingerprints,The length of the statement  "		var hashedFingerprint = lshAlgorithm.Hash (fingerprint' FingerprintConfiguration.HashingConfig.NumberOfLSHTables' FingerprintConfiguration.HashingConfig.NumberOfMinHashesPerTable' FingerprintConfiguration.Clusters); " is 215.
Long Statement,SoundFingerprinting.Command,QueryCommand,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Command\QueryCommand.cs,From,The length of the statement  "	fingerprintingMethodFromSelector = () => fingerprintCommandBuilder.BuildFingerprintCommand ().From (pathToAudioFile' secondsToProcess' startAtSecond); " is 150.
Long Statement,SoundFingerprinting.Command,QueryCommand,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Command\QueryCommand.cs,UsingServices,The length of the statement  "	createFingerprintMethod = () => fingerprintingMethodFromSelector ().WithFingerprintConfig (FingerprintConfiguration).UsingServices (audioService); " is 146.
Long Statement,SoundFingerprinting.FFT,LogUtility,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LogUtility.cs,GenerateLogFrequenciesDynamicBase,The length of the statement  "	double logBase = Math.Exp (Math.Log ((float)configuration.FrequencyRange.Max / configuration.FrequencyRange.Min) / configuration.LogBins); " is 138.
Long Statement,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateLogSpectrogram,The length of the statement  "		float[] complexSignal = fftService.FFTForward (audioSamples.Samples' i * configuration.Overlap' configuration.WdftSize' window); " is 128.
Long Statement,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CutLogarithmizedSpectrum,The length of the statement  "		index += fingerprintImageLength + GetFrequencyIndexLocationOfAudioSamples (strideBetweenConsecutiveImages.NextStride' overlap); " is 127.
Long Statement,SoundFingerprinting,QueryFingerprintService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\QueryFingerprintService.cs,Query,The length of the statement  "	var resultEntries = queryMath.GetBestCandidates (queryFingerprints' hammingSimilarities' configuration.MaxTracksToReturn' modelService' configuration.FingerprintConfiguration); " is 176.
Long Statement,SoundFingerprinting,QueryFingerprintService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\QueryFingerprintService.cs,GetSimilaritiesUsingBatchedStrategy,The length of the statement  "	var allCandidates = modelService.ReadSubFingerprints (hashedFingerprints.Select (querySubfingerprint => querySubfingerprint.HashBins)' configuration); " is 150.
Long Statement,SoundFingerprinting,QueryFingerprintService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\QueryFingerprintService.cs,GetSimilaritiesUsingBatchedStrategy,The length of the statement  "		var subFingerprints = allCandidates.Where (candidate => queryMath.IsCandidatePassingThresholdVotes (queryFingerprint' candidate' configuration.ThresholdVotes)); " is 160.
Long Statement,SoundFingerprinting.LCS,QueryResultCoverageCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\LCS\QueryResultCoverageCalculator.cs,GetCoverage,The length of the statement  "		if (sortedMatches [i].SubFingerprint.SequenceAt - sortedMatches [i - 1].SubFingerprint.SequenceAt > configuration.FingerprintLengthInSeconds) { " is 143.
Long Statement,SoundFingerprinting.LCS,QueryResultCoverageCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\LCS\QueryResultCoverageCalculator.cs,GetCoverage,The length of the statement  "			notCovered += sortedMatches [i].SubFingerprint.SequenceAt - (sortedMatches [i - 1].SubFingerprint.SequenceAt + configuration.FingerprintLengthInSeconds); " is 153.
Long Statement,SoundFingerprinting.LCS,QueryResultCoverageCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\LCS\QueryResultCoverageCalculator.cs,GetCoverage,The length of the statement  "	double sourceMatchLength = SubFingerprintsToSeconds.AdjustLengthToSeconds (sortedMatches [maxI].SubFingerprint.SequenceAt' sortedMatches [minI].SubFingerprint.SequenceAt' configuration) - notCovered; " is 199.
Long Statement,SoundFingerprinting.LCS,QueryResultCoverageCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\LCS\QueryResultCoverageCalculator.cs,ConsecutiveMatchesAreLongerThanTheQuery,The length of the statement  "	return SubFingerprintsToSeconds.AdjustLengthToSeconds (sortedMatches [index].SubFingerprint.SequenceAt' sortedMatches [index - 1].SubFingerprint.SequenceAt' config) > queryLength; " is 179.
Long Statement,SoundFingerprinting.Math,HammingDistanceResultStatistics,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HammingDistanceResultStatistics.cs,ToString,The length of the statement  "	return string.Format ("True Positives: [{0}]' False Negatives: [{1}]' False Positives: [{2}]' True Positives(0.8' 0.9' 0.95' 0.98): [{3}]' " + "False Negatives(0.8' 0.9' 0.95' 0.98): [{4}]' False Positives(0.8' 0.9' 0.95' 0.98): [{5}]"' TruePositiveInfo' FalseNegativesInfo' FalsePositivesInfo' TruePositivePercentileInfo' FalseNegativesPercentileInfo' FalsePositivesPercentileInfo); " is 383.
Long Statement,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,GetBytesPerLong,The length of the statement  "		throw new ArgumentException ("count for longs array is not in accepted range' since longs cannot be grouped evenly {2' 4' 8}"); " is 127.
Long Statement,SoundFingerprinting.Math,SimilarityUtility,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\SimilarityUtility.cs,AccumulateHammingSimilarity,The length of the statement  "		accumulator.AddOrUpdate (subFingerprint.TrackReference' reference => new ResultEntryAccumulator (expected' fingerprint' hammingSimilarity)' (reference' entryAccumulator) => entryAccumulator.Add (expected' fingerprint' hammingSimilarity)); " is 238.
Long Statement,SoundFingerprinting.Query,ConfidenceCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\ConfidenceCalculator.cs,CalculateConfidence,The length of the statement  "		return Ceil (GetConfidenceForSmallSnippetFoundInLongQuery (sourceMatchStartsAt' sourceMatchLength' queryLength' originStartsAt' originLength)); " is 143.
Long Statement,SoundFingerprinting.Query,ConfidenceCalculator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\ConfidenceCalculator.cs,CalculateConfidence,The length of the statement  "	return Ceil (GetConfidenceForSmallSnippetFoundInLongOrigin (sourceMatchStartsAt' sourceMatchLength' queryLength' originStartsAt' originLength)); " is 144.
Long Statement,SoundFingerprinting.Query,QueryMath,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\QueryMath.cs,GetBestCandidates,The length of the statement  "	return hammingSimilarites.OrderByDescending (e => e.Value.HammingSimilaritySum).Take (maxNumberOfMatchesToReturn).Select (e => GetResultEntry (modelService' fingerprintConfiguration' e' queryLength)).ToList (); " is 210.
Long Statement,SoundFingerprinting.Query,QueryMath,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\QueryMath.cs,GetResultEntry,The length of the statement  "	double confidence = confidenceCalculator.CalculateConfidence (coverage.SourceMatchStartsAt' coverage.SourceMatchLength' queryLength' coverage.OriginMatchStartsAt' track.Length); " is 177.
Long Statement,SoundFingerprinting.Query,QueryMath,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\QueryMath.cs,GetResultEntry,The length of the statement  "	return new ResultEntry (track' coverage.SourceMatchStartsAt' coverage.SourceMatchLength' coverage.OriginMatchStartsAt' GetTrackStartsAt (pair.Value.BestMatch)' confidence' pair.Value.HammingSimilaritySum' queryLength' pair.Value.BestMatch); " is 240.
Long Statement,SoundFingerprinting.Query,QueryResultValidatorService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\QueryResultValidatorService.cs,Validate,The length of the statement  "	var newResult = queryCommandBuilder.BuildQueryCommand ().From (pathToAudioFile' length' startAt).WithConfigs (config => { " is 121.
Long Statement,SoundFingerprinting.Query,QueryResultValidatorService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Query\QueryResultValidatorService.cs,Validate,The length of the statement  "		return new ResultEntry (newEntry.Track' newEntry.QueryMatchStartsAt' newEntry.QueryMatchLength' newEntry.TrackMatchStartsAt' newEntry.TrackStartsAt + result.TrackStartsAt' newEntry.Confidence' newEntry.HammingSimilaritySum' newEntry.QueryLength' newEntry.BestMatch); " is 266.
Long Statement,SoundFingerprinting.Infrastructure,SoundFingerprintingModuleLoader,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Infrastructure\SoundFingerprintingModuleLoader.cs,LoadAssemblyBindings,The length of the statement  "	kernel.Bind<IRAMStorage> ().To<RAMStorage> ().InSingletonScope ().WithConstructorArgument ("numberOfHashTables"' new DefaultFingerprintConfiguration ().HashingConfig.NumberOfLSHTables); " is 185.
Long Statement,SoundFingerprinting.InMemory,SpectralImageDao,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\InMemory\SpectralImageDao.cs,InsertSpectralImages,The length of the statement  "	var dtos = spectralImages.Select (spectralImage => new SpectralImageData (spectralImage' orderNumber++' new ModelReference<int> (Interlocked.Increment (ref counter))' trackReference)).ToList (); " is 194.
Long Statement,SoundFingerprinting.InMemory,SubFingerprintDao,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\InMemory\SubFingerprintDao.cs,ReadSubFingerprints,The length of the statement  "	var subFingerprints = subFingeprintCount.Where (pair => pair.Value >= thresholdVotes).Select (pair => storage.SubFingerprints [pair.Key]); " is 138.
Long Statement,SoundFingerprinting.InMemory,SubFingerprintDao,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\InMemory\SubFingerprintDao.cs,InsertSubFingerprint,The length of the statement  "	storage.SubFingerprints [subFingerprintReference] = new SubFingerprintData (hashedFingerprint.HashBins' hashedFingerprint.SequenceNumber' hashedFingerprint.StartsAt' subFingerprintReference' trackReference) { " is 208.
Long Statement,SoundFingerprinting.InMemory,TrackDao,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\InMemory\TrackDao.cs,ReadTrackByArtistAndTitleName,The length of the statement  "	return storage.Tracks.Where (pair => pair.Value.Artist == artist && pair.Value.Title == title).Select (pair => pair.Value).ToList (); " is 133.
Long Statement,SoundFingerprinting.InMemory,TrackDao,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\InMemory\TrackDao.cs,DeleteTrack,The length of the statement  "		var subFingerprintReferences = storage.SubFingerprints.Where (pair => pair.Value.TrackReference.Equals (trackReference)).Select (pair => pair.Key).ToList (); " is 157.
Long Statement,SoundFingerprinting.MinHash,MinHashService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\MinHash\MinHashService.cs,ComputeMinHashSignature,The length of the statement  "		/*The probability of occurrence of 1 after position 255 is very insignificant*/for (int j = 0; j < perms [i].Length/*256*/; j++) { " is 130.
Long Statement,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,ConcatenateFrames,The length of the statement  "		Buffer.BlockCopy (frames [row]' 0' concatenated' row * frames [row].Length * sizeof(float)' frames [row].Length * sizeof(float)); " is 129.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "			Message = string.Format ("Iteration {0} out of {1} with {2}' query seconds {3}"' iteration + 1' iterations' queryStride' seconds) " is 129.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "				OnTestRunnerEvent (PositiveNotFoundEvent' GetTestRunnerEventArgs (truePositives' trueNegatives' falsePositives' falseNegatives' notFoundLine' verified)); " is 153.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "			OnTestRunnerEvent (PositiveFoundEvent' GetTestRunnerEventArgs (truePositives' trueNegatives' falsePositives' falseNegatives' foundLine' verified)); " is 147.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "				OnTestRunnerEvent (NegativeNotFoundEvent' GetTestRunnerEventArgs (truePositives' trueNegatives' falsePositives' falseNegatives' notFoundLine' verified)); " is 153.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "			OnTestRunnerEvent (NegativeFoundEvent' GetTestRunnerEventArgs (truePositives' trueNegatives' falsePositives' falseNegatives' foundLine' verified)); " is 147.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "		var stats = HammingDistanceResultStatistics.From (truePositiveHammingDistance' falseNegativesHammingDistance' falsePositivesHammingDistance' testRunnerConfig.Percentiles); " is 171.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "		TestRunnerWriter.SaveTestIterationToFolder (sb' pathToResultsFolder' queryStride' GetInsertMetadata ()' seconds' startAt); " is 122.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTestScenario,The length of the statement  "		var finishedTestIteration = GetTestRunnerEventArgsForFinishedTestIteration (queryStride' seconds' startAts' fscore' stats' iteration' stopwatch' verified); " is 155.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,GetActualTrack,The length of the statement  "	return !string.IsNullOrEmpty (tags.ISRC) ? modelService.ReadTrackByISRC (tags.ISRC) : modelService.ReadTrackByArtistAndTitleName (tags.Artist' tags.Title).FirstOrDefault (); " is 173.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,Insert,The length of the statement  "			Message = string.Format ("Inserting tracks {0} out of {1}. Track {2}"' Interlocked.Increment (ref inserted)' allFiles.Count' System.IO.Path.GetFileNameWithoutExtension (file)) " is 175.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,DeleteAll,The length of the statement  "			Message = string.Format ("Deleted {0} out of {1} tracks from storage"' Interlocked.Increment (ref deleted)' tracks.Count) " is 121.
Long Statement,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,GetTagsFromFile,The length of the statement  "		throw new Exception (string.Format ("Could not extract tags from file {0}. Track does not contain enought data to be identified as unique. Currate your input data!"' path)); " is 173.
Long Statement,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateScenarious,The length of the statement  "			return TestScenariousValidationResult.InvalidResult (string.Format ("Bad action '{0}'. Should be either 'Run' or 'Insert'"' parameters [0])); " is 141.
Long Statement,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The length of the statement  "		return TestScenariousValidationResult.InvalidResult (string.Format ("Path to songs folder '{0}' is not valid"' folderWithSongs)); " is 129.
Long Statement,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The length of the statement  "		return TestScenariousValidationResult.InvalidResult (string.Format ("Path to songs folder '{0}' contains no items for insertion!"' folderWithSongs)); " is 149.
Long Statement,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The length of the statement  "		return TestScenariousValidationResult.InvalidResult (string.Format ("Path to folder with positives '{0}' is not valid"' folderWithPositives)); " is 142.
Long Statement,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The length of the statement  "		return TestScenariousValidationResult.InvalidResult (string.Format ("Path to folder with negatives '{0}' is not valid"' folderWithNegatives)); " is 142.
Long Statement,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The length of the statement  "		return TestScenariousValidationResult.InvalidResult (string.Format ("Folder with positives is empty: {0}"' folderWithPositives)); " is 129.
Long Statement,SoundFingerprinting.Utils,TestRunnerWriter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerWriter.cs,SaveTestIterationToFolder,The length of the statement  "	string filename = string.Format ("results_{0}_{1}_q{2}s_at{3}s.csv"' insertMetadata' queryStride' queryLength' startAt); " is 120.
Long Statement,SoundFingerprinting.LSH,LocalitySensitiveHashingAlgorithm,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\LSH\LocalitySensitiveHashingAlgorithm.cs,Hash,The length of the statement  "	return new HashedFingerprint (subFingerprint' GroupIntoHashTables (subFingerprint' numberOfHashTables' numberOfHashKeysPerTable)' fingerprint.SequenceNumber' fingerprint.StartsAt' clusters); " is 190.
Complex Conditional,SoundFingerprinting.Math,SimilarityUtility,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\SimilarityUtility.cs,CalculateJaccardSimilarity,The conditional expression  "(x [i] && !y [i]) || (!x [i] && y [i])"  is complex.
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: n /= 2;  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	for (var m = 0; m < istep; m += 2) {  		float wr = cosTable [tptr];  		float wi = sign * sinTable [tptr++];  		for (var k = m; k < 2 * n; k += 2 * istep) {  			var j = k + istep;  			var tempr = wr * data [j] - wi * data [j + 1];  			var tempi = wi * data [j] + wr * data [j + 1];  			data [j] = data [k] - tempr;  			data [j + 1] = data [k + 1] - tempi;  			data [k] = data [k] + tempr;  			data [k + 1] = data [k + 1] + tempi;  		}  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	for (var m = 0; m < istep; m += 2) {  		float wr = cosTable [tptr];  		float wi = sign * sinTable [tptr++];  		for (var k = m; k < 2 * n; k += 2 * istep) {  			var j = k + istep;  			var tempr = wr * data [j] - wi * data [j + 1];  			var tempi = wi * data [j] + wr * data [j + 1];  			data [j] = data [k] - tempr;  			data [j + 1] = data [k + 1] - tempi;  			data [k] = data [k] + tempr;  			data [k + 1] = data [k + 1] + tempi;  		}  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	for (var m = 0; m < istep; m += 2) {  		float wr = cosTable [tptr];  		float wi = sign * sinTable [tptr++];  		for (var k = m; k < 2 * n; k += 2 * istep) {  			var j = k + istep;  			var tempr = wr * data [j] - wi * data [j + 1];  			var tempi = wi * data [j] + wr * data [j + 1];  			data [j] = data [k] - tempr;  			data [j + 1] = data [k + 1] - tempi;  			data [k] = data [k] + tempr;  			data [k + 1] = data [k + 1] + tempi;  		}  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	for (var m = 0; m < istep; m += 2) {  		float wr = cosTable [tptr];  		float wi = sign * sinTable [tptr++];  		for (var k = m; k < 2 * n; k += 2 * istep) {  			var j = k + istep;  			var tempr = wr * data [j] - wi * data [j + 1];  			var tempi = wi * data [j] + wr * data [j + 1];  			data [j] = data [k] - tempr;  			data [j + 1] = data [k + 1] - tempi;  			data [k] = data [k] + tempr;  			data [k + 1] = data [k + 1] + tempi;  		}  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: for (var m = 0; m < istep; m += 2) {  	float wr = cosTable [tptr];  	float wi = sign * sinTable [tptr++];  	for (var k = m; k < 2 * n; k += 2 * istep) {  		var j = k + istep;  		var tempr = wr * data [j] - wi * data [j + 1];  		var tempi = wi * data [j] + wr * data [j + 1];  		data [j] = data [k] - tempr;  		data [j + 1] = data [k + 1] - tempi;  		data [k] = data [k] + tempr;  		data [k + 1] = data [k + 1] + tempi;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: for (var m = 0; m < istep; m += 2) {  	float wr = cosTable [tptr];  	float wi = sign * sinTable [tptr++];  	for (var k = m; k < 2 * n; k += 2 * istep) {  		var j = k + istep;  		var tempr = wr * data [j] - wi * data [j + 1];  		var tempi = wi * data [j] + wr * data [j + 1];  		data [j] = data [k] - tempr;  		data [j + 1] = data [k + 1] - tempi;  		data [k] = data [k] + tempr;  		data [k + 1] = data [k + 1] + tempi;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: for (var m = 0; m < istep; m += 2) {  	float wr = cosTable [tptr];  	float wi = sign * sinTable [tptr++];  	for (var k = m; k < 2 * n; k += 2 * istep) {  		var j = k + istep;  		var tempr = wr * data [j] - wi * data [j + 1];  		var tempi = wi * data [j] + wr * data [j + 1];  		data [j] = data [k] - tempr;  		data [j + 1] = data [k + 1] - tempi;  		data [k] = data [k] + tempr;  		data [k + 1] = data [k + 1] + tempi;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: m += 2
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: for (var k = m; k < 2 * n; k += 2 * istep) {  	var j = k + istep;  	var tempr = wr * data [j] - wi * data [j + 1];  	var tempi = wi * data [j] + wr * data [j + 1];  	data [j] = data [k] - tempr;  	data [j + 1] = data [k + 1] - tempi;  	data [k] = data [k] + tempr;  	data [k + 1] = data [k + 1] + tempi;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: for (var k = m; k < 2 * n; k += 2 * istep) {  	var j = k + istep;  	var tempr = wr * data [j] - wi * data [j + 1];  	var tempi = wi * data [j] + wr * data [j + 1];  	data [j] = data [k] - tempr;  	data [j + 1] = data [k + 1] - tempi;  	data [k] = data [k] + tempr;  	data [k + 1] = data [k + 1] + tempi;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,TableFFT,The following statement contains a magic number: k += 2 * istep
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: if (forward) {  	// do packed FFT. This can be changed to FFT to save memory                                          	TableFFT (data' true);  	sign = 1.0f;  	// scaling - divide by scaling for N/2' then mult by scaling for N                                 	if (A != 1) {  		var scale = (float)Math.Pow (2.0' (A - 1) / 2.0);  		for (var i = 0; i < data.Length; ++i)  			data [i] *= scale;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: if (forward) {  	// do packed FFT. This can be changed to FFT to save memory                                          	TableFFT (data' true);  	sign = 1.0f;  	// scaling - divide by scaling for N/2' then mult by scaling for N                                 	if (A != 1) {  		var scale = (float)Math.Pow (2.0' (A - 1) / 2.0);  		for (var i = 0; i < data.Length; ++i)  			data [i] *= scale;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: if (A != 1) {  	var scale = (float)Math.Pow (2.0' (A - 1) / 2.0);  	for (var i = 0; i < data.Length; ++i)  		data [i] *= scale;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: if (A != 1) {  	var scale = (float)Math.Pow (2.0' (A - 1) / 2.0);  	for (var i = 0; i < data.Length; ++i)  		data [i] *= scale;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: for (var j = 1; j <= n / 4; ++j) {  	var k = n / 2 - j;  	var tkr = data [2 * k];  	// real and imaginary parts of t_k  = t_(n/2 - j)                        	var tki = data [2 * k + 1];  	var tjr = data [2 * j];  	// real and imaginary parts of t_j                                       	var tji = data [2 * j + 1];  	var a = (tjr - tkr) * wji;  	var b = (tji + tki) * wjr;  	var c = (tjr - tkr) * wjr;  	var d = (tji + tki) * wji;  	var e = (tjr + tkr);  	var f = (tji - tki);  	// compute entry y[j]                                                                              	data [2 * j] = 0.5f * (e + sign * (a + b));  	data [2 * j + 1] = 0.5f * (f + sign * (d - c));  	// compute entry y[k]                                                                              	data [2 * k] = 0.5f * (e - sign * (b + a));  	data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  	var temp = wjr;  	// todo - allow more accurate version here? make option?                                           	wjr = wjr * wpr - wji * wpi;  	wji = temp * wpi + wji * wpr;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: data [2 * j] = 0.5f * (e + sign * (a + b));  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: data [2 * j + 1] = 0.5f * (f + sign * (d - c));  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: data [2 * k] = 0.5f * (e - sign * (b + a));  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: data [2 * k + 1] = 0.5f * (sign * (d - c) - f);  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: if (forward) {  	// compute final y0 and y_{N/2}' store in data[0]' data[1]                                         	var temp = data [0];  	data [0] += data [1];  	data [1] = temp - data [1];  } else {  	var temp = data [0];  	// unpack the y0 and y_{N/2}' then invert FFT                                  	data [0] = 0.5f * (temp + data [1]);  	data [1] = 0.5f * (temp - data [1]);  	// do packed inverse (table based) FFT. This can be changed to regular inverse FFT to save memory  	TableFFT (data' false);  	// scaling - divide by scaling for N' then mult by scaling for N/2                                 	//if (A != -1) // todo - off by factor of 2? this works' but something seems weird                 	{  		var scale = (float)Math.Pow (2.0' -(A + 1) / 2.0) * 2;  		for (var i = 0; i < data.Length; ++i)  			data [i] *= scale;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: if (forward) {  	// compute final y0 and y_{N/2}' store in data[0]' data[1]                                         	var temp = data [0];  	data [0] += data [1];  	data [1] = temp - data [1];  } else {  	var temp = data [0];  	// unpack the y0 and y_{N/2}' then invert FFT                                  	data [0] = 0.5f * (temp + data [1]);  	data [1] = 0.5f * (temp - data [1]);  	// do packed inverse (table based) FFT. This can be changed to regular inverse FFT to save memory  	TableFFT (data' false);  	// scaling - divide by scaling for N' then mult by scaling for N/2                                 	//if (A != -1) // todo - off by factor of 2? this works' but something seems weird                 	{  		var scale = (float)Math.Pow (2.0' -(A + 1) / 2.0) * 2;  		for (var i = 0; i < data.Length; ++i)  			data [i] *= scale;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,RealFFT,The following statement contains a magic number: if (forward) {  	// compute final y0 and y_{N/2}' store in data[0]' data[1]                                         	var temp = data [0];  	data [0] += data [1];  	data [1] = temp - data [1];  } else {  	var temp = data [0];  	// unpack the y0 and y_{N/2}' then invert FFT                                  	data [0] = 0.5f * (temp + data [1]);  	data [1] = 0.5f * (temp - data [1]);  	// do packed inverse (table based) FFT. This can be changed to regular inverse FFT to save memory  	TableFFT (data' false);  	// scaling - divide by scaling for N' then mult by scaling for N/2                                 	//if (A != -1) // todo - off by factor of 2? this works' but something seems weird                 	{  		var scale = (float)Math.Pow (2.0' -(A + 1) / 2.0) * 2;  		for (var i = 0; i < data.Length; ++i)  			data [i] *= scale;  	}  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Scale,The following statement contains a magic number: if ((forward) && (A != 1)) {  	var scale = (float)Math.Pow (n' (A - 1) / 2.0);  	for (var i = 0; i < data.Length; ++i)  		data [i] *= scale;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Scale,The following statement contains a magic number: if ((!forward) && (A != -1)) {  	var scale = (float)Math.Pow (n' -(A + 1) / 2.0);  	for (var i = 0; i < data.Length; ++i)  		data [i] *= scale;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Initialize,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	var theta = Math.PI / mmax;  	float wr = 1' wi = 0;  	var wpi = (float)Math.Sin (theta);  	// compute in a slightly slower yet more accurate manner                                           	var wpr = (float)System.Math.Sin (theta / 2);  	wpr = -2 * wpr * wpr;  	for (var m = 0; m < istep; m += 2) {  		cosTable [pos] = wr;  		sinTable [pos++] = wi;  		var t = wr;  		wr = wr * wpr - wi * wpi + wr;  		wi = wi * wpr + t * wpi + wi;  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Initialize,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	var theta = Math.PI / mmax;  	float wr = 1' wi = 0;  	var wpi = (float)Math.Sin (theta);  	// compute in a slightly slower yet more accurate manner                                           	var wpr = (float)System.Math.Sin (theta / 2);  	wpr = -2 * wpr * wpr;  	for (var m = 0; m < istep; m += 2) {  		cosTable [pos] = wr;  		sinTable [pos++] = wi;  		var t = wr;  		wr = wr * wpr - wi * wpi + wr;  		wi = wi * wpr + t * wpi + wi;  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Initialize,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	var theta = Math.PI / mmax;  	float wr = 1' wi = 0;  	var wpi = (float)Math.Sin (theta);  	// compute in a slightly slower yet more accurate manner                                           	var wpr = (float)System.Math.Sin (theta / 2);  	wpr = -2 * wpr * wpr;  	for (var m = 0; m < istep; m += 2) {  		cosTable [pos] = wr;  		sinTable [pos++] = wi;  		var t = wr;  		wr = wr * wpr - wi * wpi + wr;  		wi = wi * wpr + t * wpi + wi;  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Initialize,The following statement contains a magic number: while (n > mmax) {  	var istep = 2 * mmax;  	var theta = Math.PI / mmax;  	float wr = 1' wi = 0;  	var wpi = (float)Math.Sin (theta);  	// compute in a slightly slower yet more accurate manner                                           	var wpr = (float)System.Math.Sin (theta / 2);  	wpr = -2 * wpr * wpr;  	for (var m = 0; m < istep; m += 2) {  		cosTable [pos] = wr;  		sinTable [pos++] = wi;  		var t = wr;  		wr = wr * wpr - wi * wpi + wr;  		wi = wi * wpr + t * wpi + wi;  	}  	mmax = istep;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Initialize,The following statement contains a magic number: wpr = -2 * wpr * wpr;  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Initialize,The following statement contains a magic number: for (var m = 0; m < istep; m += 2) {  	cosTable [pos] = wr;  	sinTable [pos++] = wi;  	var t = wr;  	wr = wr * wpr - wi * wpi + wr;  	wi = wi * wpr + t * wpi + wi;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Initialize,The following statement contains a magic number: m += 2
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (true) {  	// Knuth R2: swap - swap j+1 and k+2^(n-1)' 2 entries each                                         	var t = data [j + 2];  	data [j + 2] = data [k + n];  	data [k + n] = t;  	t = data [j + 3];  	data [j + 3] = data [k + n + 1];  	data [k + n + 1] = t;  	if (j > k) {  		// swap two more                                                                                 		// j and k                                                                                     		t = data [j];  		data [j] = data [k];  		data [k] = t;  		t = data [j + 1];  		data [j + 1] = data [k + 1];  		data [k + 1] = t;  		// j + top + 1 and k+top + 1                                                                   		t = data [j + n + 2];  		data [j + n + 2] = data [k + n + 2];  		data [k + n + 2] = t;  		t = data [j + n + 3];  		data [j + n + 3] = data [k + n + 3];  		data [k + n + 3] = t;  	}  	// Knuth R3: advance k                                                                             	k += 4;  	if (k >= n)  		break;  	// Knuth R4: advance j                                                                             	var h = top;  	while (j >= h) {  		j -= h;  		h /= 2;  	}  	j += h;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [j + 2] = data [k + n];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: t = data [j + 3];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [j + 3] = data [k + n + 1];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: if (j > k) {  	// swap two more                                                                                 	// j and k                                                                                     	t = data [j];  	data [j] = data [k];  	data [k] = t;  	t = data [j + 1];  	data [j + 1] = data [k + 1];  	data [k + 1] = t;  	// j + top + 1 and k+top + 1                                                                   	t = data [j + n + 2];  	data [j + n + 2] = data [k + n + 2];  	data [k + n + 2] = t;  	t = data [j + n + 3];  	data [j + n + 3] = data [k + n + 3];  	data [k + n + 3] = t;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: t = data [j + n + 2];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [j + n + 2] = data [k + n + 2];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [j + n + 2] = data [k + n + 2];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [k + n + 2] = t;  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: t = data [j + n + 3];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [j + n + 3] = data [k + n + 3];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [j + n + 3] = data [k + n + 3];  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: data [k + n + 3] = t;  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: k += 4;  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: while (j >= h) {  	j -= h;  	h /= 2;  }  
Magic Number,SoundFingerprinting.FFT,LomontFFT,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\LomontFFT.cs,Reverse,The following statement contains a magic number: h /= 2;  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float[] complexSignal = fftService.FFTForward (samples' i * overlap' wdftSize' window);  	float[] band = new float[(wdftSize / 2) + 1];  	for (int j = 0; j < wdftSize / 2; j++) {  		double re = complexSignal [2 * j];  		double img = complexSignal [(2 * j) + 1];  		re /= (float)wdftSize / 2;  		img /= (float)wdftSize / 2;  		band [j] = (float)((re * re) + (img * img));  	}  	frames [i] = band;  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float[] complexSignal = fftService.FFTForward (samples' i * overlap' wdftSize' window);  	float[] band = new float[(wdftSize / 2) + 1];  	for (int j = 0; j < wdftSize / 2; j++) {  		double re = complexSignal [2 * j];  		double img = complexSignal [(2 * j) + 1];  		re /= (float)wdftSize / 2;  		img /= (float)wdftSize / 2;  		band [j] = (float)((re * re) + (img * img));  	}  	frames [i] = band;  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float[] complexSignal = fftService.FFTForward (samples' i * overlap' wdftSize' window);  	float[] band = new float[(wdftSize / 2) + 1];  	for (int j = 0; j < wdftSize / 2; j++) {  		double re = complexSignal [2 * j];  		double img = complexSignal [(2 * j) + 1];  		re /= (float)wdftSize / 2;  		img /= (float)wdftSize / 2;  		band [j] = (float)((re * re) + (img * img));  	}  	frames [i] = band;  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float[] complexSignal = fftService.FFTForward (samples' i * overlap' wdftSize' window);  	float[] band = new float[(wdftSize / 2) + 1];  	for (int j = 0; j < wdftSize / 2; j++) {  		double re = complexSignal [2 * j];  		double img = complexSignal [(2 * j) + 1];  		re /= (float)wdftSize / 2;  		img /= (float)wdftSize / 2;  		band [j] = (float)((re * re) + (img * img));  	}  	frames [i] = band;  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float[] complexSignal = fftService.FFTForward (samples' i * overlap' wdftSize' window);  	float[] band = new float[(wdftSize / 2) + 1];  	for (int j = 0; j < wdftSize / 2; j++) {  		double re = complexSignal [2 * j];  		double img = complexSignal [(2 * j) + 1];  		re /= (float)wdftSize / 2;  		img /= (float)wdftSize / 2;  		band [j] = (float)((re * re) + (img * img));  	}  	frames [i] = band;  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float[] complexSignal = fftService.FFTForward (samples' i * overlap' wdftSize' window);  	float[] band = new float[(wdftSize / 2) + 1];  	for (int j = 0; j < wdftSize / 2; j++) {  		double re = complexSignal [2 * j];  		double img = complexSignal [(2 * j) + 1];  		re /= (float)wdftSize / 2;  		img /= (float)wdftSize / 2;  		band [j] = (float)((re * re) + (img * img));  	}  	frames [i] = band;  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int j = 0; j < wdftSize / 2; j++) {  	double re = complexSignal [2 * j];  	double img = complexSignal [(2 * j) + 1];  	re /= (float)wdftSize / 2;  	img /= (float)wdftSize / 2;  	band [j] = (float)((re * re) + (img * img));  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int j = 0; j < wdftSize / 2; j++) {  	double re = complexSignal [2 * j];  	double img = complexSignal [(2 * j) + 1];  	re /= (float)wdftSize / 2;  	img /= (float)wdftSize / 2;  	band [j] = (float)((re * re) + (img * img));  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int j = 0; j < wdftSize / 2; j++) {  	double re = complexSignal [2 * j];  	double img = complexSignal [(2 * j) + 1];  	re /= (float)wdftSize / 2;  	img /= (float)wdftSize / 2;  	band [j] = (float)((re * re) + (img * img));  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int j = 0; j < wdftSize / 2; j++) {  	double re = complexSignal [2 * j];  	double img = complexSignal [(2 * j) + 1];  	re /= (float)wdftSize / 2;  	img /= (float)wdftSize / 2;  	band [j] = (float)((re * re) + (img * img));  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: for (int j = 0; j < wdftSize / 2; j++) {  	double re = complexSignal [2 * j];  	double img = complexSignal [(2 * j) + 1];  	re /= (float)wdftSize / 2;  	img /= (float)wdftSize / 2;  	band [j] = (float)((re * re) + (img * img));  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: re /= (float)wdftSize / 2;  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,CreateSpectrogram,The following statement contains a magic number: img /= (float)wdftSize / 2;  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,ExtractLogBins,The following statement contains a magic number: for (int i = 0; i < logBins; i++) {  	int lowBound = logFrequenciesIndex [i];  	int higherBound = logFrequenciesIndex [i + 1];  	for (int k = lowBound; k < higherBound; k++) {  		double re = spectrum [2 * k] / width;  		double img = spectrum [(2 * k) + 1] / width;  		sumFreq [i] += (float)((re * re) + (img * img));  	}  	sumFreq [i] = sumFreq [i] / (higherBound - lowBound);  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,ExtractLogBins,The following statement contains a magic number: for (int i = 0; i < logBins; i++) {  	int lowBound = logFrequenciesIndex [i];  	int higherBound = logFrequenciesIndex [i + 1];  	for (int k = lowBound; k < higherBound; k++) {  		double re = spectrum [2 * k] / width;  		double img = spectrum [(2 * k) + 1] / width;  		sumFreq [i] += (float)((re * re) + (img * img));  	}  	sumFreq [i] = sumFreq [i] / (higherBound - lowBound);  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,ExtractLogBins,The following statement contains a magic number: for (int k = lowBound; k < higherBound; k++) {  	double re = spectrum [2 * k] / width;  	double img = spectrum [(2 * k) + 1] / width;  	sumFreq [i] += (float)((re * re) + (img * img));  }  
Magic Number,SoundFingerprinting.FFT,SpectrumService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\FFT\SpectrumService.cs,ExtractLogBins,The following statement contains a magic number: for (int k = lowBound; k < higherBound; k++) {  	double re = spectrum [2 * k] / width;  	double img = spectrum [(2 * k) + 1] / width;  	sumFreq [i] += (float)((re * re) + (img * img));  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,ToLongs,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	if (bytesPerLong == 2) {  		grouped [i] = BitConverter.ToInt16 (array' i * bytesPerLong);  	} else if (bytesPerLong == 4) {  		grouped [i] = BitConverter.ToInt32 (array' i * bytesPerLong);  	} else {  		grouped [i] = BitConverter.ToInt64 (array' i * bytesPerLong);  	}  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,ToLongs,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	if (bytesPerLong == 2) {  		grouped [i] = BitConverter.ToInt16 (array' i * bytesPerLong);  	} else if (bytesPerLong == 4) {  		grouped [i] = BitConverter.ToInt32 (array' i * bytesPerLong);  	} else {  		grouped [i] = BitConverter.ToInt64 (array' i * bytesPerLong);  	}  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,ToLongs,The following statement contains a magic number: if (bytesPerLong == 2) {  	grouped [i] = BitConverter.ToInt16 (array' i * bytesPerLong);  } else if (bytesPerLong == 4) {  	grouped [i] = BitConverter.ToInt32 (array' i * bytesPerLong);  } else {  	grouped [i] = BitConverter.ToInt64 (array' i * bytesPerLong);  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,ToLongs,The following statement contains a magic number: if (bytesPerLong == 2) {  	grouped [i] = BitConverter.ToInt16 (array' i * bytesPerLong);  } else if (bytesPerLong == 4) {  	grouped [i] = BitConverter.ToInt32 (array' i * bytesPerLong);  } else {  	grouped [i] = BitConverter.ToInt64 (array' i * bytesPerLong);  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,ToLongs,The following statement contains a magic number: if (bytesPerLong == 4) {  	grouped [i] = BitConverter.ToInt32 (array' i * bytesPerLong);  } else {  	grouped [i] = BitConverter.ToInt64 (array' i * bytesPerLong);  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,GetBytesPerLong,The following statement contains a magic number: if (bytesPerLong != 2 && bytesPerLong != 4 && bytesPerLong != 8) {  	throw new ArgumentException ("count for longs array is not in accepted range' since longs cannot be grouped evenly {2' 4' 8}");  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,GetBytesPerLong,The following statement contains a magic number: if (bytesPerLong != 2 && bytesPerLong != 4 && bytesPerLong != 8) {  	throw new ArgumentException ("count for longs array is not in accepted range' since longs cannot be grouped evenly {2' 4' 8}");  }  
Magic Number,SoundFingerprinting.Math,HashConverter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Math\HashConverter.cs,GetBytesPerLong,The following statement contains a magic number: if (bytesPerLong != 2 && bytesPerLong != 4 && bytesPerLong != 8) {  	throw new ArgumentException ("count for longs array is not in accepted range' since longs cannot be grouped evenly {2' 4' 8}");  }  
Magic Number,SoundFingerprinting.Configuration,DefaultHashingConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultHashingConfig.cs,DefaultHashingConfig,The following statement contains a magic number: NumberOfLSHTables = 25;  
Magic Number,SoundFingerprinting.Configuration,DefaultHashingConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultHashingConfig.cs,DefaultHashingConfig,The following statement contains a magic number: NumberOfMinHashesPerTable = 4;  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: Overlap = 64;  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: WdftSize = 2048;  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: FrequencyRange = new FrequencyRange {  	Min = 318'  	Max = 2000  };  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: FrequencyRange = new FrequencyRange {  	Min = 318'  	Max = 2000  };  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: LogBase = 2;  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: LogBins = 32;  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: ImageLength = 128;  
Magic Number,SoundFingerprinting.Configuration,DefaultSpectrogramConfig,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultSpectrogramConfig.cs,DefaultSpectrogramConfig,The following statement contains a magic number: Stride = new IncrementalStaticStride (1536);  
Magic Number,SoundFingerprinting.Configuration,EfficientFingerprintConfigurationForQuerying,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\EfficientFingerprintConfigurationForQuerying.cs,EfficientFingerprintConfigurationForQuerying,The following statement contains a magic number: SpectrogramConfig.Stride = new IncrementalRandomStride (768' 1024);  
Magic Number,SoundFingerprinting.Configuration,EfficientFingerprintConfigurationForQuerying,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\EfficientFingerprintConfigurationForQuerying.cs,EfficientFingerprintConfigurationForQuerying,The following statement contains a magic number: SpectrogramConfig.Stride = new IncrementalRandomStride (768' 1024);  
Magic Number,SoundFingerprinting.Configuration,DefaultFingerprintConfiguration,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultFingerprintConfiguration.cs,DefaultFingerprintConfiguration,The following statement contains a magic number: TopWavelets = 200;  
Magic Number,SoundFingerprinting.Configuration,DefaultFingerprintConfiguration,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultFingerprintConfiguration.cs,DefaultFingerprintConfiguration,The following statement contains a magic number: SampleRate = 5512;  
Magic Number,SoundFingerprinting.Configuration,DefaultQueryConfiguration,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultQueryConfiguration.cs,DefaultQueryConfiguration,The following statement contains a magic number: ThresholdVotes = 5;  
Magic Number,SoundFingerprinting.Configuration,DefaultQueryConfiguration,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Configuration\DefaultQueryConfiguration.cs,DefaultQueryConfiguration,The following statement contains a magic number: MaxTracksToReturn = 25;  
Magic Number,SoundFingerprinting.MinHash,MinHashService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\MinHash\MinHashService.cs,ComputeMinHashSignature,The following statement contains a magic number: for (int i = 0; i < perms.Length/*100*/; i++) {  	minHash [i] = 255;  	/*The probability of occurrence of 1 after position 255 is very insignificant*/for (int j = 0; j < perms [i].Length/*256*/; j++) {  		if (signature [perms [i] [j]]) {  			minHash [i] = (byte)j;  			/*Looking for first occurrence of '1'*/break;  		}  	}  }  
Magic Number,SoundFingerprinting.MinHash,MinHashService,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\MinHash\MinHashService.cs,ComputeMinHashSignature,The following statement contains a magic number: minHash [i] = 255;  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,EncodeFingerprint,The following statement contains a magic number: for (int i = 0; i < topWavelets; i++) {  	int index = indexes [i];  	double value = concatenated [i];  	if (value > 0) {  		// positive wavelet  		result [index * 2] = true;  	} else if (value < 0) {  		// negative wavelet  		result [(index * 2) + 1] = true;  	}  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,EncodeFingerprint,The following statement contains a magic number: for (int i = 0; i < topWavelets; i++) {  	int index = indexes [i];  	double value = concatenated [i];  	if (value > 0) {  		// positive wavelet  		result [index * 2] = true;  	} else if (value < 0) {  		// negative wavelet  		result [(index * 2) + 1] = true;  	}  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,EncodeFingerprint,The following statement contains a magic number: if (value > 0) {  	// positive wavelet  	result [index * 2] = true;  } else if (value < 0) {  	// negative wavelet  	result [(index * 2) + 1] = true;  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,EncodeFingerprint,The following statement contains a magic number: if (value > 0) {  	// positive wavelet  	result [index * 2] = true;  } else if (value < 0) {  	// negative wavelet  	result [(index * 2) + 1] = true;  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,EncodeFingerprint,The following statement contains a magic number: result [index * 2] = true;  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,EncodeFingerprint,The following statement contains a magic number: if (value < 0) {  	// negative wavelet  	result [(index * 2) + 1] = true;  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,EncodeFingerprint,The following statement contains a magic number: result [(index * 2) + 1] = true;  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: for (int i = 0; i < len * 2; i += 2) {  	if (signature [i]) {  		// positive if first is true  		result [i / 2] = 1;  	} else if (signature [i + 1]) {  		// negative if second is true  		result [i / 2] = -1;  	}  	// otherwise '0'  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: for (int i = 0; i < len * 2; i += 2) {  	if (signature [i]) {  		// positive if first is true  		result [i / 2] = 1;  	} else if (signature [i + 1]) {  		// negative if second is true  		result [i / 2] = -1;  	}  	// otherwise '0'  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: for (int i = 0; i < len * 2; i += 2) {  	if (signature [i]) {  		// positive if first is true  		result [i / 2] = 1;  	} else if (signature [i + 1]) {  		// negative if second is true  		result [i / 2] = -1;  	}  	// otherwise '0'  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: for (int i = 0; i < len * 2; i += 2) {  	if (signature [i]) {  		// positive if first is true  		result [i / 2] = 1;  	} else if (signature [i + 1]) {  		// negative if second is true  		result [i / 2] = -1;  	}  	// otherwise '0'  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: i += 2
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: if (signature [i]) {  	// positive if first is true  	result [i / 2] = 1;  } else if (signature [i + 1]) {  	// negative if second is true  	result [i / 2] = -1;  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: if (signature [i]) {  	// positive if first is true  	result [i / 2] = 1;  } else if (signature [i + 1]) {  	// negative if second is true  	result [i / 2] = -1;  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: result [i / 2] = 1;  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: if (signature [i + 1]) {  	// negative if second is true  	result [i / 2] = -1;  }  
Magic Number,SoundFingerprinting.Utils,FingerprintDescriptor,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\FingerprintDescriptor.cs,DecodeFingerprint,The following statement contains a magic number: result [i / 2] = -1;  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following statement contains a magic number: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,GetTestRunnerEventArgsForFinishedTestIteration,The following statement contains a magic number: return new TestRunnerEventArgs {  	FScore = fscore'  	RowWithDetails = new object[] {  		this.GetInsertMetadata ()'  		queryStride.ToString ()'  		seconds'  		startAts [iteration]'  		fscore.Precision'  		fscore.Recall'  		fscore.F1'  		statistics.TruePositiveInfo'  		statistics.TruePositivePercentileInfo'  		statistics.FalseNegativesInfo'  		statistics.FalseNegativesPercentileInfo'  		statistics.FalsePositivesInfo'  		statistics.FalsePositivesPercentileInfo'  		(double)stopwatch.ElapsedMilliseconds / 1000  	}'  	Verified = verified  };  
Magic Number,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,Insert,The following statement contains a magic number: sb.AppendLine (string.Format ("{0}'{1}"' inserted' stopWatch.ElapsedMilliseconds / 1000));  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The following statement contains a magic number: utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The following statement contains a magic number: utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateInsertAction,The following statement contains a magic number: utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int secondsToProcess = int.Parse (parameters [6]);  	utils.ParseInts (parameters [7]' testRunnerConfig.StartAtsSeparator);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int secondsToProcess = int.Parse (parameters [6]);  	utils.ParseInts (parameters [7]' testRunnerConfig.StartAtsSeparator);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int secondsToProcess = int.Parse (parameters [6]);  	utils.ParseInts (parameters [7]' testRunnerConfig.StartAtsSeparator);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int secondsToProcess = int.Parse (parameters [6]);  	utils.ParseInts (parameters [7]' testRunnerConfig.StartAtsSeparator);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: try {  	utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int secondsToProcess = int.Parse (parameters [6]);  	utils.ParseInts (parameters [7]' testRunnerConfig.StartAtsSeparator);  } catch (Exception e) {  	return TestScenariousValidationResult.InvalidResult (e.Message);  }  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  
Magic Number,SoundFingerprinting.Utils,TestRunnerScenarioValidator,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerScenarioValidator.cs,ValidateRunAction,The following statement contains a magic number: utils.ParseInts (parameters [7]' testRunnerConfig.StartAtsSeparator);  
Magic Number,SoundFingerprinting.Utils,TestRunnerWriter,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunnerWriter.cs,FinishTestIteration,The following statement contains a magic number: sb.AppendLine (string.Format ("Results: {0}. Elapsed Seconds: {1}"' score' (double)elapsedMiliseconds / 1000));  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: h /= 2;  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: for (int i = 0; i < h; i++) {  	temp [i] = (float)((array [2 * i] + array [(2 * i) + 1]) / sqrt);  	temp [i + h] = (float)((array [2 * i] - array [(2 * i) + 1]) / sqrt);  }  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: for (int i = 0; i < h; i++) {  	temp [i] = (float)((array [2 * i] + array [(2 * i) + 1]) / sqrt);  	temp [i + h] = (float)((array [2 * i] - array [(2 * i) + 1]) / sqrt);  }  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: for (int i = 0; i < h; i++) {  	temp [i] = (float)((array [2 * i] + array [(2 * i) + 1]) / sqrt);  	temp [i + h] = (float)((array [2 * i] - array [(2 * i) + 1]) / sqrt);  }  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: for (int i = 0; i < h; i++) {  	temp [i] = (float)((array [2 * i] + array [(2 * i) + 1]) / sqrt);  	temp [i + h] = (float)((array [2 * i] - array [(2 * i) + 1]) / sqrt);  }  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: temp [i] = (float)((array [2 * i] + array [(2 * i) + 1]) / sqrt);  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: temp [i] = (float)((array [2 * i] + array [(2 * i) + 1]) / sqrt);  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: temp [i + h] = (float)((array [2 * i] - array [(2 * i) + 1]) / sqrt);  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: temp [i + h] = (float)((array [2 * i] - array [(2 * i) + 1]) / sqrt);  
Magic Number,SoundFingerprinting.Wavelets,HaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\HaarWaveletDecomposition.cs,DecompositionStep,The following statement contains a magic number: for (int i = 0; i < (h * 2); i++) {  	array [i] = temp [i];  }  
Magic Number,SoundFingerprinting.Wavelets,StandardHaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\StandardHaarWaveletDecomposition.cs,Decomposition,The following statement contains a magic number: while (h > 1) {  	DecompositionStep (array' h);  	h /= 2;  }  
Magic Number,SoundFingerprinting.Wavelets,StandardHaarWaveletDecomposition,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Wavelets\StandardHaarWaveletDecomposition.cs,Decomposition,The following statement contains a magic number: h /= 2;  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,WindowInPlace,The following statement contains a magic number: for (int i = 0' n = length; i < n; i++) {  	outerspace [i] *= (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (n - 1))));  }  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,WindowInPlace,The following statement contains a magic number: for (int i = 0' n = length; i < n; i++) {  	outerspace [i] *= (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (n - 1))));  }  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,WindowInPlace,The following statement contains a magic number: outerspace [i] *= (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (n - 1))));  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,WindowInPlace,The following statement contains a magic number: outerspace [i] *= (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (n - 1))));  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,GetWindow,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	array [i] = (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (length - 1))));  }  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,GetWindow,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	array [i] = (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (length - 1))));  }  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,GetWindow,The following statement contains a magic number: array [i] = (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (length - 1))));  
Magic Number,SoundFingerprinting.Windows,HanningWindow,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Windows\HanningWindow.cs,GetWindow,The following statement contains a magic number: array [i] = (float)(0.5 * (1 - System.Math.Cos (2 * System.Math.PI * i / (length - 1))));  
Missing Default,SoundFingerprinting.Utils,TestRunner,F:\newReposMay17\AddictedCS_soundfingerprinting\src\SoundFingerprinting\Utils\TestRunner.cs,RunTest,The following switch statement is missing a default case: switch (action) {  case "Insert":  	string folderWithSongs = parameters [1];  	var stride = utils.ToStride (parameters [2]' parameters [3]' parameters [4]);  	DeleteAll ();  	var sb = TestRunnerWriter.StartInsert ();  	Insert (folderWithSongs' stride' sb);  	TestRunnerWriter.SaveInsertDataToFolder (sb' pathToResultsFolder' stride);  	lastInsertStride = stride;  	break;  case "Run":  	string folderWithPositives = parameters [1];  	string folderWithNegatives = parameters [2];  	var queryStride = utils.ToStride (parameters [3]' parameters [4]' parameters [5]);  	int seconds = int.Parse (parameters [6]);  	var startAts = ToStartAts (parameters [7]);  	RunTestScenario (folderWithPositives' folderWithNegatives' queryStride' seconds' startAts);  	break;  }  
