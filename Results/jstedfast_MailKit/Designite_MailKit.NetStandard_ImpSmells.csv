Implementation smell,Namespace,Class,File,Method,Description
Long Method,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The method has 155 lines of code.
Long Method,MailKit.Net.Imap,ImapCommand,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,StepAsync,The method has 117 lines of code.
Long Method,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,UpdateCapabilitiesAsync,The method has 115 lines of code.
Long Method,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ParseResponseCodeAsync,The method has 256 lines of code.
Long Method,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,UpdateStatusAsync,The method has 104 lines of code.
Long Method,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ProcessUntaggedResponseAsync,The method has 147 lines of code.
Long Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchSummaryItemsAsync,The method has 183 lines of code.
Long Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchStreamAsync,The method has 194 lines of code.
Long Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,BuildQuery,The method has 222 lines of code.
Long Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ESearchMatchesAsync,The method has 110 lines of code.
Long Method,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,AuthenticateAsync,The method has 110 lines of code.
Long Method,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The method has 148 lines of code.
Long Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The method has 145 lines of code.
Long Method,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The method has 100 lines of code.
Long Method,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The method has 103 lines of code.
Complex Method,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,AuthenticateAsync,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,AuthenticateAsync,Cyclomatic complexity of the method is 18
Complex Method,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,Cyclomatic complexity of the method is 18
Complex Method,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,Cyclomatic complexity of the method is 16
Complex Method,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,GetMetadataAsync,Cyclomatic complexity of the method is 13
Complex Method,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,SetMetadataAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,AssignSpecialFolders,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,GetStatusQuery,Cyclomatic complexity of the method is 10
Complex Method,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,GetFoldersAsync,Cyclomatic complexity of the method is 13
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,OpenAsync,Cyclomatic complexity of the method is 10
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,CreateAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,CreateAsync,Cyclomatic complexity of the method is 13
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RenameAsync,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetSubfoldersAsync,Cyclomatic complexity of the method is 13
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetMetadataAsync,Cyclomatic complexity of the method is 13
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetMetadataAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ExpungeAsync,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,Cyclomatic complexity of the method is 17
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,Cyclomatic complexity of the method is 18
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,MoveToAsync,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FormatSummaryItems,Cyclomatic complexity of the method is 25
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetBodyPartAsync,Cyclomatic complexity of the method is 11
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetBodyPartAsync,Cyclomatic complexity of the method is 11
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ModifyFlagsAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ModifyLabelsAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SearchAsync,Cyclomatic complexity of the method is 11
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SortAsync,Cyclomatic complexity of the method is 11
Complex Method,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SortAsync,Cyclomatic complexity of the method is 15
Complex Method,MailKit.Net.Imap,ImapStream,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapStream.cs,ReadAheadAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapStream,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapStream.cs,WriteAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,Cyclomatic complexity of the method is 11
Complex Method,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,FormatIndexSet,Cyclomatic complexity of the method is 10
Complex Method,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseFolderListAsync,Cyclomatic complexity of the method is 11
Complex Method,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseMultipartAsync,Cyclomatic complexity of the method is 11
Complex Method,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseBodyAsync,Cyclomatic complexity of the method is 13
Complex Method,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,FormatFlagsList,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,AuthenticateAsync,Cyclomatic complexity of the method is 15
Complex Method,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,Cyclomatic complexity of the method is 16
Complex Method,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,Cyclomatic complexity of the method is 14
Complex Method,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,DeleteMessagesAsync,Cyclomatic complexity of the method is 10
Complex Method,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,DeleteMessagesAsync,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,ConnectAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,IterateAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,WriteAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,FlushCommandQueueAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,AuthenticateAsync,Cyclomatic complexity of the method is 12
Complex Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,AuthenticateAsync,Cyclomatic complexity of the method is 17
Complex Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,Cyclomatic complexity of the method is 18
Complex Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,Cyclomatic complexity of the method is 16
Complex Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,SendAsync,Cyclomatic complexity of the method is 10
Complex Method,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ExpandAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Net.Smtp,SmtpStream,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpStream.cs,WriteAsync,Cyclomatic complexity of the method is 8
Complex Method,MailKit.Search,SearchQuery,C:\repos\jstedfast_MailKit\MailKit\Search\SearchQuery.cs,DoesNotHaveFlags,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Search,SearchQuery,C:\repos\jstedfast_MailKit\MailKit\Search\SearchQuery.cs,HasFlags,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,Cyclomatic complexity of the method is 9
Complex Method,MailKit.Security,SaslMechanism,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanism.cs,IsProhibited,Cyclomatic complexity of the method is 8
Complex Method,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,Cyclomatic complexity of the method is 8
Complex Method,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,Cyclomatic complexity of the method is 13
Complex Method,MailKit,BodyPartCollection,C:\repos\jstedfast_MailKit\MailKit\BodyPartCollection.cs,IndexOf,Cyclomatic complexity of the method is 8
Complex Method,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,Encode,Cyclomatic complexity of the method is 13
Complex Method,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,Cyclomatic complexity of the method is 17
Complex Method,MailKit,MessageSummary,C:\repos\jstedfast_MailKit\MailKit\MessageSummary.cs,TryGetMessageBody,Cyclomatic complexity of the method is 8
Complex Method,MailKit,MessageSummary,C:\repos\jstedfast_MailKit\MailKit\MessageSummary.cs,EnumerateBodyParts,Cyclomatic complexity of the method is 8
Complex Method,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,CreateIdTable,Cyclomatic complexity of the method is 13
Complex Method,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GroupBySubject,Cyclomatic complexity of the method is 9
Complex Method,MailKit,UniqueIdSet,C:\repos\jstedfast_MailKit\MailKit\UniqueIdSet.cs,ToString,Cyclomatic complexity of the method is 12
Long Parameter List,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The method has 5 parameters. Parameters: socket' host' port' options' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ComputeDefaultValues,The method has 5 parameters. Parameters: host' port' options' uri' starttls
Long Parameter List,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The method has 5 parameters. Parameters: host' port' options' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The method has 6 parameters. Parameters: socket' host' port' options' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,Connect,The method has 5 parameters. Parameters: socket' host' port' options' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,GetFoldersAsync,The method has 5 parameters. Parameters: namespace' items' subscribedOnly' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapCommand,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,ImapCommand,The method has 6 parameters. Parameters: engine' cancellationToken' folder' options' format' args
Long Parameter List,MailKit.Net.Imap,ImapCommand,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,ImapCommand,The method has 5 parameters. Parameters: engine' cancellationToken' folder' format' args
Long Parameter List,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,QueueCommand,The method has 5 parameters. Parameters: cancellationToken' folder' options' format' args
Long Parameter List,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,GetFoldersAsync,The method has 5 parameters. Parameters: namespace' items' subscribedOnly' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,OpenAsync,The method has 6 parameters. Parameters: access' uidValidity' highestModSeq' uids' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Open,The method has 5 parameters. Parameters: access' uidValidity' highestModSeq' uids' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,OpenAsync,The method has 5 parameters. Parameters: access' uidValidity' highestModSeq' uids' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ModifyAccessRightsAsync,The method has 5 parameters. Parameters: name' rights' action' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,QueueAppend,The method has 6 parameters. Parameters: options' message' flags' date' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' message' flags' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Append,The method has 5 parameters. Parameters: options' message' flags' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 5 parameters. Parameters: options' message' flags' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 7 parameters. Parameters: options' message' flags' date' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Append,The method has 6 parameters. Parameters: options' message' flags' date' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' message' flags' date' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,QueueMultiAppend,The method has 6 parameters. Parameters: options' messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' messages' flags' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Append,The method has 5 parameters. Parameters: options' messages' flags' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 5 parameters. Parameters: options' messages' flags' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 7 parameters. Parameters: options' messages' flags' dates' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Append,The method has 6 parameters. Parameters: options' messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' items' fields' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' modseq' items' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 6 parameters. Parameters: uids' modseq' items' fields' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' items' fields' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' modseq' items' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 6 parameters. Parameters: indexes' modseq' items' fields' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' items' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' items' fields' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' modseq' items' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 7 parameters. Parameters: min' max' modseq' items' fields' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' modseq' items' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' modseq' items' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,Fetch,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,CommitStream,The method has 5 parameters. Parameters: stream' uid' section' offset' length
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetHeadersAsync,The method has 5 parameters. Parameters: uid' partSpecifier' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetHeadersAsync,The method has 5 parameters. Parameters: index' partSpecifier' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetBodyPartAsync,The method has 5 parameters. Parameters: uid' partSpecifier' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetBodyPartAsync,The method has 5 parameters. Parameters: index' partSpecifier' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: uid' offset' count' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: index' offset' count' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStream,The method has 5 parameters. Parameters: uid' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: uid' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStream,The method has 5 parameters. Parameters: index' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: index' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: uid' section' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 7 parameters. Parameters: uid' section' offset' count' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStream,The method has 6 parameters. Parameters: uid' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: uid' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: index' section' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 7 parameters. Parameters: index' section' offset' count' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStream,The method has 6 parameters. Parameters: index' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: index' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ModifyFlagsAsync,The method has 7 parameters. Parameters: uids' modseq' flags' userFlags' action' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ModifyFlagsAsync,The method has 7 parameters. Parameters: indexes' modseq' flags' userFlags' action' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ModifyLabelsAsync,The method has 6 parameters. Parameters: uids' modseq' labels' action' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ModifyLabelsAsync,The method has 6 parameters. Parameters: indexes' modseq' labels' action' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,BuildQuery,The method has 5 parameters. Parameters: builder' query' args' parens' ascii
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SortAsync,The method has 5 parameters. Parameters: options' query' orderBy' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ThreadAsync,The method has 5 parameters. Parameters: uids' algorithm' query' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,Section,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolderFetch.cs,Section,The method has 5 parameters. Parameters: stream' uid' name' offset' length
Long Parameter List,MailKit.Net.Imap,ImapStream,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapStream.cs,ReadAsync,The method has 5 parameters. Parameters: buffer' offset' count' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapStream,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapStream.cs,WriteAsync,The method has 5 parameters. Parameters: buffer' offset' count' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ReadNStringTokenAsync,The method has 5 parameters. Parameters: engine' format' rfc2047' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseParameterListAsync,The method has 5 parameters. Parameters: builder' engine' format' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseMultipartAsync,The method has 6 parameters. Parameters: engine' format' path' subtype' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseBodyAsync,The method has 5 parameters. Parameters: engine' format' path' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAddressListAsync,The method has 5 parameters. Parameters: list' engine' format' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseFlagsListAsync,The method has 5 parameters. Parameters: engine' name' userFlags' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The method has 5 parameters. Parameters: socket' host' port' options' cancellationToken
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,GetStreamsAsync,The method has 5 parameters. Parameters: startIndex' count' headersOnly' cancellationToken' progress
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,SendCommandAsync,The method has 5 parameters. Parameters: doAsync' token' encoding' format' args
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ComputeDefaultValues,The method has 5 parameters. Parameters: host' port' options' uri' starttls
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The method has 5 parameters. Parameters: host' port' options' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The method has 6 parameters. Parameters: socket' host' port' options' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,Connect,The method has 5 parameters. Parameters: socket' host' port' options' cancellationToken
Long Parameter List,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,GetStreams,The method has 5 parameters. Parameters: startIndex' count' headersOnly' cancellationToken' progress
Long Parameter List,MailKit.Net.Pop3,Pop3Command,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Command.cs,Pop3Command,The method has 5 parameters. Parameters: cancellationToken' handler' encoding' format' args
Long Parameter List,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,QueueCommand,The method has 5 parameters. Parameters: cancellationToken' handler' encoding' format' args
Long Parameter List,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The method has 5 parameters. Parameters: buffer' offset' count' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,WriteAsync,The method has 5 parameters. Parameters: buffer' offset' count' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The method has 5 parameters. Parameters: socket' host' port' options' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,SendAsync,The method has 6 parameters. Parameters: options' message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,FlushCommandQueueAsync,The method has 5 parameters. Parameters: message' sender' recipients' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ComputeDefaultValues,The method has 5 parameters. Parameters: host' port' options' uri' starttls
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The method has 5 parameters. Parameters: host' port' options' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The method has 6 parameters. Parameters: socket' host' port' options' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,Connect,The method has 5 parameters. Parameters: socket' host' port' options' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,MailFromAsync,The method has 6 parameters. Parameters: options' message' mailbox' extensions' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,RcptToAsync,The method has 5 parameters. Parameters: options' message' mailbox' doAsync' cancellationToken
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,BdatAsync,The method has 5 parameters. Parameters: options' message' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,DataAsync,The method has 5 parameters. Parameters: options' message' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,SendAsync,The method has 7 parameters. Parameters: options' message' sender' recipients' doAsync' cancellationToken' progress
Long Parameter List,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,Send,The method has 6 parameters. Parameters: options' message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit.Net.Smtp,SmtpDataFilter,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpDataFilter.cs,Filter,The method has 6 parameters. Parameters: input' startIndex' length' outputIndex' outputLength' flush
Long Parameter List,MailKit.Net.Smtp,SmtpStream,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpStream.cs,WriteAsync,The method has 5 parameters. Parameters: buffer' offset' count' doAsync' cancellationToken
Long Parameter List,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,Compute,The method has 7 parameters. Parameters: type2' level' username' password' domain' lm' ntlm
Long Parameter List,MailKit.Security.Ntlm,DesTransform,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,MailKit.Security.Ntlm,HMACMD5,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\HMACMD5.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,FF,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,GG,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HH,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeString,The method has 5 parameters. Parameters: buf' index' type' value' unicode
Long Parameter List,MailKit.Security,DigestResponse,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,DigestResponse,The method has 6 parameters. Parameters: challenge' protocol' hostName' userName' password' cnonce
Long Parameter List,MailKit.Security,SaslMechanismNtlm,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismNtlm.cs,GetChallengeResponse,The method has 6 parameters. Parameters: userName' password' domain' token' startIndex' length
Long Parameter List,MailKit,CompressedStream,C:\repos\jstedfast_MailKit\MailKit\CompressedStream.cs,ReadAsync,The method has 5 parameters. Parameters: buffer' offset' count' doAsync' cancellationToken
Long Parameter List,MailKit,CompressedStream,C:\repos\jstedfast_MailKit\MailKit\CompressedStream.cs,WriteAsync,The method has 5 parameters. Parameters: buffer' offset' count' doAsync' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Open,The method has 5 parameters. Parameters: access' uidValidity' highestModSeq' uids' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,OpenAsync,The method has 5 parameters. Parameters: access' uidValidity' highestModSeq' uids' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Append,The method has 5 parameters. Parameters: message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Append,The method has 5 parameters. Parameters: options' message' flags' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: options' message' flags' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Append,The method has 6 parameters. Parameters: options' message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Append,The method has 5 parameters. Parameters: messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Append,The method has 5 parameters. Parameters: options' messages' flags' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: options' messages' flags' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Append,The method has 6 parameters. Parameters: options' messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' modseq' items' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' modseq' items' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Fetch,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStream,The method has 5 parameters. Parameters: uid' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: uid' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStream,The method has 5 parameters. Parameters: index' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: index' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStream,The method has 6 parameters. Parameters: uid' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: uid' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStream,The method has 6 parameters. Parameters: index' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: index' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStream,The method has 6 parameters. Parameters: uid' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: uid' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStream,The method has 6 parameters. Parameters: index' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: index' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,AddLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,RemoveLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SetLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,Sort,The method has 5 parameters. Parameters: options' uids' query' orderBy' cancellationToken
Long Parameter List,MailKit,IMailFolder,C:\repos\jstedfast_MailKit\MailKit\IMailFolder.cs,SortAsync,The method has 5 parameters. Parameters: options' uids' query' orderBy' cancellationToken
Long Parameter List,MailKit,IMailSpool,C:\repos\jstedfast_MailKit\MailKit\IMailSpool.cs,GetStreams,The method has 5 parameters. Parameters: startIndex' count' headersOnly' cancellationToken' progress
Long Parameter List,MailKit,IMailSpool,C:\repos\jstedfast_MailKit\MailKit\IMailSpool.cs,GetStreamsAsync,The method has 5 parameters. Parameters: startIndex' count' headersOnly' cancellationToken' progress
Long Parameter List,MailKit,IMailTransport,C:\repos\jstedfast_MailKit\MailKit\IMailTransport.cs,Send,The method has 5 parameters. Parameters: message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,IMailTransport,C:\repos\jstedfast_MailKit\MailKit\IMailTransport.cs,SendAsync,The method has 5 parameters. Parameters: message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,IMailTransport,C:\repos\jstedfast_MailKit\MailKit\IMailTransport.cs,Send,The method has 6 parameters. Parameters: options' message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,IMailTransport,C:\repos\jstedfast_MailKit\MailKit\IMailTransport.cs,SendAsync,The method has 6 parameters. Parameters: options' message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Open,The method has 5 parameters. Parameters: access' uidValidity' highestModSeq' uids' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,OpenAsync,The method has 5 parameters. Parameters: access' uidValidity' highestModSeq' uids' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Append,The method has 5 parameters. Parameters: message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Append,The method has 5 parameters. Parameters: options' message' flags' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: options' message' flags' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Append,The method has 6 parameters. Parameters: options' message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' message' flags' date' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Append,The method has 5 parameters. Parameters: messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Append,The method has 5 parameters. Parameters: options' messages' flags' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AppendAsync,The method has 5 parameters. Parameters: options' messages' flags' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Append,The method has 6 parameters. Parameters: options' messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AppendAsync,The method has 6 parameters. Parameters: options' messages' flags' dates' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: uids' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: indexes' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 5 parameters. Parameters: min' max' modseq' items' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 5 parameters. Parameters: min' max' modseq' items' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Fetch,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,FetchAsync,The method has 6 parameters. Parameters: min' max' modseq' items' fields' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStream,The method has 5 parameters. Parameters: uid' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: uid' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStream,The method has 5 parameters. Parameters: index' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStreamAsync,The method has 5 parameters. Parameters: index' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStream,The method has 6 parameters. Parameters: uid' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: uid' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStream,The method has 6 parameters. Parameters: index' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: index' part' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStream,The method has 6 parameters. Parameters: uid' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: uid' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStream,The method has 6 parameters. Parameters: index' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,GetStreamAsync,The method has 6 parameters. Parameters: index' section' offset' count' cancellationToken' progress
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: uid' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: uids' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: uids' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 6 parameters. Parameters: uids' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: index' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: indexes' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 5 parameters. Parameters: indexes' modseq' flags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlags,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetFlagsAsync,The method has 6 parameters. Parameters: indexes' modseq' flags' userFlags' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetLabels,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetLabelsAsync,The method has 5 parameters. Parameters: uids' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,AddLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,RemoveLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetLabels,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SetLabelsAsync,The method has 5 parameters. Parameters: indexes' modseq' labels' silent' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,Sort,The method has 5 parameters. Parameters: options' uids' query' orderBy' cancellationToken
Long Parameter List,MailKit,MailFolder,C:\repos\jstedfast_MailKit\MailKit\MailFolder.cs,SortAsync,The method has 5 parameters. Parameters: options' uids' query' orderBy' cancellationToken
Long Parameter List,MailKit,MailSpool,C:\repos\jstedfast_MailKit\MailKit\MailSpool.cs,GetStreams,The method has 5 parameters. Parameters: startIndex' count' headersOnly' cancellationToken' progress
Long Parameter List,MailKit,MailSpool,C:\repos\jstedfast_MailKit\MailKit\MailSpool.cs,GetStreamsAsync,The method has 5 parameters. Parameters: startIndex' count' headersOnly' cancellationToken' progress
Long Parameter List,MailKit,MailTransport,C:\repos\jstedfast_MailKit\MailKit\MailTransport.cs,Send,The method has 5 parameters. Parameters: message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,MailTransport,C:\repos\jstedfast_MailKit\MailKit\MailTransport.cs,SendAsync,The method has 5 parameters. Parameters: message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,MailTransport,C:\repos\jstedfast_MailKit\MailKit\MailTransport.cs,Send,The method has 6 parameters. Parameters: options' message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,MailTransport,C:\repos\jstedfast_MailKit\MailKit\MailTransport.cs,SendAsync,The method has 6 parameters. Parameters: options' message' sender' recipients' cancellationToken' progress
Long Parameter List,MailKit,MessageFlagsChangedEventArgs,C:\repos\jstedfast_MailKit\MailKit\MessageFlagsChangedEventArgs.cs,MessageFlagsChangedEventArgs,The method has 5 parameters. Parameters: index' uid' flags' userFlags' modseq
Long Parameter List,MailKit,ProtocolLogger,C:\repos\jstedfast_MailKit\MailKit\ProtocolLogger.cs,Log,The method has 5 parameters. Parameters: prefix' midline' buffer' offset' count
Long Identifier,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,,The length of the parameter GenericUntaggedResponseSyntaxErrorFormat is 40.
Long Identifier,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,,The length of the parameter GenericResponseCodeSyntaxErrorFormat is 36.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ReplayConnect,The length of the statement  "			engine.ConnectAsync (new ImapStream (replayStream' null' ProtocolLogger)' false' cancellationToken).GetAwaiter ().GetResult (); " is 127.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ReplayConnectAsync,The length of the statement  "			await engine.ConnectAsync (new ImapStream (replayStream' null' ProtocolLogger)' true' cancellationToken).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "						await ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "						ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "			var protection = options == SecureSocketOptions.SslOnConnect ? SocketProtectionLevel.Tls12 : SocketProtectionLevel.PlainSocket; " is 127.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "					await socket.ConnectAsync (new HostName (host)' port.ToString ()' protection).AsTask (cancellationToken).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "					socket.ConnectAsync (new HostName (host)' port.ToString ()' protection).AsTask (cancellationToken).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "			await engine.ConnectAsync (new ImapStream (stream' socket' ProtocolLogger)' doAsync' cancellationToken).ConfigureAwait (false); " is 127.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "								await tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "							tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "								await socket.UpgradeToSslAsync (SocketProtectionLevel.Tls12' new HostName (host)).AsTask (cancellationToken).ConfigureAwait (false); " is 132.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "								socket.UpgradeToSslAsync (SocketProtectionLevel.Tls12' new HostName (host)).AsTask (cancellationToken).GetAwaiter ().GetResult (); " is 130.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "						await ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "						ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "			await engine.ConnectAsync (new ImapStream (stream' socket' ProtocolLogger)' doAsync' cancellationToken).ConfigureAwait (false); " is 127.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "								await tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The length of the statement  "								tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,GetFoldersAsync,The length of the statement  "			var folders = await engine.GetFoldersAsync (@namespace' items' subscribedOnly' doAsync' cancellationToken).ConfigureAwait (false); " is 130.
Long Statement,MailKit.Net.Imap,ImapCommandException,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommandException.cs,Create,The length of the statement  "				message = string.Format ("The IMAP server replied to the '{0}' command with a '{1}' response: {2}"' command' result' reason); " is 125.
Long Statement,MailKit.Net.Imap,ImapCommandException,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommandException.cs,Create,The length of the statement  "			return ic.Exception != null ? new ImapCommandException (ic.Response' reason' message' ic.Exception) : new ImapCommandException (ic.Response' reason' message); " is 158.
Long Statement,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ParseResponseCodeAsync,The length of the statement  "				perm.Flags = await ImapUtils.ParseFlagsListAsync (this' "PERMANENTFLAGS"' null' doAsync' cancellationToken).ConfigureAwait (false); " is 131.
Long Statement,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ParseResponseCodeAsync,The length of the statement  "					Debug.WriteLine ("Expected number argument to '{0}' RESP-CODE' but got: {1}"' code.Type.ToString ().ToUpperInvariant ()' token); " is 128.
Long Statement,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ProcessUntaggedResponseAsync,The length of the statement  "				folder.UpdateAcceptedFlags (await ImapUtils.ParseFlagsListAsync (this' atom' null' doAsync' cancellationToken).ConfigureAwait (false)); " is 135.
Long Statement,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,QueueCommand,The length of the statement  "				throw new InvalidOperationException ("The ImapClient is currently busy processing a command in another thread. Lock the SyncRoot property to properly synchronize your threads."); " is 178.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AppendAsync,The length of the statement  "				var uid = await AppendAsync (format' messages[i]' flags[i]' doAsync' cancellationToken' progress).ConfigureAwait (false); " is 121.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,CopyToAsync,The length of the statement  "				var indexes = (await FetchAsync (uids' MessageSummaryItems.UniqueId' doAsync' cancellationToken).ConfigureAwait (false)).Select (x => x.Index).ToList (); " is 153.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,MoveToAsync,The length of the statement  "				var indexes = (await FetchAsync (uids' MessageSummaryItems.UniqueId' doAsync' cancellationToken).ConfigureAwait (false)).Select (x => x.Index).ToList (); " is 153.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,OnFetchAsync,The length of the statement  "					flagsChangedEventArgs.Flags = await ImapUtils.ParseFlagsListAsync (engine' atom' flagsChangedEventArgs.UserFlags' doAsync' cancellationToken).ConfigureAwait (false); " is 165.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,OnFetchAsync,The length of the statement  "					labelsChangedEventArgs.Labels = await ImapUtils.ParseLabelsListAsync (engine' doAsync' cancellationToken).ConfigureAwait (false); " is 129.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchSummaryItemsAsync,The length of the statement  "					summary.Body = await ImapUtils.ParseBodyAsync (engine' format' string.Empty' doAsync' ic.CancellationToken).ConfigureAwait (false); " is 131.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchSummaryItemsAsync,The length of the statement  "							summary.Body = await ImapUtils.ParseBodyAsync (engine' format' string.Empty' doAsync' ic.CancellationToken).ConfigureAwait (false); " is 131.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchSummaryItemsAsync,The length of the statement  "					summary.Flags = await ImapUtils.ParseFlagsListAsync (engine' atom' summary.UserFlags' doAsync' ic.CancellationToken).ConfigureAwait (false); " is 140.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchSummaryItemsAsync,The length of the statement  "					summary.GMailLabels = await ImapUtils.ParseLabelsListAsync (engine' doAsync' ic.CancellationToken).ConfigureAwait (false); " is 122.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchStreamAsync,The length of the statement  "					flags.Flags = await ImapUtils.ParseFlagsListAsync (engine' atom' flags.UserFlags' doAsync' ic.CancellationToken).ConfigureAwait (false); " is 136.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The length of the statement  "			var ic = new ImapCommand (Engine' cancellationToken' this' "UID FETCH %u (BODY.PEEK[]<%d.%d>)\r\n"' uid.Id' offset' count); " is 123.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetStreamAsync,The length of the statement  "			var ic = new ImapCommand (Engine' cancellationToken' this' "FETCH %d (BODY.PEEK[]<%d.%d>)\r\n"' index + 1' offset' count); " is 122.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The length of the statement  "			ModifyFlagsAsync (uids' null' flags' userFlags' silent ? "+FLAGS.SILENT" : "+FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 138.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The length of the statement  "			ModifyFlagsAsync (uids' null' flags' userFlags' silent ? "-FLAGS.SILENT" : "-FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 138.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The length of the statement  "			ModifyFlagsAsync (uids' null' flags' userFlags' silent ? "FLAGS.SILENT" : "FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 136.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The length of the statement  "			return ModifyFlagsAsync (uids' modseq' flags' userFlags' silent ? "+FLAGS.SILENT" : "+FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 147.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The length of the statement  "			return ModifyFlagsAsync (uids' modseq' flags' userFlags' silent ? "-FLAGS.SILENT" : "-FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 147.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The length of the statement  "			return ModifyFlagsAsync (uids' modseq' flags' userFlags' silent ? "FLAGS.SILENT" : "FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 145.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The length of the statement  "			ModifyFlagsAsync (indexes' null' flags' userFlags' silent ? "+FLAGS.SILENT" : "+FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 141.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlagsAsync,The length of the statement  "			return ModifyFlagsAsync (indexes' null' flags' userFlags' silent ? "+FLAGS.SILENT" : "+FLAGS"' true' cancellationToken); " is 120.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The length of the statement  "			ModifyFlagsAsync (indexes' null' flags' userFlags' silent ? "-FLAGS.SILENT" : "-FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 141.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlagsAsync,The length of the statement  "			return ModifyFlagsAsync (indexes' null' flags' userFlags' silent ? "-FLAGS.SILENT" : "-FLAGS"' true' cancellationToken); " is 120.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The length of the statement  "			ModifyFlagsAsync (indexes' null' flags' userFlags' silent ? "FLAGS.SILENT" : "FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 139.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlags,The length of the statement  "			return ModifyFlagsAsync (indexes' modseq' flags' userFlags' silent ? "+FLAGS.SILENT" : "+FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 150.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddFlagsAsync,The length of the statement  "			return ModifyFlagsAsync (indexes' modseq' flags' userFlags' silent ? "+FLAGS.SILENT" : "+FLAGS"' true' cancellationToken); " is 122.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlags,The length of the statement  "			return ModifyFlagsAsync (indexes' modseq' flags' userFlags' silent ? "-FLAGS.SILENT" : "-FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 150.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveFlagsAsync,The length of the statement  "			return ModifyFlagsAsync (indexes' modseq' flags' userFlags' silent ? "-FLAGS.SILENT" : "-FLAGS"' true' cancellationToken); " is 122.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlags,The length of the statement  "			return ModifyFlagsAsync (indexes' modseq' flags' userFlags' silent ? "FLAGS.SILENT" : "FLAGS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 148.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetFlagsAsync,The length of the statement  "			return ModifyFlagsAsync (indexes' modseq' flags' userFlags' silent ? "FLAGS.SILENT" : "FLAGS"' true' cancellationToken); " is 120.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabels,The length of the statement  "			ModifyLabelsAsync (uids' null' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 141.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (uids' null' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' true' cancellationToken); " is 120.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabels,The length of the statement  "			ModifyLabelsAsync (uids' null' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 141.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (uids' null' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' true' cancellationToken); " is 120.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabels,The length of the statement  "			ModifyLabelsAsync (uids' null' labels' silent ? "X-GM-LABELS.SILENT" : "X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 139.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabels,The length of the statement  "			return ModifyLabelsAsync (uids' modseq' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 150.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (uids' modseq' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' true' cancellationToken); " is 122.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabels,The length of the statement  "			return ModifyLabelsAsync (uids' modseq' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 150.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (uids' modseq' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' true' cancellationToken); " is 122.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabels,The length of the statement  "			return ModifyLabelsAsync (uids' modseq' labels' silent ? "X-GM-LABELS.SILENT" : "X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 148.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (uids' modseq' labels' silent ? "X-GM-LABELS.SILENT" : "X-GM-LABELS"' true' cancellationToken); " is 120.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabels,The length of the statement  "			ModifyLabelsAsync (indexes' null' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 144.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (indexes' null' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' true' cancellationToken); " is 123.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabels,The length of the statement  "			ModifyLabelsAsync (indexes' null' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 144.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (indexes' null' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' true' cancellationToken); " is 123.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabels,The length of the statement  "			ModifyLabelsAsync (indexes' null' labels' silent ? "X-GM-LABELS.SILENT" : "X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 142.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (indexes' null' labels' silent ? "X-GM-LABELS.SILENT" : "X-GM-LABELS"' true' cancellationToken); " is 121.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabels,The length of the statement  "			return ModifyLabelsAsync (indexes' modseq' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 153.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,AddLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (indexes' modseq' labels' silent ? "+X-GM-LABELS.SILENT" : "+X-GM-LABELS"' true' cancellationToken); " is 125.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabels,The length of the statement  "			return ModifyLabelsAsync (indexes' modseq' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 153.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,RemoveLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (indexes' modseq' labels' silent ? "-X-GM-LABELS.SILENT" : "-X-GM-LABELS"' true' cancellationToken); " is 125.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabels,The length of the statement  "			return ModifyLabelsAsync (indexes' modseq' labels' silent ? "X-GM-LABELS.SILENT" : "X-GM-LABELS"' false' cancellationToken).GetAwaiter ().GetResult (); " is 151.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SetLabelsAsync,The length of the statement  "			return ModifyLabelsAsync (indexes' modseq' labels' silent ? "X-GM-LABELS.SILENT" : "X-GM-LABELS"' true' cancellationToken); " is 123.
Long Statement,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ThreadMatchesAsync,The length of the statement  "			ic.UserData = await ImapUtils.ParseThreadsAsync (engine' ic.Folder.UidValidity' doAsync' ic.CancellationToken).ConfigureAwait (false); " is 134.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,The length of the statement  "			// return DateTimeOffset.ParseExact (text.Trim ()' "d-MMM-yyyy HH:mm:ss zzz"' CultureInfo.InvariantCulture.DateTimeFormat); " is 123.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseParameterListAsync,The length of the statement  "				var value = await ReadNStringTokenAsync (engine' format' false' doAsync' cancellationToken).ConfigureAwait (false) ?? string.Empty; " is 131.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseContentTypeAsync,The length of the statement  "			var type = await ReadNStringTokenAsync (engine' format' false' doAsync' cancellationToken).ConfigureAwait (false) ?? "application"; " is 131.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseContentTypeAsync,The length of the statement  "				subtype = await ReadNStringTokenAsync (engine' format' false' doAsync' cancellationToken).ConfigureAwait (false) ?? string.Empty; " is 129.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseMultipartAsync,The length of the statement  "					body.BodyParts.Add (await ParseBodyAsync (engine' format' prefix + index' doAsync' cancellationToken).ConfigureAwait (false)); " is 126.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseMultipartAsync,The length of the statement  "				body.ContentDisposition = await ParseContentDispositionAsync (engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 129.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseMultipartAsync,The length of the statement  "				body.ContentLanguage = await ParseContentLanguageAsync (engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 123.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseMultipartAsync,The length of the statement  "				body.ContentLocation = await ParseContentLocationAsync (engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 123.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseBodyAsync,The length of the statement  "				return await ParseMultipartAsync (engine' format' path' (string) result' doAsync' cancellationToken).ConfigureAwait (false); " is 124.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseBodyAsync,The length of the statement  "				body.ContentMd5 = await ReadNStringTokenAsync (engine' format' false' doAsync' cancellationToken).ConfigureAwait (false); " is 121.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseBodyAsync,The length of the statement  "				body.ContentDisposition = await ParseContentDispositionAsync (engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 129.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseBodyAsync,The length of the statement  "				body.ContentLanguage = await ParseContentLanguageAsync (engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 123.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseBodyAsync,The length of the statement  "				body.ContentLocation = await ParseContentLocationAsync (engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 123.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAsync,The length of the statement  "			envelope.Subject = await ReadNStringTokenAsync (engine' format' true' doAsync' cancellationToken).ConfigureAwait (false); " is 121.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAsync,The length of the statement  "			await ParseEnvelopeAddressListAsync (envelope.Sender' engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 121.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAsync,The length of the statement  "			await ParseEnvelopeAddressListAsync (envelope.ReplyTo' engine' format' doAsync' cancellationToken).ConfigureAwait (false); " is 122.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAsync,The length of the statement  "			if ((nstring = await ReadNStringTokenAsync (engine' format' false' doAsync' cancellationToken).ConfigureAwait (false)) != null) " is 127.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAsync,The length of the statement  "			if ((nstring = await ReadNStringTokenAsync (engine' format' false' doAsync' cancellationToken).ConfigureAwait (false)) != null) " is 127.
Long Statement,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseLabelsListAsync,The length of the statement  "			while (token.Type == ImapTokenType.Flag || token.Type == ImapTokenType.Atom || token.Type == ImapTokenType.QString || token.Type == ImapTokenType.Nil) { " is 152.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,AuthenticateAsync,The length of the statement  "					authMessage = await SendCommandAsync (doAsync' cancellationToken' encoding' "APOP {0} {1}"' userName' md5sum).ConfigureAwait (false); " is 133.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,AuthenticateAsync,The length of the statement  "				authMessage = await SendCommandAsync (doAsync' cancellationToken' encoding' "PASS {0}"' password).ConfigureAwait (false); " is 121.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ReplayConnectAsync,The length of the statement  "			await engine.ConnectAsync (new Pop3Stream (replayStream' null' ProtocolLogger)' cancellationToken).ConfigureAwait (false); " is 122.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "						await ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "						ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "			var protection = options == SecureSocketOptions.SslOnConnect ? SocketProtectionLevel.Tls12 : SocketProtectionLevel.PlainSocket; " is 127.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "					await socket.ConnectAsync (new HostName (host)' port.ToString ()' protection).AsTask (cancellationToken).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "					socket.ConnectAsync (new HostName (host)' port.ToString ()' protection).AsTask (cancellationToken).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "							await tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "							tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "							await socket.UpgradeToSslAsync (SocketProtectionLevel.Tls12' new HostName (host)).AsTask (cancellationToken).ConfigureAwait (false); " is 132.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "							socket.UpgradeToSslAsync (SocketProtectionLevel.Tls12' new HostName (host)).AsTask (cancellationToken).GetAwaiter ().GetResult (); " is 130.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "						await ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "						ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "							await tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The length of the statement  "							tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "						await ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "						ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "			var protection = options == SecureSocketOptions.SslOnConnect ? SocketProtectionLevel.Tls12 : SocketProtectionLevel.PlainSocket; " is 127.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "					await socket.ConnectAsync (new HostName (host)' port.ToString ()' protection).AsTask (cancellationToken).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "					socket.ConnectAsync (new HostName (host)' port.ToString ()' protection).AsTask (cancellationToken).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "							await tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "							await socket.UpgradeToSslAsync (SocketProtectionLevel.Tls12' new HostName (host)).AsTask (cancellationToken).ConfigureAwait (false); " is 132.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "							socket.UpgradeToSslAsync (SocketProtectionLevel.Tls12' new HostName (host)).AsTask (cancellationToken).GetAwaiter ().GetResult (); " is 130.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "						await ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "						ssl.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "							await tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).ConfigureAwait (false); " is 128.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The length of the statement  "							tls.AuthenticateAsClientAsync (host' ClientCertificates' SslProtocols' CheckCertificateRevocation).GetAwaiter ().GetResult (); " is 126.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ExpandAsync,The length of the statement  "			var response = await SendCommandAsync (string.Format ("EXPN {0}"' alias)' doAsync' cancellationToken).ConfigureAwait (false); " is 125.
Long Statement,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,VerifyAsync,The length of the statement  "			var response = await SendCommandAsync (string.Format ("VRFY {0}"' address)' doAsync' cancellationToken).ConfigureAwait (false); " is 127.
Long Statement,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The length of the statement  "				if (targetInfoLength > 0 && targetInfoOffset < message.Length && targetInfoLength <= (message.Length - targetInfoOffset)) { " is 123.
Long Statement,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The length of the statement  "					TargetInfo = new TargetInfo (message' startIndex + targetInfoOffset' targetInfoLength' (Flags & NtlmFlags.NegotiateUnicode) != 0); " is 130.
Long Statement,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The length of the statement  "					throw new InvalidOperationException ("Refusing to use legacy-mode LM/NTLM authentication unless explicitly enabled using NtlmSettings.DefaultAuthLevel."); " is 154.
Long Statement,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The length of the statement  "			var data = PrepareMessage (payloadOffset + target.Length + user.Length + hostName.Length + lmResponseLength + ntResponseLength); " is 128.
Long Statement,MailKit.Security,SaslMechanismDigestMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,Challenge,The length of the statement  "					throw new SaslException (MechanismName' SaslErrorCode.MissingChallenge' "Server response did not contain any authentication data."); " is 132.
Long Statement,MailKit.Security,SaslMechanismDigestMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,Challenge,The length of the statement  "					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Server response contained incomplete authentication data."); " is 136.
Long Statement,MailKit.Security,SaslMechanismDigestMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,Challenge,The length of the statement  "					throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Server response did not contain the expected hash."); " is 123.
Long Statement,MailKit.Security,DigestChallenge,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,Parse,The length of the statement  "					throw new SaslException ("DIGEST-MD5"' SaslErrorCode.InvalidChallenge' string.Format ("Invalid SASL challenge from the server: {0}"' token)); " is 141.
Long Statement,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,Challenge,The length of the statement  "					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Challenge did not contain an iteration count."); " is 124.
Long Statement,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,Challenge,The length of the statement  "					throw new SaslException (MechanismName' SaslErrorCode.InvalidChallenge' "Challenge contained an invalid iteration count."); " is 123.
Long Statement,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,Challenge,The length of the statement  "					throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Challenge contained a signature with an invalid length."); " is 128.
Long Statement,MailKit.Security,SslHandshakeException,C:\repos\jstedfast_MailKit\MailKit\Security\SslHandshakeException.cs,Create,The length of the statement  "				message += "The SSL certificate presented by the server is not trusted by the system for one or more of the following reasons:"; " is 128.
Long Statement,MailKit.Security,SslHandshakeException,C:\repos\jstedfast_MailKit\MailKit\Security\SslHandshakeException.cs,Create,The length of the statement  "				message += "One possibility is that you are trying to connect to a port which does not support SSL/TLS." + Environment.NewLine; " is 127.
Long Statement,MailKit.Security,SslHandshakeException,C:\repos\jstedfast_MailKit\MailKit\Security\SslHandshakeException.cs,Create,The length of the statement  "				message += "The other possibility is that the SSL certificate presented by the server is not trusted by the system for one or more of the following reasons:"; " is 158.
Long Statement,MailKit.Security,SslHandshakeException,C:\repos\jstedfast_MailKit\MailKit\Security\SslHandshakeException.cs,Create,The length of the statement  "			message += "2. The local system is missing a Root or Intermediate certificate needed to verify the server's certificate." + Environment.NewLine; " is 144.
Long Statement,MailKit,CompressedStream,C:\repos\jstedfast_MailKit\MailKit\CompressedStream.cs,ReadAsync,The length of the statement  "						zIn.avail_in = await BaseStream.ReadAsync (zIn.next_in' 0' zIn.next_in.Length' cancellationToken).ConfigureAwait (false); " is 121.
Long Statement,MailKit,CompressedStream,C:\repos\jstedfast_MailKit\MailKit\CompressedStream.cs,WriteAsync,The length of the statement  "					await BaseStream.WriteAsync (zOut.next_out' 0' zOut.next_out.Length - zOut.avail_out' cancellationToken).ConfigureAwait (false); " is 128.
Long Statement,MailKit,MailService,C:\repos\jstedfast_MailKit\MailKit\MailService.cs,Connect,The length of the statement  "			Connect (host' port' useSsl ? SecureSocketOptions.SslOnConnect : SecureSocketOptions.StartTlsWhenAvailable' cancellationToken); " is 127.
Long Statement,MailKit,MailService,C:\repos\jstedfast_MailKit\MailKit\MailService.cs,ConnectAsync,The length of the statement  "			return ConnectAsync (host' port' useSsl ? SecureSocketOptions.SslOnConnect : SecureSocketOptions.StartTlsWhenAvailable' cancellationToken); " is 139.
Complex Conditional,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,IsValidMailboxName,The conditional expression  "c <= 0x1F || (c >= 0x80 && c <= 0x9F) || c == 0x7F || c == 0x2028 || c == 0x2029 || c == delim"  is complex.
Complex Conditional,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ESearchMatchesAsync,The conditional expression  "token.Type != ImapTokenType.Atom || !int.TryParse ((string) token.Value' out score) || score < 1 || score > 100"  is complex.
Complex Conditional,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,The conditional expression  "index >= text.Length || !TryGetInt32 (text' ref index' '-'' out day) || day < 1 || day > 31"  is complex.
Complex Conditional,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseLabelsListAsync,The conditional expression  "token.Type == ImapTokenType.Flag || token.Type == ImapTokenType.Atom || token.Type == ImapTokenType.QString || token.Type == ImapTokenType.Nil"  is complex.
Complex Conditional,MailKit.Security,SaslMechanism,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanism.cs,IsProhibited,The conditional expression  "(u >= 0xE000 && u <= 0xF8FF) || (u >= 0xF0000 && u <= 0xFFFFD) || (u >= 0x100000 && u <= 0x10FFFD)"  is complex.
Complex Conditional,MailKit.Security,SaslMechanism,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanism.cs,IsProhibited,The conditional expression  "(u >= 0xFDD0 && u <= 0xFDEF) || (u >= 0xFFFE && u <= 0xFFFF) || (u >= 0x1FFFE && u <= 0x1FFFF) ||  				(u >= 0x2FFFE && u <= 0x2FFFF) || (u >= 0x3FFFE && u <= 0x3FFFF) || (u >= 0x4FFFE && u <= 0x4FFFF) ||  				(u >= 0x5FFFE && u <= 0x5FFFF) || (u >= 0x6FFFE && u <= 0x6FFFF) || (u >= 0x7FFFE && u <= 0x7FFFF) ||  				(u >= 0x8FFFE && u <= 0x8FFFF) || (u >= 0x9FFFE && u <= 0x9FFFF) || (u >= 0xAFFFE && u <= 0xAFFFF) ||  				(u >= 0xBFFFE && u <= 0xBFFFF) || (u >= 0xCFFFE && u <= 0xCFFFF) || (u >= 0xDFFFE && u <= 0xDFFFF) ||  				(u >= 0xEFFFE && u <= 0xEFFFF) || (u >= 0xFFFFE && u <= 0xFFFFF) || (u >= 0x10FFFE && u <= 0x10FFFF)"  is complex.
Complex Conditional,MailKit.Security,DigestChallenge,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,TryParseKey,The conditional expression  "index < text.Length && !char.IsWhiteSpace (text[index]) && text[index] != '=' && text[index] != '''"  is complex.
Complex Conditional,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,CreateIdTable,The conditional expression  "parent != null && referenced.Parent == null && parent != referenced && !parent.Children.Contains (referenced)"  is complex.
Complex Conditional,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,PruneEmptyContainers,The conditional expression  "node.Message == null && node.HasChildren && (node.HasParent || node.Children.Count == 1)"  is complex.
Complex Conditional,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GroupBySubject,The conditional expression  "!subjects.TryGetValue (subject' out match) ||  					(current.Message == null && match.Message != null) ||  					(match.Message != null && match.Message.IsReply &&  						current.Message != null && !current.Message.IsReply)"  is complex.
Complex Conditional,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The conditional expression  "SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':'"  is complex.
Empty Catch Block,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Imap,FetchStreamContext,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolderFetch.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ProbeCapabilitiesAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,AuthenticateAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,DisconnectAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ResetAsync,The method has an empty catch block.
Empty Catch Block,MailKit.Security,SaslMechanism,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanism.cs,Challenge,The method has an empty catch block.
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexUnescape,The following statement contains a magic number: if (c >= 'a')  				value = (((c - 'a') + 10) << 4);  			else if (c >= 'A')  				value = (((c - 'A') + 10) << 4);  			else  				value = ((c - '0') << 4);
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexUnescape,The following statement contains a magic number: if (c >= 'a')  				value = (((c - 'a') + 10) << 4);  			else if (c >= 'A')  				value = (((c - 'A') + 10) << 4);  			else  				value = ((c - '0') << 4);
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexUnescape,The following statement contains a magic number: if (c >= 'a')  				value = (((c - 'a') + 10) << 4);  			else if (c >= 'A')  				value = (((c - 'A') + 10) << 4);  			else  				value = ((c - '0') << 4);
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexUnescape,The following statement contains a magic number: if (c >= 'a')  				value = (((c - 'a') + 10) << 4);  			else if (c >= 'A')  				value = (((c - 'A') + 10) << 4);  			else  				value = ((c - '0') << 4);
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexUnescape,The following statement contains a magic number: if (c >= 'a')  				value = (((c - 'a') + 10) << 4);  			else if (c >= 'A')  				value = (((c - 'A') + 10) << 4);  			else  				value = ((c - '0') << 4);
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexUnescape,The following statement contains a magic number: if (c >= 'a')  				value |= ((c - 'a') + 10);  			else if (c >= 'A')  				value |= ((c - 'A') + 10);  			else  				value |= (c - '0');
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexUnescape,The following statement contains a magic number: if (c >= 'a')  				value |= ((c - 'a') + 10);  			else if (c >= 'A')  				value |= ((c - 'A') + 10);  			else  				value |= (c - '0');
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,HexEscape,The following statement contains a magic number: return "%" + HexAlphabet[(c >> 4) & 0xF] + HexAlphabet[c & 0xF];
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 143;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 143; goto default;  				case 993: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 993;  				break;  			}
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 143;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 143; goto default;  				case 993: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 993;  				break;  			}
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 143;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 143; goto default;  				case 993: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 993;  				break;  			}
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 143;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 143; goto default;  				case 993: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 993;  				break;  			}
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit.Net.Imap,ImapClient,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\AsyncImapClient.cs,ConnectAsync,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit.Net.Imap,ImapLiteral,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,WriteToAsync,The following statement contains a magic number: var buf = new byte[4096];
Magic Number,MailKit.Net.Imap,ImapCommand,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,IsAtom,The following statement contains a magic number: return c < 128 && !char.IsControl (c) && "(){ \t%*\\\"]".IndexOf (c) == -1;
Magic Number,MailKit.Net.Imap,ImapCommand,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,IsQuotedSafe,The following statement contains a magic number: return (c < 128 || Engine.UTF8Enabled) && !char.IsControl (c);
Magic Number,MailKit.Net.Imap,ImapCommand,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,CanUseNonSynchronizedLiteral,The following statement contains a magic number: return (Engine.Capabilities & ImapCapabilities.LiteralPlus) != 0 ||  				(length <= 4096 && (Engine.Capabilities & ImapCapabilities.LiteralMinus) != 0);
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Decode,The following statement contains a magic number: while (index < text.Length) {  				c = text[index++];    				if (shifted) {  					if (c == '-') {  						// shifted back out of modified UTF-7  						shifted = false;  						bits = v = 0;  					} else if (c > 127) {  						// invalid UTF-7  						return text;  					} else {  						byte rank = utf7_rank[(byte) c];    						if (rank == 0xff) {  							// invalid UTF-7  							return text;  						}    						v = (v << 6) | rank;  						bits += 6;    						if (bits >= 16) {  							char u = (char) ((v >> (bits - 16)) & 0xffff);  							decoded.Append (u);  							bits -= 16;  						}  					}  				} else if (c == '&' && index < text.Length) {  					if (text[index] == '-') {  						decoded.Append ('&');  						index++;  					} else {  						// shifted into modified UTF-7  						shifted = true;  					}  				} else {  					decoded.Append (c);  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Decode,The following statement contains a magic number: while (index < text.Length) {  				c = text[index++];    				if (shifted) {  					if (c == '-') {  						// shifted back out of modified UTF-7  						shifted = false;  						bits = v = 0;  					} else if (c > 127) {  						// invalid UTF-7  						return text;  					} else {  						byte rank = utf7_rank[(byte) c];    						if (rank == 0xff) {  							// invalid UTF-7  							return text;  						}    						v = (v << 6) | rank;  						bits += 6;    						if (bits >= 16) {  							char u = (char) ((v >> (bits - 16)) & 0xffff);  							decoded.Append (u);  							bits -= 16;  						}  					}  				} else if (c == '&' && index < text.Length) {  					if (text[index] == '-') {  						decoded.Append ('&');  						index++;  					} else {  						// shifted into modified UTF-7  						shifted = true;  					}  				} else {  					decoded.Append (c);  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Decode,The following statement contains a magic number: while (index < text.Length) {  				c = text[index++];    				if (shifted) {  					if (c == '-') {  						// shifted back out of modified UTF-7  						shifted = false;  						bits = v = 0;  					} else if (c > 127) {  						// invalid UTF-7  						return text;  					} else {  						byte rank = utf7_rank[(byte) c];    						if (rank == 0xff) {  							// invalid UTF-7  							return text;  						}    						v = (v << 6) | rank;  						bits += 6;    						if (bits >= 16) {  							char u = (char) ((v >> (bits - 16)) & 0xffff);  							decoded.Append (u);  							bits -= 16;  						}  					}  				} else if (c == '&' && index < text.Length) {  					if (text[index] == '-') {  						decoded.Append ('&');  						index++;  					} else {  						// shifted into modified UTF-7  						shifted = true;  					}  				} else {  					decoded.Append (c);  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Decode,The following statement contains a magic number: while (index < text.Length) {  				c = text[index++];    				if (shifted) {  					if (c == '-') {  						// shifted back out of modified UTF-7  						shifted = false;  						bits = v = 0;  					} else if (c > 127) {  						// invalid UTF-7  						return text;  					} else {  						byte rank = utf7_rank[(byte) c];    						if (rank == 0xff) {  							// invalid UTF-7  							return text;  						}    						v = (v << 6) | rank;  						bits += 6;    						if (bits >= 16) {  							char u = (char) ((v >> (bits - 16)) & 0xffff);  							decoded.Append (u);  							bits -= 16;  						}  					}  				} else if (c == '&' && index < text.Length) {  					if (text[index] == '-') {  						decoded.Append ('&');  						index++;  					} else {  						// shifted into modified UTF-7  						shifted = true;  					}  				} else {  					decoded.Append (c);  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Decode,The following statement contains a magic number: while (index < text.Length) {  				c = text[index++];    				if (shifted) {  					if (c == '-') {  						// shifted back out of modified UTF-7  						shifted = false;  						bits = v = 0;  					} else if (c > 127) {  						// invalid UTF-7  						return text;  					} else {  						byte rank = utf7_rank[(byte) c];    						if (rank == 0xff) {  							// invalid UTF-7  							return text;  						}    						v = (v << 6) | rank;  						bits += 6;    						if (bits >= 16) {  							char u = (char) ((v >> (bits - 16)) & 0xffff);  							decoded.Append (u);  							bits -= 16;  						}  					}  				} else if (c == '&' && index < text.Length) {  					if (text[index] == '-') {  						decoded.Append ('&');  						index++;  					} else {  						// shifted into modified UTF-7  						shifted = true;  					}  				} else {  					decoded.Append (c);  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Decode,The following statement contains a magic number: while (index < text.Length) {  				c = text[index++];    				if (shifted) {  					if (c == '-') {  						// shifted back out of modified UTF-7  						shifted = false;  						bits = v = 0;  					} else if (c > 127) {  						// invalid UTF-7  						return text;  					} else {  						byte rank = utf7_rank[(byte) c];    						if (rank == 0xff) {  							// invalid UTF-7  							return text;  						}    						v = (v << 6) | rank;  						bits += 6;    						if (bits >= 16) {  							char u = (char) ((v >> (bits - 16)) & 0xffff);  							decoded.Append (u);  							bits -= 16;  						}  					}  				} else if (c == '&' && index < text.Length) {  					if (text[index] == '-') {  						decoded.Append ('&');  						index++;  					} else {  						// shifted into modified UTF-7  						shifted = true;  					}  				} else {  					decoded.Append (c);  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Utf7ShiftOut,The following statement contains a magic number: if (bits > 0) {  				int x = (u << (6 - bits)) & 0x3f;  				output.Append (utf7_alphabet[x]);  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Encode,The following statement contains a magic number: for (int index = 0; index < text.Length; index++) {  				char c = text[index];    				if (c >= 0x20 && c < 0x7f) {  					// characters with octet values 0x20-0x25 and 0x27-0x7e  					// represent themselves while 0x26 ("&") is represented  					// by the two-octet sequence "&-"    					if (shifted) {  						Utf7ShiftOut (encoded' u' bits);  						shifted = false;  						bits = 0;  					}    					if (c == 0x26)  						encoded.Append ("&-");  					else  						encoded.Append (c);  				} else {  					// base64 encode  					if (!shifted) {  						encoded.Append ('&');  						shifted = true;  					}    					u = (u << 16) | (c & 0xffff);  					bits += 16;    					while (bits >= 6) {  						int x = (u >> (bits - 6)) & 0x3f;  						encoded.Append (utf7_alphabet[x]);  						bits -= 6;  					}  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Encode,The following statement contains a magic number: for (int index = 0; index < text.Length; index++) {  				char c = text[index];    				if (c >= 0x20 && c < 0x7f) {  					// characters with octet values 0x20-0x25 and 0x27-0x7e  					// represent themselves while 0x26 ("&") is represented  					// by the two-octet sequence "&-"    					if (shifted) {  						Utf7ShiftOut (encoded' u' bits);  						shifted = false;  						bits = 0;  					}    					if (c == 0x26)  						encoded.Append ("&-");  					else  						encoded.Append (c);  				} else {  					// base64 encode  					if (!shifted) {  						encoded.Append ('&');  						shifted = true;  					}    					u = (u << 16) | (c & 0xffff);  					bits += 16;    					while (bits >= 6) {  						int x = (u >> (bits - 6)) & 0x3f;  						encoded.Append (utf7_alphabet[x]);  						bits -= 6;  					}  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Encode,The following statement contains a magic number: for (int index = 0; index < text.Length; index++) {  				char c = text[index];    				if (c >= 0x20 && c < 0x7f) {  					// characters with octet values 0x20-0x25 and 0x27-0x7e  					// represent themselves while 0x26 ("&") is represented  					// by the two-octet sequence "&-"    					if (shifted) {  						Utf7ShiftOut (encoded' u' bits);  						shifted = false;  						bits = 0;  					}    					if (c == 0x26)  						encoded.Append ("&-");  					else  						encoded.Append (c);  				} else {  					// base64 encode  					if (!shifted) {  						encoded.Append ('&');  						shifted = true;  					}    					u = (u << 16) | (c & 0xffff);  					bits += 16;    					while (bits >= 6) {  						int x = (u >> (bits - 6)) & 0x3f;  						encoded.Append (utf7_alphabet[x]);  						bits -= 6;  					}  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Encode,The following statement contains a magic number: for (int index = 0; index < text.Length; index++) {  				char c = text[index];    				if (c >= 0x20 && c < 0x7f) {  					// characters with octet values 0x20-0x25 and 0x27-0x7e  					// represent themselves while 0x26 ("&") is represented  					// by the two-octet sequence "&-"    					if (shifted) {  						Utf7ShiftOut (encoded' u' bits);  						shifted = false;  						bits = 0;  					}    					if (c == 0x26)  						encoded.Append ("&-");  					else  						encoded.Append (c);  				} else {  					// base64 encode  					if (!shifted) {  						encoded.Append ('&');  						shifted = true;  					}    					u = (u << 16) | (c & 0xffff);  					bits += 16;    					while (bits >= 6) {  						int x = (u >> (bits - 6)) & 0x3f;  						encoded.Append (utf7_alphabet[x]);  						bits -= 6;  					}  				}  			}
Magic Number,MailKit.Net.Imap,ImapEncoding,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEncoding.cs,Encode,The following statement contains a magic number: for (int index = 0; index < text.Length; index++) {  				char c = text[index];    				if (c >= 0x20 && c < 0x7f) {  					// characters with octet values 0x20-0x25 and 0x27-0x7e  					// represent themselves while 0x26 ("&") is represented  					// by the two-octet sequence "&-"    					if (shifted) {  						Utf7ShiftOut (encoded' u' bits);  						shifted = false;  						bits = 0;  					}    					if (c == 0x26)  						encoded.Append ("&-");  					else  						encoded.Append (c);  				} else {  					// base64 encode  					if (!shifted) {  						encoded.Append ('&');  						shifted = true;  					}    					u = (u << 16) | (c & 0xffff);  					bits += 16;    					while (bits >= 6) {  						int x = (u >> (bits - 6)) & 0x3f;  						encoded.Append (utf7_alphabet[x]);  						bits -= 6;  					}  				}  			}
Magic Number,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ImapEngine,The following statement contains a magic number: UTF8 = Encoding.GetEncoding (65001' new EncoderExceptionFallback ()' new DecoderExceptionFallback ());
Magic Number,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ImapEngine,The following statement contains a magic number: try {  				Latin1 = Encoding.GetEncoding (28591);  			} catch (NotSupportedException) {  				Latin1 = Encoding.GetEncoding (1252);  			}
Magic Number,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ImapEngine,The following statement contains a magic number: try {  				Latin1 = Encoding.GetEncoding (28591);  			} catch (NotSupportedException) {  				Latin1 = Encoding.GetEncoding (1252);  			}
Magic Number,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ConnectAsync,The following statement contains a magic number: TagPrefix = (char) ('A' + (TagPrefixIndex++ % 26));
Magic Number,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ReadLiteralAsync,The following statement contains a magic number: using (var memory = new MemoryStream (Stream.LiteralLength)) {  				var buf = new byte[4096];  				int nread;    				if (doAsync) {  					while ((nread = await Stream.ReadAsync (buf' 0' buf.Length' cancellationToken).ConfigureAwait (false)) > 0)  						memory.Write (buf' 0' nread);  				} else {  					while ((nread = Stream.Read (buf' 0' buf.Length' cancellationToken)) > 0)  						memory.Write (buf' 0' nread);  				}    				nread = (int) memory.Length;  #if !NETFX_CORE && !NETSTANDARD  				buf = memory.GetBuffer ();  #else  				buf = memory.ToArray ();  #endif    				return Latin1.GetString (buf' 0' nread);  			}
Magic Number,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,SkipLineAsync,The following statement contains a magic number: do {  				token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    				if (token.Type == ImapTokenType.Literal) {  					var buf = new byte[4096];  					int nread;    					do {  						if (doAsync)  							nread = await Stream.ReadAsync (buf' 0' buf.Length' cancellationToken).ConfigureAwait (false);  						else  							nread = Stream.Read (buf' 0' buf.Length' cancellationToken);  					} while (nread > 0);  				}  			} while (token.Type != ImapTokenType.Eoln);
Magic Number,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,UpdateNamespacesAsync,The following statement contains a magic number: do {  				if (token.Type == ImapTokenType.OpenParen) {  					// parse the list of namespace pairs...  					token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    					while (token.Type == ImapTokenType.OpenParen) {  						// parse the namespace pair - first token is the path  						token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    						if (token.Type != ImapTokenType.QString && token.Type != ImapTokenType.Atom) {  							Debug.WriteLine ("Expected string token as first element in namespace pair' but got: {0}"' token);  							throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "NAMESPACE"' token);  						}    						path = (string) token.Value;    						// second token is the directory separator  						token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    						if (token.Type != ImapTokenType.QString && token.Type != ImapTokenType.Nil) {  							Debug.WriteLine ("Expected string or nil token as second element in namespace pair' but got: {0}"' token);  							throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "NAMESPACE"' token);  						}    						var qstring = token.Type == ImapTokenType.Nil ? string.Empty : (string) token.Value;    						if (qstring.Length > 0) {  							delim = qstring[0];    							// canonicalize the namespace path  							path = path.TrimEnd (delim);  						} else {  							delim = '\0';  						}    						namespaces[n].Add (new FolderNamespace (delim' DecodeMailboxName (path)));    						if (!GetCachedFolder (path' out folder)) {  							folder = CreateImapFolder (path' FolderAttributes.None' delim);  							CacheFolder (folder);  						}    						folder.UpdateIsNamespace (true);    						do {  							token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    							if (token.Type == ImapTokenType.CloseParen)  								break;    							// NAMESPACE extension    							if (token.Type != ImapTokenType.QString && token.Type != ImapTokenType.Atom)  								throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "NAMESPACE"' token);    							token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    							if (token.Type != ImapTokenType.OpenParen)  								throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "NAMESPACE"' token);    							do {  								token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    								if (token.Type == ImapTokenType.CloseParen)  									break;    								if (token.Type != ImapTokenType.QString && token.Type != ImapTokenType.Atom)  									throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "NAMESPACE"' token);  							} while (true);  						} while (true);    						// read the next token - it should either be '(' or ')'  						token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);  					}    					if (token.Type != ImapTokenType.CloseParen) {  						Debug.WriteLine ("Expected ')' to close namespace pair' but got: {0}"' token);  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "NAMESPACE"' token);  					}  				} else if (token.Type != ImapTokenType.Nil) {  					Debug.WriteLine ("Expected '(' or 'NIL' token after untagged 'NAMESPACE' response' but got: {0}"' token);  					throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "NAMESPACE"' token);  				}    				token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);  				n++;  			} while (n < 3);
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ReadLiteralDataAsync,The following statement contains a magic number: var buf = new byte[4096];
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,CreateStream,The following statement contains a magic number: if (length > 4096)  				return new MemoryBlockStream ();
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchStreamAsync,The following statement contains a magic number: var buf = new byte[4096];
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchStreamAsync,The following statement contains a magic number: do {  				token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    				if (token.Type == ImapTokenType.CloseParen || token.Type == ImapTokenType.Eoln)  					break;    				if (token.Type != ImapTokenType.Atom)  					throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "FETCH"' token);    				var atom = (string) token.Value;  				int offset = 0' length;  				ulong modseq;  				uint value;    				switch (atom) {  				case "BODY":  					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.OpenBracket)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					sectionBuilder.Clear ();    					do {  						token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    						if (token.Type == ImapTokenType.CloseBracket)  							break;    						if (token.Type == ImapTokenType.OpenParen) {  							sectionBuilder.Append (" (");    							do {  								token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    								if (token.Type == ImapTokenType.CloseParen)  									break;    								// the header field names will generally be atoms or qstrings but may also be literals  								switch (token.Type) {  								case ImapTokenType.Literal:  									sectionBuilder.Append (await engine.ReadLiteralAsync (doAsync' ic.CancellationToken).ConfigureAwait (false));  									break;  								case ImapTokenType.QString:  								case ImapTokenType.Atom:  									sectionBuilder.Append ((string) token.Value);  									break;  								default:  									throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);  								}    								sectionBuilder.Append (' ');  							} while (true);    							if (sectionBuilder[sectionBuilder.Length - 1] == ' ')  								sectionBuilder.Length--;    							sectionBuilder.Append (')');  						} else if (token.Type != ImapTokenType.Atom) {  							throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);  						} else {  							sectionBuilder.Append ((string) token.Value);  						}  					} while (true);    					if (token.Type != ImapTokenType.CloseBracket)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type == ImapTokenType.Atom) {  						// this might be a region ("<###>")  						var expr = (string) token.Value;    						if (expr.Length > 2 && expr[0] == '<' && expr[expr.Length - 1] == '>') {  							var region = expr.Substring (1' expr.Length - 2);  							int.TryParse (region' out offset);    							token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);  						}  					}    					name = sectionBuilder.ToString ();    					switch (token.Type) {  					case ImapTokenType.Literal:  						length = (int) token.Value;  						size += length;    						stream = CreateStream (uid' name' offset' length);    						try {  							do {  								if (doAsync)  									n = await engine.Stream.ReadAsync (buf' 0' buf.Length' ic.CancellationToken).ConfigureAwait (false);  								else  									n = engine.Stream.Read (buf' 0' buf.Length' ic.CancellationToken);    								if (n > 0) {  									stream.Write (buf' 0' n);  									nread += n;    									ctx.Report (nread' size);  								} else {  									break;  								}  							} while (true);    							stream.Position = 0;  						} catch {  							stream.Dispose ();  							throw;  						}  						break;  					case ImapTokenType.QString:  					case ImapTokenType.Atom:  						var buffer = Encoding.UTF8.GetBytes ((string) token.Value);  						length = buffer.Length;  						nread += length;  						size += length;    						stream = CreateStream (uid' name' offset' length);    						try {  							stream.Write (buffer' 0' length);  							ctx.Report (nread' size);  							stream.Position = 0;  						} catch {  							stream.Dispose ();  							throw;  						}  						break;  					case ImapTokenType.Nil:  						stream = CreateStream (uid' name' offset' 0);  						length = 0;  						break;  					default:  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);  					}    					if (uid.HasValue)  						stream = CommitStream (stream' uid.Value' name' offset' length);    					// prevent leaks in the (invalid) case where a section may be returned twice  					if (ctx.Sections.TryGetValue (name' out section))  						section.Stream.Dispose ();    					section = new Section (stream' uid' name' offset' length);  					ctx.Sections[name] = section;  					break;  				case "UID":  					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.Atom || !uint.TryParse ((string) token.Value' out value) || value == 0)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					uid = new UniqueId (UidValidity' value);    					foreach (var kvp in ctx.Sections) {  						section = kvp.Value;    						if (section.UniqueId.HasValue)  							continue;    						section.Stream = CommitStream (section.Stream' uid.Value' section.Name' section.Offset' section.Length);  						section.UniqueId = uid.Value;  					}    					labels.UniqueId = uid.Value;  					flags.UniqueId = uid.Value;  					break;  				case "MODSEQ":  					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.OpenParen)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.Atom || !ulong.TryParse ((string) token.Value' out modseq))  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.CloseParen)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					if (modseq > HighestModSeq)  						UpdateHighestModSeq (modseq);    					modSeq.ModSeq = modseq;  					labels.ModSeq = modseq;  					flags.ModSeq = modseq;  					modSeqChanged = true;  					break;  				case "FLAGS":  					// even though we didn't request this piece of information' the IMAP server  					// may send it if another client has recently modified the message flags.  					flags.Flags = await ImapUtils.ParseFlagsListAsync (engine' atom' flags.UserFlags' doAsync' ic.CancellationToken).ConfigureAwait (false);  					flagsChanged = true;  					break;  				case "X-GM-LABELS":  					// even though we didn't request this piece of information' the IMAP server  					// may send it if another client has recently modified the message labels.  					labels.Labels = await ImapUtils.ParseLabelsListAsync (engine' doAsync' ic.CancellationToken).ConfigureAwait (false);  					labelsChanged = true;  					break;  				default:  					throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "FETCH"' token);  				}  			} while (true);
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,FetchStreamAsync,The following statement contains a magic number: do {  				token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    				if (token.Type == ImapTokenType.CloseParen || token.Type == ImapTokenType.Eoln)  					break;    				if (token.Type != ImapTokenType.Atom)  					throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "FETCH"' token);    				var atom = (string) token.Value;  				int offset = 0' length;  				ulong modseq;  				uint value;    				switch (atom) {  				case "BODY":  					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.OpenBracket)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					sectionBuilder.Clear ();    					do {  						token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    						if (token.Type == ImapTokenType.CloseBracket)  							break;    						if (token.Type == ImapTokenType.OpenParen) {  							sectionBuilder.Append (" (");    							do {  								token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    								if (token.Type == ImapTokenType.CloseParen)  									break;    								// the header field names will generally be atoms or qstrings but may also be literals  								switch (token.Type) {  								case ImapTokenType.Literal:  									sectionBuilder.Append (await engine.ReadLiteralAsync (doAsync' ic.CancellationToken).ConfigureAwait (false));  									break;  								case ImapTokenType.QString:  								case ImapTokenType.Atom:  									sectionBuilder.Append ((string) token.Value);  									break;  								default:  									throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);  								}    								sectionBuilder.Append (' ');  							} while (true);    							if (sectionBuilder[sectionBuilder.Length - 1] == ' ')  								sectionBuilder.Length--;    							sectionBuilder.Append (')');  						} else if (token.Type != ImapTokenType.Atom) {  							throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);  						} else {  							sectionBuilder.Append ((string) token.Value);  						}  					} while (true);    					if (token.Type != ImapTokenType.CloseBracket)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type == ImapTokenType.Atom) {  						// this might be a region ("<###>")  						var expr = (string) token.Value;    						if (expr.Length > 2 && expr[0] == '<' && expr[expr.Length - 1] == '>') {  							var region = expr.Substring (1' expr.Length - 2);  							int.TryParse (region' out offset);    							token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);  						}  					}    					name = sectionBuilder.ToString ();    					switch (token.Type) {  					case ImapTokenType.Literal:  						length = (int) token.Value;  						size += length;    						stream = CreateStream (uid' name' offset' length);    						try {  							do {  								if (doAsync)  									n = await engine.Stream.ReadAsync (buf' 0' buf.Length' ic.CancellationToken).ConfigureAwait (false);  								else  									n = engine.Stream.Read (buf' 0' buf.Length' ic.CancellationToken);    								if (n > 0) {  									stream.Write (buf' 0' n);  									nread += n;    									ctx.Report (nread' size);  								} else {  									break;  								}  							} while (true);    							stream.Position = 0;  						} catch {  							stream.Dispose ();  							throw;  						}  						break;  					case ImapTokenType.QString:  					case ImapTokenType.Atom:  						var buffer = Encoding.UTF8.GetBytes ((string) token.Value);  						length = buffer.Length;  						nread += length;  						size += length;    						stream = CreateStream (uid' name' offset' length);    						try {  							stream.Write (buffer' 0' length);  							ctx.Report (nread' size);  							stream.Position = 0;  						} catch {  							stream.Dispose ();  							throw;  						}  						break;  					case ImapTokenType.Nil:  						stream = CreateStream (uid' name' offset' 0);  						length = 0;  						break;  					default:  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);  					}    					if (uid.HasValue)  						stream = CommitStream (stream' uid.Value' name' offset' length);    					// prevent leaks in the (invalid) case where a section may be returned twice  					if (ctx.Sections.TryGetValue (name' out section))  						section.Stream.Dispose ();    					section = new Section (stream' uid' name' offset' length);  					ctx.Sections[name] = section;  					break;  				case "UID":  					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.Atom || !uint.TryParse ((string) token.Value' out value) || value == 0)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					uid = new UniqueId (UidValidity' value);    					foreach (var kvp in ctx.Sections) {  						section = kvp.Value;    						if (section.UniqueId.HasValue)  							continue;    						section.Stream = CommitStream (section.Stream' uid.Value' section.Name' section.Offset' section.Length);  						section.UniqueId = uid.Value;  					}    					labels.UniqueId = uid.Value;  					flags.UniqueId = uid.Value;  					break;  				case "MODSEQ":  					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.OpenParen)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.Atom || !ulong.TryParse ((string) token.Value' out modseq))  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.CloseParen)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					if (modseq > HighestModSeq)  						UpdateHighestModSeq (modseq);    					modSeq.ModSeq = modseq;  					labels.ModSeq = modseq;  					flags.ModSeq = modseq;  					modSeqChanged = true;  					break;  				case "FLAGS":  					// even though we didn't request this piece of information' the IMAP server  					// may send it if another client has recently modified the message flags.  					flags.Flags = await ImapUtils.ParseFlagsListAsync (engine' atom' flags.UserFlags' doAsync' ic.CancellationToken).ConfigureAwait (false);  					flagsChanged = true;  					break;  				case "X-GM-LABELS":  					// even though we didn't request this piece of information' the IMAP server  					// may send it if another client has recently modified the message labels.  					labels.Labels = await ImapUtils.ParseLabelsListAsync (engine' doAsync' ic.CancellationToken).ConfigureAwait (false);  					labelsChanged = true;  					break;  				default:  					throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "FETCH"' token);  				}  			} while (true);
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,GetBodyPartQuery,The following statement contains a magic number: if (headersOnly) {  				tags = new string[1];    				if (partSpec.Length > 0) {  					query = string.Format ("BODY.PEEK[{0}.MIME]"' partSpec);  					tags[0] = partSpec + ".MIME";  				} else {  					query = "BODY.PEEK[HEADER]";  					tags[0] = "HEADER";  				}  			} else {  				tags = new string[2];    				if (partSpec.Length > 0) {  					tags[0] = partSpec + ".MIME";  					tags[1] = partSpec;  				} else {  					tags[0] = "HEADER";  					tags[1] = "TEXT";  				}    				query = string.Format ("BODY.PEEK[{0}] BODY.PEEK[{1}]"' tags[0]' tags[1]);  			}
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,IsAscii,The following statement contains a magic number: for (int i = 0; i < text.Length; i++) {  				if (text[i] > 127)  					return false;  			}
Magic Number,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ESearchMatchesAsync,The following statement contains a magic number: do {  				if (token.Type == ImapTokenType.CloseParen) {  					if (parenDepth == 0)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);  					parenDepth--;  				}    				if (token.Type == ImapTokenType.Eoln) {  					// unget the eoln token  					engine.Stream.UngetToken (token);  					break;  				}    				if (token.Type == ImapTokenType.OpenParen) {  					token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);  					parenDepth++;  				}    				if (token.Type != ImapTokenType.Atom)  					throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    				atom = (string) token.Value;    				token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    				switch (atom) {  				case "RELEVANCY":  					if (token.Type != ImapTokenType.OpenParen)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    					results.Relevancy = new List<byte> ();    					do {  						int score;    						token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    						if (token.Type == ImapTokenType.CloseParen)  							break;    						if (token.Type != ImapTokenType.Atom || !int.TryParse ((string) token.Value' out score) || score < 1 || score > 100)  							throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    						results.Relevancy.Add ((byte) score);  					} while (true);  					break;  				case "MODSEQ":  					if (token.Type != ImapTokenType.Atom)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    					if (!ulong.TryParse ((string) token.Value' out modseq))  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					results.ModSeq = modseq;  					break;  				case "COUNT":  					if (token.Type != ImapTokenType.Atom)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    					if (!int.TryParse ((string) token.Value' out count))  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					results.Count = count;  					break;  				case "MIN":  					if (!uint.TryParse ((string) token.Value' out min) || min == 0)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					results.Min = new UniqueId (ic.Folder.UidValidity' min);  					break;  				case "MAX":  					if (token.Type != ImapTokenType.Atom)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    					if (!uint.TryParse ((string) token.Value' out max) || max == 0)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					results.Max = new UniqueId (ic.Folder.UidValidity' max);  					break;  				case "ALL":  					if (token.Type != ImapTokenType.Atom)  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);    					if (!UniqueIdSet.TryParse ((string) token.Value' ic.Folder.UidValidity' out uids))  						throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);    					results.Count = uids.Count;  					break;  				default:  					throw ImapEngine.UnexpectedToken (ImapEngine.GenericUntaggedResponseSyntaxErrorFormat' "ESEARCH"' token);  				}    				token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);  			} while (true);
Magic Number,MailKit.Net.Imap,ImapStream,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapStream.cs,Poll,The following statement contains a magic number: if (Socket != null) {  				do {  					cancellationToken.ThrowIfCancellationRequested ();  					// wait 1/4 second and then re-check for cancellation  				} while (!Socket.Poll (250000' mode));  			} else {  				cancellationToken.ThrowIfCancellationRequested ();  			}
Magic Number,MailKit.Net.Imap,ImapStream,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapStream.cs,ReadQuotedStringTokenAsync,The following statement contains a magic number: using (var memory = new MemoryStream ()) {  				do {  					while (inputIndex < inputEnd) {  						if (input[inputIndex] == (byte) '"' && !escaped)  							break;    						if (input[inputIndex] == (byte) '\\' && !escaped) {  							escaped = true;  						} else {  							memory.WriteByte (input[inputIndex]);  							escaped = false;  						}    						inputIndex++;  					}    					if (inputIndex + 1 < inputEnd) {  						// skip over closing '"'  						inputIndex++;    						// Note: Some IMAP servers do not properly escape double-quotes inside  						// of a qstring token and so' as an attempt at working around this  						// problem' check that the closing '"' character is not immediately  						// followed by any character that we would expect immediately following  						// a qstring token.  						//  						// See https://github.com/jstedfast/MailKit/issues/485 for details.  						if ("]) \r\n".IndexOf ((char) input[inputIndex]) != -1)  							break;    						memory.WriteByte ((byte) '"');  						continue;  					}    					await ReadAheadAsync (2' doAsync' cancellationToken).ConfigureAwait (false);  				} while (true);    #if !NETFX_CORE && !NETSTANDARD  				var buffer = memory.GetBuffer ();  #else  				var buffer = memory.ToArray ();  #endif  				int length = (int) memory.Length;    				return new ImapToken (ImapTokenType.QString' Encoding.UTF8.GetString (buffer' 0' length));  			}
Magic Number,MailKit.Net.Imap,ImapStream,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapStream.cs,ReadLiteralTokenAsync,The following statement contains a magic number: await ReadAheadAsync (2' doAsync' cancellationToken).ConfigureAwait (false);
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetInt32,The following statement contains a magic number: while (index < text.Length && text[index] >= '0' && text[index] <= '9') {  				int digit = text[index] - '0';    				if (value > int.MaxValue / 10) {  					// integer overflow  					return false;  				}    				if (value == int.MaxValue / 10 && digit > int.MaxValue % 10) {  					// integer overflow  					return false;  				}    				value = (value * 10) + digit;  				index++;  			}
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetInt32,The following statement contains a magic number: while (index < text.Length && text[index] >= '0' && text[index] <= '9') {  				int digit = text[index] - '0';    				if (value > int.MaxValue / 10) {  					// integer overflow  					return false;  				}    				if (value == int.MaxValue / 10 && digit > int.MaxValue % 10) {  					// integer overflow  					return false;  				}    				value = (value * 10) + digit;  				index++;  			}
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetInt32,The following statement contains a magic number: while (index < text.Length && text[index] >= '0' && text[index] <= '9') {  				int digit = text[index] - '0';    				if (value > int.MaxValue / 10) {  					// integer overflow  					return false;  				}    				if (value == int.MaxValue / 10 && digit > int.MaxValue % 10) {  					// integer overflow  					return false;  				}    				value = (value * 10) + digit;  				index++;  			}
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetInt32,The following statement contains a magic number: while (index < text.Length && text[index] >= '0' && text[index] <= '9') {  				int digit = text[index] - '0';    				if (value > int.MaxValue / 10) {  					// integer overflow  					return false;  				}    				if (value == int.MaxValue / 10 && digit > int.MaxValue % 10) {  					// integer overflow  					return false;  				}    				value = (value * 10) + digit;  				index++;  			}
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetMonth,The following statement contains a magic number: if ((index = text.IndexOf (delim' index)) == -1 || (index - startIndex) != 3)  				return false;
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetMonth,The following statement contains a magic number: for (int i = 0; i < Months.Length; i++) {  				if (string.Compare (Months[i]' 0' text' startIndex' 3' StringComparison.OrdinalIgnoreCase) == 0) {  					month = i + 1;  					return true;  				}  			}
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetTimeZone,The following statement contains a magic number: while (tzone < -1400)  				tzone += 2400;
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetTimeZone,The following statement contains a magic number: while (tzone < -1400)  				tzone += 2400;
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetTimeZone,The following statement contains a magic number: while (tzone > 1400)  				tzone -= 2400;
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetTimeZone,The following statement contains a magic number: while (tzone > 1400)  				tzone -= 2400;
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetTimeZone,The following statement contains a magic number: int minutes = tzone % 100;
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,TryGetTimeZone,The following statement contains a magic number: int hours = tzone / 100;
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,The following statement contains a magic number: if (index >= text.Length || !TryGetInt32 (text' ref index' '-'' out day) || day < 1 || day > 31)  				throw InvalidInternalDateFormat (text);
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,The following statement contains a magic number: if (index >= text.Length || !TryGetInt32 (text' ref index' ' '' out year) || year < 1969)  				throw InvalidInternalDateFormat (text);
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,The following statement contains a magic number: if (index >= text.Length || !TryGetInt32 (text' ref index' ':'' out hour) || hour > 23)  				throw InvalidInternalDateFormat (text);
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,The following statement contains a magic number: if (index >= text.Length || !TryGetInt32 (text' ref index' ':'' out minute) || minute > 59)  				throw InvalidInternalDateFormat (text);
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseInternalDate,The following statement contains a magic number: if (index >= text.Length || !TryGetInt32 (text' ref index' ' '' out second) || second > 59)  				throw InvalidInternalDateFormat (text);
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,NeedsQuoting,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  				if (value[i] > 127 || char.IsControl (value[i]))  					return true;    				if (QuotedSpecials.IndexOf (value[i]) != -1)  					return true;  			}
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAddressAsync,The following statement contains a magic number: var values = new string[4];
Magic Number,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseEnvelopeAddressAsync,The following statement contains a magic number: do {  				token = await engine.ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    				switch (token.Type) {  				case ImapTokenType.Literal:  					values[index] = await engine.ReadLiteralAsync (doAsync' cancellationToken).ConfigureAwait (false);  					break;  				case ImapTokenType.QString:  				case ImapTokenType.Atom:  					values[index] = (string) token.Value;  					break;  				case ImapTokenType.Nil:  					break;  				default:  					throw ImapEngine.UnexpectedToken (format' token);  				}    				index++;  			} while (index < 4);
Magic Number,MailKit.Net.Imap,EnvelopeAddress,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,EnvelopeAddress,The following statement contains a magic number: Mailbox = values[2];
Magic Number,MailKit.Net.Imap,EnvelopeAddress,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,EnvelopeAddress,The following statement contains a magic number: Domain = values[3];
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,UpdateMessageCountAsync,The following statement contains a magic number: var pc = engine.QueueCommand (cancellationToken' (pop3' cmd' text' xdoAsync) => {  				if (cmd.Status != Pop3CommandStatus.Ok)  					return Task.FromResult (false);    				// the response should be "<count> <total size>"  				var tokens = text.Split (new [] { ' ' }' StringSplitOptions.RemoveEmptyEntries);    				if (tokens.Length < 2) {  					cmd.Exception = CreatePop3ParseException ("Pop3 server returned an incomplete response to the STAT command.");  					return Task.FromResult (false);  				}    				if (!int.TryParse (tokens[0]' out total)) {  					cmd.Exception = CreatePop3ParseException ("Pop3 server returned an invalid response to the STAT command.");  					return Task.FromResult (false);  				}    				return Task.FromResult (true);  			}' "STAT");
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 110;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 110; goto default;  				case 995: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 995;  				break;  			}
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 110;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 110; goto default;  				case 995: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 995;  				break;  			}
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 110;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 110; goto default;  				case 995: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 995;  				break;  			}
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 110;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 110; goto default;  				case 995: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 995;  				break;  			}
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,ConnectAsync,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,GetLanguagesAsync,The following statement contains a magic number: var pc = engine.QueueCommand (cancellationToken' async (pop3' cmd' text' xdoAsync) => {  				if (cmd.Status != Pop3CommandStatus.Ok)  					return;    				do {  					string response;    					if (xdoAsync)  						response = await engine.ReadLineAsync (cmd.CancellationToken).ConfigureAwait (false);  					else  						response = engine.ReadLine (cmd.CancellationToken);    					if (response == ".")  						break;    					var tokens = response.Split (new [] { ' ' }' 2);  					if (tokens.Length != 2)  						continue;    					langs.Add (new Pop3Language (tokens[0]' tokens[1]));  				} while (true);  			}' "LANG");
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,GetLanguagesAsync,The following statement contains a magic number: var pc = engine.QueueCommand (cancellationToken' async (pop3' cmd' text' xdoAsync) => {  				if (cmd.Status != Pop3CommandStatus.Ok)  					return;    				do {  					string response;    					if (xdoAsync)  						response = await engine.ReadLineAsync (cmd.CancellationToken).ConfigureAwait (false);  					else  						response = engine.ReadLine (cmd.CancellationToken);    					if (response == ".")  						break;    					var tokens = response.Split (new [] { ' ' }' 2);  					if (tokens.Length != 2)  						continue;    					langs.Add (new Pop3Language (tokens[0]' tokens[1]));  				} while (true);  			}' "LANG");
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,GetMessageUidAsync,The following statement contains a magic number: var pc = engine.QueueCommand (cancellationToken' (pop3' cmd' text' xdoAsync) => {  				if (cmd.Status != Pop3CommandStatus.Ok)  					return Task.FromResult (true);    				// the response should be "<seqid> <uid>"  				var tokens = text.Split (new [] { ' ' }' StringSplitOptions.RemoveEmptyEntries);  				int seqid;    				if (tokens.Length < 2) {  					cmd.Exception = CreatePop3ParseException ("Pop3 server returned an incomplete response to the UIDL command.");  					return Task.FromResult (true);  				}    				if (!int.TryParse (tokens[0]' out seqid) || seqid < 1) {  					cmd.Exception = CreatePop3ParseException ("Pop3 server returned an unexpected response to the UIDL command.");  					return Task.FromResult (true);  				}    				if (seqid != index + 1) {  					cmd.Exception = CreatePop3ParseException ("Pop3 server returned the UID for the wrong message.");  					return Task.FromResult (true);  				}    				uid = tokens[1];    				return Task.FromResult (true);  			}' "UIDL {0}"' index + 1);
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,GetMessageUidsAsync,The following statement contains a magic number: var pc = engine.QueueCommand (cancellationToken' async (pop3' cmd' text' xdoAsync) => {  				if (cmd.Status != Pop3CommandStatus.Ok)  					return;    				do {  					string response;    					if (xdoAsync)  						response = await engine.ReadLineAsync (cmd.CancellationToken).ConfigureAwait (false);  					else  						response = engine.ReadLine (cmd.CancellationToken);    					if (response == ".")  						break;    					if (cmd.Exception != null)  						continue;    					var tokens = response.Split (new [] { ' ' }' StringSplitOptions.RemoveEmptyEntries);  					int seqid;    					if (tokens.Length < 2) {  						cmd.Exception = CreatePop3ParseException ("Pop3 server returned an incomplete response to the UIDL command.");  						continue;  					}    					if (!int.TryParse (tokens[0]' out seqid)) {  						cmd.Exception = CreatePop3ParseException ("Pop3 server returned an invalid response to the UIDL command.");  						continue;  					}    					uids.Add (tokens[1]);  				} while (true);  			}' "UIDL");
Magic Number,MailKit.Net.Pop3,Pop3Client,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\AsyncPop3Client.cs,GetMessageSizesAsync,The following statement contains a magic number: var pc = engine.QueueCommand (cancellationToken' async (pop3' cmd' text' xdoAsync) => {  				if (cmd.Status != Pop3CommandStatus.Ok)  					return;    				do {  					string response;    					if (xdoAsync)  						response = await engine.ReadLineAsync (cmd.CancellationToken).ConfigureAwait (false);  					else  						response = engine.ReadLine (cmd.CancellationToken);    					if (response == ".")  						break;    					if (cmd.Exception != null)  						continue;    					var tokens = response.Split (new [] { ' ' }' StringSplitOptions.RemoveEmptyEntries);  					int seqid' size;    					if (tokens.Length < 2) {  						cmd.Exception = CreatePop3ParseException ("Pop3 server returned an incomplete response to the LIST command.");  						continue;  					}    					if (!int.TryParse (tokens[0]' out seqid) || seqid < 1) {  						cmd.Exception = CreatePop3ParseException ("Pop3 server returned an unexpected response to the LIST command.");  						continue;  					}    					if (seqid != sizes.Count + 1) {  						cmd.Exception = CreatePop3ParseException ("Pop3 server returned the size for the wrong message.");  						continue;  					}    					if (!int.TryParse (tokens[1]' out size) || size < 0) {  						cmd.Exception = CreatePop3ParseException ("Pop3 server returned an unexpected size token to the LIST command.");  						continue;  					}    					sizes.Add (size);  				} while (true);  			}' "LIST");
Magic Number,MailKit.Net.Pop3,MessageSizeContext,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Client.cs,OnDataReceived,The following statement contains a magic number: if (tokens.Length < 2) {  					pc.Exception = CreatePop3ParseException ("Pop3 server returned an incomplete response to the LIST command.");  					return Task.FromResult (true);  				}
Magic Number,MailKit.Net.Pop3,DownloadContext<T>,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Client.cs,OnDataReceived,The following statement contains a magic number: try {  					T item;    					pop3.Stream.Mode = Pop3StreamMode.Data;    					if (doAsync)  						item = await ParseAsync (pop3.Stream' pc.CancellationToken).ConfigureAwait (false);  					else  						item = Parse (pop3.Stream' pc.CancellationToken);    					Add (item);  				} catch (FormatException ex) {  					pc.Exception = CreatePop3ParseException (ex' "Failed to parse data.");    					if (doAsync)  						await pop3.Stream.CopyToAsync (Stream.Null' 4096' pc.CancellationToken).ConfigureAwait (false);  					else  						pop3.Stream.CopyTo (Stream.Null' 4096);  				} finally {  					pop3.Stream.Mode = Pop3StreamMode.Line;  				}
Magic Number,MailKit.Net.Pop3,DownloadContext<T>,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Client.cs,OnDataReceived,The following statement contains a magic number: try {  					T item;    					pop3.Stream.Mode = Pop3StreamMode.Data;    					if (doAsync)  						item = await ParseAsync (pop3.Stream' pc.CancellationToken).ConfigureAwait (false);  					else  						item = Parse (pop3.Stream' pc.CancellationToken);    					Add (item);  				} catch (FormatException ex) {  					pc.Exception = CreatePop3ParseException (ex' "Failed to parse data.");    					if (doAsync)  						await pop3.Stream.CopyToAsync (Stream.Null' 4096' pc.CancellationToken).ConfigureAwait (false);  					else  						pop3.Stream.CopyTo (Stream.Null' 4096);  				} finally {  					pop3.Stream.Mode = Pop3StreamMode.Line;  				}
Magic Number,MailKit.Net.Pop3,DownloadStreamContext,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Client.cs,Parse,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,MailKit.Net.Pop3,DownloadStreamContext,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Client.cs,ParseAsync,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,Pop3Engine,The following statement contains a magic number: UTF8 = Encoding.GetEncoding (65001' new EncoderExceptionFallback ()' new DecoderExceptionFallback ());
Magic Number,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,Pop3Engine,The following statement contains a magic number: try {  				Latin1 = Encoding.GetEncoding (28591);  			} catch (NotSupportedException) {  				Latin1 = Encoding.GetEncoding (1252);  			}
Magic Number,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,Pop3Engine,The following statement contains a magic number: try {  				Latin1 = Encoding.GetEncoding (28591);  			} catch (NotSupportedException) {  				Latin1 = Encoding.GetEncoding (1252);  			}
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,Poll,The following statement contains a magic number: if (Socket != null) {  				do {  					cancellationToken.ThrowIfCancellationRequested ();  					// wait 1/4 second and then re-check for cancellation  				} while (!Socket.Poll (250000' mode));  			} else {  				cancellationToken.ThrowIfCancellationRequested ();  			}
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,NeedInput,The following statement contains a magic number: if (inputLeft == 2 && input[index] == (byte) '.' && input[index + 1] == '\n')  				return false;
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The following statement contains a magic number: do {  				inputLeft = inputEnd - inputIndex;    				// we need at least 3 bytes: ".\r\n"  				if (inputLeft < 3 && (midline || NeedInput (inputIndex' inputLeft))) {  					if (index > offset)  						break;    					await ReadAheadAsync (doAsync' cancellationToken).ConfigureAwait (false);  				}    				input[inputEnd] = (byte) '\n';    				while (inputIndex < inputEnd) {  					if (midline) {  						// read until end-of-line  						while (index < end && input[inputIndex] != (byte) '\n')  							buffer[index++] = input[inputIndex++];    						if (inputIndex == inputEnd || index == end)  							break;    						buffer[index++] = input[inputIndex++];  						midline = false;  					}    					if (inputIndex == inputEnd)  						break;    					if (input[inputIndex] == (byte) '.') {  						inputLeft = inputEnd - inputIndex;    						if (inputLeft >= 3 && input[inputIndex + 1] == (byte) '\r' && input[inputIndex + 2] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 3;  							break;  						}    						if (inputLeft >= 2 && input[inputIndex + 1] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 2;  							break;  						}    						if (inputLeft == 1 || (inputLeft == 2 && input[inputIndex + 1] == (byte) '\r')) {  							// not enough data...  							break;  						}    						if (input[inputIndex + 1] == (byte) '.')  							inputIndex++;  					}    					midline = true;  				}  			} while (index < end && !IsEndOfData);
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The following statement contains a magic number: do {  				inputLeft = inputEnd - inputIndex;    				// we need at least 3 bytes: ".\r\n"  				if (inputLeft < 3 && (midline || NeedInput (inputIndex' inputLeft))) {  					if (index > offset)  						break;    					await ReadAheadAsync (doAsync' cancellationToken).ConfigureAwait (false);  				}    				input[inputEnd] = (byte) '\n';    				while (inputIndex < inputEnd) {  					if (midline) {  						// read until end-of-line  						while (index < end && input[inputIndex] != (byte) '\n')  							buffer[index++] = input[inputIndex++];    						if (inputIndex == inputEnd || index == end)  							break;    						buffer[index++] = input[inputIndex++];  						midline = false;  					}    					if (inputIndex == inputEnd)  						break;    					if (input[inputIndex] == (byte) '.') {  						inputLeft = inputEnd - inputIndex;    						if (inputLeft >= 3 && input[inputIndex + 1] == (byte) '\r' && input[inputIndex + 2] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 3;  							break;  						}    						if (inputLeft >= 2 && input[inputIndex + 1] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 2;  							break;  						}    						if (inputLeft == 1 || (inputLeft == 2 && input[inputIndex + 1] == (byte) '\r')) {  							// not enough data...  							break;  						}    						if (input[inputIndex + 1] == (byte) '.')  							inputIndex++;  					}    					midline = true;  				}  			} while (index < end && !IsEndOfData);
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The following statement contains a magic number: do {  				inputLeft = inputEnd - inputIndex;    				// we need at least 3 bytes: ".\r\n"  				if (inputLeft < 3 && (midline || NeedInput (inputIndex' inputLeft))) {  					if (index > offset)  						break;    					await ReadAheadAsync (doAsync' cancellationToken).ConfigureAwait (false);  				}    				input[inputEnd] = (byte) '\n';    				while (inputIndex < inputEnd) {  					if (midline) {  						// read until end-of-line  						while (index < end && input[inputIndex] != (byte) '\n')  							buffer[index++] = input[inputIndex++];    						if (inputIndex == inputEnd || index == end)  							break;    						buffer[index++] = input[inputIndex++];  						midline = false;  					}    					if (inputIndex == inputEnd)  						break;    					if (input[inputIndex] == (byte) '.') {  						inputLeft = inputEnd - inputIndex;    						if (inputLeft >= 3 && input[inputIndex + 1] == (byte) '\r' && input[inputIndex + 2] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 3;  							break;  						}    						if (inputLeft >= 2 && input[inputIndex + 1] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 2;  							break;  						}    						if (inputLeft == 1 || (inputLeft == 2 && input[inputIndex + 1] == (byte) '\r')) {  							// not enough data...  							break;  						}    						if (input[inputIndex + 1] == (byte) '.')  							inputIndex++;  					}    					midline = true;  				}  			} while (index < end && !IsEndOfData);
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The following statement contains a magic number: do {  				inputLeft = inputEnd - inputIndex;    				// we need at least 3 bytes: ".\r\n"  				if (inputLeft < 3 && (midline || NeedInput (inputIndex' inputLeft))) {  					if (index > offset)  						break;    					await ReadAheadAsync (doAsync' cancellationToken).ConfigureAwait (false);  				}    				input[inputEnd] = (byte) '\n';    				while (inputIndex < inputEnd) {  					if (midline) {  						// read until end-of-line  						while (index < end && input[inputIndex] != (byte) '\n')  							buffer[index++] = input[inputIndex++];    						if (inputIndex == inputEnd || index == end)  							break;    						buffer[index++] = input[inputIndex++];  						midline = false;  					}    					if (inputIndex == inputEnd)  						break;    					if (input[inputIndex] == (byte) '.') {  						inputLeft = inputEnd - inputIndex;    						if (inputLeft >= 3 && input[inputIndex + 1] == (byte) '\r' && input[inputIndex + 2] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 3;  							break;  						}    						if (inputLeft >= 2 && input[inputIndex + 1] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 2;  							break;  						}    						if (inputLeft == 1 || (inputLeft == 2 && input[inputIndex + 1] == (byte) '\r')) {  							// not enough data...  							break;  						}    						if (input[inputIndex + 1] == (byte) '.')  							inputIndex++;  					}    					midline = true;  				}  			} while (index < end && !IsEndOfData);
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The following statement contains a magic number: do {  				inputLeft = inputEnd - inputIndex;    				// we need at least 3 bytes: ".\r\n"  				if (inputLeft < 3 && (midline || NeedInput (inputIndex' inputLeft))) {  					if (index > offset)  						break;    					await ReadAheadAsync (doAsync' cancellationToken).ConfigureAwait (false);  				}    				input[inputEnd] = (byte) '\n';    				while (inputIndex < inputEnd) {  					if (midline) {  						// read until end-of-line  						while (index < end && input[inputIndex] != (byte) '\n')  							buffer[index++] = input[inputIndex++];    						if (inputIndex == inputEnd || index == end)  							break;    						buffer[index++] = input[inputIndex++];  						midline = false;  					}    					if (inputIndex == inputEnd)  						break;    					if (input[inputIndex] == (byte) '.') {  						inputLeft = inputEnd - inputIndex;    						if (inputLeft >= 3 && input[inputIndex + 1] == (byte) '\r' && input[inputIndex + 2] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 3;  							break;  						}    						if (inputLeft >= 2 && input[inputIndex + 1] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 2;  							break;  						}    						if (inputLeft == 1 || (inputLeft == 2 && input[inputIndex + 1] == (byte) '\r')) {  							// not enough data...  							break;  						}    						if (input[inputIndex + 1] == (byte) '.')  							inputIndex++;  					}    					midline = true;  				}  			} while (index < end && !IsEndOfData);
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The following statement contains a magic number: do {  				inputLeft = inputEnd - inputIndex;    				// we need at least 3 bytes: ".\r\n"  				if (inputLeft < 3 && (midline || NeedInput (inputIndex' inputLeft))) {  					if (index > offset)  						break;    					await ReadAheadAsync (doAsync' cancellationToken).ConfigureAwait (false);  				}    				input[inputEnd] = (byte) '\n';    				while (inputIndex < inputEnd) {  					if (midline) {  						// read until end-of-line  						while (index < end && input[inputIndex] != (byte) '\n')  							buffer[index++] = input[inputIndex++];    						if (inputIndex == inputEnd || index == end)  							break;    						buffer[index++] = input[inputIndex++];  						midline = false;  					}    					if (inputIndex == inputEnd)  						break;    					if (input[inputIndex] == (byte) '.') {  						inputLeft = inputEnd - inputIndex;    						if (inputLeft >= 3 && input[inputIndex + 1] == (byte) '\r' && input[inputIndex + 2] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 3;  							break;  						}    						if (inputLeft >= 2 && input[inputIndex + 1] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 2;  							break;  						}    						if (inputLeft == 1 || (inputLeft == 2 && input[inputIndex + 1] == (byte) '\r')) {  							// not enough data...  							break;  						}    						if (input[inputIndex + 1] == (byte) '.')  							inputIndex++;  					}    					midline = true;  				}  			} while (index < end && !IsEndOfData);
Magic Number,MailKit.Net.Pop3,Pop3Stream,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Stream.cs,ReadAsync,The following statement contains a magic number: do {  				inputLeft = inputEnd - inputIndex;    				// we need at least 3 bytes: ".\r\n"  				if (inputLeft < 3 && (midline || NeedInput (inputIndex' inputLeft))) {  					if (index > offset)  						break;    					await ReadAheadAsync (doAsync' cancellationToken).ConfigureAwait (false);  				}    				input[inputEnd] = (byte) '\n';    				while (inputIndex < inputEnd) {  					if (midline) {  						// read until end-of-line  						while (index < end && input[inputIndex] != (byte) '\n')  							buffer[index++] = input[inputIndex++];    						if (inputIndex == inputEnd || index == end)  							break;    						buffer[index++] = input[inputIndex++];  						midline = false;  					}    					if (inputIndex == inputEnd)  						break;    					if (input[inputIndex] == (byte) '.') {  						inputLeft = inputEnd - inputIndex;    						if (inputLeft >= 3 && input[inputIndex + 1] == (byte) '\r' && input[inputIndex + 2] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 3;  							break;  						}    						if (inputLeft >= 2 && input[inputIndex + 1] == (byte) '\n') {  							IsEndOfData = true;  							midline = false;  							inputIndex += 2;  							break;  						}    						if (inputLeft == 1 || (inputLeft == 2 && input[inputIndex + 1] == (byte) '\r')) {  							// not enough data...  							break;  						}    						if (input[inputIndex + 1] == (byte) '.')  							inputIndex++;  					}    					midline = true;  				}  			} while (index < end && !IsEndOfData);
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,EhloAsync,The following statement contains a magic number: if (response.StatusCode != SmtpStatusCode.Ok) {  				// Try sending HELO instead...  				response = await SendEhloAsync (false' doAsync' cancellationToken).ConfigureAwait (false);  				if (response.StatusCode != SmtpStatusCode.Ok)  					throw new SmtpCommandException (SmtpErrorCode.UnexpectedStatusCode' response.StatusCode' response.Response);  			} else {  				// Clear the extensions  				capabilities = SmtpCapabilities.None;  				AuthenticationMechanisms.Clear ();  				MaxSize = 0;    				var lines = response.Response.Split ('\n');  				for (int i = 0; i < lines.Length; i++) {  					// Outlook.com replies with "250-8bitmime" instead of "250-8BITMIME"  					// (strangely' it correctly capitalizes all other extensions...)  					var capability = lines[i].Trim ().ToUpperInvariant ();    					if (capability.StartsWith ("AUTH"' StringComparison.Ordinal)) {  						int index = 4;    						capabilities |= SmtpCapabilities.Authentication;    						if (index < capability.Length && capability[index] == '=')  							index++;    						var mechanisms = capability.Substring (index);  						foreach (var mechanism in mechanisms.Split (new [] { ' ' }' StringSplitOptions.RemoveEmptyEntries))  							AuthenticationMechanisms.Add (mechanism);  					} else if (capability.StartsWith ("SIZE"' StringComparison.Ordinal)) {  						int index = 4;  						uint size;    						capabilities |= SmtpCapabilities.Size;    						while (index < capability.Length && char.IsWhiteSpace (capability[index]))  							index++;    						if (uint.TryParse (capability.Substring (index)' out size))  							MaxSize = size;  					} else if (capability == "DSN") {  						capabilities |= SmtpCapabilities.Dsn;  					} else if (capability == "BINARYMIME") {  						capabilities |= SmtpCapabilities.BinaryMime;  					} else if (capability == "CHUNKING") {  						capabilities |= SmtpCapabilities.Chunking;  					} else if (capability == "ENHANCEDSTATUSCODES") {  						capabilities |= SmtpCapabilities.EnhancedStatusCodes;  					} else if (capability == "8BITMIME") {  						capabilities |= SmtpCapabilities.EightBitMime;  					} else if (capability == "PIPELINING") {  						capabilities |= SmtpCapabilities.Pipelining;  					} else if (capability == "STARTTLS") {  						capabilities |= SmtpCapabilities.StartTLS;  					} else if (capability == "SMTPUTF8") {  						capabilities |= SmtpCapabilities.UTF8;  					}  				}  			}
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,EhloAsync,The following statement contains a magic number: if (response.StatusCode != SmtpStatusCode.Ok) {  				// Try sending HELO instead...  				response = await SendEhloAsync (false' doAsync' cancellationToken).ConfigureAwait (false);  				if (response.StatusCode != SmtpStatusCode.Ok)  					throw new SmtpCommandException (SmtpErrorCode.UnexpectedStatusCode' response.StatusCode' response.Response);  			} else {  				// Clear the extensions  				capabilities = SmtpCapabilities.None;  				AuthenticationMechanisms.Clear ();  				MaxSize = 0;    				var lines = response.Response.Split ('\n');  				for (int i = 0; i < lines.Length; i++) {  					// Outlook.com replies with "250-8bitmime" instead of "250-8BITMIME"  					// (strangely' it correctly capitalizes all other extensions...)  					var capability = lines[i].Trim ().ToUpperInvariant ();    					if (capability.StartsWith ("AUTH"' StringComparison.Ordinal)) {  						int index = 4;    						capabilities |= SmtpCapabilities.Authentication;    						if (index < capability.Length && capability[index] == '=')  							index++;    						var mechanisms = capability.Substring (index);  						foreach (var mechanism in mechanisms.Split (new [] { ' ' }' StringSplitOptions.RemoveEmptyEntries))  							AuthenticationMechanisms.Add (mechanism);  					} else if (capability.StartsWith ("SIZE"' StringComparison.Ordinal)) {  						int index = 4;  						uint size;    						capabilities |= SmtpCapabilities.Size;    						while (index < capability.Length && char.IsWhiteSpace (capability[index]))  							index++;    						if (uint.TryParse (capability.Substring (index)' out size))  							MaxSize = size;  					} else if (capability == "DSN") {  						capabilities |= SmtpCapabilities.Dsn;  					} else if (capability == "BINARYMIME") {  						capabilities |= SmtpCapabilities.BinaryMime;  					} else if (capability == "CHUNKING") {  						capabilities |= SmtpCapabilities.Chunking;  					} else if (capability == "ENHANCEDSTATUSCODES") {  						capabilities |= SmtpCapabilities.EnhancedStatusCodes;  					} else if (capability == "8BITMIME") {  						capabilities |= SmtpCapabilities.EightBitMime;  					} else if (capability == "PIPELINING") {  						capabilities |= SmtpCapabilities.Pipelining;  					} else if (capability == "STARTTLS") {  						capabilities |= SmtpCapabilities.StartTLS;  					} else if (capability == "SMTPUTF8") {  						capabilities |= SmtpCapabilities.UTF8;  					}  				}  			}
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 25;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 25; goto default;  				case 465: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 465;  				break;  			}
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 25;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 25; goto default;  				case 465: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 465;  				break;  			}
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 25;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 25; goto default;  				case 465: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 465;  				break;  			}
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ComputeDefaultValues,The following statement contains a magic number: switch (options) {  			default:  				if (port == 0)  					port = 25;  				break;  			case SecureSocketOptions.Auto:  				switch (port) {  				case 0: port = 25; goto default;  				case 465: options = SecureSocketOptions.SslOnConnect; break;  				default: options = SecureSocketOptions.StartTlsWhenAvailable; break;  				}  				break;  			case SecureSocketOptions.SslOnConnect:  				if (port == 0)  					port = 465;  				break;  			}
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,ConnectAsync,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit.Net.Smtp,SmtpStream,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpStream.cs,SmtpStream,The following statement contains a magic number: UTF8 = Encoding.GetEncoding (65001' new EncoderExceptionFallback ()' new DecoderExceptionFallback ());
Magic Number,MailKit.Net.Smtp,SmtpStream,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpStream.cs,SmtpStream,The following statement contains a magic number: try {  				Latin1 = Encoding.GetEncoding (28591);  			} catch (NotSupportedException) {  				Latin1 = Encoding.GetEncoding (1252);  			}
Magic Number,MailKit.Net.Smtp,SmtpStream,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpStream.cs,SmtpStream,The following statement contains a magic number: try {  				Latin1 = Encoding.GetEncoding (28591);  			} catch (NotSupportedException) {  				Latin1 = Encoding.GetEncoding (1252);  			}
Magic Number,MailKit.Net.Smtp,SmtpStream,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpStream.cs,Poll,The following statement contains a magic number: if (Socket != null) {  				do {  					cancellationToken.ThrowIfCancellationRequested ();  					// wait 1/4 second and then re-check for cancellation  				} while (!Socket.Poll (250000' mode));  			} else {  				cancellationToken.ThrowIfCancellationRequested ();  			}
Magic Number,MailKit.Net.Smtp,SmtpStream,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpStream.cs,TryParseInt32,The following statement contains a magic number: while (index < endIndex && text[index] >= (byte) '0' && text[index] <= (byte) '9')  				value = (value * 10) + (text[index++] - (byte) '0');
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetUIntBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetUIntBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetUIntBytes,The following statement contains a magic number: return new [] { bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetUIntBytes,The following statement contains a magic number: return new [] { bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3]' bytes [4]' bytes [5]' bytes [6]' bytes [7] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3]' bytes [4]' bytes [5]' bytes [6]' bytes [7] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3]' bytes [4]' bytes [5]' bytes [6]' bytes [7] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3]' bytes [4]' bytes [5]' bytes [6]' bytes [7] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3]' bytes [4]' bytes [5]' bytes [6]' bytes [7] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  				return new [] { bytes [0]' bytes [1]' bytes [2]' bytes [3]' bytes [4]' bytes [5]' bytes [6]' bytes [7] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: return new [] { bytes [7]' bytes [6]' bytes [5]' bytes [4]' bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: return new [] { bytes [7]' bytes [6]' bytes [5]' bytes [4]' bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: return new [] { bytes [7]' bytes [6]' bytes [5]' bytes [4]' bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: return new [] { bytes [7]' bytes [6]' bytes [5]' bytes [4]' bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: return new [] { bytes [7]' bytes [6]' bytes [5]' bytes [4]' bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,GetULongBytes,The following statement contains a magic number: return new [] { bytes [7]' bytes [6]' bytes [5]' bytes [4]' bytes [3]' bytes [2]' bytes [1]' bytes [0] };
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,UIntFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				dst [0] = src[startIndex];  				dst [1] = src[startIndex + 1];  				dst [2] = src[startIndex + 2];  				dst [3] = src[startIndex + 3];  			} else {  				dst [0] = src[startIndex + 3];  				dst [1] = src[startIndex + 2];  				dst [2] = src[startIndex + 1];  				dst [3] = src[startIndex];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,ULongFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				for (int i = 0; i < 8; ++i)  					dst [i] = src [startIndex + i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst [i] = src [startIndex + (7 - i)];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,ULongFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				for (int i = 0; i < 8; ++i)  					dst [i] = src [startIndex + i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst [i] = src [startIndex + (7 - i)];  			}
Magic Number,MailKit.Security.Ntlm,BitConverterLE,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\BitConverterLE.cs,ULongFromBytes,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  				for (int i = 0; i < 8; ++i)  					dst [i] = src [startIndex + i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst [i] = src [startIndex + (7 - i)];  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,ChallengeResponse,The following statement contains a magic number: lmpwd = new byte[21];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,ChallengeResponse,The following statement contains a magic number: ntpwd = new byte[21];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: var key = new byte[8];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[1] = (byte) ((key56bits [position] << 7)     | (key56bits [position + 1] >> 1));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits [position + 1] << 6) | (key56bits [position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits [position + 2] << 5) | (key56bits [position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits [position + 3] << 4) | (key56bits [position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits [position + 4] << 3) | (key56bits [position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits [position + 5] << 2) | (key56bits [position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[7] = (byte)  (key56bits [position + 6] << 1);
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PrepareDESKey,The following statement contains a magic number: key[7] = (byte)  (key56bits [position + 6] << 1);
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PasswordToKey,The following statement contains a magic number: int len = Math.Min (password.Length - position' 7);
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,PasswordToKey,The following statement contains a magic number: var key7 = new byte[7];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: var response = new byte[24];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var transform = des.CreateEncryptor ())  					transform.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: var buffer = new byte[21];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeLM,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;    				// Note: In .NET DES cannot accept a weak key  				// this can happen for a null password  				if (string.IsNullOrEmpty (password)) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 0' 8);  				} else {  					des.Key = PasswordToKey (password' 0);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 0);  				}    				// and if a password has less than 8 characters  				if (password == null || password.Length < 8) {  					Buffer.BlockCopy (NullEncMagic' 0' buffer' 8' 8);  				} else {  					des.Key = PasswordToKey (password' 7);  					using (var ct = des.CreateEncryptor ())  						ct.TransformBlock (Magic' 0' 8' buffer' 8);  				}  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmPassword,The following statement contains a magic number: var buffer = new byte[21];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmPassword,The following statement contains a magic number: using (var md4 = new MD4 ()) {  				var data = password == null ? new byte[0] : Encoding.Unicode.GetBytes (password);  				var hash = md4.ComputeHash (data);  				Buffer.BlockCopy (hash' 0' buffer' 0' 16);    				// clean up  				Array.Clear (data' 0' data.Length);  				Array.Clear (hash' 0' hash.Length);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2Session,The following statement contains a magic number: var nonce = new byte[8];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2Session,The following statement contains a magic number: var sessionNonce = new byte[challenge.Length + 8];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2Session,The following statement contains a magic number: lm = new byte[24];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2Session,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  				var hash = md5.ComputeHash (sessionNonce);  				var newChallenge = new byte[8];    				Array.Copy (hash' newChallenge' 8);    				ntlm = ComputeNtlm (password' newChallenge);    				// clean up  				Array.Clear (newChallenge' 0' newChallenge.Length);  				Array.Clear (hash' 0' hash.Length);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2Session,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  				var hash = md5.ComputeHash (sessionNonce);  				var newChallenge = new byte[8];    				Array.Copy (hash' newChallenge' 8);    				ntlm = ComputeNtlm (password' newChallenge);    				// clean up  				Array.Clear (newChallenge' 0' newChallenge.Length);  				Array.Clear (hash' 0' hash.Length);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,ComputeNtlmV2,The following statement contains a magic number: using (var md5 = new HMACMD5 (ntlm_v2_hash)) {  				var now = DateTime.Now;  				var timestamp = now.Ticks - 504911232000000000;  				var nonce = new byte[8];    				using (var rng = RandomNumberGenerator.Create ())  					rng.GetBytes (nonce);    				var targetInfo = type2.EncodedTargetInfo;  				var blob = new byte[28 + targetInfo.Length];  				blob[0] = 0x01;  				blob[1] = 0x01;    				Buffer.BlockCopy (BitConverterLE.GetBytes (timestamp)' 0' blob' 8' 8);    				Buffer.BlockCopy (nonce' 0' blob' 16' 8);  				Buffer.BlockCopy (targetInfo' 0' blob' 28' targetInfo.Length);    				var challenge = type2.Nonce;    				var hashInput = new byte[challenge.Length + blob.Length];  				challenge.CopyTo (hashInput' 0);  				blob.CopyTo (hashInput' challenge.Length);    				var blobHash = md5.ComputeHash (hashInput);    				var response = new byte[blob.Length + blobHash.Length];  				blobHash.CopyTo (response' 0);  				blob.CopyTo (response' blobHash.Length);    				Array.Clear (ntlm_v2_hash' 0' ntlm_v2_hash.Length);  				Array.Clear (hashInput' 0' hashInput.Length);  				Array.Clear (blobHash' 0' blobHash.Length);  				Array.Clear (nonce' 0' nonce.Length);  				Array.Clear (blob' 0' blob.Length);    				return response;  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: var response = new byte[24];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,GetResponse,The following statement contains a magic number: using (var des = DES.Create ()) {  				des.Mode = CipherMode.ECB;  				des.Key = PrepareDESKey (pwd' 0);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 0);    				des.Key = PrepareDESKey (pwd' 7);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 8);    				des.Key = PrepareDESKey (pwd' 14);    				using (var ct = des.CreateEncryptor ())  					ct.TransformBlock (challenge' 0' 8' response' 16);  			}
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: var key = new byte[8];
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[1] = (byte) ((key56bits[position] << 7)     | (key56bits[position + 1] >> 1));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits[position + 1] << 6) | (key56bits[position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits[position + 1] << 6) | (key56bits[position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits[position + 1] << 6) | (key56bits[position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[2] = (byte) ((key56bits[position + 1] << 6) | (key56bits[position + 2] >> 2));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits[position + 2] << 5) | (key56bits[position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits[position + 2] << 5) | (key56bits[position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits[position + 2] << 5) | (key56bits[position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits[position + 2] << 5) | (key56bits[position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[3] = (byte) ((key56bits[position + 2] << 5) | (key56bits[position + 3] >> 3));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits[position + 3] << 4) | (key56bits[position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits[position + 3] << 4) | (key56bits[position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits[position + 3] << 4) | (key56bits[position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits[position + 3] << 4) | (key56bits[position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[4] = (byte) ((key56bits[position + 3] << 4) | (key56bits[position + 4] >> 4));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits[position + 4] << 3) | (key56bits[position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits[position + 4] << 3) | (key56bits[position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits[position + 4] << 3) | (key56bits[position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits[position + 4] << 3) | (key56bits[position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[5] = (byte) ((key56bits[position + 4] << 3) | (key56bits[position + 5] >> 5));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits[position + 5] << 2) | (key56bits[position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits[position + 5] << 2) | (key56bits[position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits[position + 5] << 2) | (key56bits[position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits[position + 5] << 2) | (key56bits[position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[6] = (byte) ((key56bits[position + 5] << 2) | (key56bits[position + 6] >> 6));
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[7] = (byte)  (key56bits[position + 6] << 1);
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PrepareDESKey,The following statement contains a magic number: key[7] = (byte)  (key56bits[position + 6] << 1);
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PasswordToKey,The following statement contains a magic number: int len = Math.Min (password.Length - position' 7);
Magic Number,MailKit.Security.Ntlm,ChallengeResponse2,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\ChallengeResponse2.cs,PasswordToKey,The following statement contains a magic number: var key7 = new byte[7];
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,DES,The following statement contains a magic number: BlockSize = 64;
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,DES,The following statement contains a magic number: KeySize = 64;
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,GenerateIV,The following statement contains a magic number: var iv = new byte[8];
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,GenerateKey,The following statement contains a magic number: var key = new byte[8];
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,FixupKeyParity,The following statement contains a magic number: for (int index = 0; index < key.Length; index++) {  				// Get the bits we are interested in  				oddParityKey[index] = (byte) (key[index] & 0xfe);  				// Get the parity of the sum of the previous bits  				byte tmp1 = (byte) ((oddParityKey[index] & 0xF) ^ (oddParityKey[index] >> 4));  				byte tmp2 = (byte) ((tmp1 & 0x3) ^ (tmp1 >> 2));  				byte sumBitsMod2 = (byte) ((tmp2 & 0x1) ^ (tmp2 >> 1));  				// We need to set the last bit in oddParityKey[index] to the negation  				// of the last bit in sumBitsMod2  				if (sumBitsMod2 == 0)  					oddParityKey[index] |= 1;  			}
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,FixupKeyParity,The following statement contains a magic number: for (int index = 0; index < key.Length; index++) {  				// Get the bits we are interested in  				oddParityKey[index] = (byte) (key[index] & 0xfe);  				// Get the parity of the sum of the previous bits  				byte tmp1 = (byte) ((oddParityKey[index] & 0xF) ^ (oddParityKey[index] >> 4));  				byte tmp2 = (byte) ((tmp1 & 0x3) ^ (tmp1 >> 2));  				byte sumBitsMod2 = (byte) ((tmp2 & 0x1) ^ (tmp2 >> 1));  				// We need to set the last bit in oddParityKey[index] to the negation  				// of the last bit in sumBitsMod2  				if (sumBitsMod2 == 0)  					oddParityKey[index] |= 1;  			}
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,IsLegalKeySize,The following statement contains a magic number: return rgbKey != null && rgbKey.Length == 8;
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DES,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,QuadWordFromBigEndian,The following statement contains a magic number: return (((ulong) block[0]) << 56) | (((ulong) block[1]) << 48) |  				(((ulong) block[2]) << 40) | (((ulong) block[3]) << 32) |  				(((ulong) block[4]) << 24) | (((ulong) block[5]) << 16) |  				(((ulong) block[6]) << 8) | ((ulong) block[7]);
Magic Number,MailKit.Security.Ntlm,DesTransform,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,TransformBlock,The following statement contains a magic number: if (inputCount != 8)  					throw new ArgumentOutOfRangeException ("inputCount"' "Can only transform 8 bytes at a time.");
Magic Number,MailKit.Security.Ntlm,DesTransform,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,TransformBlock,The following statement contains a magic number: if (outputOffset < 0 || outputOffset > outputBuffer.Length - 8)  					throw new ArgumentOutOfRangeException ("outputOffset");
Magic Number,MailKit.Security.Ntlm,DesTransform,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\DES.cs,TransformFinalBlock,The following statement contains a magic number: var output = new byte[8];
Magic Number,MailKit.Security.Ntlm,HMACMD5,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\HMACMD5.cs,ComputeHash,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4,The following statement contains a magic number: buffered = new byte[64];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4,The following statement contains a magic number: state = new uint[4];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4,The following statement contains a magic number: count = new uint[2];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4,The following statement contains a magic number: x = new uint[16];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashCore,The following statement contains a magic number: int index = (int) ((count[0] >> 3) & 0x3F);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashCore,The following statement contains a magic number: count[0] += (uint) (size << 3);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashCore,The following statement contains a magic number: if (count[0] < (size << 3))  				count[1]++;
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashCore,The following statement contains a magic number: count[1] += (uint) (size >> 29);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashCore,The following statement contains a magic number: int partLen = 64 - index;
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashCore,The following statement contains a magic number: if (size >= partLen) {  				Buffer.BlockCopy (block' offset' buffered' index' partLen);  				MD4Transform (buffered' 0);    				for (i = partLen; i + 63 < size; i += 64)  					MD4Transform (block' offset + i);    				index = 0;  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashCore,The following statement contains a magic number: if (size >= partLen) {  				Buffer.BlockCopy (block' offset' buffered' index' partLen);  				MD4Transform (buffered' 0);    				for (i = partLen; i + 63 < size; i += 64)  					MD4Transform (block' offset + i);    				index = 0;  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashFinal,The following statement contains a magic number: var bits = new byte[8];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashFinal,The following statement contains a magic number: uint index = ((count [0] >> 3) & 0x3f);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashFinal,The following statement contains a magic number: int padLen = (int) ((index < 56) ? (56 - index) : (120 - index));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashFinal,The following statement contains a magic number: int padLen = (int) ((index < 56) ? (56 - index) : (120 - index));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashFinal,The following statement contains a magic number: int padLen = (int) ((index < 56) ? (56 - index) : (120 - index));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashFinal,The following statement contains a magic number: HashCore (bits' 0' 8);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,HashFinal,The following statement contains a magic number: var digest = new byte[16];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Initialize,The following statement contains a magic number: state[2] = 0x98badcfe;
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Initialize,The following statement contains a magic number: state[3] = 0x10325476;
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Initialize,The following statement contains a magic number: Array.Clear (buffered' 0' 64);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Initialize,The following statement contains a magic number: Array.Clear (x' 0' 16);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,ROL,The following statement contains a magic number: return (x << n) | (x >> (32 - n));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  				output[j + 0] = (byte) (input[i]);  				output[j + 1] = (byte) (input[i] >> 8);  				output[j + 2] = (byte) (input[i] >> 16);  				output[j + 3] = (byte) (input[i] >> 24);  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  				output[j + 0] = (byte) (input[i]);  				output[j + 1] = (byte) (input[i] >> 8);  				output[j + 2] = (byte) (input[i] >> 16);  				output[j + 3] = (byte) (input[i] >> 24);  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  				output[j + 0] = (byte) (input[i]);  				output[j + 1] = (byte) (input[i] >> 8);  				output[j + 2] = (byte) (input[i] >> 16);  				output[j + 3] = (byte) (input[i] >> 24);  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  				output[j + 0] = (byte) (input[i]);  				output[j + 1] = (byte) (input[i] >> 8);  				output[j + 2] = (byte) (input[i] >> 16);  				output[j + 3] = (byte) (input[i] >> 24);  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  				output[j + 0] = (byte) (input[i]);  				output[j + 1] = (byte) (input[i] >> 8);  				output[j + 2] = (byte) (input[i] >> 16);  				output[j + 3] = (byte) (input[i] >> 24);  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  				output[j + 0] = (byte) (input[i]);  				output[j + 1] = (byte) (input[i] >> 8);  				output[j + 2] = (byte) (input[i] >> 16);  				output[j + 3] = (byte) (input[i] >> 24);  			}
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4)  				output[i] = (uint) ((input[j]) | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4)  				output[i] = (uint) ((input[j]) | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4)  				output[i] = (uint) ((input[j]) | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4)  				output[i] = (uint) ((input[j]) | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4)  				output[i] = (uint) ((input[j]) | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4)  				output[i] = (uint) ((input[j]) | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: uint c = state[2];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: uint d = state[3];
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[ 2]' S13);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[ 3]' S14);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x[ 4]' S11);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x[ 5]' S12);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[ 6]' S13);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[ 7]' S14);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x[ 8]' S11);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x[ 9]' S12);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[10]' S13);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[11]' S14);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x[12]' S11);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x[13]' S12);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x[14]' S13);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x[15]' S14);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 4]' S22);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[ 8]' S23);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[12]' S24);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 5]' S22);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[ 9]' S23);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[13]' S24);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x[ 2]' S21);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 6]' S22);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[10]' S23);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[14]' S24);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x[ 3]' S21);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x[ 7]' S22);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x[11]' S23);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x[15]' S24);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[ 8]' S32);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 4]' S33);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[12]' S34);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x[ 2]' S31);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[10]' S32);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 6]' S33);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[14]' S34);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[ 9]' S32);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 5]' S33);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[13]' S34);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x[ 3]' S31);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x[11]' S32);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x[ 7]' S33);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x[15]' S34);
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: state [2] += c;
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,MD4Transform,The following statement contains a magic number: state [3] += d;
Magic Number,MailKit.Security.Ntlm,MD4,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MD4.cs,ComputeHash,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: Buffer.BlockCopy (header' 0' message' 0' 8);
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: message[ 8] = (byte) type;
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: message[ 9] = (byte)(type >> 8);
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: message[ 9] = (byte)(type >> 8);
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: message[10] = (byte)(type >> 16);
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: message[10] = (byte)(type >> 16);
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: message[11] = (byte)(type >> 24);
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,PrepareMessage,The following statement contains a magic number: message[11] = (byte)(type >> 24);
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,CheckHeader,The following statement contains a magic number: return BitConverterLE.ToUInt32 (message' startIndex + 8) == type;
Magic Number,MailKit.Security.Ntlm,MessageBase,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\MessageBase.cs,ValidateArguments,The following statement contains a magic number: if (length < 12 || length > (message.Length - startIndex))  				throw new ArgumentOutOfRangeException (nameof (length));
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeString,The following statement contains a magic number: var value = encoding.GetString (buffer' index + 2' length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeString,The following statement contains a magic number: index += 2 + length;
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeFlags,The following statement contains a magic number: index += 2;
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeFlags,The following statement contains a magic number: switch (nbytes) {  			case 4:  flags = BitConverterLE.ToInt32 (buffer' index); break;  			case 2:  flags = BitConverterLE.ToInt16 (buffer' index); break;  			default: flags = 0; break;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeFlags,The following statement contains a magic number: switch (nbytes) {  			case 4:  flags = BitConverterLE.ToInt32 (buffer' index); break;  			case 2:  flags = BitConverterLE.ToInt16 (buffer' index); break;  			default: flags = 0; break;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: index += 2;
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,DecodeTimestamp,The following statement contains a magic number: switch (nbytes) {  			case 8:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				hi = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return (hi << 32) | lo;  			case 4:  				lo = BitConverterLE.ToUInt32 (buffer' index);  				index += 4;  				return lo;  			case 2:  				lo = BitConverterLE.ToUInt16 (buffer' index);  				index += 2;  				return lo;  			default:  				index += nbytes;  				return 0;  			}
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Decode,The following statement contains a magic number: do {  				var type = BitConverterLE.ToInt16 (buffer' index);    				index += 2;    				switch (type) {  				case 0: index = startIndex + length; break; // a 'type' of 0 terminates the TargetInfo  				case 1: ServerName = DecodeString (buffer' ref index' unicode); break;  				case 2: DomainName = DecodeString (buffer' ref index' unicode); break;  				case 3: DnsServerName = DecodeString (buffer' ref index' unicode); break;  				case 4: DnsDomainName = DecodeString (buffer' ref index' unicode); break;  				case 5: DnsTreeName = DecodeString (buffer' ref index' unicode); break;  				case 6: Flags = DecodeFlags (buffer' ref index); break;  				case 7: Timestamp = DecodeTimestamp (buffer' ref index); break;  				case 9: TargetName = DecodeString (buffer' ref index' unicode); break;  				default: index += 2 + BitConverterLE.ToInt16 (buffer' index); break;  				}  			} while (index < startIndex + length);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: int length = 4;
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (!string.IsNullOrEmpty (DomainName))  				length += 4 + encoding.GetByteCount (DomainName);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (!string.IsNullOrEmpty (ServerName))  				length += 4 + encoding.GetByteCount (ServerName);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (!string.IsNullOrEmpty (DnsDomainName))  				length += 4 + encoding.GetByteCount (DnsDomainName);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (!string.IsNullOrEmpty (DnsServerName))  				length += 4 + encoding.GetByteCount (DnsServerName);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (!string.IsNullOrEmpty (DnsTreeName))  				length += 4 + encoding.GetByteCount (DnsTreeName);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (Flags.HasValue)  				length += 8;
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (Timestamp != 0)  				length += 12;
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,CalculateSize,The following statement contains a magic number: if (!string.IsNullOrEmpty (TargetName))  				length += 4 + encoding.GetByteCount (TargetName);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeTypeAndLength,The following statement contains a magic number: buf[index++] = (byte) (type >> 8);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeTypeAndLength,The following statement contains a magic number: buf[index++] = (byte) (length >> 8);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeString,The following statement contains a magic number: if (unicode)  				length *= 2;
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeInt32,The following statement contains a magic number: buf[index++] = (byte) (value >> 8);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeInt32,The following statement contains a magic number: buf[index++] = (byte) (value >> 16);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeInt32,The following statement contains a magic number: buf[index++] = (byte) (value >> 24);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeTimestamp,The following statement contains a magic number: EncodeTypeAndLength (buf' ref index' type' 8);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeTimestamp,The following statement contains a magic number: EncodeInt32 (buf' ref index' (int) (value >> 32));
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,EncodeFlags,The following statement contains a magic number: EncodeTypeAndLength (buf' ref index' type' 4);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,The following statement contains a magic number: if (!string.IsNullOrEmpty (DomainName))  				EncodeString (buf' ref index' 2' DomainName' unicode);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,The following statement contains a magic number: if (!string.IsNullOrEmpty (DnsDomainName))  				EncodeString (buf' ref index' 4' DnsDomainName' unicode);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,The following statement contains a magic number: if (!string.IsNullOrEmpty (DnsServerName))  				EncodeString (buf' ref index' 3' DnsServerName' unicode);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,The following statement contains a magic number: if (!string.IsNullOrEmpty (DnsTreeName))  				EncodeString (buf' ref index' 5' DnsTreeName' unicode);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,The following statement contains a magic number: if (Flags.HasValue)  				EncodeFlags (buf' ref index' 6' Flags.Value);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,The following statement contains a magic number: if (Timestamp != 0)  				EncodeTimestamp (buf' ref index' 7' Timestamp);
Magic Number,MailKit.Security.Ntlm,TargetInfo,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\TargetInfo.cs,Encode,The following statement contains a magic number: if (!string.IsNullOrEmpty (TargetName))  				EncodeString (buf' ref index' 9' TargetName' unicode);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: Flags = (NtlmFlags) BitConverterLE.ToUInt32 (message' startIndex + 12);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: count = BitConverterLE.ToUInt16 (message' startIndex + 16);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: offset = BitConverterLE.ToUInt16 (message' startIndex + 20);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: count = BitConverterLE.ToUInt16 (message' startIndex + 24);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: offset = BitConverterLE.ToUInt16 (message' startIndex + 28);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: if (offset == 40) {  				// decode the OS Version  				int major = message[startIndex + 32];  				int minor = message[startIndex + 33];  				int build = BitConverterLE.ToUInt16 (message' startIndex + 34);    				OSVersion = new Version (major' minor' build);  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: if (offset == 40) {  				// decode the OS Version  				int major = message[startIndex + 32];  				int minor = message[startIndex + 33];  				int build = BitConverterLE.ToUInt16 (message' startIndex + 34);    				OSVersion = new Version (major' minor' build);  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: if (offset == 40) {  				// decode the OS Version  				int major = message[startIndex + 32];  				int minor = message[startIndex + 33];  				int build = BitConverterLE.ToUInt16 (message' startIndex + 34);    				OSVersion = new Version (major' minor' build);  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Decode,The following statement contains a magic number: if (offset == 40) {  				// decode the OS Version  				int major = message[startIndex + 32];  				int minor = message[startIndex + 33];  				int build = BitConverterLE.ToUInt16 (message' startIndex + 34);    				OSVersion = new Version (major' minor' build);  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: int versionLength = OSVersion != null ? 8 : 0;
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: int hostOffset = 32 + versionLength;
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: var message = PrepareMessage (32 + domain.Length + host.Length + versionLength);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[12] = (byte) Flags;
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[13] = (byte)((uint) Flags >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[13] = (byte)((uint) Flags >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[14] = (byte)((uint) Flags >> 16);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[14] = (byte)((uint) Flags >> 16);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[15] = (byte)((uint) Flags >> 24);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[15] = (byte)((uint) Flags >> 24);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[16] = (byte) domain.Length;
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[17] = (byte)(domain.Length >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[17] = (byte)(domain.Length >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[18] = message[16];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[18] = message[16];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[19] = message[17];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[19] = message[17];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[20] = (byte) domainOffset;
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[21] = (byte)(domainOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[21] = (byte)(domainOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[24] = (byte) host.Length;
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[25] = (byte)(host.Length >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[25] = (byte)(host.Length >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[26] = message[24];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[26] = message[24];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[27] = message[25];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[27] = message[25];
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[28] = (byte) hostOffset;
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[29] = (byte)(hostOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: message[29] = (byte)(hostOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type1Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type1Message.cs,Encode,The following statement contains a magic number: if (OSVersion != null) {  				message[32] = (byte) OSVersion.Major;  				message[33] = (byte) OSVersion.Minor;  				message[34] = (byte)(OSVersion.Build);  				message[35] = (byte)(OSVersion.Build >> 8);  				message[36] = 0x00;  				message[37] = 0x00;  				message[38] = 0x00;  				message[39] = 0x0f;  			}
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Type2Message,The following statement contains a magic number: nonce = new byte[8];
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Type2Message,The following statement contains a magic number: nonce = new byte[8];
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: Flags = (NtlmFlags) BitConverterLE.ToUInt32 (message' startIndex + 20);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: Buffer.BlockCopy (message' startIndex + 24' nonce' 0' 8);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: Buffer.BlockCopy (message' startIndex + 24' nonce' 0' 8);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: var targetNameLength = BitConverterLE.ToUInt16 (message' startIndex + 12);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: var targetNameOffset = BitConverterLE.ToUInt16 (message' startIndex + 16);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: if (message.Length >= 48 && targetNameOffset >= 48) {  				var targetInfoLength = BitConverterLE.ToUInt16 (message' startIndex + 40);  				var targetInfoOffset = BitConverterLE.ToUInt16 (message' startIndex + 44);    				if (targetInfoLength > 0 && targetInfoOffset < message.Length && targetInfoLength <= (message.Length - targetInfoOffset)) {  					TargetInfo = new TargetInfo (message' startIndex + targetInfoOffset' targetInfoLength' (Flags & NtlmFlags.NegotiateUnicode) != 0);    					targetInfo = new byte[targetInfoLength];  					Buffer.BlockCopy (message' startIndex + targetInfoOffset' targetInfo' 0' targetInfoLength);  				}  			}
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: if (message.Length >= 48 && targetNameOffset >= 48) {  				var targetInfoLength = BitConverterLE.ToUInt16 (message' startIndex + 40);  				var targetInfoOffset = BitConverterLE.ToUInt16 (message' startIndex + 44);    				if (targetInfoLength > 0 && targetInfoOffset < message.Length && targetInfoLength <= (message.Length - targetInfoOffset)) {  					TargetInfo = new TargetInfo (message' startIndex + targetInfoOffset' targetInfoLength' (Flags & NtlmFlags.NegotiateUnicode) != 0);    					targetInfo = new byte[targetInfoLength];  					Buffer.BlockCopy (message' startIndex + targetInfoOffset' targetInfo' 0' targetInfoLength);  				}  			}
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: if (message.Length >= 48 && targetNameOffset >= 48) {  				var targetInfoLength = BitConverterLE.ToUInt16 (message' startIndex + 40);  				var targetInfoOffset = BitConverterLE.ToUInt16 (message' startIndex + 44);    				if (targetInfoLength > 0 && targetInfoOffset < message.Length && targetInfoLength <= (message.Length - targetInfoOffset)) {  					TargetInfo = new TargetInfo (message' startIndex + targetInfoOffset' targetInfoLength' (Flags & NtlmFlags.NegotiateUnicode) != 0);    					targetInfo = new byte[targetInfoLength];  					Buffer.BlockCopy (message' startIndex + targetInfoOffset' targetInfo' 0' targetInfoLength);  				}  			}
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Decode,The following statement contains a magic number: if (message.Length >= 48 && targetNameOffset >= 48) {  				var targetInfoLength = BitConverterLE.ToUInt16 (message' startIndex + 40);  				var targetInfoOffset = BitConverterLE.ToUInt16 (message' startIndex + 44);    				if (targetInfoLength > 0 && targetInfoOffset < message.Length && targetInfoLength <= (message.Length - targetInfoOffset)) {  					TargetInfo = new TargetInfo (message' startIndex + targetInfoOffset' targetInfoLength' (Flags & NtlmFlags.NegotiateUnicode) != 0);    					targetInfo = new byte[targetInfoLength];  					Buffer.BlockCopy (message' startIndex + targetInfoOffset' targetInfo' 0' targetInfoLength);  				}  			}
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: byte[] data = PrepareMessage (40);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[16] = (byte) length;
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[17] = (byte)(length >> 8);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[17] = (byte)(length >> 8);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[20] = (byte) Flags;
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[21] = (byte)((uint) Flags >> 8);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[21] = (byte)((uint) Flags >> 8);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[22] = (byte)((uint) Flags >> 16);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[22] = (byte)((uint) Flags >> 16);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[23] = (byte)((uint) Flags >> 24);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: data[23] = (byte)((uint) Flags >> 24);
Magic Number,MailKit.Security.Ntlm,Type2Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type2Message.cs,Encode,The following statement contains a magic number: Buffer.BlockCopy (nonce' 0' data' 24' nonce.Length);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: if (message.Length >= 64)  				Flags = (NtlmFlags) BitConverterLE.ToUInt32 (message' startIndex + 60);  			else  				Flags = (NtlmFlags) 0x8201;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: if (message.Length >= 64)  				Flags = (NtlmFlags) BitConverterLE.ToUInt32 (message' startIndex + 60);  			else  				Flags = (NtlmFlags) 0x8201;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int lmLength = BitConverterLE.ToUInt16 (message' startIndex + 12);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int lmOffset = BitConverterLE.ToUInt16 (message' startIndex + 16);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int ntLength = BitConverterLE.ToUInt16 (message' startIndex + 20);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int ntOffset = BitConverterLE.ToUInt16 (message' startIndex + 24);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int domainLength = BitConverterLE.ToUInt16 (message' startIndex + 28);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int domainOffset = BitConverterLE.ToUInt16 (message' startIndex + 32);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int userLength = BitConverterLE.ToUInt16 (message' startIndex + 36);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int userOffset = BitConverterLE.ToUInt16 (message' startIndex + 40);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int hostLength = BitConverterLE.ToUInt16 (message' startIndex + 44);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Decode,The following statement contains a magic number: int hostOffset = BitConverterLE.ToUInt16 (message' startIndex + 48);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: var payloadOffset = 64;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (type2 == null) {  				if (Level != NtlmAuthLevel.LM_and_NTLM)  					throw new InvalidOperationException ("Refusing to use legacy-mode LM/NTLM authentication unless explicitly enabled using NtlmSettings.DefaultAuthLevel.");  				  				using (var legacy = new ChallengeResponse (Password' challenge)) {  					lm = legacy.LM;  					ntlm = legacy.NT;  				}    				reqVersion = false;  			} else {  				ChallengeResponse2.Compute (type2' Level' Username' Password' domain' out lm' out ntlm);    				if ((reqVersion = (type2.Flags & NtlmFlags.NegotiateVersion) != 0))  					payloadOffset += 8;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[12] = (byte) lmResponseLength;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[13] = (byte) 0x00;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[14] = data[12];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[14] = data[12];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[15] = data[13];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[15] = data[13];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[16] = (byte) lmResponseOffset;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[17] = (byte) (lmResponseOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[17] = (byte) (lmResponseOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[20] = (byte) ntResponseLength;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[21] = (byte) (ntResponseLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[21] = (byte) (ntResponseLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[22] = data[20];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[22] = data[20];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[23] = data[21];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[23] = data[21];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[24] = (byte) ntResponseOffset;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[25] = (byte) (ntResponseOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[25] = (byte) (ntResponseOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[28] = (byte) domainLength;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[29] = (byte) (domainLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[29] = (byte) (domainLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[30] = data[28];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[30] = data[28];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[31] = data[29];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[31] = data[29];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[32] = (byte) domainOffset;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[33] = (byte) (domainOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[33] = (byte) (domainOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[36] = (byte) userLength;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[37] = (byte) (userLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[37] = (byte) (userLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[38] = data[36];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[38] = data[36];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[39] = data[37];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[39] = data[37];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[40] = (byte) userOffset;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[41] = (byte) (userOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[41] = (byte) (userOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[44] = (byte) hostLength;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[45] = (byte) (hostLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[45] = (byte) (hostLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[46] = data[44];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[46] = data[44];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[47] = data[45];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[47] = data[45];
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[48] = (byte) hostOffset;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[49] = (byte) (hostOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[49] = (byte) (hostOffset >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[56] = (byte) messageLength;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[57] = (byte) (messageLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[57] = (byte) (messageLength >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[60] = (byte) Flags;
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[61] = (byte)((uint) Flags >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[61] = (byte)((uint) Flags >> 8);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[62] = (byte)((uint) Flags >> 16);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[62] = (byte)((uint) Flags >> 16);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[63] = (byte)((uint) Flags >> 24);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: data[63] = (byte)((uint) Flags >> 24);
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security.Ntlm,Type3Message,C:\repos\jstedfast_MailKit\MailKit\Security\Ntlm\Type3Message.cs,Encode,The following statement contains a magic number: if (reqVersion) {  				// encode the Windows version as Windows 10.0  				data[64] = 0x0A;  				data[65] = 0x0;    				// encode the ProductBuild version  				data[66] = (byte) (10586 & 0xff);  				data[67] = (byte) (10586 >> 8);    				// next 3 bytes are reserved and should remain 0    				// encode the NTLMRevisionCurrent version  				data[71] = 0x0F;  			}
Magic Number,MailKit.Security,SaslMechanismCramMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismCramMd5.cs,Challenge,The following statement contains a magic number: var ipad = new byte[64];
Magic Number,MailKit.Security,SaslMechanismCramMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismCramMd5.cs,Challenge,The following statement contains a magic number: var opad = new byte[64];
Magic Number,MailKit.Security,SaslMechanismCramMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismCramMd5.cs,Challenge,The following statement contains a magic number: if (password.Length > 64) {  				byte[] checksum;    				using (var md5 = MD5.Create ())  					checksum = md5.ComputeHash (password);    				Array.Copy (checksum' ipad' checksum.Length);  				Array.Copy (checksum' opad' checksum.Length);  			} else {  				Array.Copy (password' ipad' password.Length);  				Array.Copy (password' opad' password.Length);  			}
Magic Number,MailKit.Security,SaslMechanismCramMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismCramMd5.cs,Challenge,The following statement contains a magic number: for (int i = 0; i < 64; i++) {  				ipad[i] ^= 0x36;  				opad[i] ^= 0x5c;  			}
Magic Number,MailKit.Security,SaslMechanismCramMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismCramMd5.cs,Challenge,The following statement contains a magic number: var buffer = new byte[userName.Length + 1 + (digest.Length * 2)];
Magic Number,MailKit.Security,SaslMechanismCramMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismCramMd5.cs,Challenge,The following statement contains a magic number: for (int i = 0; i < digest.Length; i++) {  				byte c = digest[i];    				buffer[offset++] = HexAlphabet[(c >> 4) & 0x0f];  				buffer[offset++] = HexAlphabet[c & 0x0f];  			}
Magic Number,MailKit.Security,SaslMechanismDigestMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,Challenge,The following statement contains a magic number: switch (state) {  			case LoginState.Auth:  				if (token.Length > 2048)  					throw new SaslException (MechanismName' SaslErrorCode.ChallengeTooLong' "Server challenge too long.");    				challenge = DigestChallenge.Parse (Encoding.UTF8.GetString (token' startIndex' length));    				if (string.IsNullOrEmpty (cnonce)) {  					var entropy = new byte[15];    					using (var rng = RandomNumberGenerator.Create ())  						rng.GetBytes (entropy);    					cnonce = Convert.ToBase64String (entropy);  				}    				response = new DigestResponse (challenge' Uri.Scheme' Uri.DnsSafeHost' cred.UserName' cred.Password' cnonce);  				state = LoginState.Final;  				return response.Encode ();  			case LoginState.Final:  				if (token.Length == 0)  					throw new SaslException (MechanismName' SaslErrorCode.MissingChallenge' "Server response did not contain any authentication data.");    				var text = Encoding.UTF8.GetString (token' startIndex' length);  				string key' value;  				int index = 0;    				if (!DigestChallenge.TryParseKeyValuePair (text' ref index' out key' out value))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Server response contained incomplete authentication data.");    				var expected = response.ComputeHash (cred.Password' false);  				if (value != expected)  					throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Server response did not contain the expected hash.");    				IsAuthenticated = true;  				return new byte[0];  			default:  				throw new IndexOutOfRangeException ("state");  			}
Magic Number,MailKit.Security,SaslMechanismDigestMd5,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,Challenge,The following statement contains a magic number: switch (state) {  			case LoginState.Auth:  				if (token.Length > 2048)  					throw new SaslException (MechanismName' SaslErrorCode.ChallengeTooLong' "Server challenge too long.");    				challenge = DigestChallenge.Parse (Encoding.UTF8.GetString (token' startIndex' length));    				if (string.IsNullOrEmpty (cnonce)) {  					var entropy = new byte[15];    					using (var rng = RandomNumberGenerator.Create ())  						rng.GetBytes (entropy);    					cnonce = Convert.ToBase64String (entropy);  				}    				response = new DigestResponse (challenge' Uri.Scheme' Uri.DnsSafeHost' cred.UserName' cred.Password' cnonce);  				state = LoginState.Final;  				return response.Encode ();  			case LoginState.Final:  				if (token.Length == 0)  					throw new SaslException (MechanismName' SaslErrorCode.MissingChallenge' "Server response did not contain any authentication data.");    				var text = Encoding.UTF8.GetString (token' startIndex' length);  				string key' value;  				int index = 0;    				if (!DigestChallenge.TryParseKeyValuePair (text' ref index' out key' out value))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Server response contained incomplete authentication data.");    				var expected = response.ComputeHash (cred.Password' false);  				if (value != expected)  					throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Server response did not contain the expected hash.");    				IsAuthenticated = true;  				return new byte[0];  			default:  				throw new IndexOutOfRangeException ("state");  			}
Magic Number,MailKit.Security,SaslMechanismOAuth2,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismOAuth2.cs,Challenge,The following statement contains a magic number: var buf = new byte[UserEquals.Length + userName.Length + AuthBearer.Length + authToken.Length + 3];
Magic Number,MailKit.Security,SaslMechanismPlain,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismPlain.cs,Challenge,The following statement contains a magic number: var buffer = new byte[userName.Length + password.Length + 2];
Magic Number,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,Hi,The following statement contains a magic number: using (var hmac = CreateHMAC (str)) {  				var salt1 = new byte[salt.Length + 4];  				byte[] hi' u1;    				Buffer.BlockCopy (salt' 0' salt1' 0' salt.Length);  				salt1[salt1.Length - 1] = (byte) 1;    				hi = u1 = hmac.ComputeHash (salt1);    				for (int i = 1; i < count; i++) {  					var u2 = hmac.ComputeHash (u1);  					Xor (hi' u2);  					u1 = u2;  				}    				return hi;  			}
Magic Number,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,ParseServerChallenge,The following statement contains a magic number: foreach (var pair in challenge.Split (''')) {  				if (pair.Length < 2 || pair[1] != '=')  					continue;    				results.Add (pair[0]' pair.Substring (2));  			}
Magic Number,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,ParseServerChallenge,The following statement contains a magic number: foreach (var pair in challenge.Split (''')) {  				if (pair.Length < 2 || pair[1] != '=')  					continue;    				results.Add (pair[0]' pair.Substring (2));  			}
Magic Number,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,Challenge,The following statement contains a magic number: switch (state) {  			case LoginState.Initial:  				if (string.IsNullOrEmpty (cnonce)) {  					var entropy = new byte[18];    					using (var rng = RandomNumberGenerator.Create ())  						rng.GetBytes (entropy);    					cnonce = Convert.ToBase64String (entropy);  				}    				client = "n=" + Normalize (cred.UserName) + "'r=" + cnonce;  				response = Encoding.UTF8.GetBytes ("n''" + client);  				state = LoginState.Final;  				break;  			case LoginState.Final:  				server = Encoding.UTF8.GetString (token' startIndex' length);  				var tokens = ParseServerChallenge (server);  				string salt' nonce' iterations;  				int count;    				if (!tokens.TryGetValue ('s'' out salt))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Challenge did not contain a salt.");    				if (!tokens.TryGetValue ('r'' out nonce))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Challenge did not contain a nonce.");    				if (!tokens.TryGetValue ('i'' out iterations))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Challenge did not contain an iteration count.");    				if (!nonce.StartsWith (cnonce' StringComparison.Ordinal))  					throw new SaslException (MechanismName' SaslErrorCode.InvalidChallenge' "Challenge contained an invalid nonce.");    				if (!int.TryParse (iterations' out count) || count < 1)  					throw new SaslException (MechanismName' SaslErrorCode.InvalidChallenge' "Challenge contained an invalid iteration count.");    				var password = Encoding.UTF8.GetBytes (SaslPrep (cred.Password));  				salted = Hi (password' Convert.FromBase64String (salt)' count);    				var withoutProof = "c=" + Convert.ToBase64String (Encoding.ASCII.GetBytes ("n''")) + "'r=" + nonce;  				auth = Encoding.UTF8.GetBytes (client + "'" + server + "'" + withoutProof);    				var key = HMAC (salted' Encoding.ASCII.GetBytes ("Client Key"));  				signature = HMAC (Hash (key)' auth);  				Xor (key' signature);    				response = Encoding.UTF8.GetBytes (withoutProof + "'p=" + Convert.ToBase64String (key));  				state = LoginState.Validate;  				break;  			case LoginState.Validate:  				var challenge = Encoding.UTF8.GetString (token' startIndex' length);    				if (!challenge.StartsWith ("v="' StringComparison.Ordinal))  					throw new SaslException (MechanismName' SaslErrorCode.InvalidChallenge' "Challenge did not start with a signature.");    				signature = Convert.FromBase64String (challenge.Substring (2));  				var serverKey = HMAC (salted' Encoding.ASCII.GetBytes ("Server Key"));  				var calculated = HMAC (serverKey' auth);    				if (signature.Length != calculated.Length)  					throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Challenge contained a signature with an invalid length.");    				for (int i = 0; i < signature.Length; i++) {  					if (signature[i] != calculated[i])  						throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Challenge contained an invalid signatire.");  				}    				IsAuthenticated = true;  				response = new byte[0];  				break;  			default:  				throw new IndexOutOfRangeException ("state");  			}
Magic Number,MailKit.Security,SaslMechanismScramBase,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismScramBase.cs,Challenge,The following statement contains a magic number: switch (state) {  			case LoginState.Initial:  				if (string.IsNullOrEmpty (cnonce)) {  					var entropy = new byte[18];    					using (var rng = RandomNumberGenerator.Create ())  						rng.GetBytes (entropy);    					cnonce = Convert.ToBase64String (entropy);  				}    				client = "n=" + Normalize (cred.UserName) + "'r=" + cnonce;  				response = Encoding.UTF8.GetBytes ("n''" + client);  				state = LoginState.Final;  				break;  			case LoginState.Final:  				server = Encoding.UTF8.GetString (token' startIndex' length);  				var tokens = ParseServerChallenge (server);  				string salt' nonce' iterations;  				int count;    				if (!tokens.TryGetValue ('s'' out salt))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Challenge did not contain a salt.");    				if (!tokens.TryGetValue ('r'' out nonce))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Challenge did not contain a nonce.");    				if (!tokens.TryGetValue ('i'' out iterations))  					throw new SaslException (MechanismName' SaslErrorCode.IncompleteChallenge' "Challenge did not contain an iteration count.");    				if (!nonce.StartsWith (cnonce' StringComparison.Ordinal))  					throw new SaslException (MechanismName' SaslErrorCode.InvalidChallenge' "Challenge contained an invalid nonce.");    				if (!int.TryParse (iterations' out count) || count < 1)  					throw new SaslException (MechanismName' SaslErrorCode.InvalidChallenge' "Challenge contained an invalid iteration count.");    				var password = Encoding.UTF8.GetBytes (SaslPrep (cred.Password));  				salted = Hi (password' Convert.FromBase64String (salt)' count);    				var withoutProof = "c=" + Convert.ToBase64String (Encoding.ASCII.GetBytes ("n''")) + "'r=" + nonce;  				auth = Encoding.UTF8.GetBytes (client + "'" + server + "'" + withoutProof);    				var key = HMAC (salted' Encoding.ASCII.GetBytes ("Client Key"));  				signature = HMAC (Hash (key)' auth);  				Xor (key' signature);    				response = Encoding.UTF8.GetBytes (withoutProof + "'p=" + Convert.ToBase64String (key));  				state = LoginState.Validate;  				break;  			case LoginState.Validate:  				var challenge = Encoding.UTF8.GetString (token' startIndex' length);    				if (!challenge.StartsWith ("v="' StringComparison.Ordinal))  					throw new SaslException (MechanismName' SaslErrorCode.InvalidChallenge' "Challenge did not start with a signature.");    				signature = Convert.FromBase64String (challenge.Substring (2));  				var serverKey = HMAC (salted' Encoding.ASCII.GetBytes ("Server Key"));  				var calculated = HMAC (serverKey' auth);    				if (signature.Length != calculated.Length)  					throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Challenge contained a signature with an invalid length.");    				for (int i = 0; i < signature.Length; i++) {  					if (signature[i] != calculated[i])  						throw new SaslException (MechanismName' SaslErrorCode.IncorrectHash' "Challenge contained an invalid signatire.");  				}    				IsAuthenticated = true;  				response = new byte[0];  				break;  			default:  				throw new IndexOutOfRangeException ("state");  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: while (index < text.Length && char.IsDigit (text[index]))  				value = (value * 10) + (uint) (text[index++] - '0');
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '"') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '"') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '"') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					parameters = new List<Parameter> ();  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					parameters = new List<Parameter> ();  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					parameters = new List<Parameter> ();  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (index >= text.Length || text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (index >= text.Length || text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,BodyPart,C:\repos\jstedfast_MailKit\MailKit\BodyPart.cs,TryParse,The following statement contains a magic number: if (index >= text.Length || text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,CompressedStream,C:\repos\jstedfast_MailKit\MailKit\CompressedStream.cs,CompressedStream,The following statement contains a magic number: zOut.deflateInit (5' true);
Magic Number,MailKit,CompressedStream,C:\repos\jstedfast_MailKit\MailKit\CompressedStream.cs,CompressedStream,The following statement contains a magic number: zOut.next_out = new byte[4096];
Magic Number,MailKit,CompressedStream,C:\repos\jstedfast_MailKit\MailKit\CompressedStream.cs,CompressedStream,The following statement contains a magic number: zIn.next_in = new byte[4096];
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (text[index] != '"') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (text[index] != '"') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (text[index] != '"') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					list = new InternetAddressList ();  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					list = new InternetAddressList ();  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					list = new InternetAddressList ();  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (index >= text.Length || text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (index >= text.Length || text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,Envelope,C:\repos\jstedfast_MailKit\MailKit\Envelope.cs,TryParse,The following statement contains a magic number: if (index >= text.Length || text[index] != '(') {  				if (index + 3 <= text.Length && text.Substring (index' 3) == "NIL") {  					index += 3;  					return true;  				}    				return false;  			}
Magic Number,MailKit,MailService,C:\repos\jstedfast_MailKit\MailKit\MailService.cs,Connect,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit,MailService,C:\repos\jstedfast_MailKit\MailKit\MailService.cs,ConnectAsync,The following statement contains a magic number: if (port < 0 || port > 65535)  				throw new ArgumentOutOfRangeException (nameof (port));
Magic Number,MailKit,MessageSorter,C:\repos\jstedfast_MailKit\MailKit\MessageSorter.cs,Sort,The following statement contains a magic number: if (list.Count < 2)  				return list;
Magic Number,MailKit,MessageSorter,C:\repos\jstedfast_MailKit\MailKit\MessageSorter.cs,Sort,The following statement contains a magic number: if (messages.Count < 2)  				return;
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,IsForward,The following statement contains a magic number: return (subject[index] == 'F' || subject[index] == 'f') &&  				(subject[index + 1] == 'W' || subject[index + 1] == 'w') &&  				(subject[index + 2] == 'D' || subject[index + 2] == 'd') &&  				subject[index + 3] == ':';
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,IsForward,The following statement contains a magic number: return (subject[index] == 'F' || subject[index] == 'f') &&  				(subject[index + 1] == 'W' || subject[index + 1] == 'w') &&  				(subject[index + 2] == 'D' || subject[index + 2] == 'd') &&  				subject[index + 3] == ':';
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,IsForward,The following statement contains a magic number: return (subject[index] == 'F' || subject[index] == 'f') &&  				(subject[index + 1] == 'W' || subject[index + 1] == 'w') &&  				(subject[index + 2] == 'D' || subject[index + 2] == 'd') &&  				subject[index + 3] == ':';
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,SkipDigits,The following statement contains a magic number: while (index < subject.Length && char.IsDigit (subject[index])) {  				value = (value * 10) + (subject[index] - '0');  				index++;  			}
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,MessageThreader,C:\repos\jstedfast_MailKit\MailKit\MessageThreader.cs,GetThreadableSubject,The following statement contains a magic number: do {  				SkipWhiteSpace (subject' ref startIndex);  				index = startIndex;    				if ((left = (endIndex - index)) < 3)  					break;    				if (left >= 4 && IsForward (subject' index)) {  					// skip over the "Fwd:" prefix  					startIndex = index + 4;  					replyDepth++;  					continue;  				}    				if (IsReply (subject' index)) {  					if (subject[index + 2] == ':') {  						// skip over the "Re:" prefix  						startIndex = index + 3;  						replyDepth++;  						continue;  					}    					if (subject[index + 2] == '[' || subject[index + 2] == '(') {  						char close = subject[index + 2] == '[' ? ']' : ')';    						// skip over "Re[" or "Re("  						index += 3;    						// if this is followed by "###]:" or "###):"' then it's a condensed "Re:"  						if (SkipDigits (subject' ref index' out count) && (endIndex - index) >= 2 &&  							subject[index] == close && subject[index + 1] == ':') {  							startIndex = index + 2;  							replyDepth += count;  							continue;  						}  					}  				} else if (subject[index] == '[' && char.IsLetterOrDigit (subject[index + 1])) {  					// possibly a mailing-list prefix  					index += 2;    					SkipMailingListName (subject' ref index);    					if ((endIndex - index) >= 1 && subject[index] == ']') {  						startIndex = index + 1;  						continue;  					}  				}    				break;  			} while (true);
Magic Number,MailKit,UniqueId,C:\repos\jstedfast_MailKit\MailKit\UniqueId.cs,TryParse,The following statement contains a magic number: while (index < token.Length) {  				char c = token[index];  				uint v;    				if (c < '0' || c > '9')  					break;    				v = (uint) (c - '0');    				if (value > uint.MaxValue / 10 || (value == uint.MaxValue / 10 && v > uint.MaxValue % 10)) {  					uid = 0;  					return false;  				}    				value = (value * 10) + v;  				index++;  			}
Magic Number,MailKit,UniqueId,C:\repos\jstedfast_MailKit\MailKit\UniqueId.cs,TryParse,The following statement contains a magic number: while (index < token.Length) {  				char c = token[index];  				uint v;    				if (c < '0' || c > '9')  					break;    				v = (uint) (c - '0');    				if (value > uint.MaxValue / 10 || (value == uint.MaxValue / 10 && v > uint.MaxValue % 10)) {  					uid = 0;  					return false;  				}    				value = (value * 10) + v;  				index++;  			}
Magic Number,MailKit,UniqueId,C:\repos\jstedfast_MailKit\MailKit\UniqueId.cs,TryParse,The following statement contains a magic number: while (index < token.Length) {  				char c = token[index];  				uint v;    				if (c < '0' || c > '9')  					break;    				v = (uint) (c - '0');    				if (value > uint.MaxValue / 10 || (value == uint.MaxValue / 10 && v > uint.MaxValue % 10)) {  					uid = 0;  					return false;  				}    				value = (value * 10) + v;  				index++;  			}
Magic Number,MailKit,UniqueId,C:\repos\jstedfast_MailKit\MailKit\UniqueId.cs,TryParse,The following statement contains a magic number: while (index < token.Length) {  				char c = token[index];  				uint v;    				if (c < '0' || c > '9')  					break;    				v = (uint) (c - '0');    				if (value > uint.MaxValue / 10 || (value == uint.MaxValue / 10 && v > uint.MaxValue % 10)) {  					uid = 0;  					return false;  				}    				value = (value * 10) + v;  				index++;  			}
Magic Number,MailKit,UniqueIdRange,C:\repos\jstedfast_MailKit\MailKit\UniqueIdRange.cs,TryParse,The following statement contains a magic number: if (!UniqueId.TryParse (token' ref index' out start) || index + 2 > token.Length || token[index++] != ':') {  				range = Invalid;  				return false;  			}
Magic Number,MailKit,UniqueIdSet,C:\repos\jstedfast_MailKit\MailKit\UniqueIdSet.cs,BinarySearch,The following statement contains a magic number: do {  				int i = min + ((max - min) / 2);    				if (SortOrder == SortOrder.Ascending) {  					// sorted ascending: 1:3'5:7'9  					if (uid >= ranges[i].Start) {  						if (uid <= ranges[i].End)  							return i;    						min = i + 1;  					} else {  						max = i;  					}  				} else {  					// sorted descending: 9'7:5'3:1  					if (uid >= ranges[i].End) {  						if (uid <= ranges[i].Start)  							return i;    						max = i;  					} else {  						min = i + 1;  					}  				}  			} while (min < max);
Magic Number,MailKit,UniqueIdSet,C:\repos\jstedfast_MailKit\MailKit\UniqueIdSet.cs,BinaryInsertAscending,The following statement contains a magic number: do {  				i = min + ((max - min) / 2);    				if (uid >= ranges[i].Start) {  					if (uid <= ranges[i].End)  						return;    					if (uid == ranges[i].End + 1) {  						if (i + 1 < ranges.Count && uid + 1 >= ranges[i + 1].Start) {  							// merge the 2 ranges together  							ranges[i] = new Range (ranges[i].Start' ranges[i + 1].End);  							ranges.RemoveAt (i + 1);  							count++;  							return;  						}    						ranges[i] = new Range (ranges[i].Start' uid);  						count++;  						return;  					}    					min = i + 1;  					i = min;  				} else {  					if (uid == ranges[i].Start - 1) {  						if (i > 0 && uid - 1 <= ranges[i - 1].End) {  							// merge the 2 ranges together  							ranges[i - 1] = new Range (ranges[i - 1].Start' ranges[i].End);  							ranges.RemoveAt (i);  							count++;  							return;  						}    						ranges[i] = new Range (uid' ranges[i].End);  						count++;  						return;  					}    					max = i;  				}  			} while (min < max);
Magic Number,MailKit,UniqueIdSet,C:\repos\jstedfast_MailKit\MailKit\UniqueIdSet.cs,BinaryInsertDescending,The following statement contains a magic number: do {  				i = min + ((max - min) / 2);    				if (uid <= ranges[i].Start) {  					if (uid >= ranges[i].End)  						return;    					if (uid == ranges[i].End - 1) {  						if (i + 1 < ranges.Count && uid - 1 <= ranges[i + 1].Start) {  							// merge the 2 ranges together  							ranges[i] = new Range (ranges[i].Start' ranges[i + 1].End);  							ranges.RemoveAt (i + 1);  							count++;  							return;  						}    						ranges[i] = new Range (ranges[i].Start' uid);  						count++;  						return;  					}    					min = i + 1;  					i = min;  				} else {  					if (uid == ranges[i].Start + 1) {  						if (i > 0 && uid + 1 >= ranges[i - 1].End) {  							// merge the 2 ranges together  							ranges[i - 1] = new Range (ranges[i - 1].Start' ranges[i].End);  							ranges.RemoveAt (i);  							count++;  							return;  						}    						ranges[i] = new Range (uid' ranges[i].End);  						count++;  						return;  					}    					max = i;  				}  			} while (min < max);
Missing Default,MailKit.Net.Imap,ImapCommand,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapCommand.cs,AppendString,The following switch statement is missing a default case: switch (GetStringType (value' allowAtom)) {  			case ImapStringType.Literal:  				var literal = Encoding.UTF8.GetBytes (value);  				var plus = CanUseNonSynchronizedLiteral (literal.Length);  				var length = literal.Length.ToString ();  				buf = Encoding.ASCII.GetBytes (length);    				builder.WriteByte ((byte) '{');  				builder.Write (buf' 0' buf.Length);  				if (plus)  					builder.WriteByte ((byte) '+');  				builder.WriteByte ((byte) '}');  				builder.WriteByte ((byte) '\r');  				builder.WriteByte ((byte) '\n');    				if (plus) {  					builder.Write (literal' 0' literal.Length);  				} else {  					parts.Add (new ImapCommandPart (builder.ToArray ()' new ImapLiteral (options' literal)));  					builder.SetLength (0);  				}  				break;  			case ImapStringType.QString:  				buf = Encoding.UTF8.GetBytes (MimeUtils.Quote (value));  				builder.Write (buf' 0' buf.Length);  				break;  			case ImapStringType.Atom:  				buf = Encoding.UTF8.GetBytes (value);  				builder.Write (buf' 0' buf.Length);  				break;  			case ImapStringType.Nil:  				builder.Write (Nil' 0' Nil.Length);  				break;  			}
Missing Default,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,UpdateCapabilitiesAsync,The following switch statement is missing a default case: switch (algorithm) {  					case "ORDEREDSUBJECT":  						ThreadingAlgorithms.Add (ThreadingAlgorithm.OrderedSubject);  						break;  					case "REFERENCES":  						ThreadingAlgorithms.Add (ThreadingAlgorithm.References);  						break;  					}
Missing Default,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,UpdateCapabilitiesAsync,The following switch statement is missing a default case: switch (atom.ToUpperInvariant ()) {  					case "IMAP4":              Capabilities |= ImapCapabilities.IMAP4; break;  					case "IMAP4REV1":          Capabilities |= ImapCapabilities.IMAP4rev1; break;  					case "STATUS":             Capabilities |= ImapCapabilities.Status; break;  					case "ACL":                Capabilities |= ImapCapabilities.Acl; break;  					case "QUOTA":              Capabilities |= ImapCapabilities.Quota; break;  					case "LITERAL+":           Capabilities |= ImapCapabilities.LiteralPlus; break;  					case "IDLE":               Capabilities |= ImapCapabilities.Idle; break;  					case "MAILBOX-REFERRALS":  Capabilities |= ImapCapabilities.MailboxReferrals; break;  					case "LOGIN-REFERRALS":    Capabilities |= ImapCapabilities.LoginReferrals; break;  					case "NAMESPACE":          Capabilities |= ImapCapabilities.Namespace; break;  					case "ID":                 Capabilities |= ImapCapabilities.Id; break;  					case "CHILDREN":           Capabilities |= ImapCapabilities.Children; break;  					case "LOGINDISABLED":      Capabilities |= ImapCapabilities.LoginDisabled; break;  					case "STARTTLS":           Capabilities |= ImapCapabilities.StartTLS; break;  					case "MULTIAPPEND":        Capabilities |= ImapCapabilities.MultiAppend; break;  					case "BINARY":             Capabilities |= ImapCapabilities.Binary; break;  					case "UNSELECT":           Capabilities |= ImapCapabilities.Unselect; break;  					case "UIDPLUS":            Capabilities |= ImapCapabilities.UidPlus; break;  					case "CATENATE":           Capabilities |= ImapCapabilities.Catenate; break;  					case "CONDSTORE":          Capabilities |= ImapCapabilities.CondStore; break;  					case "ESEARCH":            Capabilities |= ImapCapabilities.ESearch; break;  					case "SASL-IR":            Capabilities |= ImapCapabilities.SaslIR; break;  					case "WITHIN":             Capabilities |= ImapCapabilities.Within; break;  					case "ENABLE":             Capabilities |= ImapCapabilities.Enable; break;  					case "QRESYNC":            Capabilities |= ImapCapabilities.QuickResync; break;  					case "SEARCHRES":          Capabilities |= ImapCapabilities.SearchResults; break;  					case "SORT":               Capabilities |= ImapCapabilities.Sort; break;  					case "LIST-EXTENDED":      Capabilities |= ImapCapabilities.ListExtended; break;  					case "CONVERT":            Capabilities |= ImapCapabilities.Convert; break;  					case "LANGUAGE":           Capabilities |= ImapCapabilities.Language; break;  					case "ESORT":              Capabilities |= ImapCapabilities.ESort; break;  					case "METADATA":           Capabilities |= ImapCapabilities.Metadata; break;  					case "NOTIFY":             Capabilities |= ImapCapabilities.Notify; break;  					case "LIST-STATUS":        Capabilities |= ImapCapabilities.ListStatus; break;  					case "SORT=DISPLAY":       Capabilities |= ImapCapabilities.SortDisplay; break;  					case "CREATE-SPECIAL-USE": Capabilities |= ImapCapabilities.CreateSpecialUse; break;  					case "SPECIAL-USE":        Capabilities |= ImapCapabilities.SpecialUse; break;  					case "SEARCH=FUZZY":       Capabilities |= ImapCapabilities.FuzzySearch; break;  					case "MULTISEARCH":        Capabilities |= ImapCapabilities.MultiSearch; break;  					case "MOVE":               Capabilities |= ImapCapabilities.Move; break;  					case "UTF8=ACCEPT":        Capabilities |= ImapCapabilities.UTF8Accept; break;  					case "UTF8=ONLY":          Capabilities |= ImapCapabilities.UTF8Only; break;  					case "LITERAL-":           Capabilities |= ImapCapabilities.LiteralMinus; break;  					case "APPENDLIMIT":        Capabilities |= ImapCapabilities.AppendLimit; break;  					case "XLIST":              Capabilities |= ImapCapabilities.XList; break;  					case "X-GM-EXT-1":         Capabilities |= ImapCapabilities.GMailExt1; break;  					}
Missing Default,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ParseResponseCodeAsync,The following switch statement is missing a default case: switch ((string) token.Value) {  				case "LONGENTRIES":  					metadata.SubType = MetadataResponseCodeSubType.LongEntries;    					token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.Atom || !uint.TryParse ((string) token.Value' out n32)) {  						Debug.WriteLine ("Expected integer argument to 'METADATA LONGENTRIES' RESP-CODE' but got: {0}"' token);  						throw UnexpectedToken (GenericResponseCodeSyntaxErrorFormat' "METADATA LONGENTRIES"' token);  					}    					metadata.Value = n32;  					break;  				case "MAXSIZE":  					metadata.SubType = MetadataResponseCodeSubType.MaxSize;    					token = await ReadTokenAsync (doAsync' cancellationToken).ConfigureAwait (false);    					if (token.Type != ImapTokenType.Atom || !uint.TryParse ((string) token.Value' out n32)) {  						Debug.WriteLine ("Expected integer argument to 'METADATA MAXSIZE' RESP-CODE' but got: {0}"' token);  						throw UnexpectedToken (GenericResponseCodeSyntaxErrorFormat' "METADATA MAXSIZE"' token);  					}    					metadata.Value = n32;  					break;  				case "TOOMANY":  					metadata.SubType = MetadataResponseCodeSubType.TooMany;  					break;  				case "NOPRIVATE":  					metadata.SubType = MetadataResponseCodeSubType.NoPrivate;  					break;  				}
Missing Default,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,UpdateStatusAsync,The following switch statement is missing a default case: switch (atom) {  				case "HIGHESTMODSEQ":  					if (token.Type != ImapTokenType.Atom)  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "STATUS"' token);    					if (!ulong.TryParse ((string) token.Value' out modseq))  						throw UnexpectedToken (GenericItemSyntaxErrorFormat' atom' token);    					if (folder != null)  						folder.UpdateHighestModSeq (modseq);  					break;  				case "MESSAGES":  					if (token.Type != ImapTokenType.Atom)  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "STATUS"' token);    					if (!int.TryParse ((string) token.Value' out count))  						throw UnexpectedToken (GenericItemSyntaxErrorFormat' atom' token);    					if (folder != null)  						folder.OnExists (count);  					break;  				case "RECENT":  					if (token.Type != ImapTokenType.Atom)  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "STATUS"' token);    					if (!int.TryParse ((string) token.Value' out count))  						throw UnexpectedToken (GenericItemSyntaxErrorFormat' atom' token);    					if (folder != null)  						folder.OnRecent (count);  					break;  				case "UIDNEXT":  					if (token.Type != ImapTokenType.Atom)  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "STATUS"' token);    					if (!uint.TryParse ((string) token.Value' out uid))  						throw UnexpectedToken (GenericItemSyntaxErrorFormat' atom' token);    					if (folder != null)  						folder.UpdateUidNext (uid > 0 ? new UniqueId (uid) : UniqueId.Invalid);  					break;  				case "UIDVALIDITY":  					if (token.Type != ImapTokenType.Atom)  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "STATUS"' token);    					if (!uint.TryParse ((string) token.Value' out uid))  						throw UnexpectedToken (GenericItemSyntaxErrorFormat' atom' token);    					if (folder != null)  						folder.UpdateUidValidity (uid);  					break;  				case "UNSEEN":  					if (token.Type != ImapTokenType.Atom)  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "STATUS"' token);    					if (!int.TryParse ((string) token.Value' out count))  						throw UnexpectedToken (GenericItemSyntaxErrorFormat' atom' token);    					if (folder != null)  						folder.UpdateUnread (count);  					break;  				case "APPENDLIMIT":  					if (token.Type == ImapTokenType.Atom) {  						if (!uint.TryParse ((string) token.Value' out limit))  							throw UnexpectedToken (GenericItemSyntaxErrorFormat' atom' token);    						if (folder != null)  							folder.UpdateAppendLimit (limit);  					} else if (token.Type == ImapTokenType.Nil) {  						if (folder != null)  							folder.UpdateAppendLimit (null);  					} else {  						throw UnexpectedToken (GenericUntaggedResponseSyntaxErrorFormat' "STATUS"' token);  					}  					break;  				}
Missing Default,MailKit.Net.Imap,ImapEngine,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapEngine.cs,ProcessUntaggedResponseAsync,The following switch statement is missing a default case: switch (feature) {  					case "UTF8=ACCEPT": UTF8Enabled = true; break;  					case "QRESYNC": QResyncEnabled = true; break;  					}
Missing Default,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,ProcessResponseCodes,The following switch statement is missing a default case: switch (code.Type) {  				case ImapResponseCodeType.Alert:  					Engine.OnAlert (code.Message);  					break;  				case ImapResponseCodeType.PermanentFlags:  					PermanentFlags = ((PermanentFlagsResponseCode) code).Flags;  					break;  				case ImapResponseCodeType.ReadOnly:  					Access = FolderAccess.ReadOnly;  					break;  				case ImapResponseCodeType.ReadWrite:  					Access = FolderAccess.ReadWrite;  					break;  				case ImapResponseCodeType.TryCreate:  					tryCreate = true;  					break;  				case ImapResponseCodeType.UidNext:  					UidNext = ((UidNextResponseCode) code).Uid;  					break;  				case ImapResponseCodeType.UidValidity:  					UidValidity = ((UidValidityResponseCode) code).UidValidity;  					break;  				case ImapResponseCodeType.Unseen:  					FirstUnread = ((UnseenResponseCode) code).Index;  					break;  				case ImapResponseCodeType.HighestModSeq:  					HighestModSeq = ((HighestModSeqResponseCode) code).HighestModSeq;  					SupportsModSeq = true;  					break;  				case ImapResponseCodeType.NoModSeq:  					SupportsModSeq = false;  					HighestModSeq = 0;  					break;  				}
Missing Default,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,UntaggedQuotaAsync,The following switch statement is missing a default case: switch (resource.ToUpperInvariant ()) {  				case "MESSAGE":  					quota.CurrentMessageCount = used;  					quota.MessageLimit = limit;  					break;  				case "STORAGE":  					quota.CurrentStorageSize = used;  					quota.StorageLimit = limit;  					break;  				}
Missing Default,MailKit.Net.Imap,ImapFolder,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapFolder.cs,SearchMatchesAsync,The following switch statement is missing a default case: switch (atom) {  					case "MODSEQ":  						token = await engine.ReadTokenAsync (doAsync' ic.CancellationToken).ConfigureAwait (false);    						if (token.Type != ImapTokenType.Atom || !ulong.TryParse ((string) token.Value' out modseq)) {  							Debug.WriteLine ("Expected 64-bit nz-number as the MODSEQ value' but got: {0}"' token);  							throw ImapEngine.UnexpectedToken (ImapEngine.GenericItemSyntaxErrorFormat' atom' token);  						}  						break;  					}
Missing Default,MailKit.Net.Imap,ImapSearchQueryOptimizer,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapSearchQueryOptimizer.cs,Reduce,The following switch statement is missing a default case: switch (unary.Operand.Term) {  				case SearchTerm.NotAnswered: return SearchQuery.Answered;  				case SearchTerm.Answered: return SearchQuery.NotAnswered;  				case SearchTerm.NotDeleted: return SearchQuery.Deleted;  				case SearchTerm.Deleted: return SearchQuery.NotDeleted;  				case SearchTerm.NotDraft: return SearchQuery.Draft;  				case SearchTerm.Draft: return SearchQuery.NotDraft;  				case SearchTerm.NotFlagged: return SearchQuery.Flagged;  				case SearchTerm.Flagged: return SearchQuery.NotFlagged;  				case SearchTerm.NotRecent: return SearchQuery.Recent;  				case SearchTerm.Recent: return SearchQuery.NotRecent;  				case SearchTerm.NotSeen: return SearchQuery.Seen;  				case SearchTerm.Seen: return SearchQuery.NotSeen;  				}
Missing Default,MailKit.Net.Imap,ImapUtils,C:\repos\jstedfast_MailKit\MailKit\Net\Imap\ImapUtils.cs,ParseFolderListAsync,The following switch statement is missing a default case: switch (atom) {  				case "\\NoInferiors":   attrs |= FolderAttributes.NoInferiors; break;  				case "\\Noselect":      attrs |= FolderAttributes.NoSelect; break;  				case "\\Marked":        attrs |= FolderAttributes.Marked; break;  				case "\\Unmarked":      attrs |= FolderAttributes.Unmarked; break;  				case "\\NonExistent":   attrs |= FolderAttributes.NonExistent; break;  				case "\\Subscribed":    attrs |= FolderAttributes.Subscribed; break;  				case "\\Remote":        attrs |= FolderAttributes.Remote; break;  				case "\\HasChildren":   attrs |= FolderAttributes.HasChildren; break;  				case "\\HasNoChildren": attrs |= FolderAttributes.HasNoChildren; break;  				case "\\All":           attrs |= FolderAttributes.All; break;  				case "\\Archive":       attrs |= FolderAttributes.Archive; break;  				case "\\Drafts":        attrs |= FolderAttributes.Drafts; break;  				case "\\Flagged":       attrs |= FolderAttributes.Flagged; break;  				case "\\Junk":          attrs |= FolderAttributes.Junk; break;  				case "\\Sent":          attrs |= FolderAttributes.Sent; break;  				case "\\Trash":         attrs |= FolderAttributes.Trash; break;  				// XLIST flags:  				case "\\AllMail":       attrs |= FolderAttributes.All; break;  				case "\\Important":     attrs |= FolderAttributes.Flagged; break;  				case "\\Inbox":         attrs |= FolderAttributes.Inbox; break;  				case "\\Spam":          attrs |= FolderAttributes.Junk; break;  				case "\\Starred":       attrs |= FolderAttributes.Flagged; break;  				}
Missing Default,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,ReadResponseAsync,The following switch statement is missing a default case: switch (pc.Status) {  			case Pop3CommandStatus.ProtocolError:  				Disconnect ();  				throw new Pop3ProtocolException (string.Format ("Unexpected response from server: {0}"' response));  			case Pop3CommandStatus.Continue:  			case Pop3CommandStatus.Ok:  				if (pc.Handler != null) {  					try {  						await pc.Handler (this' pc' text' doAsync).ConfigureAwait (false);  					} catch {  						pc.Status = Pop3CommandStatus.ProtocolError;  						Disconnect ();  						throw;  					}  				}  				break;  			}
Missing Default,MailKit.Net.Pop3,Pop3Engine,C:\repos\jstedfast_MailKit\MailKit\Net\Pop3\Pop3Engine.cs,CapaHandler,The following switch statement is missing a default case: switch (token) {  				case "EXPIRE":  					engine.Capabilities |= Pop3Capabilities.Expire;  					var tokens = data.Split (' ');    					if (int.TryParse (tokens[0]' out value))  						engine.ExpirePolicy = value;  					else if (tokens[0] == "NEVER")  						engine.ExpirePolicy = -1;  					break;  				case "IMPLEMENTATION":  					engine.Implementation = data;  					break;  				case "LOGIN-DELAY":  					if (int.TryParse (data' out value)) {  						engine.Capabilities |= Pop3Capabilities.LoginDelay;  						engine.LoginDelay = value;  					}  					break;  				case "PIPELINING":  					engine.Capabilities |= Pop3Capabilities.Pipelining;  					break;  				case "RESP-CODES":  					engine.Capabilities |= Pop3Capabilities.ResponseCodes;  					break;  				case "SASL":  					engine.Capabilities |= Pop3Capabilities.Sasl;  					foreach (var authmech in data.Split (new [] { ' ' }' StringSplitOptions.RemoveEmptyEntries))  						engine.AuthenticationMechanisms.Add (authmech);  					break;  				case "STLS":  					engine.Capabilities |= Pop3Capabilities.StartTLS;  					break;  				case "TOP":  					engine.Capabilities |= Pop3Capabilities.Top;  					break;  				case "UIDL":  					engine.Capabilities |= Pop3Capabilities.UIDL;  					break;  				case "USER":  					engine.Capabilities |= Pop3Capabilities.User;  					break;  				case "UTF8":  					engine.Capabilities |= Pop3Capabilities.UTF8;    					foreach (var item in data.Split (' ')) {  						if (item == "USER")  							engine.Capabilities |= Pop3Capabilities.UTF8User;  					}  					break;  				case "LANG":  					engine.Capabilities |= Pop3Capabilities.Lang;  					break;  				}
Missing Default,MailKit.Net.Smtp,SmtpClient,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\AsyncSmtpClient.cs,FlushCommandQueueAsync,The following switch statement is missing a default case: switch (queued[i]) {  					case SmtpCommand.MailFrom:  						ProcessMailFromResponse (message' sender' responses[i]);  						break;  					case SmtpCommand.RcptTo:  						if (ProcessRcptToResponse (message' recipients[rcpt++]' responses[i]))  							accepted++;  						break;  					}
Missing Default,MailKit.Net.Smtp,ContentTransferEncodingVisitor,C:\repos\jstedfast_MailKit\MailKit\Net\Smtp\SmtpClient.cs,VisitMimePart,The following switch statement is missing a default case: switch (entity.ContentTransferEncoding) {  				case ContentEncoding.EightBit:  					// if the server supports the 8BITMIME extension' use it...  					if ((Capabilities & SmtpCapabilities.EightBitMime) != 0) {  						SmtpExtensions |= SmtpExtension.EightBitMime;  					} else {  						SmtpExtensions |= SmtpExtension.BinaryMime;  					}  					break;  				case ContentEncoding.Binary:  					SmtpExtensions |= SmtpExtension.BinaryMime;  					break;  				}
Missing Default,MailKit.Security,SaslMechanism,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanism.cs,IsProhibited,The following switch statement is missing a default case: switch (u) {  			case 0xFFF9: // INTERLINEAR ANNOTATION ANCHOR  			case 0xFFFA: // INTERLINEAR ANNOTATION SEPARATOR  			case 0xFFFB: // INTERLINEAR ANNOTATION TERMINATOR  			case 0xFFFC: // OBJECT REPLACEMENT CHARACTER  			case 0xFFFD: // REPLACEMENT CHARACTER  				return true;  			}
Missing Default,MailKit.Security,SaslMechanism,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanism.cs,IsProhibited,The following switch statement is missing a default case: switch (u) {  			case 0x0340: // COMBINING GRAVE TONE MARK  			case 0x0341: // COMBINING ACUTE TONE MARK  			case 0x200E: // LEFT-TO-RIGHT MARK  			case 0x200F: // RIGHT-TO-LEFT MARK  			case 0x202A: // LEFT-TO-RIGHT EMBEDDING  			case 0x202B: // RIGHT-TO-LEFT EMBEDDING  			case 0x202C: // POP DIRECTIONAL FORMATTING  			case 0x202D: // LEFT-TO-RIGHT OVERRIDE  			case 0x202E: // RIGHT-TO-LEFT OVERRIDE  			case 0x206A: // INHIBIT SYMMETRIC SWAPPING  			case 0x206B: // ACTIVATE SYMMETRIC SWAPPING  			case 0x206C: // INHIBIT ARABIC FORM SHAPING  			case 0x206D: // ACTIVATE ARABIC FORM SHAPING  			case 0x206E: // NATIONAL DIGIT SHAPES  			case 0x206F: // NOMINAL DIGIT SHAPES  				return true;  			}
Missing Default,MailKit.Security,DigestChallenge,C:\repos\jstedfast_MailKit\MailKit\Security\SaslMechanismDigestMd5.cs,Parse,The following switch statement is missing a default case: switch (key.ToLowerInvariant ()) {  				case "realm":  					challenge.Realms = value.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries);  					break;  				case "nonce":  					challenge.Nonce = value;  					break;  				case "qop":  					foreach (var qop in value.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries))  						challenge.Qop.Add (qop.Trim ());  					break;  				case "stale":  					challenge.Stale = value.ToLowerInvariant () == "true";  					break;  				case "maxbuf":  					challenge.MaxBuf = int.Parse (value);  					break;  				case "charset":  					challenge.Charset = value;  					break;  				case "algorithm":  					challenge.Algorithm = value;  					break;  				case "cipher":  					foreach (var cipher in value.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries))  						challenge.Ciphers.Add (cipher.Trim ());  					break;  				}
Missing Default,MailKit,MessageSorter,C:\repos\jstedfast_MailKit\MailKit\MessageSorter.cs,GetMessageSummaryItems,The following switch statement is missing a default case: switch (orderBy[i].Type) {  				case OrderByType.Arrival:  					break;  				case OrderByType.Cc:  				case OrderByType.Date:  				case OrderByType.DisplayFrom:  				case OrderByType.DisplayTo:  				case OrderByType.From:  				case OrderByType.Subject:  				case OrderByType.To:  					items |= MessageSummaryItems.Envelope;  					break;  				case OrderByType.ModSeq:  					items |= MessageSummaryItems.ModSeq;  					break;  				case OrderByType.Size:  					items |= MessageSummaryItems.Size;  					break;  				}
Missing Default,MailKit,MessageComparer<T>,C:\repos\jstedfast_MailKit\MailKit\MessageSorter.cs,Compare,The following switch statement is missing a default case: switch (orderBy[i].Type) {  					case OrderByType.Arrival:  						cmp = x.Index.CompareTo (y.Index);  						break;  					case OrderByType.Cc:  						cmp = CompareMailboxAddresses (x.Envelope.Cc' y.Envelope.Cc);  						break;  					case OrderByType.Date:  						cmp = x.Date.CompareTo (y.Date);  						break;  					case OrderByType.DisplayFrom:  						cmp = CompareDisplayNames (x.Envelope.From' y.Envelope.From);  						break;  					case OrderByType.From:  						cmp = CompareMailboxAddresses (x.Envelope.From' y.Envelope.From);  						break;  					case OrderByType.Size:  						var xsize = x.Size ?? 0;  						var ysize = y.Size ?? 0;    						cmp = xsize.CompareTo (ysize);  						break;  					case OrderByType.Subject:  						var xsubject = x.Envelope.Subject ?? string.Empty;  						var ysubject = y.Envelope.Subject ?? string.Empty;    						cmp = string.Compare (xsubject' ysubject' StringComparison.OrdinalIgnoreCase);  						break;  					case OrderByType.DisplayTo:  						cmp = CompareDisplayNames (x.Envelope.To' y.Envelope.To);  						break;  					case OrderByType.To:  						cmp = CompareMailboxAddresses (x.Envelope.To' y.Envelope.To);  						break;  					case OrderByType.ModSeq:  						var xmodseq = x.ModSeq ?? 0;  						var ymodseq = y.ModSeq ?? 0;    						cmp = xmodseq.CompareTo (ymodseq);  						break;  					}
