Implementation smell,Namespace,Class,File,Method,Description
Long Method,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The method has 186 lines of code.
Complex Method,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,Cyclomatic complexity of the method is 40
Long Statement,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,SendError,The length of the statement  "	string Str = "HTTP/1.1 " + CodeStr + "\nContent-type: text/html\nContent-Length:" + Html.Length.ToString () + "\n\n" + Html; " is 124.
Magic Number,Wildcat.Http.Core,SysConsole,C:\repos\nardin_Wildcat\Wildcat.Http\Core\SysConsole.cs,Display,The following statement contains a magic number: Console.Write (Math.Round ((double)proc.PrivateMemorySize64 / (1024 * 1024)));  
Magic Number,Wildcat.Http.Core,SysConsole,C:\repos\nardin_Wildcat\Wildcat.Http\Core\SysConsole.cs,Display,The following statement contains a magic number: Console.Write (Math.Round ((double)proc.PrivateMemorySize64 / (1024 * 1024)));  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: while ((Count = Client.GetStream ().Read (Buffer' 0' Buffer.Length)) > 0) {  	// Преобразуем эти данные в строку и добавим ее к переменной Request  	Request += Encoding.ASCII.GetString (Buffer' 0' Count);  	// Запрос должен обрываться последовательностью \r\n\r\n  	// Либо обрываем прием данных сами' если длина строки Request превышает 4 килобайта  	// Нам не нужно получать данные из POST-запроса (и т. п.)' а обычный запрос  	// по идее не должен быть больше 4 килобайт  	if (Request.IndexOf ("\r\n\r\n") >= 0 || Request.Length > 4096) {  		break;  	}  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (Request.IndexOf ("\r\n\r\n") >= 0 || Request.Length > 4096) {  	break;  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (ReqMatch == Match.Empty) {  	// Передаем клиенту ошибку 400 - неверный запрос  	SendError (Client' 400);  	return;  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: SendError (Client' 400);  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.IndexOf ("..") >= 0) {  	SendError (Client' 400);  	return;  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: SendError (Client' 400);  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.EndsWith (".js")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath);  	ContentType = "text/javascript";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.js"' ref fileList);  	foreach (var file in fileList) {  		if (ConfigurationManager.AppSettings ["enable closure compiler"] == "false") {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  		else {  			Compiler compiler = new Compiler ();  			CompilerOptions options = new CompilerOptions ();  			var dummy = JSSourceFile.fromCode (dir.Name + ".wcjs"' "");  			var source = JSSourceFile.fromFile (file);  			var result = compiler.compile (dummy' source' options);  			String str = compiler.toSource ();  			totaljs += str;  		}  	}  }  else if (RequestUri.EndsWith (".css")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath + "/Style");  	ContentType = "text/stylesheet";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.css"' ref fileList);  	ScanDir (dir' "*.less"' ref fileList);  	foreach (var file in fileList) {  		if (file.EndsWith (".less")) {  			string fileText = "";  			fileText = File.ReadAllText (file);  			fileText = Less.Parse (fileText);  			byte[] b1 = Encoding.UTF8.GetBytes (fileText);  			Client.GetStream ().Write (b1' 0' b1.Length);  		}  		else {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  	}  }  else {  	if (RequestUri.EndsWith ("/")) {  		RequestUri = "index.html";  	}  	string FilePath = basePath + RequestUri;  	// Если в папке www не существует данного файла' посылаем ошибку 404  	if (!File.Exists (FilePath)) {  		SendError (Client' 404);  		return;  	}  	// Получаем расширение файла из строки запроса  	string Extension = RequestUri.Substring (RequestUri.LastIndexOf ('.'));  	// Тип содержимого  	// Пытаемся определить тип содержимого по расширению файла  	switch (Extension) {  	case ".htm":  	case ".html":  		ContentType = "text/html";  		break;  	case ".css":  		ContentType = "text/stylesheet";  		break;  	case ".js":  		ContentType = "text/javascript";  		break;  	case ".jpg":  		ContentType = "image/jpeg";  		break;  	case ".jpeg":  	case ".png":  	case ".gif":  		ContentType = "image/" + Extension.Substring (1);  		break;  	default:  		if (Extension.Length > 1) {  			ContentType = "application/" + Extension.Substring (1);  		}  		else {  			ContentType = "application/unknown";  		}  		break;  	}  	// Открываем файл' страхуясь на случай ошибки  	FileStream FS;  	try {  		FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  	}  	catch (Exception) {  		// Если случилась ошибка' посылаем клиенту ошибку 500  		SendError (Client' 500);  		return;  	}  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	// Пока не достигнут конец файла  	while (FS.Position < FS.Length) {  		// Читаем данные из файла  		Count = FS.Read (Buffer' 0' Buffer.Length);  		// И передаем их клиенту  		Client.GetStream ().Write (Buffer' 0' Count);  	}  	// Закроем файл и соединение  	FS.Close ();  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.EndsWith (".js")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath);  	ContentType = "text/javascript";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.js"' ref fileList);  	foreach (var file in fileList) {  		if (ConfigurationManager.AppSettings ["enable closure compiler"] == "false") {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  		else {  			Compiler compiler = new Compiler ();  			CompilerOptions options = new CompilerOptions ();  			var dummy = JSSourceFile.fromCode (dir.Name + ".wcjs"' "");  			var source = JSSourceFile.fromFile (file);  			var result = compiler.compile (dummy' source' options);  			String str = compiler.toSource ();  			totaljs += str;  		}  	}  }  else if (RequestUri.EndsWith (".css")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath + "/Style");  	ContentType = "text/stylesheet";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.css"' ref fileList);  	ScanDir (dir' "*.less"' ref fileList);  	foreach (var file in fileList) {  		if (file.EndsWith (".less")) {  			string fileText = "";  			fileText = File.ReadAllText (file);  			fileText = Less.Parse (fileText);  			byte[] b1 = Encoding.UTF8.GetBytes (fileText);  			Client.GetStream ().Write (b1' 0' b1.Length);  		}  		else {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  	}  }  else {  	if (RequestUri.EndsWith ("/")) {  		RequestUri = "index.html";  	}  	string FilePath = basePath + RequestUri;  	// Если в папке www не существует данного файла' посылаем ошибку 404  	if (!File.Exists (FilePath)) {  		SendError (Client' 404);  		return;  	}  	// Получаем расширение файла из строки запроса  	string Extension = RequestUri.Substring (RequestUri.LastIndexOf ('.'));  	// Тип содержимого  	// Пытаемся определить тип содержимого по расширению файла  	switch (Extension) {  	case ".htm":  	case ".html":  		ContentType = "text/html";  		break;  	case ".css":  		ContentType = "text/stylesheet";  		break;  	case ".js":  		ContentType = "text/javascript";  		break;  	case ".jpg":  		ContentType = "image/jpeg";  		break;  	case ".jpeg":  	case ".png":  	case ".gif":  		ContentType = "image/" + Extension.Substring (1);  		break;  	default:  		if (Extension.Length > 1) {  			ContentType = "application/" + Extension.Substring (1);  		}  		else {  			ContentType = "application/unknown";  		}  		break;  	}  	// Открываем файл' страхуясь на случай ошибки  	FileStream FS;  	try {  		FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  	}  	catch (Exception) {  		// Если случилась ошибка' посылаем клиенту ошибку 500  		SendError (Client' 500);  		return;  	}  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	// Пока не достигнут конец файла  	while (FS.Position < FS.Length) {  		// Читаем данные из файла  		Count = FS.Read (Buffer' 0' Buffer.Length);  		// И передаем их клиенту  		Client.GetStream ().Write (Buffer' 0' Count);  	}  	// Закроем файл и соединение  	FS.Close ();  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.EndsWith (".js")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath);  	ContentType = "text/javascript";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.js"' ref fileList);  	foreach (var file in fileList) {  		if (ConfigurationManager.AppSettings ["enable closure compiler"] == "false") {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  		else {  			Compiler compiler = new Compiler ();  			CompilerOptions options = new CompilerOptions ();  			var dummy = JSSourceFile.fromCode (dir.Name + ".wcjs"' "");  			var source = JSSourceFile.fromFile (file);  			var result = compiler.compile (dummy' source' options);  			String str = compiler.toSource ();  			totaljs += str;  		}  	}  }  else if (RequestUri.EndsWith (".css")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath + "/Style");  	ContentType = "text/stylesheet";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.css"' ref fileList);  	ScanDir (dir' "*.less"' ref fileList);  	foreach (var file in fileList) {  		if (file.EndsWith (".less")) {  			string fileText = "";  			fileText = File.ReadAllText (file);  			fileText = Less.Parse (fileText);  			byte[] b1 = Encoding.UTF8.GetBytes (fileText);  			Client.GetStream ().Write (b1' 0' b1.Length);  		}  		else {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  	}  }  else {  	if (RequestUri.EndsWith ("/")) {  		RequestUri = "index.html";  	}  	string FilePath = basePath + RequestUri;  	// Если в папке www не существует данного файла' посылаем ошибку 404  	if (!File.Exists (FilePath)) {  		SendError (Client' 404);  		return;  	}  	// Получаем расширение файла из строки запроса  	string Extension = RequestUri.Substring (RequestUri.LastIndexOf ('.'));  	// Тип содержимого  	// Пытаемся определить тип содержимого по расширению файла  	switch (Extension) {  	case ".htm":  	case ".html":  		ContentType = "text/html";  		break;  	case ".css":  		ContentType = "text/stylesheet";  		break;  	case ".js":  		ContentType = "text/javascript";  		break;  	case ".jpg":  		ContentType = "image/jpeg";  		break;  	case ".jpeg":  	case ".png":  	case ".gif":  		ContentType = "image/" + Extension.Substring (1);  		break;  	default:  		if (Extension.Length > 1) {  			ContentType = "application/" + Extension.Substring (1);  		}  		else {  			ContentType = "application/unknown";  		}  		break;  	}  	// Открываем файл' страхуясь на случай ошибки  	FileStream FS;  	try {  		FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  	}  	catch (Exception) {  		// Если случилась ошибка' посылаем клиенту ошибку 500  		SendError (Client' 500);  		return;  	}  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	// Пока не достигнут конец файла  	while (FS.Position < FS.Length) {  		// Читаем данные из файла  		Count = FS.Read (Buffer' 0' Buffer.Length);  		// И передаем их клиенту  		Client.GetStream ().Write (Buffer' 0' Count);  	}  	// Закроем файл и соединение  	FS.Close ();  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.EndsWith (".js")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath);  	ContentType = "text/javascript";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.js"' ref fileList);  	foreach (var file in fileList) {  		if (ConfigurationManager.AppSettings ["enable closure compiler"] == "false") {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  		else {  			Compiler compiler = new Compiler ();  			CompilerOptions options = new CompilerOptions ();  			var dummy = JSSourceFile.fromCode (dir.Name + ".wcjs"' "");  			var source = JSSourceFile.fromFile (file);  			var result = compiler.compile (dummy' source' options);  			String str = compiler.toSource ();  			totaljs += str;  		}  	}  }  else if (RequestUri.EndsWith (".css")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath + "/Style");  	ContentType = "text/stylesheet";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.css"' ref fileList);  	ScanDir (dir' "*.less"' ref fileList);  	foreach (var file in fileList) {  		if (file.EndsWith (".less")) {  			string fileText = "";  			fileText = File.ReadAllText (file);  			fileText = Less.Parse (fileText);  			byte[] b1 = Encoding.UTF8.GetBytes (fileText);  			Client.GetStream ().Write (b1' 0' b1.Length);  		}  		else {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  	}  }  else {  	if (RequestUri.EndsWith ("/")) {  		RequestUri = "index.html";  	}  	string FilePath = basePath + RequestUri;  	// Если в папке www не существует данного файла' посылаем ошибку 404  	if (!File.Exists (FilePath)) {  		SendError (Client' 404);  		return;  	}  	// Получаем расширение файла из строки запроса  	string Extension = RequestUri.Substring (RequestUri.LastIndexOf ('.'));  	// Тип содержимого  	// Пытаемся определить тип содержимого по расширению файла  	switch (Extension) {  	case ".htm":  	case ".html":  		ContentType = "text/html";  		break;  	case ".css":  		ContentType = "text/stylesheet";  		break;  	case ".js":  		ContentType = "text/javascript";  		break;  	case ".jpg":  		ContentType = "image/jpeg";  		break;  	case ".jpeg":  	case ".png":  	case ".gif":  		ContentType = "image/" + Extension.Substring (1);  		break;  	default:  		if (Extension.Length > 1) {  			ContentType = "application/" + Extension.Substring (1);  		}  		else {  			ContentType = "application/unknown";  		}  		break;  	}  	// Открываем файл' страхуясь на случай ошибки  	FileStream FS;  	try {  		FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  	}  	catch (Exception) {  		// Если случилась ошибка' посылаем клиенту ошибку 500  		SendError (Client' 500);  		return;  	}  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	// Пока не достигнут конец файла  	while (FS.Position < FS.Length) {  		// Читаем данные из файла  		Count = FS.Read (Buffer' 0' Buffer.Length);  		// И передаем их клиенту  		Client.GetStream ().Write (Buffer' 0' Count);  	}  	// Закроем файл и соединение  	FS.Close ();  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (!Directory.Exists (dirPath)) {  	SendError (Client' 404);  	return;  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: SendError (Client' 404);  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.EndsWith (".css")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath + "/Style");  	ContentType = "text/stylesheet";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.css"' ref fileList);  	ScanDir (dir' "*.less"' ref fileList);  	foreach (var file in fileList) {  		if (file.EndsWith (".less")) {  			string fileText = "";  			fileText = File.ReadAllText (file);  			fileText = Less.Parse (fileText);  			byte[] b1 = Encoding.UTF8.GetBytes (fileText);  			Client.GetStream ().Write (b1' 0' b1.Length);  		}  		else {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  	}  }  else {  	if (RequestUri.EndsWith ("/")) {  		RequestUri = "index.html";  	}  	string FilePath = basePath + RequestUri;  	// Если в папке www не существует данного файла' посылаем ошибку 404  	if (!File.Exists (FilePath)) {  		SendError (Client' 404);  		return;  	}  	// Получаем расширение файла из строки запроса  	string Extension = RequestUri.Substring (RequestUri.LastIndexOf ('.'));  	// Тип содержимого  	// Пытаемся определить тип содержимого по расширению файла  	switch (Extension) {  	case ".htm":  	case ".html":  		ContentType = "text/html";  		break;  	case ".css":  		ContentType = "text/stylesheet";  		break;  	case ".js":  		ContentType = "text/javascript";  		break;  	case ".jpg":  		ContentType = "image/jpeg";  		break;  	case ".jpeg":  	case ".png":  	case ".gif":  		ContentType = "image/" + Extension.Substring (1);  		break;  	default:  		if (Extension.Length > 1) {  			ContentType = "application/" + Extension.Substring (1);  		}  		else {  			ContentType = "application/unknown";  		}  		break;  	}  	// Открываем файл' страхуясь на случай ошибки  	FileStream FS;  	try {  		FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  	}  	catch (Exception) {  		// Если случилась ошибка' посылаем клиенту ошибку 500  		SendError (Client' 500);  		return;  	}  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	// Пока не достигнут конец файла  	while (FS.Position < FS.Length) {  		// Читаем данные из файла  		Count = FS.Read (Buffer' 0' Buffer.Length);  		// И передаем их клиенту  		Client.GetStream ().Write (Buffer' 0' Count);  	}  	// Закроем файл и соединение  	FS.Close ();  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.EndsWith (".css")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath + "/Style");  	ContentType = "text/stylesheet";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.css"' ref fileList);  	ScanDir (dir' "*.less"' ref fileList);  	foreach (var file in fileList) {  		if (file.EndsWith (".less")) {  			string fileText = "";  			fileText = File.ReadAllText (file);  			fileText = Less.Parse (fileText);  			byte[] b1 = Encoding.UTF8.GetBytes (fileText);  			Client.GetStream ().Write (b1' 0' b1.Length);  		}  		else {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  	}  }  else {  	if (RequestUri.EndsWith ("/")) {  		RequestUri = "index.html";  	}  	string FilePath = basePath + RequestUri;  	// Если в папке www не существует данного файла' посылаем ошибку 404  	if (!File.Exists (FilePath)) {  		SendError (Client' 404);  		return;  	}  	// Получаем расширение файла из строки запроса  	string Extension = RequestUri.Substring (RequestUri.LastIndexOf ('.'));  	// Тип содержимого  	// Пытаемся определить тип содержимого по расширению файла  	switch (Extension) {  	case ".htm":  	case ".html":  		ContentType = "text/html";  		break;  	case ".css":  		ContentType = "text/stylesheet";  		break;  	case ".js":  		ContentType = "text/javascript";  		break;  	case ".jpg":  		ContentType = "image/jpeg";  		break;  	case ".jpeg":  	case ".png":  	case ".gif":  		ContentType = "image/" + Extension.Substring (1);  		break;  	default:  		if (Extension.Length > 1) {  			ContentType = "application/" + Extension.Substring (1);  		}  		else {  			ContentType = "application/unknown";  		}  		break;  	}  	// Открываем файл' страхуясь на случай ошибки  	FileStream FS;  	try {  		FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  	}  	catch (Exception) {  		// Если случилась ошибка' посылаем клиенту ошибку 500  		SendError (Client' 500);  		return;  	}  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	// Пока не достигнут конец файла  	while (FS.Position < FS.Length) {  		// Читаем данные из файла  		Count = FS.Read (Buffer' 0' Buffer.Length);  		// И передаем их клиенту  		Client.GetStream ().Write (Buffer' 0' Count);  	}  	// Закроем файл и соединение  	FS.Close ();  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (RequestUri.EndsWith (".css")) {  	basePath += "Client/";  	string dirPath = basePath + RequestUri.Split ('.') [0];  	if (!Directory.Exists (dirPath)) {  		SendError (Client' 404);  		return;  	}  	DirectoryInfo dir = new DirectoryInfo (dirPath + "/Style");  	ContentType = "text/stylesheet";  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	string totaljs = "";  	List<string> fileList = new List<string> ();  	ScanDir (dir' "*.css"' ref fileList);  	ScanDir (dir' "*.less"' ref fileList);  	foreach (var file in fileList) {  		if (file.EndsWith (".less")) {  			string fileText = "";  			fileText = File.ReadAllText (file);  			fileText = Less.Parse (fileText);  			byte[] b1 = Encoding.UTF8.GetBytes (fileText);  			Client.GetStream ().Write (b1' 0' b1.Length);  		}  		else {  			FileStream FS = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.Read);  			while (FS.Position < FS.Length) {  				// Читаем данные из файла  				Count = FS.Read (Buffer' 0' Buffer.Length);  				// И передаем их клиенту  				Client.GetStream ().Write (Buffer' 0' Count);  			}  			FS.Close ();  		}  	}  }  else {  	if (RequestUri.EndsWith ("/")) {  		RequestUri = "index.html";  	}  	string FilePath = basePath + RequestUri;  	// Если в папке www не существует данного файла' посылаем ошибку 404  	if (!File.Exists (FilePath)) {  		SendError (Client' 404);  		return;  	}  	// Получаем расширение файла из строки запроса  	string Extension = RequestUri.Substring (RequestUri.LastIndexOf ('.'));  	// Тип содержимого  	// Пытаемся определить тип содержимого по расширению файла  	switch (Extension) {  	case ".htm":  	case ".html":  		ContentType = "text/html";  		break;  	case ".css":  		ContentType = "text/stylesheet";  		break;  	case ".js":  		ContentType = "text/javascript";  		break;  	case ".jpg":  		ContentType = "image/jpeg";  		break;  	case ".jpeg":  	case ".png":  	case ".gif":  		ContentType = "image/" + Extension.Substring (1);  		break;  	default:  		if (Extension.Length > 1) {  			ContentType = "application/" + Extension.Substring (1);  		}  		else {  			ContentType = "application/unknown";  		}  		break;  	}  	// Открываем файл' страхуясь на случай ошибки  	FileStream FS;  	try {  		FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  	}  	catch (Exception) {  		// Если случилась ошибка' посылаем клиенту ошибку 500  		SendError (Client' 500);  		return;  	}  	// Посылаем заголовки  	string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";  	byte[] HeadersBuffer = Encoding.ASCII.GetBytes (Headers);  	Client.GetStream ().Write (HeadersBuffer' 0' HeadersBuffer.Length);  	// Пока не достигнут конец файла  	while (FS.Position < FS.Length) {  		// Читаем данные из файла  		Count = FS.Read (Buffer' 0' Buffer.Length);  		// И передаем их клиенту  		Client.GetStream ().Write (Buffer' 0' Count);  	}  	// Закроем файл и соединение  	FS.Close ();  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (!Directory.Exists (dirPath)) {  	SendError (Client' 404);  	return;  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: SendError (Client' 404);  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: if (!File.Exists (FilePath)) {  	SendError (Client' 404);  	return;  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: SendError (Client' 404);  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: try {  	FS = new FileStream (FilePath' FileMode.Open' FileAccess.Read' FileShare.Read);  }  catch (Exception) {  	// Если случилась ошибка' посылаем клиенту ошибку 500  	SendError (Client' 500);  	return;  }  
Magic Number,Wildcat.Http,HttpClient,C:\repos\nardin_Wildcat\Wildcat.Http\HttpClient.cs,HttpClient,The following statement contains a magic number: SendError (Client' 500);  
Magic Number,Wildcat.Http,Program,C:\repos\nardin_Wildcat\Wildcat.Http\Program.cs,Main,The following statement contains a magic number: while (true) {  	Thread.Sleep (2000);  }  
Magic Number,Wildcat.Http,Program,C:\repos\nardin_Wildcat\Wildcat.Http\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,Wildcat.Http,HttpServer,C:\repos\nardin_Wildcat\Wildcat.Http\HttpServer.cs,HttpServer,The following statement contains a magic number: Listener.Server.ReceiveTimeout = 1000;  
Magic Number,Wildcat.Http,HttpServer,C:\repos\nardin_Wildcat\Wildcat.Http\HttpServer.cs,HttpServer,The following statement contains a magic number: Listener.Server.SendTimeout = 1000;  
Magic Number,Wildcat.Http,HttpServer,C:\repos\nardin_Wildcat\Wildcat.Http\HttpServer.cs,Start,The following statement contains a magic number: ThreadPool.SetMinThreads (4' 4);  
Magic Number,Wildcat.Http,HttpServer,C:\repos\nardin_Wildcat\Wildcat.Http\HttpServer.cs,Start,The following statement contains a magic number: ThreadPool.SetMinThreads (4' 4);  
Missing Default,Wildcat.Http.Core,Sys,C:\repos\nardin_Wildcat\Wildcat.Http\Core\Sys.cs,LoadModule,The following switch statement is missing a default case: switch (name [1]) {  case "Block":  	string blockName = type.FullName;  	blockType [blockName] = type;  	SysConsole.Blocks.Add (blockName);  	break;  }  
