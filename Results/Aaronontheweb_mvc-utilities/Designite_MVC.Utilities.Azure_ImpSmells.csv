Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,RetryPut,The method has 6 parameters. Parameters: key' value' timeout' attemptCount' waitTime' region
Long Statement,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,RetryGet,The length of the statement  "                throw new ApplicationException(string.Format("Unable to retrieve item {0} from cache after {1} retry attempts"' key' attemptCount)); " is 132.
Long Statement,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,RetryPut,The length of the statement  "                throw new ApplicationException(string.Format("Unable to save item {0} in cache after {1} retry attempts"' key' attemptCount)); " is 126.
Magic Number,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,Get,The following statement contains a magic number: try              {                  var cache = GetCache();                    return cache.Get(key' region);              }              catch (DataCacheException cacheException)              {                  //So why isn't this switch statement it's own method?                  //Answer: the naked throw; from the catch block allows                  //us to preserve the stacktrace from the original error.                  //A new method wouldn't allow it' although there is probably a way                  //we can refactor it.                  switch (cacheException.ErrorCode)                  {                      case DataCacheErrorCode.RetryLater:                          return RetryGet(key'10'100'region);                      case DataCacheErrorCode.Timeout:                      default:                          throw; //If the cache isn't available or it's an error we can't handle                  }              }
Magic Number,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,Get,The following statement contains a magic number: try              {                  var cache = GetCache();                    return cache.Get(key' region);              }              catch (DataCacheException cacheException)              {                  //So why isn't this switch statement it's own method?                  //Answer: the naked throw; from the catch block allows                  //us to preserve the stacktrace from the original error.                  //A new method wouldn't allow it' although there is probably a way                  //we can refactor it.                  switch (cacheException.ErrorCode)                  {                      case DataCacheErrorCode.RetryLater:                          return RetryGet(key'10'100'region);                      case DataCacheErrorCode.Timeout:                      default:                          throw; //If the cache isn't available or it's an error we can't handle                  }              }
Magic Number,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,Remove,The following statement contains a magic number: try              {                  if (!Exists(key' region))                  {                      return false;                  }                    var cache = GetCache();                    return cache.Remove(key' region);              }              catch (DataCacheException cacheException)              {                  switch (cacheException.ErrorCode)                  {                      case DataCacheErrorCode.KeyDoesNotExist:                      case DataCacheErrorCode.RegionDoesNotExist:                          return false; //We weren't able to find the                       case DataCacheErrorCode.RetryLater:                          return RetryDelete(key'10'100'region);                      case DataCacheErrorCode.Timeout:                      default:                          throw; //If the cache isn't available or it's an error we can't handle                  }              }
Magic Number,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,Remove,The following statement contains a magic number: try              {                  if (!Exists(key' region))                  {                      return false;                  }                    var cache = GetCache();                    return cache.Remove(key' region);              }              catch (DataCacheException cacheException)              {                  switch (cacheException.ErrorCode)                  {                      case DataCacheErrorCode.KeyDoesNotExist:                      case DataCacheErrorCode.RegionDoesNotExist:                          return false; //We weren't able to find the                       case DataCacheErrorCode.RetryLater:                          return RetryDelete(key'10'100'region);                      case DataCacheErrorCode.Timeout:                      default:                          throw; //If the cache isn't available or it's an error we can't handle                  }              }
Magic Number,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,Exists,The following statement contains a magic number: try              {                  var cache = GetCache();                    return cache.Get(key' region) != null;              }              catch (DataCacheException cacheException)              {                  /*                    * Instead of just tracing the exception' we're going to check out the status                   * and see if we can retry the request in a second                   */                    switch (cacheException.ErrorCode)                  {                      case DataCacheErrorCode.KeyDoesNotExist:                      case DataCacheErrorCode.RegionDoesNotExist:                          return false; //We weren't able to find the                       case DataCacheErrorCode.RetryLater:                          return RetryGet(key'10'100' region) != null;                      case DataCacheErrorCode.Timeout:                      default:                          throw; //If the cache isn't available or it's an error we can't handle                  }              }
Magic Number,MVC.Utilities.Caching,AppFabricCacheService,C:\repos\Aaronontheweb_mvc-utilities\MVC.Utilities.Azure\Caching\AppFabricCache.cs,Exists,The following statement contains a magic number: try              {                  var cache = GetCache();                    return cache.Get(key' region) != null;              }              catch (DataCacheException cacheException)              {                  /*                    * Instead of just tracing the exception' we're going to check out the status                   * and see if we can retry the request in a second                   */                    switch (cacheException.ErrorCode)                  {                      case DataCacheErrorCode.KeyDoesNotExist:                      case DataCacheErrorCode.RegionDoesNotExist:                          return false; //We weren't able to find the                       case DataCacheErrorCode.RetryLater:                          return RetryGet(key'10'100' region) != null;                      case DataCacheErrorCode.Timeout:                      default:                          throw; //If the cache isn't available or it's an error we can't handle                  }              }
