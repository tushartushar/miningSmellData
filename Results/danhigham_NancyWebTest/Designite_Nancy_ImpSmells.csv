Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nancy,MimeTypes,C:\repos\danhigham_NancyWebTest\Nancy\MimeTypes.cs,MimeTypes,The method has 542 lines of code.
Long Method,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ProcessCharacter,The method has 243 lines of code.
Long Method,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,SerializeValueImpl,The method has 112 lines of code.
Long Method,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The method has 143 lines of code.
Long Method,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,InitEntities,The method has 257 lines of code.
Complex Method,Nancy.Bootstrapper,NancyBootstrapperBase,C:\repos\danhigham_NancyWebTest\Nancy\Bootstrapper\NancyBootstrapperBase.cs,Initialise,Cyclomatic complexity of the method is 9
Complex Method,Nancy,DynamicDictionaryValue,C:\repos\danhigham_NancyWebTest\Nancy\DynamicDictionaryValue.cs,TryConvert,Cyclomatic complexity of the method is 9
Complex Method,Nancy,HttpMultipartSubStream,C:\repos\danhigham_NancyWebTest\Nancy\HttpMultipartSubStream.cs,CalculateSubStreamRelativePosition,Cyclomatic complexity of the method is 9
Complex Method,Nancy.Responses,RedirectResponse,C:\repos\danhigham_NancyWebTest\Nancy\Responses\RedirectResponse.cs,RedirectResponse,Cyclomatic complexity of the method is 9
Complex Method,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToList,Cyclomatic complexity of the method is 10
Complex Method,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,Cyclomatic complexity of the method is 17
Complex Method,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,Cyclomatic complexity of the method is 32
Complex Method,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ProcessCharacter,Cyclomatic complexity of the method is 179
Complex Method,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,SerializeValueImpl,Cyclomatic complexity of the method is 41
Complex Method,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteEnumValue,Cyclomatic complexity of the method is 18
Complex Method,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,Cyclomatic complexity of the method is 36
Complex Method,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,Cyclomatic complexity of the method is 26
Complex Method,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,Cyclomatic complexity of the method is 21
Complex Method,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 8
Complex Method,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 13
Complex Method,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Complex Method,Nancy.Helpers,ReflectionUtils,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\ReflectionUtils.cs,SetMemberValue,Cyclomatic complexity of the method is 8
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ConstructType,Cyclomatic complexity of the method is 9
Long Parameter List,Nancy.Conventions,DefaultViewLocationConventions,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\DefaultViewLocationConventions.cs,ConfigureViewLocationConventions,The method has 19 parameters.
Long Parameter List,Nancy.Conventions,StaticContentConventionBuilder,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\StaticContentConventionBuilder.cs,AddDirectory,The method has 5 parameters.
Long Parameter List,Nancy.Conventions,StaticContentConventionBuilder,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\StaticContentConventionBuilder.cs,BuildContentDelegate,The method has 6 parameters.
Long Parameter List,Nancy,Request,C:\repos\danhigham_NancyWebTest\Nancy\Request.cs,Request,The method has 7 parameters.
Long Parameter List,Nancy,Request,C:\repos\danhigham_NancyWebTest\Nancy\Request.cs,Request,The method has 5 parameters.
Long Parameter List,Nancy,Response,C:\repos\danhigham_NancyWebTest\Nancy\Response.cs,AddCookie,The method has 5 parameters.
Long Parameter List,Nancy.IO,UnclosableStreamWrapper,C:\repos\danhigham_NancyWebTest\Nancy\IO\UnclosableStreamWrapper.cs,BeginRead,The method has 5 parameters.
Long Parameter List,Nancy.IO,UnclosableStreamWrapper,C:\repos\danhigham_NancyWebTest\Nancy\IO\UnclosableStreamWrapper.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,Nancy.IO,RequestStream,C:\repos\danhigham_NancyWebTest\Nancy\IO\RequestStream.cs,BeginRead,The method has 5 parameters.
Long Parameter List,Nancy.IO,RequestStream,C:\repos\danhigham_NancyWebTest\Nancy\IO\RequestStream.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,Nancy.Json,StringBuilderExtensions,C:\repos\danhigham_NancyWebTest\Nancy\Json\StringBuilderExtensions.cs,AppendCount,The method has 5 parameters.
Long Parameter List,Nancy.Json,StringBuilderExtensions,C:\repos\danhigham_NancyWebTest\Nancy\Json\StringBuilderExtensions.cs,AppendCount,The method has 5 parameters.
Long Parameter List,Nancy.ViewEngines,DefaultResourceAssemblyProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultResourceAssemblyProvider.cs,GetAssembliesToScan,The method has 10 parameters.
Long Parameter List,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,ExtractCommonResourceNamespace,The method has 6 parameters.
Long Parameter List,Nancy.ModelBinding.DefaultConverters,CollectionConverter,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultConverters\CollectionConverter.cs,ConvertArray,The method has 5 parameters.
Long Parameter List,Nancy.ModelBinding.DefaultConverters,CollectionConverter,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultConverters\CollectionConverter.cs,ConvertEnumerable,The method has 5 parameters.
Long Parameter List,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,GetTopRouteMatches,The method has 5 parameters.
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,GetGenericMethod,The method has 5 parameters.
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,GetMethod,The method has 12 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,TryResolve,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegisterInternal,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,IsIgnoredAssembly,The method has 8 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,IsIgnoredType,The method has 7 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ConstructType,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ResolveAllInternal,The method has 5 parameters.
Long Parameter List,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,Render,The method has 5 parameters.
Long Parameter List,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,PerformMasterPageSubstitutions,The method has 5 parameters.
Long Parameter List,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,RenderMasterPage,The method has 5 parameters.
Long Parameter List,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngineWrapper,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngineWrapper.cs,RenderView,The method has 5 parameters.
Long Identifier,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,Resolve,The length of the parameter routesWithCorrectRequestMethod is 30.
Long Identifier,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,Resolve,The length of the parameter routeMatchesWithMostParameterCaptures is 37.
Long Identifier,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,GetSingleRouteToReturn,The length of the parameter routesWithMostParameterCaptures is 31.
Long Identifier,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,GetRouteMatchesWithExactPathMatch,The length of the parameter routesWithCorrectRequestMethod is 30.
Long Identifier,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,GetTopRouteMatches,The length of the parameter routesWithCorrectRequestMethod is 30.
Long Identifier,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,NoRoutesWereForTheRequestedMethod,The length of the parameter routesWithCorrectRequestMethod is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegisterInternal,The length of the parameter ignoreDuplicateImplementations is 30.
Long Statement,Nancy.Bootstrapper,AppDomainAssemblyTypeScanner,C:\repos\danhigham_NancyWebTest\Nancy\Bootstrapper\AppDomainAssemblyTypeScanner.cs,LoadAssemblies,The length of the statement  "	var unloadedAssemblies = Directory.GetFiles (containingDirectory' wildcardFilename).Where (f => !existingAssemblyPaths.Contains (f' StringComparer.InvariantCultureIgnoreCase)); " is 176.
Long Statement,Nancy.Bootstrapper,NancyBootstrapperBase,C:\repos\danhigham_NancyWebTest\Nancy\Bootstrapper\NancyBootstrapperBase.cs,Initialise,The length of the statement  "	var collectionTypeRegistrations = this.InternalConfiguration.GetCollectionTypeRegistrations ().Concat (this.GetApplicationCollections ()); " is 138.
Long Statement,Nancy.Bootstrapper,NancyBootstrapperBase,C:\repos\danhigham_NancyWebTest\Nancy\Bootstrapper\NancyBootstrapperBase.cs,Initialise,The length of the statement  "		throw new InvalidOperationException (string.Format ("Conventions are invalid:\n\n{0}"' conventionValidationResult.Item2)); " is 122.
Long Statement,Nancy.Conventions,DefaultStaticContentsConventions,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\DefaultStaticContentsConventions.cs,Validate,The length of the statement  "	return (conventions.StaticContentsConventions.Count > 0) ? Tuple.Create (true' string.Empty) : Tuple.Create (false' "The static contents conventions cannot be empty."); " is 168.
Long Statement,Nancy.Conventions,DefaultViewLocationConventions,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\DefaultViewLocationConventions.cs,Validate,The length of the statement  "	return (conventions.ViewLocationConventions.Count > 0) ? Tuple.Create (true' string.Empty) : Tuple.Create (false' "The view conventions cannot be empty."); " is 155.
Long Statement,Nancy.Conventions,NancyConventions,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\NancyConventions.cs,Validate,The length of the statement  "	foreach (var result in this.conventions.Select (convention => convention.Validate (this)).Where (result => !result.Item1)) { " is 124.
Long Statement,Nancy.Conventions,NancyConventions,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\NancyConventions.cs,GetInstanceRegistrations,The length of the statement  "		new InstanceRegistration (typeof(StaticContentsConventions)' new StaticContentsConventions (this.StaticContentsConventions))' " is 125.
Long Statement,Nancy.Conventions,NancyConventions,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\NancyConventions.cs,BuildDefaultConventions,The length of the statement  "	this.conventions = AppDomainAssemblyTypeScanner.TypesOf<IConvention> ().Select (t => (IConvention)Activator.CreateInstance (t)); " is 128.
Long Statement,Nancy.Conventions,StaticContentConventionBuilder,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\StaticContentConventionBuilder.cs,AddDirectory,The length of the statement  "		var responseFactory = ResponseFactoryCache.GetOrAdd (path' BuildContentDelegate (root' requestedPath' contentPath ?? requestedPath' allowedExtensions)); " is 152.
Long Statement,Nancy.Conventions,StaticContentConventionBuilder,C:\repos\danhigham_NancyWebTest\Nancy\Conventions\StaticContentConventionBuilder.cs,BuildContentDelegate,The length of the statement  "		if (allowedExtensions.Length != 0 && !allowedExtensions.Any (e => string.Equals (e' extension' StringComparison.OrdinalIgnoreCase))) { " is 134.
Long Statement,Nancy,StaticContentStartup,C:\repos\danhigham_NancyWebTest\Nancy\StaticContentStartup.cs,Initialize,The length of the statement  "		return conventions.Select (convention => convention.Invoke (ctx' rootPathProvider.GetRootPath ())).FirstOrDefault (response => response != null); " is 145.
Long Statement,Nancy,DefaultNancyBootstrapper,C:\repos\danhigham_NancyWebTest\Nancy\DefaultNancyBootstrapper.cs,RegisterCollectionTypes,The length of the statement  "		container.RegisterMultiple (collectionTypeRegistration.RegistrationType' collectionTypeRegistration.ImplementationTypes); " is 121.
Long Statement,Nancy,DefaultNancyBootstrapper,C:\repos\danhigham_NancyWebTest\Nancy\DefaultNancyBootstrapper.cs,RegisterRequestContainerModules,The length of the statement  "		container.Register (typeof(NancyModule)' moduleRegistrationType.ModuleType' moduleRegistrationType.ModuleKey).AsSingleton (); " is 125.
Long Statement,Nancy,NamedPipelineBase,C:\repos\danhigham_NancyWebTest\Nancy\NamedPipelineBase.cs,InsertBefore,The length of the statement  "	var existingIndex = this.pipelineItems.FindIndex (i => String.Equals (name' i.Name' StringComparison.InvariantCulture)); " is 120.
Long Statement,Nancy,NamedPipelineBase,C:\repos\danhigham_NancyWebTest\Nancy\NamedPipelineBase.cs,InsertAfter,The length of the statement  "	var existingIndex = this.pipelineItems.FindIndex (i => String.Equals (name' i.Name' StringComparison.InvariantCulture)); " is 120.
Long Statement,Nancy,NamedPipelineBase,C:\repos\danhigham_NancyWebTest\Nancy\NamedPipelineBase.cs,RemoveByName,The length of the statement  "	var existingIndex = this.pipelineItems.FindIndex (i => String.Equals (name' i.Name' StringComparison.InvariantCulture)); " is 120.
Long Statement,Nancy,ResponseExtensions,C:\repos\danhigham_NancyWebTest\Nancy\ResponseExtensions.cs,GetTuple,The length of the statement  "	var properties = header.GetType ().GetProperties ().Where (prop => prop.CanRead && prop.PropertyType == typeof(string)).ToArray (); " is 131.
Long Statement,Nancy,ResponseExtensions,C:\repos\danhigham_NancyWebTest\Nancy\ResponseExtensions.cs,GetTuple,The length of the statement  "	var headerProperty = properties.Where (p => string.Equals (p.Name' "Header"' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault (); " is 141.
Long Statement,Nancy,ResponseExtensions,C:\repos\danhigham_NancyWebTest\Nancy\ResponseExtensions.cs,GetTuple,The length of the statement  "	var valueProperty = properties.Where (p => string.Equals (p.Name' "Value"' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault (); " is 139.
Long Statement,Nancy,Url,C:\repos\danhigham_NancyWebTest\Nancy\Url.cs,ToString,The length of the statement  "	return this.Scheme + "://" + GetHostName (this.HostName) + GetPort (this.Port) + GetCorrectPath (this.BasePath) + GetCorrectPath (this.Path) + this.Query + GetFragment (this.Fragment); " is 184.
Long Statement,Nancy,Url,C:\repos\danhigham_NancyWebTest\Nancy\Url.cs,GetHostName,The length of the statement  "		return (address.AddressFamily == AddressFamily.InterNetworkV6) ? string.Concat ("["' address.ToString ()' "]") : address.ToString (); " is 133.
Long Statement,Nancy,FormatterExtensions,C:\repos\danhigham_NancyWebTest\Nancy\FormatterExtensions.cs,AsJson,The length of the statement  "	var serializer = jsonSerializer ?? (jsonSerializer = formatter.Serializers.FirstOrDefault (s => s.CanSerialize ("application/json"))); " is 134.
Long Statement,Nancy,FormatterExtensions,C:\repos\danhigham_NancyWebTest\Nancy\FormatterExtensions.cs,AsXml,The length of the statement  "	var serializer = xmlSerializer ?? (xmlSerializer = formatter.Serializers.FirstOrDefault (s => s.CanSerialize ("application/xml"))); " is 131.
Long Statement,Nancy,HttpMultipart,C:\repos\danhigham_NancyWebTest\Nancy\HttpMultipart.cs,GetBoundarySubStreams,The length of the statement  "		boundarySubStreams.Add (new HttpMultipartSubStream (this.requestStream' boundaryStart' this.GetActualEndOfBoundary (boundaryEnd))); " is 131.
Long Statement,Nancy,HttpMultipartBoundary,C:\repos\danhigham_NancyWebTest\Nancy\HttpMultipartBoundary.cs,ExtractHeaders,The length of the statement  "			this.Filename = Regex.Match (header' @"filename=""(?<filename>[^\""]*)"' RegexOptions.IgnoreCase).Groups ["filename"].Value; " is 124.
Long Statement,Nancy,Request,C:\repos\danhigham_NancyWebTest\Nancy\Request.cs,ParseFormData,The length of the statement  "			this.files.Add (new HttpFile (httpMultipartBoundary.ContentType' httpMultipartBoundary.Filename' httpMultipartBoundary.Value' httpMultipartBoundary.Name//include the form field that posted this file " is 198.
Long Statement,Nancy.Extensions,CollectionExtensions,C:\repos\danhigham_NancyWebTest\Nancy\Extensions\CollectionExtensions.cs,Merge,The length of the statement  "	var output = new Dictionary<string' string> (StaticConfiguration.CaseSensitive ? StringComparer.InvariantCulture : StringComparer.InvariantCultureIgnoreCase); " is 158.
Long Statement,Nancy.Responses,DefaultJsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Responses\DefaultJsonSerializer.cs,IsJsonType,The length of the statement  "	return contentMimeType.Equals ("application/json"' StringComparison.InvariantCultureIgnoreCase) || contentMimeType.Equals ("text/json"' StringComparison.InvariantCultureIgnoreCase) || (contentMimeType.StartsWith ("application/vnd"' StringComparison.InvariantCultureIgnoreCase) && contentMimeType.EndsWith ("+json"' StringComparison.InvariantCultureIgnoreCase)); " is 361.
Long Statement,Nancy.Responses,DefaultXmlSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Responses\DefaultXmlSerializer.cs,IsXmlType,The length of the statement  "	return contentMimeType.Equals ("application/xml"' StringComparison.InvariantCultureIgnoreCase) || contentMimeType.Equals ("text/xml"' StringComparison.InvariantCultureIgnoreCase) || (contentMimeType.StartsWith ("application/vnd"' StringComparison.InvariantCultureIgnoreCase) && contentMimeType.EndsWith ("+xml"' StringComparison.InvariantCultureIgnoreCase)); " is 358.
Long Statement,Nancy.IO,RequestStream,C:\repos\danhigham_NancyWebTest\Nancy\IO\RequestStream.cs,ThrowExceptionIfCtorParametersWereInvalid,The length of the statement  "		throw new ArgumentOutOfRangeException ("expectedLength"' expectedLength' "The value of the expectedLength parameter cannot be less than zero."); " is 144.
Long Statement,Nancy.IO,RequestStream,C:\repos\danhigham_NancyWebTest\Nancy\IO\RequestStream.cs,ThrowExceptionIfCtorParametersWereInvalid,The length of the statement  "		throw new ArgumentOutOfRangeException ("thresholdLength"' thresholdLength' "The value of the threshHoldLength parameter cannot be less than zero."); " is 148.
Long Statement,Nancy.Json.Converters,TimeSpanConverter,C:\repos\danhigham_NancyWebTest\Nancy\Json\Converters\TimeSpanConverter.cs,Deserialize,The length of the statement  "	return new TimeSpan (this.GetValue (dictionary' "Days")' this.GetValue (dictionary' "Hours")' this.GetValue (dictionary' "Minutes")' this.GetValue (dictionary' "Seconds")' this.GetValue (dictionary' "Milliseconds")); " is 216.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToList,The length of the statement  "		throw new InvalidOperationException (String.Format ("Deserializing list type '{0}' not supported."' type.GetType ().Name)); " is 123.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The length of the statement  "		if (genericTypeDefinition.IsAssignableFrom (typeof(IDictionary<' >)) || genericTypeDefinition.GetInterfaces ().Any (i => i == typeof(IDictionary))) { " is 149.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The length of the statement  "			if (arguments == null || arguments.Length != 2 || (arguments [0] != typeof(object) && arguments [0] != typeof(string) && arguments [0] != typeof(Guid))) " is 152.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The length of the statement  "				throw new InvalidOperationException ("Type '" + type + "' is not not supported for serialization/deserialization of a dictionary' keys must be strings' guids or objects."); " is 172.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The length of the statement  "		MemberInfo[] memberCollection = type.GetMember (entry.Key' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 130.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ResolveGenericInterfaceToType,The length of the statement  "	if (ReflectionUtils.IsSubClass (type' typeof(IList<>)) || ReflectionUtils.IsSubClass (type' typeof(ICollection<>)) || ReflectionUtils.IsSubClass (type' typeof(IEnumerable<>))) " is 175.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ResolveInterfaceToType,The length of the statement  "	if (typeof(IList).IsAssignableFrom (type) || typeof(ICollection).IsAssignableFrom (type) || typeof(IEnumerable).IsAssignableFrom (type)) " is 136.
Long Statement,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,DeserializeObject,The length of the statement  "			throw new ArgumentNullException ("resolver"' "Must have a type resolver to deserialize an object that has an '__type' member"); " is 127.
Long Statement,Nancy.Json,Json,C:\repos\danhigham_NancyWebTest\Nancy\Json\Json.cs,IsJsonContentType,The length of the statement  "	return contentMimeType.Equals ("application/json"' StringComparison.InvariantCultureIgnoreCase) || contentMimeType.Equals ("text/json"' StringComparison.InvariantCultureIgnoreCase) || (contentMimeType.StartsWith ("application/vnd"' StringComparison.InvariantCultureIgnoreCase) && contentMimeType.EndsWith ("+json"' StringComparison.InvariantCultureIgnoreCase)); " is 361.
Long Statement,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,SerializeValueImpl,The length of the statement  "		throw new ArgumentException ("Recursion limit has been exceeded while serializing object of type '{0}'"' obj != null ? obj.GetType ().ToString () : "[null]"); " is 158.
Long Statement,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,SerializeArbitraryObject,The length of the statement  "	SerializeMembers<PropertyInfo> (type.GetProperties (BindingFlags.Public | BindingFlags.Instance)' obj' output' ref first); " is 122.
Long Statement,Nancy.ErrorHandling,DefaultErrorHandler,C:\repos\danhigham_NancyWebTest\Nancy\ErrorHandling\DefaultErrorHandler.cs,Handle,The length of the statement  "	if (context.Response != null && context.Response.Contents != null && !ReferenceEquals (context.Response.Contents' Response.NoBody)) { " is 133.
Long Statement,Nancy.ErrorHandling,DefaultErrorHandler,C:\repos\danhigham_NancyWebTest\Nancy\ErrorHandling\DefaultErrorHandler.cs,LoadResource,The length of the statement  "	var resourceStream = typeof(INancyEngine).Assembly.GetManifestResourceStream (String.Format ("Nancy.ErrorHandling.Resources.{0}"' filename)); " is 141.
Long Statement,Nancy.ErrorHandling,DefaultErrorHandler,C:\repos\danhigham_NancyWebTest\Nancy\ErrorHandling\DefaultErrorHandler.cs,PopulateErrorInfo,The length of the statement  "	return templateContents.Replace ("[DETAILS]"' StaticConfiguration.DisableErrorTraces ? String.Empty : context.GetExceptionDetails ()); " is 134.
Long Statement,Nancy.Security,Csrf,C:\repos\danhigham_NancyWebTest\Nancy\Security\Csrf.cs,Enable,The length of the statement  "			context.Response.Cookies.Add (new NancyCookie (CsrfToken.DEFAULT_CSRF_KEY' (string)context.Items [CsrfToken.DEFAULT_CSRF_KEY]' true)); " is 134.
Long Statement,Nancy.Security,Csrf,C:\repos\danhigham_NancyWebTest\Nancy\Security\Csrf.cs,Enable,The length of the statement  "			context.Items [CsrfToken.DEFAULT_CSRF_KEY] = HttpUtility.UrlDecode (context.Request.Cookies [CsrfToken.DEFAULT_CSRF_KEY]); " is 122.
Long Statement,Nancy.Security,CsrfToken,C:\repos\danhigham_NancyWebTest\Nancy\Security\CsrfToken.cs,Equals,The length of the statement  "	return this.RandomBytes.SequenceEqual (other.RandomBytes) && other.CreatedDate.Equals (this.CreatedDate) && this.Hmac.SequenceEqual (other.Hmac); " is 145.
Long Statement,Nancy.Security,ModuleSecurity,C:\repos\danhigham_NancyWebTest\Nancy\Security\ModuleSecurity.cs,RequiresClaims,The length of the statement  "		if (ctx.CurrentUser == null || ctx.CurrentUser.Claims == null || claims.Any (c => !ctx.CurrentUser.Claims.Contains (c))) { " is 122.
Long Statement,Nancy.Validation,CompositeValidator,C:\repos\danhigham_NancyWebTest\Nancy\Validation\CompositeValidator.cs,Validate,The length of the statement  "	var errors = validators.Select (v => v.Validate (instance)).Where (r => r != null).SelectMany (r => r.Errors).ToArray (); " is 121.
Long Statement,Nancy.ViewEngines,DefaultFileSystemReader,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultFileSystemReader.cs,GetViewsWithSupportedExtensions,The length of the statement  "	return supportedViewExtensions.SelectMany (extension => GetFilenames (path' extension)).Distinct ().Select (file => new Tuple<string' Func<StreamReader>> (file' () => new StreamReader (new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))).ToList (); " is 273.
Long Statement,Nancy.ViewEngines,DefaultResourceReader,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultResourceReader.cs,GetResourceStreamMatches,The length of the statement  "	select new Tuple<string' Func<StreamReader>> (resourceName' () => new StreamReader (assembly.GetManifestResourceStream (resourceName))); " is 136.
Long Statement,Nancy.ViewEngines,DefaultViewLocationCache,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultViewLocationCache.cs,GetEnumerator,The length of the statement  "	return StaticConfiguration.DisableCaches ? this.GetLocatedViews ().GetEnumerator () : this.locatedViews.GetEnumerator (); " is 121.
Long Statement,Nancy.ViewEngines,Extensions,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\Extensions.cs,IsAnonymousType,The length of the statement  "	return type.IsGenericType && (type.Attributes & TypeAttributes.NotPublic) == TypeAttributes.NotPublic && (type.Name.StartsWith ("<>"' StringComparison.OrdinalIgnoreCase) || type.Name.StartsWith ("VB$"' StringComparison.OrdinalIgnoreCase)) && (type.Name.Contains ("AnonymousType") || type.Name.Contains ("AnonType")) && Attribute.IsDefined (type' typeof(CompilerGeneratedAttribute)' false); " is 389.
Long Statement,Nancy.ViewEngines,FileSystemViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\FileSystemViewLocationProvider.cs,GetLocatedViews,The length of the statement  "	select new ViewLocationResult (GetViewLocation (match.Item1' rootPath)' Path.GetFileNameWithoutExtension (match.Item1)' Path.GetExtension (match.Item1).Substring (1)' match.Item2); " is 180.
Long Statement,Nancy.ViewEngines,DefaultViewFactory,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultViewFactory.cs,RenderView,The length of the statement  "		throw new ArgumentNullException ("viewLocationContext"' "The value of the viewLocationContext parameter cannot be null."); " is 122.
Long Statement,Nancy.ViewEngines,DefaultViewFactory,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultViewFactory.cs,GetRenderedView,The length of the statement  "	return SafeInvokeViewEngine (resolvedViewEngine' viewLocationResult' GetSafeModel (model)' this.renderContextFactory.GetRenderContext (viewLocationContext)); " is 157.
Long Statement,Nancy.ViewEngines,DefaultViewFactory,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultViewFactory.cs,GetViewEngine,The length of the statement  "	where viewEngine.Extensions.Any (x => x.Equals (viewLocationResult.Extension' StringComparison.InvariantCultureIgnoreCase)) " is 123.
Long Statement,Nancy.ViewEngines,DefaultViewLocator,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultViewLocator.cs,LocateView,The length of the statement  "	var viewsThatMatchesCritera = this.viewLocationCache.Where (x => NameMatchesView (viewName' x)).Where (x => ExtensionMatchesView (viewName' x)).Where (x => LocationMatchesView (viewName' x)).ToList (); " is 201.
Long Statement,Nancy.ViewEngines,DefaultViewLocator,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultViewLocator.cs,GetAmgiguousViewExceptionMessage,The length of the statement  "	return string.Format ("This exception was thrown because multiple views were found. {0} view(s):\r\n\t{1}"' count' string.Join ("\r\n\t"' viewsThatMatchesCritera.Select (GetFullLocationOfView).ToArray ())); " is 206.
Long Statement,Nancy.ViewEngines,DefaultViewLocator,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\DefaultViewLocator.cs,ExtensionMatchesView,The length of the statement  "	return string.IsNullOrEmpty (extension) || viewLocationResult.Extension.Equals (extension.Substring (1)' StringComparison.OrdinalIgnoreCase); " is 141.
Long Statement,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,GetLocatedViews,The length of the statement  "	return this.resourceAssemblyProvider.GetAssembliesToScan ().Where (x => !Ignore.Contains (x)).SelectMany (x => GetViewLocations (x' supportedViewExtensions)); " is 158.
Long Statement,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,GetViewLocations,The length of the statement  "		var errorMessage = string.Format ("Only one view was found in assembly {0}' but no rootnamespace had been registered."' assembly.FullName); " is 139.
Long Statement,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,GetViewLocations,The length of the statement  "	var commonNamespace = RootNamespaces.ContainsKey (assembly) ? RootNamespaces [assembly] : ExtractAssemblyRootNamespace (assembly); " is 130.
Long Statement,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,GetViewLocations,The length of the statement  "	select new ViewLocationResult (GetResourceLocation (commonNamespace' resource.Item1' resourceFileName)' Path.GetFileNameWithoutExtension (resourceFileName)' GetResourceExtension (resource.Item1)' resource.Item2); " is 212.
Long Statement,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,GetResourceFileName,The length of the statement  "	return (segmentCount < 2) ? string.Empty : string.Concat (nameSegments [segmentCount - 2]' "."' nameSegments [segmentCount - 1]); " is 129.
Long Statement,Nancy.ViewEngines,ViewEngineStartup,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ViewEngineStartup.cs,GetViewsThatEngineCanRender,The length of the statement  "	return viewEngine.Extensions.SelectMany (extension => this.viewLocationCache.Where (x => x.Extension.Equals (extension))).ToList (); " is 132.
Long Statement,Nancy.ModelBinding,DefaultBinder,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultBinder.cs,ConvertDynamicDictionary,The length of the statement  "	return dictionary.GetDynamicMemberNames ().ToDictionary (memberName => this.fieldNameConverter.Convert (memberName)' memberName => (string)dictionary [memberName]); " is 164.
Long Statement,Nancy.ModelBinding,DefaultBinder,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultBinder.cs,GetProperties,The length of the statement  "	return modelType.GetProperties (BindingFlags.Public | BindingFlags.Instance).Where (p => p.CanWrite && !blackList.Contains (p.Name' StringComparer.InvariantCulture)); " is 166.
Long Statement,Nancy.ModelBinding,DefaultBinder,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultBinder.cs,DeserializeRequestBody,The length of the statement  "	bodyDeserializer = this.defaults.DefaultBodyDeserializers.Where (b => b.CanDeserialize (contentType)).FirstOrDefault (); " is 120.
Long Statement,Nancy.ModelBinding.DefaultBodyDeserializers,JsonBodyDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultBodyDeserializers\JsonBodyDeserializer.cs,Deserialize,The length of the statement  "	if (context.DestinationType.GetProperties (BindingFlags.Public | BindingFlags.Instance).Except (context.ValidModelProperties).Any ()) { " is 135.
Long Statement,Nancy.ModelBinding.DefaultBodyDeserializers,XmlBodyDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultBodyDeserializers\XmlBodyDeserializer.cs,CanDeserialize,The length of the statement  "	return contentMimeType.Equals ("application/xml"' StringComparison.InvariantCultureIgnoreCase) || contentMimeType.Equals ("text/xml"' StringComparison.InvariantCultureIgnoreCase) || (contentMimeType.StartsWith ("application/vnd"' StringComparison.InvariantCultureIgnoreCase) && contentMimeType.EndsWith ("+xml"' StringComparison.InvariantCultureIgnoreCase)); " is 358.
Long Statement,Nancy.ModelBinding.DefaultBodyDeserializers,XmlBodyDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultBodyDeserializers\XmlBodyDeserializer.cs,Deserialize,The length of the statement  "	var propertiesToIgnore = context.DestinationType.GetProperties (BindingFlags.Public | BindingFlags.Instance).Except (context.ValidModelProperties); " is 147.
Long Statement,Nancy.ModelBinding.DefaultConverters,CollectionConverter,C:\repos\danhigham_NancyWebTest\Nancy\ModelBinding\DefaultConverters\CollectionConverter.cs,IsCollection,The length of the statement  "	return destinationType.IsGenericType && destinationType.GetInterfaces ().Where (i => i.IsGenericType && i.GetGenericTypeDefinition () == collectionType).Any (); " is 160.
Long Statement,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,Resolve,The length of the statement  "		return new ResolveResult (new NotFoundRoute (context.Request.Method' context.Request.Path)' DynamicDictionary.Empty' null' null); " is 129.
Long Statement,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,Resolve,The length of the statement  "		return new ResolveResult (new NotFoundRoute (context.Request.Method' context.Request.Path)' DynamicDictionary.Empty' null' null); " is 129.
Long Statement,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,Resolve,The length of the statement  "	var routesWithCorrectRequestMethod = GetRoutesWithCorrectRequestMethod (context.Request' routesThatMatchRequestedPath).ToList (); " is 129.
Long Statement,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,Resolve,The length of the statement  "		return new ResolveResult (new MethodNotAllowedRoute (context.Request.Path' context.Request.Method' allowedMethods)' DynamicDictionary.Empty' null' null); " is 153.
Long Statement,Nancy.Routing,DefaultRouteResolver,C:\repos\danhigham_NancyWebTest\Nancy\Routing\DefaultRouteResolver.cs,GetTopRouteMatches,The length of the statement  "	foreach (var tuple in routesWithCorrectRequestMethod.OrderBy (x => x.Item4.Parameters.GetDynamicMemberNames ().Count ()).OrderByDescending (x => x.Item3.Path.Count (c => c.Equals ('/')))) { " is 189.
Long Statement,Nancy.Session,CookieBasedSessions,C:\repos\danhigham_NancyWebTest\Nancy\Session\CookieBasedSessions.cs,Enable,The length of the statement  "	var sessionStore = new CookieBasedSessions (cryptographyConfiguration.EncryptionProvider' cryptographyConfiguration.HmacProvider' new DefaultObjectSerializer ()); " is 162.
Long Statement,TinyIoC,TypeExtensions,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,GetMethod,The length of the statement  "	var methods = sourceType.GetMethods (bindingFlags).Where (mi => string.Equals (methodName' mi.Name' StringComparison.InvariantCulture)).Where (mi => mi.ContainsGenericParameters).Where (mi => mi.GetGenericArguments ().Length == genericTypes.Length).Where (mi => mi.GetParameters ().Length == parameterTypes.Length).Select (mi => mi.MakeGenericMethod (genericTypes)).Where (mi => mi.GetParameters ().Select (pi => pi.ParameterType).SequenceEqual (parameterTypes)).ToList (); " is 473.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' true' registrationPredicate); " is 129.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' ignoreDuplicateImplementations' null); " is 138.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' ignoreDuplicateImplementations' registrationPredicate); " is 155.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegister,The length of the statement  "	            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly }' ignoreDuplicateImplementations' registrationPredicate);" is 120.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,Register,The length of the statement  "	return this.RegisterInternal (registerType' string.Empty' GetDefaultObjectFactory (registerType' registerImplementation)); " is 122.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,Register,The length of the statement  "	return RegisterInternal (registerType' string.Empty' new InstanceFactory (registerType' registerImplementation' instance)); " is 123.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,RegisterMultiple,The length of the statement  "			throw new ArgumentException (String.Format ("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 137.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,Resolve,The length of the statement  "	return ResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 123.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 120.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 126.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		var types = assemblies.SelectMany (a => a.SafeGetTypes ()).Where (t => !IsIgnoredType (t' registrationPredicate)).ToList (); " is 124.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		where (type.IsClass == true) && (type.IsAbstract == false) && (type != this.GetType () && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition)) " is 165.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		where ((type.IsInterface == true || type.IsAbstract == true) && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition)) " is 139.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 133.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 206.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,CanResolveInternal,The length of the statement  "		return (GetBestConstructor (checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal (registration' parameters' options) : false; " is 169.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<String' object>))) " is 167.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 124.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 146.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) { " is 216.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>))) { " is 169.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 172.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "	var genericResolveAllMethod = this.GetType ().GetGenericMethod (BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments ()' new[] { " is 159.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,CanConstruct,The length of the statement  "		if (!isParameterOverload && !CanResolveInternal (new TypeRegistration (parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 139.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ConstructType,The length of the statement  "		constructor = GetBestConstructor (typeToConstruct' parameters' options) ?? GetTypeConstructors (typeToConstruct).LastOrDefault (); " is 130.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ConstructType,The length of the statement  "			args [parameterIndex] = parameters.ContainsKey (currentParam.Name) ? parameters [currentParam.Name] : ResolveInternal (new TypeRegistration (currentParam.ParameterType)' NamedParameterOverloads.Default' options); " is 212.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,BuildUpInternal,The length of the statement  "				property.SetValue (input' ResolveInternal (new TypeRegistration (property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 145.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	var registrations = _RegisteredTypes.Keys.Where (tr => tr.Type == resolveType).Concat (GetParentRegistrationsForType (resolveType)); " is 132.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	return registrations.Select (registration => this.ResolveInternal (registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 139.
Long Statement,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,StandardTypePropertyEvaluator,The length of the statement  "	var property = properties.Where (p => string.Equals (p.Name' propertyName' StringComparison.InvariantCulture)).FirstOrDefault (); " is 129.
Long Statement,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,StandardTypePropertyEvaluator,The length of the statement  "	return property == null ? new Tuple<bool' object> (false' null) : new Tuple<bool' object> (true' property.GetValue (model' null)); " is 130.
Long Statement,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,DynamicDictionaryPropertyEvaluator,The length of the statement  "	return !dictionaryModel.TryGetValue (propertyName' out output) ? new Tuple<bool' object> (false' null) : new Tuple<bool' object> (true' output); " is 144.
Long Statement,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,ReplaceCurrentMatch,The length of the statement  "		return eachMatch.Groups ["Encode"].Success ? host.HtmlEncode (substitution.Item2.ToString ()) : substitution.Item2.ToString (); " is 127.
Long Statement,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,PerformMasterPageSubstitutions,The length of the statement  "	var sections = sectionMatches.Cast<Match> ().ToDictionary (sectionMatch => sectionMatch.Groups ["SectionName"].Value' sectionMatch => sectionMatch.Groups ["SectionContents"].Value); " is 181.
Complex Conditional,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToList,The conditional expression  "type == null || type.IsArray || typeofObject == type || typeof(ArrayList).IsAssignableFrom (type)"  is complex.
Complex Conditional,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The conditional expression  "arguments == null || arguments.Length != 2 || (arguments [0] != typeof(object) && arguments [0] != typeof(string) && arguments [0] != typeof(Guid))"  is complex.
Complex Conditional,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,Nancy,HttpMultipart,C:\repos\danhigham_NancyWebTest\Nancy\HttpMultipart.cs,GetActualEndOfBoundary,The following statement contains a magic number: if (this.CheckIfFoundEndOfStream ()) {  	return this.requestStream.Position - (this.readBuffer.Length + 2);  }  
Magic Number,Nancy,HttpMultipart,C:\repos\danhigham_NancyWebTest\Nancy\HttpMultipart.cs,GetActualEndOfBoundary,The following statement contains a magic number: return this.requestStream.Position - (this.readBuffer.Length + 2);  
Magic Number,Nancy,HttpMultipart,C:\repos\danhigham_NancyWebTest\Nancy\HttpMultipart.cs,GetActualEndOfBoundary,The following statement contains a magic number: return boundaryEnd - (this.readBuffer.Length + 2);  
Magic Number,Nancy,Request,C:\repos\danhigham_NancyWebTest\Nancy\Request.cs,GetCookieData,The following statement contains a magic number: foreach (var parts in cookies.Select (c => c.Split (new[] {  	'='  }' 2))) {  	cookieDictionary [parts [0].Trim ()] = parts [1];  }  
Magic Number,Nancy,Response,C:\repos\danhigham_NancyWebTest\Nancy\Response.cs,Response,The following statement contains a magic number: this.Cookies = new List<INancyCookie> (2);  
Magic Number,Nancy.IO,RequestStream,C:\repos\danhigham_NancyWebTest\Nancy\IO\RequestStream.cs,CreateTemporaryFileStream,The following statement contains a magic number: return new FileStream (filePath' FileMode.Create' FileAccess.ReadWrite' FileShare.None' 8192' true);  
Magic Number,Nancy.IO,RequestStream,C:\repos\danhigham_NancyWebTest\Nancy\IO\RequestStream.cs,MoveStreamContentsInto,The following statement contains a magic number: this.stream.CopyTo (target' 8196);  
Magic Number,Nancy.Json,JsonSettings,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSettings.cs,JsonSettings,The following statement contains a magic number: MaxJsonLength = 102400;  
Magic Number,Nancy.Json,JsonSettings,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSettings.cs,JsonSettings,The following statement contains a magic number: MaxRecursions = 100;  
Magic Number,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The following statement contains a magic number: if (type.IsGenericType) {  	var genericTypeDefinition = type.GetGenericTypeDefinition ();  	if (genericTypeDefinition.IsAssignableFrom (typeof(IDictionary<' >)) || genericTypeDefinition.GetInterfaces ().Any (i => i == typeof(IDictionary))) {  		Type[] arguments = type.GetGenericArguments ();  		if (arguments == null || arguments.Length != 2 || (arguments [0] != typeof(object) && arguments [0] != typeof(string) && arguments [0] != typeof(Guid)))  			throw new InvalidOperationException ("Type '" + type + "' is not not supported for serialization/deserialization of a dictionary' keys must be strings' guids or objects.");  		if (type.IsAbstract) {  			Type dictType = typeof(Dictionary<' >);  			type = dictType.MakeGenericType (arguments [0]' arguments [1]);  		}  		isDictionaryWithGuidKey = arguments [0] == typeof(Guid);  	}  }  else if (type.IsAssignableFrom (typeof(IDictionary)))  	type = typeof(Dictionary<string' object>);  
Magic Number,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The following statement contains a magic number: if (genericTypeDefinition.IsAssignableFrom (typeof(IDictionary<' >)) || genericTypeDefinition.GetInterfaces ().Any (i => i == typeof(IDictionary))) {  	Type[] arguments = type.GetGenericArguments ();  	if (arguments == null || arguments.Length != 2 || (arguments [0] != typeof(object) && arguments [0] != typeof(string) && arguments [0] != typeof(Guid)))  		throw new InvalidOperationException ("Type '" + type + "' is not not supported for serialization/deserialization of a dictionary' keys must be strings' guids or objects.");  	if (type.IsAbstract) {  		Type dictType = typeof(Dictionary<' >);  		type = dictType.MakeGenericType (arguments [0]' arguments [1]);  	}  	isDictionaryWithGuidKey = arguments [0] == typeof(Guid);  }  
Magic Number,Nancy.Json,JavaScriptSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JavaScriptSerializer.cs,ConvertToObject,The following statement contains a magic number: if (arguments == null || arguments.Length != 2 || (arguments [0] != typeof(object) && arguments [0] != typeof(string) && arguments [0] != typeof(Guid)))  	throw new InvalidOperationException ("Type '" + type + "' is not not supported for serialization/deserialization of a dictionary' keys must be strings' guids or objects.");  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,DecodeUnicodeChar,The following statement contains a magic number: if (len < 6)  	throw new ArgumentException ("Invalid escaped unicode character specification (" + currentPosition + ")");  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,DecodeUnicodeChar,The following statement contains a magic number: buffer.Length = len - 6;  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,The following statement contains a magic number: switch (jsonType) {  case JsonType.INTEGER:  	/* MS AJAX.NET JSON parser promotes big integers to double */if (Int32.TryParse (s' out intValue))  		result = intValue;  	else if (Int64.TryParse (s' out longValue))  		result = longValue;  	else if (Decimal.TryParse (s' out decimalValue))  		result = decimalValue;  	else if (Double.TryParse (s' out doubleValue))  		result = doubleValue;  	else  		converted = false;  	break;  case JsonType.FLOAT:  	if (Decimal.TryParse (s' NumberStyles.Any' Json.DefaultNumberFormatInfo' out decimalValue))  		result = decimalValue;  	else if (Double.TryParse (s' NumberStyles.Any' Json.DefaultNumberFormatInfo' out doubleValue))  		result = doubleValue;  	else  		converted = false;  	break;  case JsonType.TRUE:  	if (String.Compare (s' "true"' StringComparison.Ordinal) == 0)  		result = true;  	else  		converted = false;  	break;  case JsonType.FALSE:  	if (String.Compare (s' "false"' StringComparison.Ordinal) == 0)  		result = false;  	else  		converted = false;  	break;  case JsonType.NULL:  	if (String.Compare (s' "null"' StringComparison.Ordinal) != 0)  		converted = false;  	break;  case JsonType.STRING:  	if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  		long javaScriptTicks = Convert.ToInt64 (s.Substring (6' s.Length - 8));  		result = new DateTime ((javaScriptTicks * 10000) + JsonSerializer.InitialJavaScriptDateTicks' DateTimeKind.Utc);  	}  	else  		result = s;  	break;  default:  	throw new InvalidOperationException (String.Format ("Internal error: unexpected JsonType ({0})"' jsonType));  }  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,The following statement contains a magic number: switch (jsonType) {  case JsonType.INTEGER:  	/* MS AJAX.NET JSON parser promotes big integers to double */if (Int32.TryParse (s' out intValue))  		result = intValue;  	else if (Int64.TryParse (s' out longValue))  		result = longValue;  	else if (Decimal.TryParse (s' out decimalValue))  		result = decimalValue;  	else if (Double.TryParse (s' out doubleValue))  		result = doubleValue;  	else  		converted = false;  	break;  case JsonType.FLOAT:  	if (Decimal.TryParse (s' NumberStyles.Any' Json.DefaultNumberFormatInfo' out decimalValue))  		result = decimalValue;  	else if (Double.TryParse (s' NumberStyles.Any' Json.DefaultNumberFormatInfo' out doubleValue))  		result = doubleValue;  	else  		converted = false;  	break;  case JsonType.TRUE:  	if (String.Compare (s' "true"' StringComparison.Ordinal) == 0)  		result = true;  	else  		converted = false;  	break;  case JsonType.FALSE:  	if (String.Compare (s' "false"' StringComparison.Ordinal) == 0)  		result = false;  	else  		converted = false;  	break;  case JsonType.NULL:  	if (String.Compare (s' "null"' StringComparison.Ordinal) != 0)  		converted = false;  	break;  case JsonType.STRING:  	if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  		long javaScriptTicks = Convert.ToInt64 (s.Substring (6' s.Length - 8));  		result = new DateTime ((javaScriptTicks * 10000) + JsonSerializer.InitialJavaScriptDateTicks' DateTimeKind.Utc);  	}  	else  		result = s;  	break;  default:  	throw new InvalidOperationException (String.Format ("Internal error: unexpected JsonType ({0})"' jsonType));  }  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,The following statement contains a magic number: switch (jsonType) {  case JsonType.INTEGER:  	/* MS AJAX.NET JSON parser promotes big integers to double */if (Int32.TryParse (s' out intValue))  		result = intValue;  	else if (Int64.TryParse (s' out longValue))  		result = longValue;  	else if (Decimal.TryParse (s' out decimalValue))  		result = decimalValue;  	else if (Double.TryParse (s' out doubleValue))  		result = doubleValue;  	else  		converted = false;  	break;  case JsonType.FLOAT:  	if (Decimal.TryParse (s' NumberStyles.Any' Json.DefaultNumberFormatInfo' out decimalValue))  		result = decimalValue;  	else if (Double.TryParse (s' NumberStyles.Any' Json.DefaultNumberFormatInfo' out doubleValue))  		result = doubleValue;  	else  		converted = false;  	break;  case JsonType.TRUE:  	if (String.Compare (s' "true"' StringComparison.Ordinal) == 0)  		result = true;  	else  		converted = false;  	break;  case JsonType.FALSE:  	if (String.Compare (s' "false"' StringComparison.Ordinal) == 0)  		result = false;  	else  		converted = false;  	break;  case JsonType.NULL:  	if (String.Compare (s' "null"' StringComparison.Ordinal) != 0)  		converted = false;  	break;  case JsonType.STRING:  	if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  		long javaScriptTicks = Convert.ToInt64 (s.Substring (6' s.Length - 8));  		result = new DateTime ((javaScriptTicks * 10000) + JsonSerializer.InitialJavaScriptDateTicks' DateTimeKind.Utc);  	}  	else  		result = s;  	break;  default:  	throw new InvalidOperationException (String.Format ("Internal error: unexpected JsonType ({0})"' jsonType));  }  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,The following statement contains a magic number: if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  	long javaScriptTicks = Convert.ToInt64 (s.Substring (6' s.Length - 8));  	result = new DateTime ((javaScriptTicks * 10000) + JsonSerializer.InitialJavaScriptDateTicks' DateTimeKind.Utc);  }  else  	result = s;  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,The following statement contains a magic number: if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  	long javaScriptTicks = Convert.ToInt64 (s.Substring (6' s.Length - 8));  	result = new DateTime ((javaScriptTicks * 10000) + JsonSerializer.InitialJavaScriptDateTicks' DateTimeKind.Utc);  }  else  	result = s;  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,The following statement contains a magic number: if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  	long javaScriptTicks = Convert.ToInt64 (s.Substring (6' s.Length - 8));  	result = new DateTime ((javaScriptTicks * 10000) + JsonSerializer.InitialJavaScriptDateTicks' DateTimeKind.Utc);  }  else  	result = s;  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ParseBuffer,The following statement contains a magic number: result = new DateTime ((javaScriptTicks * 10000) + JsonSerializer.InitialJavaScriptDateTicks' DateTimeKind.Utc);  
Magic Number,Nancy.Json,JsonDeserializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonDeserializer.cs,ProcessCharacter,The following statement contains a magic number: if (ch >= 128)  	next_class = C_ETC;  else {  	next_class = ascii_class [ch];  	if (next_class <= UNIVERSAL_ERROR)  		return false;  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	c = value [i];  	switch (c) {  	case '\t':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\t");  		break;  	case '\n':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\n");  		break;  	case '\r':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\r");  		break;  	case '\f':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\f");  		break;  	case '\b':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\b");  		break;  	case '<':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003c");  		break;  	case '>':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003e");  		break;  	case '"':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' "\\\"");  		break;  	case '\'':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u0027");  		break;  	case '\\':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\\");  		break;  	default:  		if (c > '\u001f')  			StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  		else {  			output.Append ("\\u00");  			int intVal = (int)c;  			StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  			intVal &= 0xf;  			StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  		}  		break;  	}  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	c = value [i];  	switch (c) {  	case '\t':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\t");  		break;  	case '\n':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\n");  		break;  	case '\r':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\r");  		break;  	case '\f':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\f");  		break;  	case '\b':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\b");  		break;  	case '<':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003c");  		break;  	case '>':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003e");  		break;  	case '"':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' "\\\"");  		break;  	case '\'':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u0027");  		break;  	case '\\':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\\");  		break;  	default:  		if (c > '\u001f')  			StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  		else {  			output.Append ("\\u00");  			int intVal = (int)c;  			StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  			intVal &= 0xf;  			StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  		}  		break;  	}  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	c = value [i];  	switch (c) {  	case '\t':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\t");  		break;  	case '\n':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\n");  		break;  	case '\r':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\r");  		break;  	case '\f':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\f");  		break;  	case '\b':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\b");  		break;  	case '<':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003c");  		break;  	case '>':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003e");  		break;  	case '"':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' "\\\"");  		break;  	case '\'':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u0027");  		break;  	case '\\':  		StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\\");  		break;  	default:  		if (c > '\u001f')  			StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  		else {  			output.Append ("\\u00");  			int intVal = (int)c;  			StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  			intVal &= 0xf;  			StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  		}  		break;  	}  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: switch (c) {  case '\t':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\t");  	break;  case '\n':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\n");  	break;  case '\r':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\r");  	break;  case '\f':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\f");  	break;  case '\b':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\b");  	break;  case '<':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003c");  	break;  case '>':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003e");  	break;  case '"':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' "\\\"");  	break;  case '\'':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u0027");  	break;  case '\\':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\\");  	break;  default:  	if (c > '\u001f')  		StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  	else {  		output.Append ("\\u00");  		int intVal = (int)c;  		StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  		intVal &= 0xf;  		StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  	}  	break;  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: switch (c) {  case '\t':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\t");  	break;  case '\n':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\n");  	break;  case '\r':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\r");  	break;  case '\f':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\f");  	break;  case '\b':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\b");  	break;  case '<':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003c");  	break;  case '>':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003e");  	break;  case '"':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' "\\\"");  	break;  case '\'':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u0027");  	break;  case '\\':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\\");  	break;  default:  	if (c > '\u001f')  		StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  	else {  		output.Append ("\\u00");  		int intVal = (int)c;  		StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  		intVal &= 0xf;  		StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  	}  	break;  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: switch (c) {  case '\t':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\t");  	break;  case '\n':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\n");  	break;  case '\r':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\r");  	break;  case '\f':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\f");  	break;  case '\b':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\b");  	break;  case '<':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003c");  	break;  case '>':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u003e");  	break;  case '"':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' "\\\"");  	break;  case '\'':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\u0027");  	break;  case '\\':  	StringBuilderExtensions.AppendCount (output' maxJsonLength' @"\\");  	break;  default:  	if (c > '\u001f')  		StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  	else {  		output.Append ("\\u00");  		int intVal = (int)c;  		StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  		intVal &= 0xf;  		StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  	}  	break;  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: if (c > '\u001f')  	StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  else {  	output.Append ("\\u00");  	int intVal = (int)c;  	StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  	intVal &= 0xf;  	StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: if (c > '\u001f')  	StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  else {  	output.Append ("\\u00");  	int intVal = (int)c;  	StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  	intVal &= 0xf;  	StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: if (c > '\u001f')  	StringBuilderExtensions.AppendCount (output' maxJsonLength' c);  else {  	output.Append ("\\u00");  	int intVal = (int)c;  	StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  	intVal &= 0xf;  	StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  }  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)('0' + (intVal >> 4)));  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  
Magic Number,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,WriteValue,The following statement contains a magic number: StringBuilderExtensions.AppendCount (output' maxJsonLength' (char)(intVal < 10 ? '0' + intVal : 'a' + (intVal - 10)));  
Magic Number,Nancy.Cryptography,Base64Helpers,C:\repos\danhigham_NancyWebTest\Nancy\Cryptography\Base64Helpers.cs,GetBase64Length,The following statement contains a magic number: return (int)Math.Ceiling ((normalLength + inputPadding) * 4.0 / 3.0);  
Magic Number,Nancy.Cryptography,Base64Helpers,C:\repos\danhigham_NancyWebTest\Nancy\Cryptography\Base64Helpers.cs,GetBase64Length,The following statement contains a magic number: return (int)Math.Ceiling ((normalLength + inputPadding) * 4.0 / 3.0);  
Magic Number,Nancy.Cryptography,PassphraseKeyGenerator,C:\repos\danhigham_NancyWebTest\Nancy\Cryptography\PassphraseKeyGenerator.cs,PassphraseKeyGenerator,The following statement contains a magic number: if (salt.Length < 8) {  	throw new ArgumentOutOfRangeException ("salt"' "salt must be at least 8 bytes in length");  }  
Magic Number,Nancy.Cryptography,RijndaelEncryptionProvider,C:\repos\danhigham_NancyWebTest\Nancy\Cryptography\RijndaelEncryptionProvider.cs,RijndaelEncryptionProvider,The following statement contains a magic number: this.key = keyGenerator.GetBytes (32);  
Magic Number,Nancy.Cryptography,RijndaelEncryptionProvider,C:\repos\danhigham_NancyWebTest\Nancy\Cryptography\RijndaelEncryptionProvider.cs,RijndaelEncryptionProvider,The following statement contains a magic number: this.iv = keyGenerator.GetBytes (16);  
Magic Number,Nancy.Security,CsrfToken,C:\repos\danhigham_NancyWebTest\Nancy\Security\CsrfToken.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (this.RandomBytes != null ? this.RandomBytes.GetHashCode () : 0);  	result = (result * 397) ^ this.CreatedDate.GetHashCode ();  	result = (result * 397) ^ (this.Hmac != null ? this.Hmac.GetHashCode () : 0);  	return result;  }  
Magic Number,Nancy.Security,CsrfToken,C:\repos\danhigham_NancyWebTest\Nancy\Security\CsrfToken.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (this.RandomBytes != null ? this.RandomBytes.GetHashCode () : 0);  	result = (result * 397) ^ this.CreatedDate.GetHashCode ();  	result = (result * 397) ^ (this.Hmac != null ? this.Hmac.GetHashCode () : 0);  	return result;  }  
Magic Number,Nancy.Security,CsrfToken,C:\repos\danhigham_NancyWebTest\Nancy\Security\CsrfToken.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.CreatedDate.GetHashCode ();  
Magic Number,Nancy.Security,CsrfToken,C:\repos\danhigham_NancyWebTest\Nancy\Security\CsrfToken.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (this.Hmac != null ? this.Hmac.GetHashCode () : 0);  
Magic Number,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,GetResourceFileName,The following statement contains a magic number: return (segmentCount < 2) ? string.Empty : string.Concat (nameSegments [segmentCount - 2]' "."' nameSegments [segmentCount - 1]);  
Magic Number,Nancy.ViewEngines,ResourceViewLocationProvider,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ResourceViewLocationProvider.cs,GetResourceFileName,The following statement contains a magic number: return (segmentCount < 2) ? string.Empty : string.Concat (nameSegments [segmentCount - 2]' "."' nameSegments [segmentCount - 1]);  
Magic Number,Nancy.ViewEngines,ViewLocationResult,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ViewLocationResult.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = Extension.GetHashCode ();  	result = (result * 397) ^ Location.GetHashCode ();  	result = (result * 397) ^ Name.GetHashCode ();  	return result;  }  
Magic Number,Nancy.ViewEngines,ViewLocationResult,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ViewLocationResult.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = Extension.GetHashCode ();  	result = (result * 397) ^ Location.GetHashCode ();  	result = (result * 397) ^ Name.GetHashCode ();  	return result;  }  
Magic Number,Nancy.ViewEngines,ViewLocationResult,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ViewLocationResult.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Location.GetHashCode ();  
Magic Number,Nancy.ViewEngines,ViewLocationResult,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\ViewLocationResult.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Name.GetHashCode ();  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	char c = s [i];  	if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  	#if NET_4_0  					    || c == '\'' #endif  	) {  		needEncode = true;  		break;  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  #if NET_4_0  				    || c == '\'' #endif  ) {  	needEncode = true;  	break;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	switch (s [i]) {  	case '&':  		output.Append ("&amp;");  		break;  	case '>':  		output.Append ("&gt;");  		break;  	case '<':  		output.Append ("&lt;");  		break;  	case '"':  		output.Append ("&quot;");  		break;  	#if NET_4_0  						case '\'': 						output.Append ("&39;"); 						break; #endif  	case '\uff1c':  		output.Append ("&#65308;");  		break;  	case '\uff1e':  		output.Append ("&#65310;");  		break;  	default:  		ch = s [i];  		if (ch > 159 && ch < 256) {  			output.Append ("&#");  			output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else  			output.Append (ch);  		break;  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	switch (s [i]) {  	case '&':  		output.Append ("&amp;");  		break;  	case '>':  		output.Append ("&gt;");  		break;  	case '<':  		output.Append ("&lt;");  		break;  	case '"':  		output.Append ("&quot;");  		break;  	#if NET_4_0  						case '\'': 						output.Append ("&39;"); 						break; #endif  	case '\uff1c':  		output.Append ("&#65308;");  		break;  	case '\uff1e':  		output.Append ("&#65310;");  		break;  	default:  		ch = s [i];  		if (ch > 159 && ch < 256) {  			output.Append ("&#");  			output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else  			output.Append (ch);  		break;  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: switch (s [i]) {  case '&':  	output.Append ("&amp;");  	break;  case '>':  	output.Append ("&gt;");  	break;  case '<':  	output.Append ("&lt;");  	break;  case '"':  	output.Append ("&quot;");  	break;  #if NET_4_0  					case '\'': 						output.Append ("&39;"); 						break; #endif  case '\uff1c':  	output.Append ("&#65308;");  	break;  case '\uff1e':  	output.Append ("&#65310;");  	break;  default:  	ch = s [i];  	if (ch > 159 && ch < 256) {  		output.Append ("&#");  		output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else  		output.Append (ch);  	break;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: switch (s [i]) {  case '&':  	output.Append ("&amp;");  	break;  case '>':  	output.Append ("&gt;");  	break;  case '<':  	output.Append ("&lt;");  	break;  case '"':  	output.Append ("&quot;");  	break;  #if NET_4_0  					case '\'': 						output.Append ("&39;"); 						break; #endif  case '\uff1c':  	output.Append ("&#65308;");  	break;  case '\uff1e':  	output.Append ("&#65310;");  	break;  default:  	ch = s [i];  	if (ch > 159 && ch < 256) {  		output.Append ("&#");  		output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else  		output.Append (ch);  	break;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: if (ch > 159 && ch < 256) {  	output.Append ("&#");  	output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  	output.Append (";");  }  else  	output.Append (ch);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: if (ch > 159 && ch < 256) {  	output.Append ("&#");  	output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  	output.Append (";");  }  else  	output.Append (ch);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	state = 0;  	output.Append (entity.ToString ());  	output.Append (c);  	entity.Length = 0;  }  else {  	number = 0;  	is_hex_value = false;  	if (c != '#') {  		state = 2;  	}  	else {  		state = 3;  	}  	entity.Append (c);  	#if NET_4_0  							rawEntity.Append (c); #endif  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	state = 0;  	output.Append (entity.ToString ());  	output.Append (c);  	entity.Length = 0;  }  else {  	number = 0;  	is_hex_value = false;  	if (c != '#') {  		state = 2;  	}  	else {  		state = 3;  	}  	entity.Append (c);  	#if NET_4_0  							rawEntity.Append (c); #endif  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c != '#') {  	state = 2;  }  else {  	state = 3;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c != '#') {  	state = 2;  }  else {  	state = 3;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: state = 2;  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: state = 3;  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	string key = entity.ToString ();  	if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  		key = Entities [key.Substring (1' key.Length - 2)].ToString ();  	output.Append (key);  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	string key = entity.ToString ();  	if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  		key = Entities [key.Substring (1' key.Length - 2)].ToString ();  	output.Append (key);  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  	key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  	key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (number > 65535) {  	output.Append ("&#");  	output.Append (number.ToString (CultureInfo.InvariantCulture));  	output.Append (";");  }  else {  	output.Append ((char)number);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: number = number * 16 + Uri.FromHex (c);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: number = number * 10 + ((int)c - '0');  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: state = 2;  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = i >> 12;  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 8) & 0x0F;  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 4) & 0x0F;  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')) {  	if (isUnicode && c > 127) {  		result.WriteByte ((byte)'%');  		result.WriteByte ((byte)'u');  		result.WriteByte ((byte)'0');  		result.WriteByte ((byte)'0');  	}  	else  		result.WriteByte ((byte)'%');  	int idx = ((int)c) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)c) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  }  else  	result.WriteByte ((byte)c);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')) {  	if (isUnicode && c > 127) {  		result.WriteByte ((byte)'%');  		result.WriteByte ((byte)'u');  		result.WriteByte ((byte)'0');  		result.WriteByte ((byte)'0');  	}  	else  		result.WriteByte ((byte)'%');  	int idx = ((int)c) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)c) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  }  else  	result.WriteByte ((byte)c);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (isUnicode && c > 127) {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	result.WriteByte ((byte)'0');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)'%');  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  }  else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)c);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  }  else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)c);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  }  else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)c);  
Magic Number,Nancy.Helpers,HttpEncoder,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: for (int i = 0; i < bIn.Length; i++) {  	result.WriteByte ((byte)'%');  	int idx = ((int)bIn [i]) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)bIn [i]) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255) {  	foreach (byte b in e.GetBytes (new char[] {  		ch  	}))  		buf.Add (b);  }  else  	buf.Add ((byte)ch);  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (s' i + 2' 4);  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (s' i + 2' 4);  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (xchar != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 5;  }  else  	WriteCharBytes (bytes' '%'' e);  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 2;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'a' + 10;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	return c - 'A' + 10;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'A' + 10;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	int current = GetInt (bytes [i]);  	if (current == -1)  		return -1;  	value = (value << 4) + current;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: value = (value << 4) + current;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = str [i];  	if (c > 127)  		return -1;  	int current = GetInt ((byte)c);  	if (current == -1)  		return -1;  	val = (val << 4) + current;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = str [i];  	if (c > 127)  		return -1;  	int current = GetInt ((byte)c);  	if (current == -1)  		return -1;  	val = (val << 4) + current;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: if (c > 127)  	return -1;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: val = (val << 4) + current;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (bytes' i + 2' 4);  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (bytes' i + 2' 4);  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (xchar != -1) {  	output.Append ((char)xchar);  	i += 5;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 2;  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	}  	else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	}  	else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	}  	else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  }  else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  }  else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  }  else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (xchar != -1) {  	c = (char)xchar;  	i += 2;  }  
Magic Number,Nancy.Helpers,HttpUtility,C:\repos\danhigham_NancyWebTest\Nancy\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: i += 2;  
Magic Number,TinyIoC,TinyIoCContainer,C:\repos\danhigham_NancyWebTest\Nancy\TinyIoc\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>))) {  	Type returnType = genericArguments [2];  	var name = Expression.Parameter (typeof(string)' "name");  	var parameters = Expression.Parameter (typeof(IDictionary<string' object>)' "parameters");  	MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod ("Resolve"' new Type[] {  		typeof(String)'  		typeof(NamedParameterOverloads)  	});  	resolveMethod = resolveMethod.MakeGenericMethod (returnType);  	var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));  	var resolveLambda = Expression.Lambda (resolveCall' name' parameters).Compile ();  	return resolveLambda;  }  
Magic Number,Nancy.ViewEngines.SuperSimpleViewEngine,SuperSimpleViewEngine,C:\repos\danhigham_NancyWebTest\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs,GetPredicateResult,The following statement contains a magic number: if (substitutionObject.Item1 == false && properties.Last ().StartsWith ("Has")) {  	var newProperties = properties.Take (properties.Count () - 1).Concat (new[] {  		properties.Last ().Substring (3)  	});  	substitutionObject = GetPropertyValueFromParameterCollection (item' newProperties);  	return GetHasPredicateResultFromSubstitutionObject (substitutionObject.Item2);  }  
Missing Default,Nancy,HttpMultipartSubStream,C:\repos\danhigham_NancyWebTest\Nancy\HttpMultipartSubStream.cs,CalculateSubStreamRelativePosition,The following switch statement is missing a default case: switch (origin) {  case SeekOrigin.Begin:  	subStreamRelativePosition = this.start + offset;  	break;  case SeekOrigin.Current:  	subStreamRelativePosition = this.position + offset;  	break;  case SeekOrigin.End:  	subStreamRelativePosition = this.end + offset;  	break;  }  
Missing Default,Nancy.Json,JsonSerializer,C:\repos\danhigham_NancyWebTest\Nancy\Json\JsonSerializer.cs,SerializeValueImpl,The following switch statement is missing a default case: switch (typeCode) {  case TypeCode.String:  	WriteValue (output' (string)obj);  	return;  case TypeCode.Char:  	WriteValue (output' (char)obj);  	return;  case TypeCode.Boolean:  	WriteValue (output' (bool)obj);  	return;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.Byte:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	if (valueType.IsEnum) {  		WriteEnumValue (output' obj' typeCode);  		return;  	}  	goto case TypeCode.Decimal;  case TypeCode.Single:  	WriteValue (output' (float)obj);  	return;  case TypeCode.Double:  	WriteValue (output' (double)obj);  	return;  case TypeCode.Decimal:  	WriteValue (output' obj as IConvertible);  	return;  case TypeCode.DateTime:  	WriteValue (output' (DateTime)obj);  	return;  }  
