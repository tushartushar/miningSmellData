Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The method has 206 lines of code.
Long Method,Microsoft.WindowsAzure.StorageClient.Protocol,ListContainersResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListContainersResponse.cs,ParseXml,The method has 105 lines of code.
Complex Method,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.WindowsAzure,SharedAccessSignatureHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\SharedAccessSignatureHelper.cs,ParseQuery,Cyclomatic complexity of the method is 33
Complex Method,Microsoft.WindowsAzure.StorageClient,AccessCondition,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\AccessCondition.cs,GetSourceConditions,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.WindowsAzure.StorageClient,AccessCondition,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\AccessCondition.cs,VerifyConditionHolds,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,Seek,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,ReadImpl,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,ReadAheadImpl,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,VerifyBlocks,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,SetServicePropertiesImpl,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,GetContainerAcl,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.WindowsAzure.StorageClient,CloudBlockBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlockBlob.cs,UploadBlockList,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,WritePageImpl,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,SetServicePropertiesImpl,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,ParallelUpload,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ParallelUpload.cs,ParallelExecute,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,RequestWithRetry,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RequestWithRetry.cs,RequestWithRetryImpl,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,ResultContinuation,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ResultContinuation.cs,ReadXml,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.WindowsAzure.StorageClient,SharedAccessPolicy,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\SharedAccessPolicy.cs,PermissionsFromString,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.WindowsAzure.StorageClient,SmallBlockMemoryStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\SmallBlockMemoryStream.cs,Seek,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateWebException,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateFromHttpStatus,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateExtendedError,Cyclomatic complexity of the method is 56
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,AccessPolicyResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\AccessPolicyResponse.cs,ParseXml,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Put,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Delete,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,List,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,CopyFrom,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,GetBlockListResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\GetBlockListResponse.cs,ParseXml,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,GetMessagesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\GetMessagesResponse.cs,ParseXml,Cyclomatic complexity of the method is 37
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,GetPageRangesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\GetPageRangesResponse.cs,ParseXml,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,Cyclomatic complexity of the method is 36
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,ListContainersResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListContainersResponse.cs,ParseXml,Cyclomatic complexity of the method is 30
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,ListQueuesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListQueuesResponse.cs,ParseXml,Cyclomatic complexity of the method is 30
Complex Method,Microsoft.WindowsAzure.StorageClient.Protocol,PeekMessagesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\PeekMessagesResponse.cs,ParseXml,Cyclomatic complexity of the method is 29
Long Parameter List,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,BeginRead,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,ReadImpl,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,CalculateReadAheadBounds,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,BlobWriteStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobWriteStream.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginCreateSnapshot,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,UploadBlock,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,GetStreamImpl,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListContainersSegmented,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,BeginListContainersSegmented,The method has 7 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListBlobsWithPrefixSegmented,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,BeginListBlobsWithPrefixSegmented,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListContainersImpl,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListContainersImplCore,The method has 9 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListBlobImpl,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginListBlobsSegmented,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsImpl,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsImplCore,The method has 10 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlobDirectory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobDirectory.cs,BeginListBlobsSegmented,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlockBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlockBlob.cs,BeginDownloadBlockList,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlockBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlockBlob.cs,BeginPutBlock,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlockBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlockBlob.cs,BeginPutBlock,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudBlockBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlockBlob.cs,BeginPutBlockList,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,BeginWritePages,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,BeginClearPages,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,WritePageImpl,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginAddMessage,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginUpdateMessage,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginGetMessagesInternal,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,ListQueuesSegmented,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,BeginListQueuesSegmented,The method has 7 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,ListQueuesImpl,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,ListQueuesImplCore,The method has 8 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,EventHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\EventHelper.cs,OnResponseReceived,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,ParallelUpload,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ParallelUpload.cs,ParallelExecute,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,RequestWithRetry,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RequestWithRetry.cs,BeginAsynchronousRequestWithRetry,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,Retry,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The method has 7 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,StorageClientException,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\StorageClientException.cs,StorageClientException,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,StorageException,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\StorageException.cs,StorageException,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient,StorageServerException,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\StorageServerException.cs,StorageServerException,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Put,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Delete,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,CopyFrom,The method has 7 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Get,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,GetBlockList,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,SetProperties,The method has 5 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,CanonicalizationStrategy,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\CanonicalizationStrategy.cs,CanonicalizeHttpRequest,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Protocol,CanonicalizationStrategy,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\CanonicalizationStrategy.cs,CanonicalizeHttpRequestVersion2,The method has 7 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Tasks,StreamExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\StreamExtensions.cs,ReadAsync,The method has 6 parameters.
Long Parameter List,Microsoft.WindowsAzure.StorageClient.Tasks,StreamExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\StreamExtensions.cs,WriteAsync,The method has 7 parameters.
Long Identifier,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,CloudStorageAccount,The length of the parameter storageCredentialsAccountAndKey is 31.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,ToString,The length of the statement  "	else if (this.Credentials != null && this.Credentials.AccountName == DevstoreAccountName && this.Credentials.ToString (true) == DevstoreCredentialInString && this.BlobEndpoint != null && this.QueueEndpoint != null && this.TableEndpoint != null && this.BlobEndpoint.Host == this.QueueEndpoint.Host && this.QueueEndpoint.Host == this.TableEndpoint.Host && this.BlobEndpoint.Scheme == this.QueueEndpoint.Scheme && this.QueueEndpoint.Scheme == this.TableEndpoint.Scheme) { " is 468.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,ToString,The length of the statement  "		settings.Add (String.Format ("{0}={1}://{2}"' DevelopmentStorageProxyUriName' this.BlobEndpoint.Scheme' this.BlobEndpoint.Host)); " is 129.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,ToString,The length of the statement  "	else if (this.BlobEndpoint != null && this.QueueEndpoint != null && this.TableEndpoint != null && this.BlobEndpoint.Host.EndsWith (BlobBaseDnsName) && this.QueueEndpoint.Host.EndsWith (QueueBaseDnsName) && this.TableEndpoint.Host.EndsWith (TableBaseDnsName) && this.BlobEndpoint.Scheme == this.QueueEndpoint.Scheme && this.QueueEndpoint.Scheme == this.TableEndpoint.Scheme) { " is 375.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,GetDevelopmentStorageAccount,The length of the statement  "	return new CloudStorageAccount (new StorageCredentialsAccountAndKey (DevstoreAccountName' DevstoreAccountKey)' new Uri (prefix + ":10000/devstoreaccount1")' new Uri (prefix + ":10001/devstoreaccount1")' new Uri (prefix + ":10002/devstoreaccount1")); " is 249.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,TryParse,The length of the statement  "	if (MatchesSpecification (settings' AllRequired (UseDevelopmentStorageSetting)' Optional (DevelopmentStorageProxyUriSetting))) { " is 128.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,TryParse,The length of the statement  "	if (MatchesSpecification (settings' AllRequired (DefaultEndpointsProtocolSetting' AccountNameSetting' AccountKeySetting)' Optional (BlobEndpointSetting' QueueEndpointSetting' TableEndpointSetting))) { " is 200.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,TryParse,The length of the statement  "		accountInformation = new CloudStorageAccount (GetCredentials (settings)' new Uri (blobEndpoint ?? GetDefaultBlobEndpoint (settings))' new Uri (queueEndpoint ?? GetDefaultQueueEndpoint (settings))' new Uri (tableEndpoint ?? GetDefaultTableEndpoint (settings))); " is 260.
Long Statement,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,TryParse,The length of the statement  "	if (MatchesSpecification (settings' AtLeastOne (BlobEndpointSetting' QueueEndpointSetting' TableEndpointSetting)' ValidCredentials ())) { " is 137.
Long Statement,Microsoft.WindowsAzure,SharedAccessSignatureHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\SharedAccessSignatureHelper.cs,GetSharedAccessSignatureHashImpl,The length of the statement  "	string stringToSign = string.Format ("{0}\n{1}\n{2}\n{3}\n{4}"' SharedAccessPolicy.PermissionsToString (policy.Permissions)' GetDateTimeOrEmpty (policy.SharedAccessStartTime)' GetDateTimeOrEmpty (policy.SharedAccessExpiryTime)' resourceName' groupPolicyIdentifier); " is 265.
Long Statement,Microsoft.WindowsAzure,SharedAccessSignatureHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\SharedAccessSignatureHelper.cs,GetShareAccessSignatureImpl,The length of the statement  "	AddEscapedIfNotNull (builder' Constants.QueryConstants.SignedExpiry' GetDateTimeOrNull (policy.SharedAccessExpiryTime)); " is 120.
Long Statement,Microsoft.WindowsAzure,SharedAccessSignatureHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\SharedAccessSignatureHelper.cs,ParseQuery,The length of the statement  "		//// string errorMessage = string.Format(CultureInfo.CurrentCulture' SR.InvalidQueryParametersInsideBlobAddress' key.ToLower()); " is 128.
Long Statement,Microsoft.WindowsAzure,StorageCredentialsAccountAndKey,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageCredentialsAccountAndKey.cs,ToString,The length of the statement  "	return String.Format ("{0}={1};{2}={3}"' CloudStorageAccount.AccountNameName' this.AccountName' CloudStorageAccount.AccountKeyName' exportSecrets ? this.GetBase64EncodedKey () : "[key hidden]"); " is 194.
Long Statement,Microsoft.WindowsAzure,StorageCredentialsSharedAccessSignature,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageCredentialsSharedAccessSignature.cs,ToString,The length of the statement  "	return String.Format ("{0}={1}"' CloudStorageAccount.SharedAccessSignatureName' exportSecrets ? this.token : "[signature hidden]"); " is 131.
Long Statement,Microsoft.WindowsAzure.StorageClient,AccessCondition,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\AccessCondition.cs,ApplyCondition,The length of the statement  "			request.IfModifiedSince = DateTime.Parse (this.AccessConditionValue' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal); " is 133.
Long Statement,Microsoft.WindowsAzure.StorageClient,AccessCondition,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\AccessCondition.cs,VerifyConditionHolds,The length of the statement  "		var conditional = DateTime.Parse (this.AccessConditionValue' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal); " is 125.
Long Statement,Microsoft.WindowsAzure.StorageClient,AccessCondition,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\AccessCondition.cs,VerifyConditionHolds,The length of the statement  "		var conditional = DateTime.Parse (this.AccessConditionValue' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal); " is 125.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,ReadImpl,The length of the statement  "	if (this.Blob.Properties.BlobType == BlobType.BlockBlob && this.IntegrityControlVerificationEnabled && this.blockList == null) { " is 128.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,ReadImpl,The length of the statement  "			var task = TaskImplHelper.GetRetryableAsyncTask (() => this.ReadAheadImpl (startReadAhead' readAheadCount)' this.options.RetryPolicy); " is 134.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,LockToEtag,The length of the statement  "			if (!this.options.AccessCondition.VerifyConditionHolds (this.Blob.Properties.ETag' this.Blob.Properties.LastModifiedUtc)) { " is 123.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,LockToEtag,The length of the statement  "				throw new StorageClientException (StorageErrorCode.ConditionFailed' SR.ConditionNotMatchedError' System.Net.HttpStatusCode.PreconditionFailed' null' null); " is 155.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,VerifyBlocks,The length of the statement  "	if (this.blockList [0].Name.Length == Constants.V2MD5blockIdExpectedLength && this.blockList [0].Name.StartsWith (Constants.V2blockPrefix)) { " is 141.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,VerifyBlocks,The length of the statement  "	else if (this.blockList [0].Name.Length == Constants.V1MD5blockIdExpectedLength && this.blockList [0].Name.StartsWith (Constants.V1BlockPrefix)) { " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobWriteStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobWriteStream.cs,WriteBlockBlobImpl,The length of the statement  "		throw new ArgumentOutOfRangeException ("count"' String.Format (CultureInfo.CurrentCulture' SR.TooManyBlocksError' Constants.MaxBlockNumber)); " is 141.
Long Statement,Microsoft.WindowsAzure.StorageClient,BlobWriteStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobWriteStream.cs,WriteNonBlockedBlobImpl,The length of the statement  "			throw new ArgumentOutOfRangeException ("count"' String.Format (CultureInfo.CurrentCulture' SR.BlobTooLargeError' Protocol.Constants.MaxSingleUploadBlobSize)); " is 158.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginFetchAttributes,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.FetchAttributesImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 134.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginSetMetadata,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.SetMetadataImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 130.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginSetProperties,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.SetPropertiesImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 132.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginCopyFromBlob,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.CopyFromBlobImpl (source' fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 139.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginDelete,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.DeleteBlobImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 129.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,DeleteIfExists,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<bool> (setResult => this.DeleteBlobIfExistsImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy); " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginDeleteIfExists,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<bool> (setResult => this.DeleteBlobIfExistsImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy' callback' state); " is 161.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,OpenRead,The length of the statement  "	return new BlobReadStream (this' fullModifiers' this.ServiceClient.ReadAheadInBytes' this.ServiceClient.UseIntegrityControlForStreamReading); " is 141.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,DownloadToStream,The length of the statement  "	TaskImplHelper.ExecuteSyncTaskWithRetry (this.DownloadToStreamSyncImpl (target' fullModifiers)' fullModifiers.RetryPolicy); " is 123.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginDownloadToStream,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.DownloadToStreamImpl (target' fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 143.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,CreateSnapshot,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<CloudBlob> (setResult => this.CreateSnapshotImpl (metadata' fullModifiers' setResult)' fullModifiers.RetryPolicy); " is 157.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,BeginCreateSnapshot,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<CloudBlob> (setResult => this.CreateSnapshotImpl (metadata' fullModifiers' setResult)' fullModifiers.RetryPolicy' callback' state); " is 172.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,GetSharedAccessSignature,The length of the statement  "	string signature = SharedAccessSignatureHelper.GetSharedAccessSignatureHashImpl (policy' groupPolicyIdentifier' resourceName' this.ServiceClient); " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,UploadFullBlobImpl,The length of the statement  "	var request = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.Put (this.TransformedAddress' timeout' this.Properties' this.Properties.BlobType' null' 0)); " is 188.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,UploadBlock,The length of the statement  "	var request = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.PutBlock (this.TransformedAddress' timeout' blockId' null)); " is 156.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,FetchAttributesImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.GetProperties (this.TransformedAddress' timeout' this.SnapshotTime' null)); " is 174.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,FetchAttributesImpl,The length of the statement  "		if (this.attributes.Properties.BlobType != BlobType.Unspecified && this.attributes.Properties.BlobType != attributes.Properties.BlobType) { " is 139.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,GetStreamImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.Get (this.TransformedAddress' timeout' this.SnapshotTime' offset' count' null)); " is 179.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,GetStreamSyncImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.Get (this.TransformedAddress' timeout' this.SnapshotTime' null)); " is 164.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,GetStreamImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.Get (this.TransformedAddress' timeout' this.SnapshotTime' null)); " is 164.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,UploadUnknownSizeStream,The length of the statement  "	// This function is more a defensive measure; it should be rarely called' if ever. (Can seekable stream not have length? " is 120.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,CopyFromBlobImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.CopyFrom (this.TransformedAddress' timeout' sourceBlobUri' this.SnapshotTime' header' value' null)); " is 199.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,DeleteBlobImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.Delete (this.TransformedAddress' timeout' this.SnapshotTime' options.DeleteSnapshotsOption' null)); " is 198.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,CreateSnapshotImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.Snapshot (this.TransformedAddress' timeout)); " is 144.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,SetMetadataImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.SetMetadata (this.TransformedAddress' timeout' null)); " is 153.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,SetPropertiesImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.SetProperties (this.TransformedAddress' timeout' this.Properties' null' null)); " is 178.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,ParseSnapshotTime,The length of the statement  "	if (!DateTime.TryParse (snapshotTime' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out snapshotDateTime)) { " is 126.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,ParseSnapshotTime,The length of the statement  "		string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.MultipleSnapshotTimesProvided' snapshotDateTime' this.SnapshotTime); " is 136.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,ParseQueryAndVerify,The length of the statement  "		string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.RelativeAddressNotPermitted' completeUri.ToString ()); " is 122.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlob.cs,ParseQueryAndVerify,The length of the statement  "		this.ServiceClient = new CloudBlobClient (usePathStyleUris' new Uri (NavigationHelper.GetServiceClientBaseAddress (this.Uri.AbsoluteUri' usePathStyleUris))' credentials); " is 170.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,GetServiceProperties,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ServiceProperties> (setResult => this.GetServicePropertiesImpl (setResult)' this.RetryPolicy); " is 137.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,BeginGetServiceProperties,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ServiceProperties> (setResult => this.GetServicePropertiesImpl (setResult)' this.RetryPolicy' callback' state); " is 152.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,BeginSetServiceProperties,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.SetServicePropertiesImpl (properties)' this.RetryPolicy' callback' state); " is 127.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListContainers,The length of the statement  "	return CommonUtils.LazyEnumerateSegmented<CloudBlobContainer> (setResult => this.ListContainersImpl (prefix' detailsIncluded' null' null' setResult)' this.RetryPolicy); " is 168.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListContainersSegmented,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ResultSegment<CloudBlobContainer>> (setResult => this.ListContainersImpl (prefix' detailsIncluded' continuationToken' maxResults' setResult)' this.RetryPolicy); " is 203.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,BeginListContainersSegmented,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ResultSegment<CloudBlobContainer>> (setResult => this.ListContainersImpl (prefix' detailsIncluded' continuationToken' maxResults' setResult)' this.RetryPolicy' callback' state); " is 218.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListBlobsWithPrefix,The length of the statement  "	return CommonUtils.LazyEnumerateSegmented<IListBlobItem> (setResult => this.ListBlobImpl (prefix' null' null' fullModifier' setResult)' this.RetryPolicy); " is 154.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListBlobsWithPrefixSegmented,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ResultSegment<IListBlobItem>> (setResult => this.ListBlobImpl (prefix' continuationToken' maxResults' fullModifier' setResult)' this.RetryPolicy); " is 189.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,BeginListBlobsWithPrefixSegmented,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ResultSegment<IListBlobItem>> (setResult => this.ListBlobImpl (prefix' continuationToken' maxResults' null' setResult)' this.RetryPolicy' callback' state); " is 196.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListContainersImplCore,The length of the statement  "		containersList.AddRange (listContainersResponse.Containers.Select (item => new CloudBlobContainer (item.Attributes' this))); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobClient.cs,ListContainersImplCore,The length of the statement  "	ResultSegment.CreateResultSegment (setResult' containersList' newContinuationToken' pagination' this.RetryPolicy' (paginationArg' continuationArg' resultSegmentArg) => this.ListContainersImplCore (prefix' detailsIncluded' continuationArg' paginationArg' resultSegmentArg)); " is 273.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobs,The length of the statement  "	return CommonUtils.LazyEnumerateSegmented<IListBlobItem> (setResult => this.ListBlobsImpl (null' fullModifiers' null' null' setResult)' fullModifiers.RetryPolicy); " is 163.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsSegmented,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ResultSegment<IListBlobItem>> (setResult => this.ListBlobsImpl (null' fullModifiers' null' null' setResult)' fullModifiers.RetryPolicy); " is 179.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsSegmented,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ResultSegment<IListBlobItem>> (setResult => this.ListBlobsImpl (null' fullModifiers' continuationToken' maxResults' setResult)' fullModifiers.RetryPolicy); " is 198.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginListBlobsSegmented,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ResultSegment<IListBlobItem>> (setResult => this.ListBlobsImpl (null' fullModifiers' continuationToken' maxResults' setResult)' fullModifiers.RetryPolicy' callback' state); " is 213.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginCreate,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.CreateContainerImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 134.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,CreateIfNotExist,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<bool> (setResult => this.CreateContainerIfNotExistImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy); " is 153.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginCreateIfNotExist,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<bool> (setResult => this.CreateContainerIfNotExistImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy' callback' state); " is 168.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginDelete,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.DeleteContainerImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 134.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,SetPermissions,The length of the statement  "	TaskImplHelper.ExecuteImplWithRetry (() => this.SetPermissionsImpl (permissions' fullModifiers)' fullModifiers.RetryPolicy); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginSetPermissions,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.SetPermissionsImpl (permissions' fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,GetPermissions,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<BlobContainerPermissions> (setResult => this.GetPermissionsImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy); " is 162.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginGetPermissions,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<BlobContainerPermissions> (setResult => this.GetPermissionsImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy' callback' state); " is 177.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginFetchAttributes,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.FetchAttributesImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 134.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,BeginSetMetadata,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.SetMetadataImpl (fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 130.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,GetSharedAccessSignature,The length of the statement  "	string signature = SharedAccessSignatureHelper.GetSharedAccessSignatureHashImpl (policy' groupPolicyIdentifier' resourceName' this.ServiceClient); " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ParseQueryAndVerify,The length of the statement  "		string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.RelativeAddressNotPermitted' completeUri.ToString ()); " is 122.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ParseQueryAndVerify,The length of the statement  "		this.ServiceClient = new CloudBlobClient (NavigationHelper.GetServiceClientBaseAddress (this.Uri.AbsoluteUri' usePathStyleUris)' sasCreds); " is 139.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsImplCore,The length of the statement  "	if (!options.UseFlatBlobListing && (options.BlobListingDetails & BlobListingDetails.Snapshots) == BlobListingDetails.Snapshots) { " is 129.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsImplCore,The length of the statement  "	BlobListingContext listingContext = new BlobListingContext (prefix' pagination.GetNextRequestPageSize ()' delimiter' options.BlobListingDetails) { " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsImplCore,The length of the statement  "	var request = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.List (this.TransformedAddress' timeout' listingContext)); " is 153.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsImplCore,The length of the statement  "		blobList.AddRange (listBlobResponse.Blobs.Select (item => CloudBlobClient.SelectProtocolResponse (item' this.ServiceClient' this))); " is 132.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,ListBlobsImplCore,The length of the statement  "	ResultSegment.CreateResultSegment (setResult' blobList' newContinuationToken' pagination' options.RetryPolicy' (paginationArg' continuationArg' resultSegmentArg) => this.ListBlobsImplCore (prefix' options' continuationArg' paginationArg' resultSegmentArg)); " is 257.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,CreateContainerImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => ContainerRequest.Create (this.Uri' timeout)); " is 132.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,CreateContainerIfNotExistImpl,The length of the statement  "		if (e.StatusCode == HttpStatusCode.Conflict && e.ExtendedErrorInformation.ErrorCode == StorageErrorCodeStrings.ContainerAlreadyExists) { " is 136.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,DeleteContainerImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => ContainerRequest.Delete (this.TransformedAddress' timeout)); " is 147.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,FetchAttributesImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => ContainerRequest.GetProperties (this.TransformedAddress' timeout)); " is 154.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,SetMetadataImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => ContainerRequest.SetMetadata (this.TransformedAddress' timeout)); " is 152.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,SetPermissionsImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => ContainerRequest.SetAcl (this.TransformedAddress' timeout' acl.PublicAccess)); " is 165.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobContainer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobContainer.cs,GetPermissionsImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => ContainerRequest.GetAcl (this.TransformedAddress' timeout)); " is 147.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobDirectory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobDirectory.cs,ListBlobs,The length of the statement  "	return CommonUtils.LazyEnumerateSegmented<IListBlobItem> (setResult => this.Container.ListBlobsImpl (this.Prefix' fullModifiers' null' null' setResult)' fullModifiers.RetryPolicy); " is 180.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobDirectory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobDirectory.cs,ListBlobsSegmented,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ResultSegment<IListBlobItem>> (setResult => this.Container.ListBlobsImpl (this.Prefix' fullModifiers' continuationToken' maxResults' setResult)' fullModifiers.RetryPolicy); " is 215.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlobDirectory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlobDirectory.cs,BeginListBlobsSegmented,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ResultSegment<IListBlobItem>> (setResult => this.Container.ListBlobsImpl (this.Prefix' fullModifiers' continuationToken' maxResults' setResult)' fullModifiers.RetryPolicy' callback' state); " is 230.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlockBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlockBlob.cs,UploadBlockList,The length of the statement  "	var request = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.PutBlockList (this.TransformedAddress' timeout' this.Properties' null)); " is 168.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudBlockBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudBlockBlob.cs,GetDownloadBlockList,The length of the statement  "	var request = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.GetBlockList (this.TransformedAddress' timeout' this.SnapshotTime' typesOfBlocks' null)); " is 185.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,BeginCreate,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.CreateImpl (fullModifiers' size)' fullModifiers.RetryPolicy' callback' state); " is 131.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,ClearPages,The length of the statement  "	TaskImplHelper.ExecuteImplWithRetry (() => this.ClearPageImpl (startOffset' length' fullModifiers)' fullModifiers.RetryPolicy); " is 127.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,BeginClearPages,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.ClearPageImpl (startOffset' length' fullModifiers)' fullModifiers.RetryPolicy' callback' state); " is 149.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,GetPageRanges,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<IEnumerable<PageRange>> (setResult => this.GetPageRangesImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy); " is 159.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,BeginGetPageRanges,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<IEnumerable<PageRange>> (setResult => this.GetPageRangesImpl (fullModifiers' setResult)' fullModifiers.RetryPolicy' callback' state); " is 174.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,CreateImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.Put (this.TransformedAddress' timeout' this.Properties' BlobType.PageBlob' null' sizeInBytes)); " is 194.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,GetPageRangesImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.GetPageRanges (this.TransformedAddress' timeout' this.SnapshotTime' null)); " is 174.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,WritePageImpl,The length of the statement  "	// The second attempt will have SourceStreamPosition = -2' anything below -1 is considered an abort. Since the Impl method " is 122.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,WritePageImpl,The length of the statement  "	// does not have an execution context to be aware of what iteration is used the SourceStreamPosition is utilized as counter to " is 126.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,WritePageImpl,The length of the statement  "	if ((1 + properties.Range.EndOffset - properties.Range.StartOffset) % Protocol.Constants.PageSize != 0 || (1 + properties.Range.EndOffset - properties.Range.StartOffset) == 0) { " is 177.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,WritePageImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.PutPage (this.TransformedAddress' timeout' properties' null)); " is 161.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudPageBlob,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudPageBlob.cs,ClearPageImpl,The length of the statement  "	var webRequest = ProtocolHelper.GetWebRequest (this.ServiceClient' options' timeout => BlobRequest.PutPage (this.TransformedAddress' timeout' properties' null)); " is 161.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,CreateIfNotExist,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<bool> (setResult => this.CreateIfNotExistImpl (setResult)' this.ServiceClient.RetryPolicy); " is 134.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginCreateIfNotExist,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<bool> (setResult => this.CreateIfNotExistImpl (setResult)' this.ServiceClient.RetryPolicy' callback' state); " is 149.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,AddMessage,The length of the statement  "	TaskImplHelper.ExecuteImplWithRetry (() => this.AddMessageImpl (message' timeToLive' null)' this.ServiceClient.RetryPolicy); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,AddMessage,The length of the statement  "	TaskImplHelper.ExecuteImplWithRetry (() => this.AddMessageImpl (message' timeToLive' initialVisibilityDelay)' this.ServiceClient.RetryPolicy); " is 142.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginAddMessage,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.AddMessageImpl (message' null' null)' this.ServiceClient.RetryPolicy' callback' state); " is 140.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginAddMessage,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.AddMessageImpl (message' timeToLive' null)' this.ServiceClient.RetryPolicy' callback' state); " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginAddMessage,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.AddMessageImpl (message' timeToLive' initialVisibilityDelay)' this.ServiceClient.RetryPolicy' callback' state); " is 164.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,PeekMessage,The length of the statement  "	IEnumerable<CloudQueueMessage> peekedMessages = TaskImplHelper.ExecuteImplWithRetry<IEnumerable<CloudQueueMessage>> (setResult => this.PeekMessagesImpl (1' setResult)' this.ServiceClient.RetryPolicy); " is 200.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginPeekMessage,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<IEnumerable<CloudQueueMessage>> (setResult => this.PeekMessagesImpl (1' setResult)' this.ServiceClient.RetryPolicy' callback' state); " is 174.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,PeekMessages,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<IEnumerable<CloudQueueMessage>> (setResult => this.PeekMessagesImpl (messageCount' setResult)' this.ServiceClient.RetryPolicy); " is 170.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginPeekMessages,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<IEnumerable<CloudQueueMessage>> (setResult => this.PeekMessagesImpl (messageCount' setResult)' this.ServiceClient.RetryPolicy' callback' state); " is 185.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,DeleteMessage,The length of the statement  "	TaskImplHelper.ExecuteImplWithRetry (() => this.DeleteMessageImpl (message.Id' message.PopReceipt)' this.ServiceClient.RetryPolicy); " is 132.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,DeleteMessage,The length of the statement  "	TaskImplHelper.ExecuteImplWithRetry (() => this.DeleteMessageImpl (messageId' popReceipt)' this.ServiceClient.RetryPolicy); " is 123.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginDeleteMessage,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.DeleteMessageImpl (message.Id' message.PopReceipt)' this.ServiceClient.RetryPolicy' callback' state); " is 154.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginDeleteMessage,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.DeleteMessageImpl (messageId' popReceipt)' this.ServiceClient.RetryPolicy' callback' state); " is 145.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,UpdateMessage,The length of the statement  "	TaskImplHelper.ExecuteImplWithRetry (() => this.UpdateMessageImpl (message' visibilityTimeout' updateFields)' this.ServiceClient.RetryPolicy); " is 142.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginUpdateMessage,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.UpdateMessageImpl (message' visibilityTimeout' updateFields)' this.ServiceClient.RetryPolicy' callback' state); " is 164.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,GetIndividualMessageAddress,The length of the statement  "	Uri individualMessageUri = NavigationHelper.AppendPathToUri (this.Uri' Constants.Messages + NavigationHelper.Slash + messageId); " is 128.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,GetMessagesInternal,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<IEnumerable<CloudQueueMessage>> (setResult => this.GetMessagesImpl (numberOfMessages' visibilityTimeout' setResult)' this.ServiceClient.RetryPolicy); " is 192.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,BeginGetMessagesInternal,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<IEnumerable<CloudQueueMessage>> (setResult => this.GetMessagesImpl (numberOfMesages' visibilityTimeout' setResult)' this.ServiceClient.RetryPolicy' callback' state); " is 206.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,CreateIfNotExistImpl,The length of the statement  "		if (e.StatusCode == HttpStatusCode.Conflict && e.ExtendedErrorInformation.ErrorCode == QueueErrorCodeStrings.QueueAlreadyExists) { " is 130.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,ClearMessagesImpl,The length of the statement  "	var webRequest = QueueRequest.ClearMessages (this.MessageRequestAddress' this.ServiceClient.Timeout.RoundUpToSeconds ()); " is 121.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,AddMessageImpl,The length of the statement  "		CommonUtils.AssertInBounds<TimeSpan> ("initialVisibilityDelay"' initialVisibilityDelay.Value' TimeSpan.Zero' timeToLive ?? CloudQueueMessage.MaxTimeToLive); " is 156.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,AddMessageImpl,The length of the statement  "	HttpWebRequest webRequest = QueueRequest.PutMessage (this.MessageRequestAddress' this.ServiceClient.Timeout.RoundUpToSeconds ()' timeToLiveInSec' initialVisibilityDelayInSec); " is 175.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,GenerateMessageContentsForRequest,The length of the statement  "				throw new ArgumentException (string.Format (CultureInfo.InvariantCulture' SR.MessageTooLarge' CloudQueueMessage.MaxMessageSize)); " is 129.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,GenerateMessageContentsForRequest,The length of the statement  "				throw new ArgumentException (string.Format (CultureInfo.InvariantCulture' SR.MessageTooLarge' CloudQueueMessage.MaxMessageSize)); " is 129.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,GenerateMessageContentsForRequest,The length of the statement  "			throw new ArgumentException (string.Format (CultureInfo.InvariantCulture' SR.MessageTooLarge' CloudQueueMessage.MaxMessageSize)); " is 129.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,PeekMessagesImpl,The length of the statement  "		CommonUtils.AssertInBounds ("numberOfMessages"' numberOfMessages.Value' 0' CloudQueueMessage.MaxNumberOfMessagesToPeek); " is 120.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,PeekMessagesImpl,The length of the statement  "	var webRequest = QueueRequest.PeekMessages (this.MessageRequestAddress' this.ServiceClient.Timeout.RoundUpToSeconds ()' numberOfMessages); " is 138.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,UpdateMessageImpl,The length of the statement  "	CommonUtils.AssertInBounds<TimeSpan> ("visibilityTimeout"' visibilityTimeout' TimeSpan.Zero' CloudQueueMessage.MaxTimeToLive); " is 126.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,UpdateMessageImpl,The length of the statement  "	HttpWebRequest webRequest = QueueRequest.UpdateMessage (messageUri' this.ServiceClient.Timeout.RoundUpToSeconds ()' message.PopReceipt' (int)visibilityTimeout.TotalSeconds); " is 173.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueue,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueue.cs,GetMessagesImpl,The length of the statement  "	var webRequest = QueueRequest.GetMessages (this.MessageRequestAddress' this.ServiceClient.Timeout.RoundUpToSeconds ()' numberOfMessages' visibilityTimeoutInSec); " is 161.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,ListQueues,The length of the statement  "	return CommonUtils.LazyEnumerateSegmented<CloudQueue> (setResult => this.ListQueuesImpl (prefix' detailsIncluded' null' null' setResult)' this.RetryPolicy); " is 156.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,ListQueuesSegmented,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ResultSegment<CloudQueue>> (setResult => this.ListQueuesImpl (prefix' detailsIncluded' continuationToken' maxResults' setResult)' this.RetryPolicy); " is 191.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,BeginListQueuesSegmented,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ResultSegment<CloudQueue>> (setResult => this.ListQueuesImpl (prefix' detailsIncluded' continuationToken' maxResults' setResult)' this.RetryPolicy' callback' state); " is 206.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,GetServiceProperties,The length of the statement  "	return TaskImplHelper.ExecuteImplWithRetry<ServiceProperties> (setResult => this.GetServicePropertiesImpl (setResult)' this.RetryPolicy); " is 137.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,BeginGetServiceProperties,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ServiceProperties> (setResult => this.GetServicePropertiesImpl (setResult)' this.RetryPolicy' callback' state); " is 152.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,BeginSetServiceProperties,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry (() => this.SetServicePropertiesImpl (properties)' this.RetryPolicy' callback' state); " is 127.
Long Statement,Microsoft.WindowsAzure.StorageClient,CloudQueueClient,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CloudQueueClient.cs,ListQueuesImplCore,The length of the statement  "	ResultSegment.CreateResultSegment (setResult' queueList' newContinuationToken' pagination' this.RetryPolicy' (paginationArg' continuationArg' resultSegment) => this.ListQueuesImplCore (prefix' detailsIncluded' continuationArg' paginationArg' resultSegment)); " is 258.
Long Statement,Microsoft.WindowsAzure.StorageClient,CommonUtils,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CommonUtils.cs,AssertContinuationType,The length of the statement  "		if (!(continuationToken.Type == ResultContinuation.ContinuationType.None || continuationToken.Type == continuationType)) { " is 122.
Long Statement,Microsoft.WindowsAzure.StorageClient,CommonUtils,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\CommonUtils.cs,AssertContinuationType,The length of the statement  "			string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.InvalidContinuationType' continuationToken.Type' continuationType); " is 135.
Long Statement,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetParentAddress,The length of the statement  "	Uri parentUri = NavigationHelper.AppendPathToUri (new Uri (NavigationHelper.GetServiceClientBaseAddress (blobAddress' usePathStyleUris))' parentName); " is 150.
Long Statement,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetServiceClientBaseAddress,The length of the statement  "			string error = string.Format (CultureInfo.CurrentCulture' SR.PathStyleUriMissingAccountNameInformation' addressUri.AbsoluteUri); " is 128.
Long Statement,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,AppendPathToUri,The length of the statement  "	if (Uri.TryCreate (relativeOrAbslouteUri' UriKind.Absolute' out relativeUri) && (relativeUri.Scheme == "http" || relativeUri.Scheme == "https")) { " is 146.
Long Statement,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetContainerNameAndAddress,The length of the statement  "	containerUri = NavigationHelper.AppendPathToUri (new Uri (GetServiceClientBaseAddress (blobAddress' usePathStyleUris))' containerName); " is 135.
Long Statement,Microsoft.WindowsAzure.StorageClient,ParallelUpload,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ParallelUpload.cs,ParallelExecute,The length of the statement  "			InvokeTaskSequenceTask producerTask = new InvokeTaskSequenceTask (() => this.DispenseBlockStream (blockIdSequenceNumber' (stream' id' hashVal) =>  { " is 148.
Long Statement,Microsoft.WindowsAzure.StorageClient,ParallelUpload,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ParallelUpload.cs,ParallelExecute,The length of the statement  "	TraceHelper.WriteLine ("Total producer tasks created {0}' consumer tasks created {1} "' this.producerTasksCreated' this.consumerTasksCreated); " is 142.
Long Statement,Microsoft.WindowsAzure.StorageClient,RequestWithRetry,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RequestWithRetry.cs,RequestWithRetrySyncImpl,The length of the statement  "	throw new StorageClientException (StorageErrorCode.None' "Unexpected internal storage client error."' System.Net.HttpStatusCode.Unused' null' null) { " is 149.
Long Statement,Microsoft.WindowsAzure.StorageClient,ResultPagination,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ResultPagination.cs,GetNextRequestPageSize,The length of the statement  "		this.remainingResultsInPage = this.remainingResultsInPage.GetValueOrDefault () == 0 ? this.maxResults : this.remainingResultsInPage; " is 132.
Long Statement,Microsoft.WindowsAzure.StorageClient,ResultSegment,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ResultSegment.cs,BeginGetNext,The length of the statement  "	return TaskImplHelper.BeginImplWithRetry<ResultSegment<TElement>> (this.GetNextImpl' this.retryPolicy' callback' state); " is 120.
Long Statement,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The length of the statement  "				int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2))); " is 161.
Long Statement,Microsoft.WindowsAzure.StorageClient,TaskImplHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\TaskImplHelper.cs,GetRetryableAsyncTask,The length of the statement  "	InvokeTaskSequenceTask<T> retryableTask = new InvokeTaskSequenceTask<T> (setResult => RequestWithRetry.RequestWithRetryImpl<T> (oracle' impl' setResult)); " is 154.
Long Statement,Microsoft.WindowsAzure.StorageClient,TaskImplHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\TaskImplHelper.cs,GetRetryableAsyncTask,The length of the statement  "	InvokeTaskSequenceTask retryableTask = new InvokeTaskSequenceTask (() => RequestWithRetry.RequestWithRetryImpl<NullTaskReturn> (oracle' setResult => impl ()' scratch =>  { " is 171.
Long Statement,Microsoft.WindowsAzure.StorageClient,TraceHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\TraceHelper.cs,WriteLineInternal,The length of the statement  "	string internalTraceString = string.Format (InternalFormat + traceString' Thread.CurrentThread.ManagedThreadId' Environment.TickCount); " is 135.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,ProcessUnexpectedStatusCode,The length of the statement  "	throw new StorageServerException (StorageErrorCode.ServiceBadResponse' response.StatusDescription' response.StatusCode' null); " is 126.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateWebException,The length of the statement  "		StorageExtendedErrorInformation extendedError = GetExtendedErrorDetailsFromResponse (response.GetResponseStream ()' response.ContentLength); " is 140.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateWebException,The length of the statement  "		return new StorageServerException (StorageErrorCode.ServiceTimeout' "The server request did not complete within the specified timeout"' HttpStatusCode.GatewayTimeout' we); " is 171.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateWebException,The length of the statement  "		return new StorageServerException (StorageErrorCode.ServiceInternalError' "The server encountered an unknown failure: " + e.Message' HttpStatusCode.InternalServerError' we); " is 173.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateFromHttpStatus,The length of the statement  "		return new StorageClientException (StorageErrorCode.AccessDenied' statusDescription' HttpStatusCode.Forbidden' details' inner); " is 127.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateFromHttpStatus,The length of the statement  "		return new StorageClientException (StorageErrorCode.ResourceAlreadyExists' statusDescription' statusCode' details' inner); " is 122.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateFromHttpStatus,The length of the statement  "		return new StorageServerException (StorageErrorCode.ServiceInternalError' statusDescription' statusCode' details' inner); " is 121.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateFromHttpStatus,The length of the statement  "		return new StorageServerException (StorageErrorCode.HttpVersionNotSupported' statusDescription' statusCode' details' inner); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,GetErrorDetailsFromStream,The length of the statement  "						extendedError.AdditionalDetails.Add (Constants.ErrorExceptionMessage' reader.ReadElementString (Constants.ErrorExceptionMessage)); " is 130.
Long Statement,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,GetErrorDetailsFromStream,The length of the statement  "						extendedError.AdditionalDetails.Add (Constants.ErrorExceptionStackTrace' reader.ReadElementString (Constants.ErrorExceptionStackTrace)); " is 136.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Delete,The length of the statement  "		throw new InvalidOperationException (String.Format (SR.DeleteSnapshotsNotValidError' "deleteSnapshotsOption"' "snapshot")); " is 123.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Get,The length of the statement  "	string rangeHeaderValue = string.Format (CultureInfo.InvariantCulture' Constants.HeaderConstants.RangeHeaderFormat' rangeStart' rangeEnd); " is 138.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,BlobResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobResponse.cs,GetAttributes,The length of the statement  "	if (!string.IsNullOrEmpty (snapshotString) && DateTime.TryParse (snapshotString' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.AdjustToUniversal' out snapshot)) { " is 203.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,CanonicalizationStrategy,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\CanonicalizationStrategy.cs,CanonicalizeHttpRequestVersion2,The length of the statement  "	canonicalizedString.AppendCanonicalizedElement (GetStandardHeaderValue (headers' Constants.HeaderConstants.Date) != string.Empty ? string.Empty : GetStandardHeaderValue (headers' "Date")); " is 188.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,CanonicalizationStrategyFactory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\CanonicalizationStrategyFactory.cs,GetBlobQueueLiteCanonicalizationStrategy,The length of the statement  "		string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.BlobQSharedKeyLiteUnsuppported' request.Headers [Constants.HeaderConstants.StorageVersionHeader]); " is 166.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ContainerRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ContainerRequest.cs,WriteSharedAccessIdentifiers,The length of the statement  "		string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.TooManyPolicyIdentifiers' sharedAccessPolicies.Count' Constants.MaxSharedAccessPolicyIdentifiers); " is 166.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ContainerRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ContainerRequest.cs,WriteSharedAccessIdentifiers,The length of the statement  "			writer.WriteElementString (Constants.Start' SharedAccessSignatureHelper.GetDateTimeOrEmpty (policy.SharedAccessStartTime)); " is 123.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ContainerRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ContainerRequest.cs,WriteSharedAccessIdentifiers,The length of the statement  "			writer.WriteElementString (Constants.Expiry' SharedAccessSignatureHelper.GetDateTimeOrEmpty (policy.SharedAccessExpiryTime)); " is 125.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The length of the statement  "									// Snapshot blob URI example:http://<yourstorageaccount>.blob.core.windows.net/<yourcontainer>/<yourblobname>?snapshot=2009-12-03T15%3a26%3a19.4466877Z  " is 151.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The length of the statement  "					else if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement && reader.Name == Constants.BlobPrefixElement) { " is 122.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ParseExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ParseExtensions.cs,ToUTCTime,The length of the statement  "	return DateTime.Parse (str' System.Globalization.DateTimeFormatInfo.InvariantInfo' System.Globalization.DateTimeStyles.AdjustToUniversal); " is 138.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForBlobAndQueue,The length of the statement  "	CanonicalizationStrategy canonicalizer = CanonicalizationStrategyFactory.GetBlobQueueFullCanonicalizationStrategy (request); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForBlobAndQueue,The length of the statement  "	request.Headers.Add ("Authorization"' string.Format (CultureInfo.InvariantCulture' "{0} {1}:{2}"' "SharedKey"' credentials.AccountName' computedBase64Signature)); " is 162.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForTablesSharedKey,The length of the statement  "	CanonicalizationStrategy canonicalizer = CanonicalizationStrategyFactory.GetTableFullCanonicalizationStrategy (request); " is 120.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForTablesSharedKey,The length of the statement  "	request.Headers.Add ("Authorization"' string.Format (CultureInfo.InvariantCulture' "{0} {1}:{2}"' "SharedKey"' credentials.AccountName' computedBase64Signature)); " is 162.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForTablesSharedKeyLite,The length of the statement  "	CanonicalizationStrategy canonicalizer = CanonicalizationStrategyFactory.GetTableLiteCanonicalizationStrategy (request); " is 120.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForTablesSharedKeyLite,The length of the statement  "	request.Headers.Add ("Authorization"' string.Format (CultureInfo.InvariantCulture' "{0} {1}:{2}"' "SharedKeyLite"' credentials.AccountName' computedBase64Signature)); " is 166.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForBlobAndQueuesSharedKeyLite,The length of the statement  "	CanonicalizationStrategy canonicalizer = CanonicalizationStrategyFactory.GetBlobQueueLiteCanonicalizationStrategy (request); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,SignRequestForBlobAndQueuesSharedKeyLite,The length of the statement  "	request.Headers.Add ("Authorization"' string.Format (CultureInfo.InvariantCulture' "{0} {1}:{2}"' "SharedKeyLite"' credentials.AccountName' computedBase64Signature)); " is 166.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,ConvertDateTimeToHttpString,The length of the statement  "	Debug.Assert (dateTime == DateTime.MaxValue || dateTime == DateTime.MinValue || dateTime.Kind == DateTimeKind.Utc' "The date must be UTC."); " is 140.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,ConvertDateTimeToSnapshotString,The length of the statement  "	Debug.Assert (dateTime == DateTime.MaxValue || dateTime == DateTime.MinValue || dateTime.Kind == DateTimeKind.Utc' "The DateTime must be UTC."); " is 144.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ServiceProperties,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ServiceProperties.cs,ToServiceXml,The length of the statement  "	XElement storageServiceElement = new XElement (StorageServicePropertiesName' GenerateLoggingXml (this.Logging)' GenerateMetricsXml (this.Metrics)); " is 147.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ServiceProperties,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ServiceProperties.cs,GenerateMetricsXml,The length of the statement  "	XElement xml = new XElement (MetricsName' new XElement (VersionName' metrics.Version)' new XElement (EnabledName' enabled)' GenerateRetentionPolicyXml (metrics.RetentionDays)); " is 176.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,ServiceProperties,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ServiceProperties.cs,GenerateLoggingXml,The length of the statement  "	return new XElement (LoggingName' new XElement (VersionName' logging.Version)' new XElement (DeleteName' (logging.LoggingOperations & LoggingOperations.Delete) != 0)' new XElement (ReadName' (logging.LoggingOperations & LoggingOperations.Read) != 0)' new XElement (WriteName' (logging.LoggingOperations & LoggingOperations.Write) != 0)' GenerateRetentionPolicyXml (logging.RetentionDays)); " is 389.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,SharedKeyCanonicalizer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\SharedKeyCanonicalizer.cs,CanonicalizeHttpRequest,The length of the statement  "	return CanonicalizeHttpRequestVersion2 (request.Address' accountName' request.Method' request.ContentType' request.ContentLength' string.Empty' request.Headers); " is 161.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,SharedKeyLiteCanonicalizer,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\SharedKeyLiteCanonicalizer.cs,CanonicalizeHttpRequest,The length of the statement  "	return CanonicalizationStrategy.CanonicalizeHttpRequest (request.Address' accountName' request.Method' request.ContentType' string.Empty' request.Headers); " is 155.
Long Statement,Microsoft.WindowsAzure.StorageClient.Protocol,UriQueryBuilder,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\UriQueryBuilder.cs,AddToUri,The length of the statement  "	// The correct way to add query parameters to a Uri http://msdn.microsoft.com/en-us/library/system.uribuilder.query.aspx " is 120.
Long Statement,Microsoft.WindowsAzure.StorageClient.Tasks,TimeoutHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\TimeoutHelper.cs,GetTimeoutWrappedTask,The length of the statement  "		Task<T> wrappedTimeoutTask = new InvokeTaskSequenceTask<T> (setResult => GetTimeoutTaskSequence (timeout.Value' setResult)); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient.Tasks,TimeoutHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\TimeoutHelper.cs,ThrowTimeoutError,The length of the statement  "	string errorMessage = string.Format (System.Globalization.CultureInfo.CurrentCulture' SR.ClientSideTimeoutError' timeout.RoundUpToSeconds ()); " is 142.
Long Statement,Microsoft.WindowsAzure.StorageClient.Tasks,WebRequestExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\WebRequestExtensions.cs,GetResponseAsync,The length of the statement  "	return new APMTask<WebResponse> (req.BeginGetResponse' asyncresult => service.EndGetResponse (asyncresult' req)' req.Abort); " is 124.
Long Statement,Microsoft.WindowsAzure.StorageClient.Tasks,WebRequestExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\WebRequestExtensions.cs,GetResponseAsync,The length of the statement  "	return new APMTask<WebResponse> (req.BeginGetResponse' asyncresult => service.EndGetResponse (asyncresult' req)' req.Abort); " is 124.
Complex Conditional,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,ToString,The conditional expression  "this.Credentials != null && this.Credentials.AccountName == DevstoreAccountName && this.Credentials.ToString (true) == DevstoreCredentialInString && this.BlobEndpoint != null && this.QueueEndpoint != null && this.TableEndpoint != null && this.BlobEndpoint.Host == this.QueueEndpoint.Host && this.QueueEndpoint.Host == this.TableEndpoint.Host && this.BlobEndpoint.Scheme == this.QueueEndpoint.Scheme && this.QueueEndpoint.Scheme == this.TableEndpoint.Scheme"  is complex.
Complex Conditional,Microsoft.WindowsAzure,CloudStorageAccount,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\CloudStorageAccount.cs,ToString,The conditional expression  "this.BlobEndpoint != null && this.QueueEndpoint != null && this.TableEndpoint != null && this.BlobEndpoint.Host.EndsWith (BlobBaseDnsName) && this.QueueEndpoint.Host.EndsWith (QueueBaseDnsName) && this.TableEndpoint.Host.EndsWith (TableBaseDnsName) && this.BlobEndpoint.Scheme == this.QueueEndpoint.Scheme && this.QueueEndpoint.Scheme == this.TableEndpoint.Scheme"  is complex.
Magic Number,Microsoft.WindowsAzure.StorageClient,BlobWriteStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobWriteStream.cs,BlobWriteStream,The following statement contains a magic number: this.blockIdSequenceNumber = (long)rand.Next () << 32;  
Magic Number,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetServiceClientBaseAddress,The following statement contains a magic number: if (usePathStyleUris.Value) {  	// Path style uri  	string[] segments = addressUri.Segments;  	if (segments.Length < 2) {  		string error = string.Format (CultureInfo.CurrentCulture' SR.PathStyleUriMissingAccountNameInformation' addressUri.AbsoluteUri);  		throw new ArgumentException ("address"' error);  	}  	string completeAddress = addressUri.GetLeftPart (UriPartial.Authority) + Slash + segments [1];  	completeAddress = completeAddress.Trim (SlashChar);  	return completeAddress;  }  else {  	return addressUri.GetLeftPart (UriPartial.Authority);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetServiceClientBaseAddress,The following statement contains a magic number: if (segments.Length < 2) {  	string error = string.Format (CultureInfo.CurrentCulture' SR.PathStyleUriMissingAccountNameInformation' addressUri.AbsoluteUri);  	throw new ArgumentException ("address"' error);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetContainerNameFromContainerAddress,The following statement contains a magic number: if (usePathStyleUris) {  	string[] parts = uri.AbsolutePath.Split (NavigationHelper.SlashAsSplitOptions);  	if (parts.Length < 3) {  		string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.MissingAccountInformationInUri' uri.AbsoluteUri);  		throw new InvalidOperationException (errorMessage);  	}  	return parts [2];  }  else {  	return uri.AbsolutePath.Substring (1);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetContainerNameFromContainerAddress,The following statement contains a magic number: if (usePathStyleUris) {  	string[] parts = uri.AbsolutePath.Split (NavigationHelper.SlashAsSplitOptions);  	if (parts.Length < 3) {  		string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.MissingAccountInformationInUri' uri.AbsoluteUri);  		throw new InvalidOperationException (errorMessage);  	}  	return parts [2];  }  else {  	return uri.AbsolutePath.Substring (1);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetContainerNameFromContainerAddress,The following statement contains a magic number: if (parts.Length < 3) {  	string errorMessage = string.Format (CultureInfo.CurrentCulture' SR.MissingAccountInformationInUri' uri.AbsoluteUri);  	throw new InvalidOperationException (errorMessage);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,NavigationHelper,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\NavigationHelper.cs,GetContainerNameFromContainerAddress,The following statement contains a magic number: return parts [2];  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: return () =>  {  	return (int currentRetryCount' Exception lastException' out TimeSpan retryInterval) =>  {  		if (currentRetryCount < retryCount) {  			Random r = new Random ();  			int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  			int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  			retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  			return true;  		}  		retryInterval = TimeSpan.Zero;  		return false;  	};  };  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: return () =>  {  	return (int currentRetryCount' Exception lastException' out TimeSpan retryInterval) =>  {  		if (currentRetryCount < retryCount) {  			Random r = new Random ();  			int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  			int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  			retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  			return true;  		}  		retryInterval = TimeSpan.Zero;  		return false;  	};  };  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: return () =>  {  	return (int currentRetryCount' Exception lastException' out TimeSpan retryInterval) =>  {  		if (currentRetryCount < retryCount) {  			Random r = new Random ();  			int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  			int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  			retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  			return true;  		}  		retryInterval = TimeSpan.Zero;  		return false;  	};  };  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: return (int currentRetryCount' Exception lastException' out TimeSpan retryInterval) =>  {  	if (currentRetryCount < retryCount) {  		Random r = new Random ();  		int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  		int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  		retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  		return true;  	}  	retryInterval = TimeSpan.Zero;  	return false;  };  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: return (int currentRetryCount' Exception lastException' out TimeSpan retryInterval) =>  {  	if (currentRetryCount < retryCount) {  		Random r = new Random ();  		int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  		int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  		retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  		return true;  	}  	retryInterval = TimeSpan.Zero;  	return false;  };  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: return (int currentRetryCount' Exception lastException' out TimeSpan retryInterval) =>  {  	if (currentRetryCount < retryCount) {  		Random r = new Random ();  		int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  		int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  		retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  		return true;  	}  	retryInterval = TimeSpan.Zero;  	return false;  };  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: if (currentRetryCount < retryCount) {  	Random r = new Random ();  	int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  	int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  	retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  	return true;  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: if (currentRetryCount < retryCount) {  	Random r = new Random ();  	int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  	int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  	retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  	return true;  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,RetryPolicies,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\RetryPolicies.cs,RetryExponential,The following statement contains a magic number: if (currentRetryCount < retryCount) {  	Random r = new Random ();  	int increment = (int)((Math.Pow (2' currentRetryCount) - 1) * r.Next ((int)(deltaBackoff.TotalMilliseconds * 0.8)' (int)(deltaBackoff.TotalMilliseconds * 1.2)));  	int timeToSleepMsec = (int)Math.Min (minBackoff.TotalMilliseconds + increment' maxBackoff.TotalMilliseconds);  	retryInterval = TimeSpan.FromMilliseconds (timeToSleepMsec);  	return true;  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,GenerateBlockIDWithHash,The following statement contains a magic number: for (int m = 0; m < 6; m++) {  	tempArray [5 - m] = (byte)((seqNo >> (8 * m)) & 0xFF);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,GenerateBlockIDWithHash,The following statement contains a magic number: for (int m = 0; m < 6; m++) {  	tempArray [5 - m] = (byte)((seqNo >> (8 * m)) & 0xFF);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,GenerateBlockIDWithHash,The following statement contains a magic number: for (int m = 0; m < 6; m++) {  	tempArray [5 - m] = (byte)((seqNo >> (8 * m)) & 0xFF);  }  
Magic Number,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,GenerateBlockIDWithHash,The following statement contains a magic number: tempArray [5 - m] = (byte)((seqNo >> (8 * m)) & 0xFF);  
Magic Number,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,GenerateBlockIDWithHash,The following statement contains a magic number: tempArray [5 - m] = (byte)((seqNo >> (8 * m)) & 0xFF);  
Magic Number,Microsoft.WindowsAzure.StorageClient.Protocol,CanonicalizationStrategyFactory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\CanonicalizationStrategyFactory.cs,IsTargetVersion2,The following statement contains a magic number: if (DateTime.TryParse (version' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out versionTime)) {  	DateTime canonicalizationVer2Date = new DateTime (2009' 09' 19);  	return versionTime.Date >= canonicalizationVer2Date;  }  
Magic Number,Microsoft.WindowsAzure.StorageClient.Protocol,CanonicalizationStrategyFactory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\CanonicalizationStrategyFactory.cs,IsTargetVersion2,The following statement contains a magic number: if (DateTime.TryParse (version' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out versionTime)) {  	DateTime canonicalizationVer2Date = new DateTime (2009' 09' 19);  	return versionTime.Date >= canonicalizationVer2Date;  }  
Magic Number,Microsoft.WindowsAzure.StorageClient.Protocol,CanonicalizationStrategyFactory,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\CanonicalizationStrategyFactory.cs,IsTargetVersion2,The following statement contains a magic number: if (DateTime.TryParse (version' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out versionTime)) {  	DateTime canonicalizationVer2Date = new DateTime (2009' 09' 19);  	return versionTime.Date >= canonicalizationVer2Date;  }  
Magic Number,Microsoft.WindowsAzure.StorageClient.Tasks,StreamExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\StreamExtensions.cs,ReadToString,The following statement contains a magic number: using (var ms = new SmallBlockMemoryStream ()) {  	int read = -1;  	while (read != 0) {  		byte[] buffer = new byte[1024];  		Task<int> count = stream.ReadAsync (buffer' 0' 1024);  		yield return count;  		ms.Write (buffer' 0' count.Result);  		read = count.Result;  	}  	ms.Seek (0' SeekOrigin.Begin);  	using (var strm = new StreamReader (ms' encoding)) {  		result (strm.ReadToEnd ());  	}  }  
Magic Number,Microsoft.WindowsAzure.StorageClient.Tasks,StreamExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\StreamExtensions.cs,ReadToString,The following statement contains a magic number: using (var ms = new SmallBlockMemoryStream ()) {  	int read = -1;  	while (read != 0) {  		byte[] buffer = new byte[1024];  		Task<int> count = stream.ReadAsync (buffer' 0' 1024);  		yield return count;  		ms.Write (buffer' 0' count.Result);  		read = count.Result;  	}  	ms.Seek (0' SeekOrigin.Begin);  	using (var strm = new StreamReader (ms' encoding)) {  		result (strm.ReadToEnd ());  	}  }  
Magic Number,Microsoft.WindowsAzure.StorageClient.Tasks,StreamExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\StreamExtensions.cs,ReadToString,The following statement contains a magic number: while (read != 0) {  	byte[] buffer = new byte[1024];  	Task<int> count = stream.ReadAsync (buffer' 0' 1024);  	yield return count;  	ms.Write (buffer' 0' count.Result);  	read = count.Result;  }  
Magic Number,Microsoft.WindowsAzure.StorageClient.Tasks,StreamExtensions,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Tasks\StreamExtensions.cs,ReadToString,The following statement contains a magic number: while (read != 0) {  	byte[] buffer = new byte[1024];  	Task<int> count = stream.ReadAsync (buffer' 0' 1024);  	yield return count;  	ms.Write (buffer' 0' count.Result);  	read = count.Result;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient,BlobReadStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\BlobReadStream.cs,Seek,The following switch statement is missing a default case: switch (origin) {  case SeekOrigin.Begin:  	this.CheckBounds (offset);  	this.position = offset;  	break;  case SeekOrigin.Current:  	this.CheckBounds (this.position + offset);  	this.position += offset;  	break;  case SeekOrigin.End:  	this.CheckBounds (this.Length + offset);  	this.position = this.Length + offset;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient,ResultContinuation,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\ResultContinuation.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name) {  case VersionElement:  	string version = reader.ReadElementContentAsString ();  	Console.WriteLine (version);  	// For future versioning  	break;  case NextMarkerElement:  	this.NextMarker = reader.ReadElementContentAsString ();  	break;  case NextPartitionKeyElement:  	this.NextPartitionKey = reader.ReadElementContentAsString ();  	break;  case NextRowKeyElement:  	this.NextRowKey = reader.ReadElementContentAsString ();  	break;  case NextTableNameElement:  	this.NextTableName = reader.ReadElementContentAsString ();  	break;  case TypeElement:  	this.Type = (ContinuationType)Enum.Parse (typeof(ContinuationType)' reader.ReadElementContentAsString ());  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient,SmallBlockMemoryStream,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\SmallBlockMemoryStream.cs,Seek,The following switch statement is missing a default case: switch (origin) {  case SeekOrigin.Begin:  	if (offset < 0) {  		throw new ArgumentException ("Attempting to seek before the start of the stream"' "origin");  	}  	if (offset > this.length) {  		throw new ArgumentException ("Attempting to seek past the end of the stream"' "origin");  	}  	this.position = offset;  	break;  case SeekOrigin.Current:  	if (this.position + offset < 0) {  		throw new ArgumentException ("Attempting to seek before the start of the stream"' "origin");  	}  	if (this.position + offset > this.length) {  		throw new ArgumentException ("Attempting to seek past the end of the stream"' "origin");  	}  	this.position += offset;  	break;  case SeekOrigin.End:  	if (this.length + offset < 0) {  		throw new ArgumentException ("Attempting to seek before the start of the stream"' "origin");  	}  	if (offset > 0) {  		throw new ArgumentException ("Attempting to seek past the end of the stream"' "origin");  	}  	this.position = this.length + offset;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateFromHttpStatus,The following switch statement is missing a default case: switch (statusCode) {  case HttpStatusCode.Forbidden:  	return new StorageClientException (StorageErrorCode.AccessDenied' statusDescription' HttpStatusCode.Forbidden' details' inner);  case HttpStatusCode.Gone:  case HttpStatusCode.NotFound:  	return new StorageClientException (StorageErrorCode.ResourceNotFound' statusDescription' statusCode' details' inner);  case HttpStatusCode.BadRequest:  	return new StorageClientException (StorageErrorCode.BadRequest' statusDescription' statusCode' details' inner);  case HttpStatusCode.PreconditionFailed:  case HttpStatusCode.NotModified:  	return new StorageClientException (StorageErrorCode.ConditionFailed' statusDescription' statusCode' details' inner);  case HttpStatusCode.Conflict:  	return new StorageClientException (StorageErrorCode.ResourceAlreadyExists' statusDescription' statusCode' details' inner);  case HttpStatusCode.GatewayTimeout:  	return new StorageServerException (StorageErrorCode.ServiceTimeout' statusDescription' statusCode' details' inner);  case HttpStatusCode.RequestedRangeNotSatisfiable:  	return new StorageClientException (StorageErrorCode.BadRequest' statusDescription' statusCode' details' inner);  case HttpStatusCode.InternalServerError:  	return new StorageServerException (StorageErrorCode.ServiceInternalError' statusDescription' statusCode' details' inner);  case HttpStatusCode.NotImplemented:  	return new StorageServerException (StorageErrorCode.NotImplemented' statusDescription' statusCode' details' inner);  case HttpStatusCode.BadGateway:  	return new StorageServerException (StorageErrorCode.BadGateway' statusDescription' statusCode' details' inner);  case HttpStatusCode.HttpVersionNotSupported:  	return new StorageServerException (StorageErrorCode.HttpVersionNotSupported' statusDescription' statusCode' details' inner);  }  
Missing Default,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateExtendedError,The following switch statement is missing a default case: switch (details.ErrorCode) {  case StorageErrorCodeStrings.UnsupportedHttpVerb:  case StorageErrorCodeStrings.MissingContentLengthHeader:  case StorageErrorCodeStrings.MissingRequiredHeader:  case StorageErrorCodeStrings.UnsupportedHeader:  case StorageErrorCodeStrings.InvalidHeaderValue:  case StorageErrorCodeStrings.MissingRequiredQueryParameter:  case StorageErrorCodeStrings.UnsupportedQueryParameter:  case StorageErrorCodeStrings.InvalidQueryParameterValue:  case StorageErrorCodeStrings.OutOfRangeQueryParameterValue:  case StorageErrorCodeStrings.InvalidUri:  case StorageErrorCodeStrings.InvalidHttpVerb:  case StorageErrorCodeStrings.EmptyMetadataKey:  case StorageErrorCodeStrings.RequestBodyTooLarge:  case StorageErrorCodeStrings.InvalidXmlDocument:  case StorageErrorCodeStrings.InvalidXmlNodeValue:  case StorageErrorCodeStrings.MissingRequiredXmlNode:  case StorageErrorCodeStrings.InvalidMd5:  case StorageErrorCodeStrings.OutOfRangeInput:  case StorageErrorCodeStrings.InvalidInput:  case StorageErrorCodeStrings.InvalidMetadata:  case StorageErrorCodeStrings.MetadataTooLarge:  case StorageErrorCodeStrings.InvalidRange:  	errorCode = StorageErrorCode.BadRequest;  	break;  case StorageErrorCodeStrings.AuthenticationFailed:  	errorCode = StorageErrorCode.AuthenticationFailure;  	break;  case StorageErrorCodeStrings.ResourceNotFound:  	errorCode = StorageErrorCode.ResourceNotFound;  	break;  case StorageErrorCodeStrings.ConditionNotMet:  	errorCode = StorageErrorCode.ConditionFailed;  	break;  case StorageErrorCodeStrings.ContainerAlreadyExists:  	errorCode = StorageErrorCode.ContainerAlreadyExists;  	break;  case StorageErrorCodeStrings.ContainerNotFound:  	errorCode = StorageErrorCode.ContainerNotFound;  	break;  case BlobErrorCodeStrings.BlobNotFound:  	errorCode = StorageErrorCode.BlobNotFound;  	break;  case BlobErrorCodeStrings.BlobAlreadyExists:  	errorCode = StorageErrorCode.BlobAlreadyExists;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient,Utilities,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Utilities.cs,TranslateExtendedError,The following switch statement is missing a default case: switch (details.ErrorCode) {  case StorageErrorCodeStrings.InternalError:  case StorageErrorCodeStrings.ServerBusy:  	errorCode = StorageErrorCode.ServiceInternalError;  	break;  case StorageErrorCodeStrings.Md5Mismatch:  	errorCode = StorageErrorCode.ServiceIntegrityCheckFailed;  	break;  case StorageErrorCodeStrings.OperationTimedOut:  	errorCode = StorageErrorCode.ServiceTimeout;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,AccessPolicyResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\AccessPolicyResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.Start:  	identifier.SharedAccessStartTime = Uri.UnescapeDataString (reader.ReadElementContentAsString ()).ToUTCTime ();  	needToReadElement = false;  	break;  case Constants.Expiry:  	identifier.SharedAccessExpiryTime = Uri.UnescapeDataString (reader.ReadElementContentAsString ()).ToUTCTime ();  	needToReadElement = false;  	break;  case Constants.Permission:  	identifier.Permissions = SharedAccessPolicy.PermissionsFromString (reader.ReadElementContentAsString ());  	needToReadElement = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,Delete,The following switch statement is missing a default case: switch (deleteSnapshotsOption) {  case DeleteSnapshotsOption.None:  	break;  // nop  case DeleteSnapshotsOption.IncludeSnapshots:  	request.Headers.Add (Constants.HeaderConstants.DeleteSnapshotHeader' Constants.HeaderConstants.IncludeSnapshotsValue);  	break;  case DeleteSnapshotsOption.DeleteSnapshotsOnly:  	request.Headers.Add (Constants.HeaderConstants.DeleteSnapshotHeader' Constants.HeaderConstants.SnapshotsOnlyValue);  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,BlobRequest,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\BlobRequest.cs,CopyFrom,The following switch statement is missing a default case: switch (sourceConditions) {  case ConditionHeaderKind.IfMatch:  	request.Headers.Add (Constants.HeaderConstants.SourceIfMatchHeader' sourceConditionsValue);  	break;  case ConditionHeaderKind.IfModifiedSince:  	request.Headers.Add (Constants.HeaderConstants.SourceIfModifiedSinceHeader' sourceConditionsValue);  	break;  case ConditionHeaderKind.IfNoneMatch:  	request.Headers.Add (Constants.HeaderConstants.SourceIfNoneMatchHeader' sourceConditionsValue);  	break;  case ConditionHeaderKind.IfUnmodifiedSince:  	request.Headers.Add (Constants.HeaderConstants.SourceIfUnmodifiedSinceHeader' sourceConditionsValue);  	break;  case ConditionHeaderKind.None:  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,GetBlockListResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\GetBlockListResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.BlockElement:  	// We found a block.  	ListBlockItem block = null;  	long size = 0;  	string blockId = null;  	// Go until we are out of the block.  	bool needToRead = true;  	while (true) {  		if (needToRead && !reader.Read ()) {  			break;  		}  		needToRead = true;  		if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement) {  			switch (reader.Name) {  			case Constants.SizeElement:  				size = reader.ReadElementContentAsLong ();  				needToRead = false;  				break;  			case Constants.NameElement:  				blockId = reader.ReadElementContentAsString ();  				needToRead = false;  				break;  			}  		}  		else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.BlockElement) {  			block = new ListBlockItem () {  				Name = blockId'  				Size = size'  				Committed = committedBlocks  			};  			break;  		}  	}  	yield return block;  	break;  case Constants.CommittedBlocksElement:  	committedBlocks = true;  	break;  case Constants.UncommittedBlocksElement:  	committedBlocks = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,GetBlockListResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\GetBlockListResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.SizeElement:  	size = reader.ReadElementContentAsLong ();  	needToRead = false;  	break;  case Constants.NameElement:  	blockId = reader.ReadElementContentAsString ();  	needToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,GetMessagesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\GetMessagesResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.MessageIdElement:  	id = reader.ReadElementContentAsString ();  	needToRead = false;  	break;  case Constants.PopReceiptElement:  	popReceipt = reader.ReadElementContentAsString ();  	needToRead = false;  	break;  case Constants.InsertionTimeElement:  	insertionTime = reader.ReadElementContentAsString ().ToUTCTime ();  	needToRead = false;  	break;  case Constants.ExpirationTimeElement:  	expirationTime = reader.ReadElementContentAsString ().ToUTCTime ();  	needToRead = false;  	break;  case Constants.TimeNextVisibleElement:  	timeNextVisible = reader.ReadElementContentAsString ().ToUTCTime ();  	needToRead = false;  	break;  case Constants.MessageTextElement:  	text = reader.ReadElementContentAsString ();  	needToRead = false;  	break;  case Constants.DequeueCountElement:  	dequeueCount = reader.ReadElementContentAsInt ();  	needToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,GetPageRangesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\GetPageRangesResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.StartElement:  	start = reader.ReadElementContentAsLong ();  	needToRead = false;  	break;  case Constants.EndElement:  	end = reader.ReadElementContentAsLong ();  	needToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.DelimiterElement:  	needToRead = false;  	this.delimiter = reader.ReadElementContentAsString ();  	this.delimiterConsumable = true;  	yield return null;  	break;  case Constants.MarkerElement:  	needToRead = false;  	this.marker = reader.ReadElementContentAsString ();  	this.markerConsumable = true;  	yield return null;  	break;  case Constants.NextMarkerElement:  	needToRead = false;  	this.nextMarker = reader.ReadElementContentAsString ();  	this.nextMarkerConsumable = true;  	yield return null;  	break;  case Constants.MaxResultsElement:  	needToRead = false;  	this.maxResults = reader.ReadElementContentAsInt ();  	this.maxResultsConsumable = true;  	yield return null;  	break;  case Constants.PrefixElement:  	needToRead = false;  	this.prefix = reader.ReadElementContentAsString ();  	this.prefixConsumable = true;  	yield return null;  	break;  case Constants.BlobsElement:  	// While we're still in the blobs section.  	while (reader.Read ()) {  		// We found a blob.  		if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement && reader.Name == Constants.BlobElement) {  			BlobAttributes blob = null;  			string url = null;  			DateTime? lastModifiedTime = null;  			string etag = null;  			string name = null;  			long? contentLength = null;  			string contentType = null;  			string contentEncoding = null;  			string contentLanguage = null;  			string contentMD5 = null;  			BlobType? blobType = null;  			LeaseStatus? leaseStatus = null;  			DateTime? snapshot = null;  			NameValueCollection metadata = null;  			// Go until we are out of the blob.  			bool blobNeedToRead = true;  			while (true) {  				if (blobNeedToRead && !reader.Read ()) {  					break;  				}  				blobNeedToRead = true;  				if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement) {  					switch (reader.Name) {  					case Constants.UrlElement:  						url = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						break;  					case Constants.LastModifiedElement:  						lastModifiedTime = reader.ReadElementContentAsString ().ToUTCTime ();  						blobNeedToRead = false;  						break;  					case Constants.EtagElement:  						etag = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						break;  					case Constants.NameElement:  						name = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						break;  					case Constants.ContentLengthElement:  						contentLength = reader.ReadElementContentAsLong ();  						blobNeedToRead = false;  						break;  					case Constants.ContentTypeElement:  						contentType = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						break;  					case Constants.ContentEncodingElement:  						contentEncoding = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						break;  					case Constants.ContentLanguageElement:  						contentLanguage = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						break;  					case Constants.ContentMD5Element:  						contentMD5 = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						break;  					case Constants.BlobTypeElement:  						string blobTypeString = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						switch (blobTypeString) {  						case Constants.BlockBlobValue:  							blobType = BlobType.BlockBlob;  							break;  						case Constants.PageBlobValue:  							blobType = BlobType.PageBlob;  							break;  						}  						break;  					case Constants.LeaseStatusElement:  						string leaseStatusString = reader.ReadElementContentAsString ();  						blobNeedToRead = false;  						switch (leaseStatusString) {  						case Constants.LockedValue:  							leaseStatus = LeaseStatus.Locked;  							break;  						case Constants.UnlockedValue:  							leaseStatus = LeaseStatus.Unlocked;  							break;  						}  						break;  					case Constants.SnapshotElement:  						snapshot = reader.ReadElementContentAsString ().ToUTCTime ();  						blobNeedToRead = false;  						break;  					case Constants.MetadataElement:  						metadata = Response.ParseMetadata (reader);  						blobNeedToRead = false;  						break;  					}  				}  				else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.BlobElement) {  					blob = new BlobAttributes ();  					blob.Properties = new BlobProperties ();  					blob.Properties.ContentEncoding = contentEncoding;  					blob.Properties.ContentLanguage = contentLanguage;  					blob.Properties.ContentMD5 = contentMD5;  					blob.Properties.Length = contentLength ?? 0;  					blob.Properties.ContentType = contentType;  					blob.Properties.ETag = etag;  					if (lastModifiedTime != null) {  						blob.Properties.LastModifiedUtc = (DateTime)lastModifiedTime;  					}  					var blobNameSectionIndex = url.LastIndexOf (NavigationHelper.Slash + name);  					string baseUri = url.Substring (0' blobNameSectionIndex + 1);  					var ub = new UriBuilder (baseUri);  					ub.Path += Uri.EscapeUriString (name);  					if (baseUri.Length + name.Length < url.Length) {  						// it's a url for snapshot.   						// Snapshot blob URI example:http://<yourstorageaccount>.blob.core.windows.net/<yourcontainer>/<yourblobname>?snapshot=2009-12-03T15%3a26%3a19.4466877Z   						ub.Query = url.Substring (baseUri.Length + name.Length + 1);  					}  					blob.Uri = ub.Uri;  					blob.Properties.LeaseStatus = leaseStatus ?? LeaseStatus.Unspecified;  					if (snapshot != null) {  						blob.Snapshot = (DateTime)snapshot;  					}  					blob.Properties.BlobType = blobType ?? BlobType.Unspecified;  					if (metadata != null) {  						blob.Metadata = metadata;  					}  					break;  				}  			}  			yield return new BlobEntry (name' blob);  		}  		else if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement && reader.Name == Constants.BlobPrefixElement) {  			BlobPrefixEntry commonPrefix = new BlobPrefixEntry ();  			// Go until we are out of the blob.  			bool blobPrefixNeedToRead = true;  			while (true) {  				if (blobPrefixNeedToRead && !reader.Read ()) {  					break;  				}  				blobPrefixNeedToRead = true;  				if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement) {  					switch (reader.Name) {  					case Constants.NameElement:  						commonPrefix.Name = reader.ReadElementContentAsString ();  						blobPrefixNeedToRead = false;  						break;  					}  				}  				else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.BlobPrefixElement) {  					break;  				}  			}  			yield return commonPrefix;  		}  		else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.BlobsElement) {  			this.allObjectsParsed = true;  			break;  		}  	}  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.UrlElement:  	url = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	break;  case Constants.LastModifiedElement:  	lastModifiedTime = reader.ReadElementContentAsString ().ToUTCTime ();  	blobNeedToRead = false;  	break;  case Constants.EtagElement:  	etag = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	break;  case Constants.NameElement:  	name = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	break;  case Constants.ContentLengthElement:  	contentLength = reader.ReadElementContentAsLong ();  	blobNeedToRead = false;  	break;  case Constants.ContentTypeElement:  	contentType = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	break;  case Constants.ContentEncodingElement:  	contentEncoding = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	break;  case Constants.ContentLanguageElement:  	contentLanguage = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	break;  case Constants.ContentMD5Element:  	contentMD5 = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	break;  case Constants.BlobTypeElement:  	string blobTypeString = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	switch (blobTypeString) {  	case Constants.BlockBlobValue:  		blobType = BlobType.BlockBlob;  		break;  	case Constants.PageBlobValue:  		blobType = BlobType.PageBlob;  		break;  	}  	break;  case Constants.LeaseStatusElement:  	string leaseStatusString = reader.ReadElementContentAsString ();  	blobNeedToRead = false;  	switch (leaseStatusString) {  	case Constants.LockedValue:  		leaseStatus = LeaseStatus.Locked;  		break;  	case Constants.UnlockedValue:  		leaseStatus = LeaseStatus.Unlocked;  		break;  	}  	break;  case Constants.SnapshotElement:  	snapshot = reader.ReadElementContentAsString ().ToUTCTime ();  	blobNeedToRead = false;  	break;  case Constants.MetadataElement:  	metadata = Response.ParseMetadata (reader);  	blobNeedToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The following switch statement is missing a default case: switch (blobTypeString) {  case Constants.BlockBlobValue:  	blobType = BlobType.BlockBlob;  	break;  case Constants.PageBlobValue:  	blobType = BlobType.PageBlob;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The following switch statement is missing a default case: switch (leaseStatusString) {  case Constants.LockedValue:  	leaseStatus = LeaseStatus.Locked;  	break;  case Constants.UnlockedValue:  	leaseStatus = LeaseStatus.Unlocked;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListBlobsResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListBlobsResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.NameElement:  	commonPrefix.Name = reader.ReadElementContentAsString ();  	blobPrefixNeedToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListContainersResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListContainersResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.MarkerElement:  	needToRead = false;  	this.marker = reader.ReadElementContentAsString ();  	this.markerConsumable = true;  	yield return null;  	break;  case Constants.NextMarkerElement:  	needToRead = false;  	this.nextMarker = reader.ReadElementContentAsString ();  	this.nextMarkerConsumable = true;  	yield return null;  	break;  case Constants.MaxResultsElement:  	needToRead = false;  	this.maxResults = reader.ReadElementContentAsInt ();  	this.maxResultsConsumable = true;  	yield return null;  	break;  case Constants.PrefixElement:  	needToRead = false;  	this.prefix = reader.ReadElementContentAsString ();  	this.prefixConsumable = true;  	yield return null;  	break;  case Constants.ContainersElement:  	while (reader.Read ()) {  		// We found a container.  		if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement && reader.Name == Constants.ContainerElement) {  			BlobContainerAttributes container = null;  			Uri uri = null;  			DateTime? lastModifiedTime = null;  			string etag = null;  			string name = null;  			NameValueCollection metadata = null;  			// Go until we are out of the container.  			bool containersNeedToRead = true;  			while (true) {  				if (containersNeedToRead && !reader.Read ()) {  					break;  				}  				containersNeedToRead = true;  				if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement) {  					switch (reader.Name) {  					case Constants.UrlElement:  						string url = reader.ReadElementContentAsString ();  						containersNeedToRead = false;  						Uri.TryCreate (url' UriKind.Absolute' out uri);  						break;  					case Constants.LastModifiedElement:  						lastModifiedTime = reader.ReadElementContentAsString ().ToUTCTime ();  						containersNeedToRead = false;  						break;  					case Constants.EtagElement:  						etag = reader.ReadElementContentAsString ();  						containersNeedToRead = false;  						break;  					case Constants.NameElement:  						name = reader.ReadElementContentAsString ();  						containersNeedToRead = false;  						break;  					case Constants.MetadataElement:  						metadata = Response.ParseMetadata (reader);  						containersNeedToRead = false;  						break;  					}  				}  				else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.ContainerElement) {  					container = new BlobContainerAttributes ();  					container.Name = name;  					container.Uri = uri;  					if (metadata != null) {  						container.Metadata = metadata;  					}  					var containerProperties = container.Properties;  					containerProperties.ETag = etag;  					if (lastModifiedTime != null) {  						containerProperties.LastModifiedUtc = (DateTime)lastModifiedTime;  					}  					break;  				}  			}  			yield return new BlobContainerEntry {  				Attributes = container  			};  		}  		else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.ContainersElement) {  			this.allObjectsParsed = true;  			break;  		}  	}  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListContainersResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListContainersResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.UrlElement:  	string url = reader.ReadElementContentAsString ();  	containersNeedToRead = false;  	Uri.TryCreate (url' UriKind.Absolute' out uri);  	break;  case Constants.LastModifiedElement:  	lastModifiedTime = reader.ReadElementContentAsString ().ToUTCTime ();  	containersNeedToRead = false;  	break;  case Constants.EtagElement:  	etag = reader.ReadElementContentAsString ();  	containersNeedToRead = false;  	break;  case Constants.NameElement:  	name = reader.ReadElementContentAsString ();  	containersNeedToRead = false;  	break;  case Constants.MetadataElement:  	metadata = Response.ParseMetadata (reader);  	containersNeedToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListQueuesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListQueuesResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.MarkerElement:  	needToRead = false;  	this.marker = reader.ReadElementContentAsString ();  	this.markerConsumable = true;  	yield return null;  	break;  case Constants.NextMarkerElement:  	needToRead = false;  	this.nextMarker = reader.ReadElementContentAsString ();  	this.nextMarkerConsumable = true;  	yield return null;  	break;  case Constants.MaxResultsElement:  	needToRead = false;  	this.maxResults = reader.ReadElementContentAsInt ();  	this.maxResultsConsumable = true;  	yield return null;  	break;  case Constants.PrefixElement:  	needToRead = false;  	this.prefix = reader.ReadElementContentAsString ();  	this.prefixConsumable = true;  	yield return null;  	break;  case Constants.QueuesElement:  	// While we're still in the queues section.  	while (reader.Read ()) {  		// We found a queue.  		if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement && reader.Name == Constants.QueueElement) {  			QueueEntry queue = null;  			Uri uri = null;  			string name = null;  			NameValueCollection metadata = null;  			// Go until we are out of the queue.  			bool queuesNeedToRead = true;  			while (true) {  				if (queuesNeedToRead && !reader.Read ()) {  					break;  				}  				queuesNeedToRead = true;  				if (reader.NodeType == XmlNodeType.Element && !reader.IsEmptyElement) {  					switch (reader.Name) {  					case Constants.UrlElement:  						string url = reader.ReadElementContentAsString ();  						queuesNeedToRead = false;  						Uri.TryCreate (url' UriKind.Absolute' out uri);  						break;  					case Constants.QueueNameElement:  					case Constants.QueueNameElementVer2:  						name = reader.ReadElementContentAsString ();  						queuesNeedToRead = false;  						break;  					case Constants.MetadataElement:  						metadata = Response.ParseMetadata (reader);  						queuesNeedToRead = false;  						break;  					}  				}  				else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.QueueElement) {  					queue = new QueueEntry (name' new QueueAttributes () {  						Uri = uri'  						Metadata = metadata ?? (new NameValueCollection ())  					});  					break;  				}  			}  			yield return queue;  		}  		else if (reader.NodeType == XmlNodeType.EndElement && reader.Name == Constants.QueuesElement) {  			this.allObjectsParsed = true;  			break;  		}  	}  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,ListQueuesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\ListQueuesResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.UrlElement:  	string url = reader.ReadElementContentAsString ();  	queuesNeedToRead = false;  	Uri.TryCreate (url' UriKind.Absolute' out uri);  	break;  case Constants.QueueNameElement:  case Constants.QueueNameElementVer2:  	name = reader.ReadElementContentAsString ();  	queuesNeedToRead = false;  	break;  case Constants.MetadataElement:  	metadata = Response.ParseMetadata (reader);  	queuesNeedToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,PeekMessagesResponse,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\PeekMessagesResponse.cs,ParseXml,The following switch statement is missing a default case: switch (reader.Name) {  case Constants.MessageIdElement:  	id = reader.ReadElementContentAsString ();  	needToRead = false;  	break;  case Constants.InsertionTimeElement:  	insertionTime = reader.ReadElementContentAsString ().ToUTCTime ();  	needToRead = false;  	break;  case Constants.ExpirationTimeElement:  	expirationTime = reader.ReadElementContentAsString ().ToUTCTime ();  	needToRead = false;  	break;  case Constants.MessageTextElement:  	text = reader.ReadElementContentAsString ();  	needToRead = false;  	break;  case Constants.DequeueCountElement:  	dequeueCount = reader.ReadElementContentAsInt ();  	needToRead = false;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,AddConditional,The following switch statement is missing a default case: switch (header) {  case ConditionHeaderKind.IfMatch:  	request.Headers [HttpRequestHeader.IfMatch] = etag;  	break;  case ConditionHeaderKind.IfNoneMatch:  	request.Headers [HttpRequestHeader.IfNoneMatch] = etag;  	break;  }  
Missing Default,Microsoft.WindowsAzure.StorageClient.Protocol,Request,C:\repos\danhigham_NancyWebTest\microsoft-azure-api\StorageClient\Protocol\Request.cs,AddConditional,The following switch statement is missing a default case: switch (header) {  case ConditionHeaderKind.IfModifiedSince:  	request.Headers [HttpRequestHeader.IfModifiedSince] = dateTime.ToString ("R"' CultureInfo.InvariantCulture);  	break;  case ConditionHeaderKind.IfUnmodifiedSince:  	request.Headers [HttpRequestHeader.IfUnmodifiedSince] = dateTime.ToString ("R"' CultureInfo.InvariantCulture);  	break;  }  
