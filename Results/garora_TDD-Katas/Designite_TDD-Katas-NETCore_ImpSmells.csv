Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TDD_Katas_project.Common.Utility,SimpleNaturalStringOrder,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Common\Utility\SimpleNaturalStringOrder.cs,CompareTo,Cyclomatic complexity of the method is 9
Long Statement,TDD_Katas_project.Common.Utility,SimpleNaturalStringOrder,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Common\Utility\SimpleNaturalStringOrder.cs,InChar,The length of the statement  "            return (charType != CharType.Alphanumeric || !char.IsDigit(firstChar)) && (charType != CharType.Numeric || char.IsDigit(firstChar)); " is 132.
Long Statement,TDD_Katas_NETCore.FizzBuzzKata,TestFizzBuzz,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\FizzBuzzKata\TestFizzBuzz.cs,Setup,The length of the statement  "                @"1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz Fizz 22 23 Fizz Buzz 26 Fizz 28 29 FizzBuzz 31 32 Fizz 34 Buzz Fizz 37 38 Fizz Buzz 41 Fizz 43 44 FizzBuzz 46 47 Fizz 49 Buzz Fizz 52 53 Fizz Buzz 56 Fizz 58 59 FizzBuzz 61 62 Fizz 64 Buzz Fizz 67 68 Fizz Buzz 71 Fizz 73 74 FizzBuzz 76 77 Fizz 79 Buzz Fizz 82 83 Fizz Buzz 86 Fizz 88 89 FizzBuzz 91 92 Fizz 94 Buzz Fizz 97 98 Fizz Buzz"; " is 416.
Magic Number,TDD_Katas_NETCore.Bowling_Game,Game,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\Game.cs,Score,The following statement contains a magic number: frame < 10
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Setup,The following statement contains a magic number: _frames = 10;
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,RollStrike,The following statement contains a magic number: _game.Roll(10);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,RollSpare,The following statement contains a magic number: _game.Roll(5);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,RollSpare,The following statement contains a magic number: _game.Roll(5);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Full_Game_Scores,The following statement contains a magic number: FrameHits(10' 12);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Full_Game_Scores,The following statement contains a magic number: FrameHits(10' 12);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Full_Game_Scores,The following statement contains a magic number: Console.WriteLine("Roll Total - {0}' Result - {1}"' 300' _game.Score());
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Full_Game_Scores,The following statement contains a magic number: Assert.That(300' Is.EqualTo(_game.Score()));
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Spare_Scores,The following statement contains a magic number: _game.Roll(3);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Spare_Scores,The following statement contains a magic number: FrameHits(0' 17);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Spare_Scores,The following statement contains a magic number: Console.WriteLine("Roll Total - {0}' Result - {1}"' 16' _game.Score());
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Spare_Scores,The following statement contains a magic number: Assert.That(16' Is.EqualTo(_game.Score()));
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Strike_Scores,The following statement contains a magic number: _game.Roll(3);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Strike_Scores,The following statement contains a magic number: _game.Roll(4);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Strike_Scores,The following statement contains a magic number: FrameHits(0' 16);
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Strike_Scores,The following statement contains a magic number: Console.WriteLine("Roll Total - {0}' Result - {1}"' 24' _game.Score());
Magic Number,TDD_Katas_NETCore.Bowling_Game,TestGame,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\Bowling Game\TestGame.cs,Can_Get_Calculate_Strike_Scores,The following statement contains a magic number: Assert.That(24' Is.EqualTo(_game.Score()));
Magic Number,TDD_Katas_NETCore.FizzBuzzKata,FizzBuzz,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\FizzBuzzKata\FizzBuzz.cs,CanThrowArgumentExceptionWhenNumberNotInRule,The following statement contains a magic number: number > 100 || number < 1
Magic Number,TDD_Katas_NETCore.FizzBuzzKata,FizzBuzz,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\FizzBuzzKata\FizzBuzz.cs,GetNumbers,The following statement contains a magic number: i <= 100
Magic Number,TDD_Katas_NETCore.FizzBuzzKata,FizzBuzz,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\FizzBuzzKata\FizzBuzz.cs,GetNumbersUsingLinq,The following statement contains a magic number: Enumerable.Range(1' 100)                  .Select(fb => string.Format("{0}{1}"' fb % 3 == 0 ? "Fizz" : ""' fb % 5 == 0 ? "Buzz" : ""))                  .Select(fb =>                      fb != null ? (string.IsNullOrEmpty(fb) ? fb.ToString(CultureInfo.InvariantCulture) : fb) : null)                  .ToList()                  .ForEach(x => resultFizzBuzz = x);
Magic Number,TDD_Katas_NETCore.FizzBuzzKata,FizzBuzz,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\FizzBuzzKata\FizzBuzz.cs,GetNumbersUsingLinq,The following statement contains a magic number: Enumerable.Range(1' 100)                  .Select(fb => string.Format("{0}{1}"' fb % 3 == 0 ? "Fizz" : ""' fb % 5 == 0 ? "Buzz" : ""))                  .Select(fb =>                      fb != null ? (string.IsNullOrEmpty(fb) ? fb.ToString(CultureInfo.InvariantCulture) : fb) : null)                  .ToList()                  .ForEach(x => resultFizzBuzz = x);
Magic Number,TDD_Katas_NETCore.FizzBuzzKata,FizzBuzz,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\FizzBuzzKata\FizzBuzz.cs,GetNumbersUsingLinq,The following statement contains a magic number: Enumerable.Range(1' 100)                  .Select(fb => string.Format("{0}{1}"' fb % 3 == 0 ? "Fizz" : ""' fb % 5 == 0 ? "Buzz" : ""))                  .Select(fb =>                      fb != null ? (string.IsNullOrEmpty(fb) ? fb.ToString(CultureInfo.InvariantCulture) : fb) : null)                  .ToList()                  .ForEach(x => resultFizzBuzz = x);
Magic Number,TDD_Katas_NETCore.LCDDigits,TestLCDDigits,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\LCDDigits\TestLCDDigits.cs,Digit_the_number_10,The following statement contains a magic number: Assert.That(LCDDigits.GetDigits(10)' Is.EqualTo(expect));
Magic Number,TDD_Katas_NETCore.LCDDigits,TestLCDDigits,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\LCDDigits\TestLCDDigits.cs,Digit_the_number_100,The following statement contains a magic number: Assert.That(LCDDigits.GetDigits(100)' Is.EqualTo(expect));
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_three_by_three_field_and_three_of_mine,The following statement contains a magic number: fields.Create(3' 3);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_three_by_three_field_and_three_of_mine,The following statement contains a magic number: fields.Create(3' 3);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_three_by_three_field_and_three_of_mine,The following statement contains a magic number: fields.Mine(1' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_three_by_three_field_and_two_of_mine,The following statement contains a magic number: fields.Create(3' 3);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_three_by_three_field_and_two_of_mine,The following statement contains a magic number: fields.Create(3' 3);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_four_of_mine,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_four_of_mine,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_bottomleftcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_bottomleftcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_bottomrightcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_bottomrightcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_topleftcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_topleftcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_toprightcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_one_of_mine_toprightcorner,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_three_of_mine,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_three_of_mine,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_two_of_mine,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.MineFields,TestMineFields,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\MineFields\TestMineFields.cs,Build_two_by_two_field_and_two_of_mine,The following statement contains a magic number: fields.Create(2' 2);
Magic Number,TDD_Katas_NETCore.OddEvenKata,OddEven,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\OddEvenKata\OddEven.cs,IsPrimeNumber,The following statement contains a magic number: number < 2
Magic Number,TDD_Katas_NETCore.OddEvenKata,OddEven,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\OddEvenKata\OddEven.cs,IsPrimeNumber,The following statement contains a magic number: var divisble = 3;
Magic Number,TDD_Katas_NETCore.OddEvenKata,OddEven,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\OddEvenKata\OddEven.cs,IsPrimeNumber,The following statement contains a magic number: divisble += 2;
Magic Number,TDD_Katas_NETCore.PasswordVerifier,PasswordVerifier,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\PasswordVerifier\PasswordVerifier.cs,Verify,The following statement contains a magic number: return IsPasswordPassedLengthRule(password' 8);
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMaximumValue,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanFindMinumValue,The following statement contains a magic number: Assert.That("-2"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Minimum)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetAverageOfSeries,The following statement contains a magic number: Assert.That("13.1"'                  Is.EqualTo(                      CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)' CalcStat.CalcStatKeys.Average)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheCalcStatsKata,CalcStatTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStatTest.cs,CanGetElementCount,The following statement contains a magic number: Assert.That("10"'                  Is.EqualTo(CalcStat.NumberStats(List(1' -1' 2' -2' 6' 9' 15' -2' 92' 11)'                      CalcStat.CalcStatKeys.ElementCount)));
Magic Number,TDD_Katas_NETCore.TheLeapYearKata,LeapYearTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheLeapYearKata\LeapYearTest.cs,CanTestForLeapYear,The following statement contains a magic number: Assert.That(true' Is.EqualTo(LeapYear.IsLeapYear(1996)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,Tesfour,The following statement contains a magic number: Assert.That(List(2' 2)' Is.EqualTo(PrimeFactor.Generate(4)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,Tesfour,The following statement contains a magic number: Assert.That(List(2' 2)' Is.EqualTo(PrimeFactor.Generate(4)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,Tesfour,The following statement contains a magic number: Assert.That(List(2' 2)' Is.EqualTo(PrimeFactor.Generate(4)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestEight,The following statement contains a magic number: Assert.That(List(2' 2' 2)' Is.EqualTo(PrimeFactor.Generate(8)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestEight,The following statement contains a magic number: Assert.That(List(2' 2' 2)' Is.EqualTo(PrimeFactor.Generate(8)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestEight,The following statement contains a magic number: Assert.That(List(2' 2' 2)' Is.EqualTo(PrimeFactor.Generate(8)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestEight,The following statement contains a magic number: Assert.That(List(2' 2' 2)' Is.EqualTo(PrimeFactor.Generate(8)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,Testhree,The following statement contains a magic number: Assert.That(List(3)' Is.EqualTo(PrimeFactor.Generate(3)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,Testhree,The following statement contains a magic number: Assert.That(List(3)' Is.EqualTo(PrimeFactor.Generate(3)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestNine,The following statement contains a magic number: Assert.That(List(3' 3)' Is.EqualTo(PrimeFactor.Generate(9)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestNine,The following statement contains a magic number: Assert.That(List(3' 3)' Is.EqualTo(PrimeFactor.Generate(9)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestNine,The following statement contains a magic number: Assert.That(List(3' 3)' Is.EqualTo(PrimeFactor.Generate(9)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestSix,The following statement contains a magic number: Assert.That(List(2' 3)' Is.EqualTo(PrimeFactor.Generate(6)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestSix,The following statement contains a magic number: Assert.That(List(2' 3)' Is.EqualTo(PrimeFactor.Generate(6)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,TestSix,The following statement contains a magic number: Assert.That(List(2' 3)' Is.EqualTo(PrimeFactor.Generate(6)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,Testwo,The following statement contains a magic number: Assert.That(List(2)' Is.EqualTo(PrimeFactor.Generate(2)));
Magic Number,TDD_Katas_NETCore.ThePrimeFactorKata,PrimeFactorTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\ThePrimeFactorKata\PrimeFactorTest.cs,Testwo,The following statement contains a magic number: Assert.That(List(2)' Is.EqualTo(PrimeFactor.Generate(2)));
Magic Number,TDD_Katas_NETCore.TheRecentlyUsedList_kata,RecentlyUsedListTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheRecentlyUsedList kata\RecentlyUsedListTest.cs,Setup,The following statement contains a magic number: _size = 10;
Magic Number,TDD_Katas_NETCore.TheRecentlyUsedList_kata,RecentlyUsedListTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheRecentlyUsedList kata\RecentlyUsedListTest.cs,CanTestDefaultListSize,The following statement contains a magic number: const int expectedlistSize = 5;
Magic Number,TDD_Katas_NETCore.TheRecentlyUsedList_kata,RecentlyUsedListTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheRecentlyUsedList kata\RecentlyUsedListTest.cs,CanTestItemByIndex,The following statement contains a magic number: var actuallistitem = _recentlyUsedList.GetListItem(3);
Magic Number,TDD_Katas_NETCore.TheRecentlyUsedList_kata,RecentlyUsedListTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheRecentlyUsedList kata\RecentlyUsedListTest.cs,CanThrowArgumentExceptionWhenSuppliedIndexIsOutOfScope,The following statement contains a magic number: const int index = 5;
Magic Number,TDD_Katas_NETCore.TheWordWrapKata,WordWrapTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheWordWrapKata\WordWrapTest.cs,CanWrapSingleLine,The following statement contains a magic number: Assert.That("Let's\nGo"' Is.EqualTo(WordWrap.Wrap("Let's  Go"' 5)));
Magic Number,TDD_Katas_NETCore.TheWordWrapKata,WordWrapTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheWordWrapKata\WordWrapTest.cs,CanTestForNullWord,The following statement contains a magic number: Assert.That(""' Is.EqualTo(WordWrap.Wrap(null' 5)));
Magic Number,TDD_Katas_NETCore.TheWordWrapKata,WordWrapTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheWordWrapKata\WordWrapTest.cs,CanTestForNullOrWhiteSpacesWord,The following statement contains a magic number: Assert.That(""' Is.EqualTo(WordWrap.Wrap(null' 5)));
Magic Number,TDD_Katas_NETCore.TheWordWrapKata,WordWrapTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheWordWrapKata\WordWrapTest.cs,CanTestForNullOrWhiteSpacesWord,The following statement contains a magic number: Assert.That(""' Is.EqualTo(WordWrap.Wrap(" "' 5)));
Magic Number,TDD_Katas_NETCore.TheWordWrapKata,WordWrapTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheWordWrapKata\WordWrapTest.cs,CanTestNewLineCharacter,The following statement contains a magic number: Assert.That("\nLet's\nGo\noutside."' Is.EqualTo(WordWrap.Wrap("\nLet's Go\noutside."' 5)));
Magic Number,TDD_Katas_NETCore.TheWordWrapKata,WordWrapTest,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheWordWrapKata\WordWrapTest.cs,CanWrapMultipleLine,The following statement contains a magic number: var actualresult = (WordWrap.Wrap(inputword' 5));
Missing Default,TDD_Katas_NETCore.TheCalcStatsKata,CalcStat,D:\research\architectureSmells\repos\garora_TDD-Katas\Src\CSharp\Net Core\TheCalcStatsKata\CalcStat.cs,NumberStats,The following switch statement is missing a default case: switch (keys)              {                  case CalcStatKeys.Minimum:                      return GetMinimumValue(numbers);                  case CalcStatKeys.Maximum:                      return GetMaximumValue(numbers);                  case CalcStatKeys.ElementCount:                      return GetElementCount(numbers);                  case CalcStatKeys.Average:                      return GetSeriesAverage(numbers);              }
