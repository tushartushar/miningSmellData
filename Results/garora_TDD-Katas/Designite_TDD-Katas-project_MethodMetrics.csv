Method,LOC,CC,PC
Game:Roll,3,1,1
Game:Score,17,4,0
Game:IsStrike,3,1,1
Game:SumOfBallsInFrames,3,1,1
Game:SpareBonus,3,1,1
Game:IsSpare,3,1,1
Game:StrikeBonus,3,1,1
TestGame:Setup,4,1,0
TestGame:TearDown,4,1,0
TestGame:Can_Get_Calculate_Single_Scores,5,1,0
TestGame:Can_Get_Calculate_Spare_Scores,7,1,0
TestGame:Can_Get_Calculate_Strike_Scores,8,1,0
TestGame:Can_Get_Calculate_Scores,4,1,0
TestGame:Can_Get_Calculate_Full_Game_Scores,5,1,0
TestGame:RollStrike,3,1,0
TestGame:FrameHits,5,2,2
TestGame:RollSpare,4,1,0
EnumerableComparer:EnumerableComparer,3,1,0
EnumerableComparer:EnumerableComparer,3,1,1
EnumerableComparer:Compare,18,5,2
SimpleNaturalStringOrder:ToString,3,1,0
SimpleNaturalStringOrder:Equals,5,1,1
SimpleNaturalStringOrder:GetHashCode,3,1,0
SimpleNaturalStringOrder:Dispose,4,1,0
SimpleNaturalStringOrder:Dispose,5,2,1
SimpleNaturalStringOrder:CompareTo,39,9,1
SimpleNaturalStringOrder:InChar,6,2,2
SimpleNaturalStringOrder:StringChecks,9,3,4
FizzBuzz:PrintFizzBuzz,5,1,0
FizzBuzz:PrintFizzBuzz,9,3,1
FizzBuzz:GetFizzBuzzResult,6,2,1
FizzBuzz:GetBuzzResult,6,2,1
FizzBuzz:GetFizzResult,6,2,1
FizzBuzz:CanThrowArgumentExceptionWhenNumberNotInRule,4,2,1
FizzBuzz:GetNumbers,13,5,1
FizzBuzz:GetNumbersUsingLinq,4,1,1
FizzBuzz:IsNumber,3,1,1
FizzBuzz:IsBuzz,3,1,1
FizzBuzz:IsFizz,3,1,1
TestFizzBuzz:Setup,3,1,0
TestFizzBuzz:TearDown,3,1,0
TestFizzBuzz:CanTestFizz,4,1,0
TestFizzBuzz:CanThrowArgumentExceptionWhenSuppliedNumberDoesNotMeetRule,4,1,1
TestFizzBuzz:CanTestSingleNumber,4,1,2
FizzBuzzRx:Generate,14,2,1
TestFizzBuzzRx:GivenNumberBelowOne_ReturnEmptyString,4,1,0
TestFizzBuzzRx:GivenNumberUpTo2_ReturnNumbersCommaDelimited,3,1,1
TestFizzBuzzRx:GivenNumberDividedBy_ReturnFizzInstead,3,1,1
TestFizzBuzzRx:GivenNumberDividedBy5_ReturnBuzzInstead,3,1,1
TestFizzBuzzRx:GivenNumberDividedBy3And5_ReturnFizzBuzzInstead,4,1,0
LCDDigits:getDigits,11,3,1
LCDDigits:convertCharArrayToInteger,3,1,2
LCDDigits:GetDigitLine,3,1,2
LCDDigits:convertIntegerToArray,3,1,1
TestLCDDigits:digit_the_number_0,4,1,0
TestLCDDigits:digit_the_number_1,4,1,0
TestLCDDigits:digit_the_number_10,4,1,0
TestLCDDigits:digit_the_number_100,4,1,0
MineFields:create,3,1,2
MineFields:getHint,3,1,2
MineFields:mine,4,1,2
MineFields:layMine,3,1,2
MineFields:updateHint,10,1,2
MineFields:updateHintAtBottomLeftCorner,4,2,2
MineFields:updateHintAtTopRightCorner,4,2,2
MineFields:updateHintAtTopLeftCorner,4,2,2
MineFields:updateHintAtBottomRightCorner,4,2,2
MineFields:updateHintAtTop,4,2,2
MineFields:updateHintAtBottom,4,2,2
MineFields:updateHintAtLeft,4,2,2
MineFields:updateHintAtRight,4,2,2
MineFields:isNotMine,3,1,2
MineFields:checkMaxWidth,3,1,1
MineFields:checkMinWidth,3,1,1
MineFields:checkMaxHeight,3,1,1
MineFields:checkMinHeight,3,1,1
TestMineFields:build_field_size_of_one_by_one_and_zero_mine,5,1,0
TestMineFields:build_field_size_of_one_by_one_and_one_mine,6,1,0
TestMineFields:build_two_by_two_field_and_one_of_mine_topleftcorner,6,1,3
TestMineFields:build_two_by_two_field_and_one_of_mine_bottomrightcorner,6,1,3
TestMineFields:build_two_by_two_field_and_one_of_mine_bottomleftcorner,6,1,3
TestMineFields:build_two_by_two_field_and_one_of_mine_toprightcorner,6,1,3
TestMineFields:build_two_by_two_field_and_two_of_mine,7,1,3
TestMineFields:build_two_by_two_field_and_three_of_mine,8,1,3
TestMineFields:build_two_by_two_field_and_four_of_mine,9,1,3
TestMineFields:build_three_by_three_field_and_two_of_mine,7,1,3
TestMineFields:build_three_by_three_field_and_three_of_mine,8,1,3
OddEven:PrintOddEven,3,1,2
OddEven:PrintSingleOddEven,3,1,1
OddEven:CheckSingleNumberOddEvenPrimeResult,5,1,1
OddEven:GetOddEvenWithinRange,6,3,2
OddEven:CheckSingleNumberOddEvenPrimeResult,11,2,2
OddEven:IsEvenNumber,3,1,1
OddEven:IsOddNumber,3,1,1
OddEven:IsPrimeNumber,13,2,1
TestOddEven:CanPrintOddEven,4,1,2
TestOddEven:CanPrintOddEvenForSingleNumber,4,1,2
Calculator:Add,3,1,1
Calculator:GetSum,10,2,1
Calculator:HasSpecificDelimiter,3,1,1
Calculator:GetPossibleDelimiter,3,1,1
Calculator:GetSpecificDelimiter,3,1,1
Calculator:GetSpecificNumbers,3,1,1
Calculator:ParseToInt,5,1,1
Calculator:IsGreaterThanThousand,3,1,1
Calculator:ContainsAny,3,1,2
Calculator:VelidateNumbersArePerRule,4,2,1
TestCalculator:AddReturnZeroWhenSuppliedEmptyOrNullString,4,1,1
TestCalculator:AddReturnNumberWhenSuppliedSingleNumberInString,4,1,2
TestCalculator:AddReturSumWhenSuppliedNumbersInStringWithNewLineAsDelimiter,4,1,2
TestCalculator:AddReturnSumWhenSuppliedMultipleNumbersInString,4,1,2
TestCalculator:AddReturnSumByIgnoringMoreThanThousandWhenSuppliedMultipleNumbersInString,4,1,2
TestCalculator:AddWhenGivenDefinedDelimiterUsesThatDelimiter,4,1,2
TestCalculator:AddThrowArgumentExceptionWhenSuppliedStringDoesNotMeetRule,4,1,2
StringSumKata:Sum,5,1,2
StringSumKata:GetZeroWhenNullOrEmpty,3,1,1
StringSumKata:Add,3,1,2
TestStringSumKata:AddReturnSum,4,1,3
CalcStat:NumberStats,13,4,2
CalcStat:GetMinimumValue,3,1,1
CalcStat:GetMaximumValue,3,1,1
CalcStat:GetElementCount,3,1,1
CalcStat:GetSeriesAverage,3,1,1
CalcStatTest:List,3,1,1
CalcStatTest:CanFindMinumValue,3,1,0
CalcStatTest:CanFindMaximumValue,3,1,0
CalcStatTest:CanGetElementCount,3,1,0
CalcStatTest:CanGetAverageOfSeries,3,1,0
TestDiversion:Setup,3,1,0
TestDiversion:TearDown,3,1,0
TestGameOfLife:Setup,3,1,0
TestGameOfLife:TearDown,3,1,0
TestHarryPoter:Setup,3,1,0
TestHarryPoter:TearDown,3,1,0
LeapYear:IsLeapYear,3,1,1
LeapYearTest:CanTestForLeapYear,3,1,0
LeapYearTest:CanTestForLeapYears,3,1,2
NaturalStringSorting:SortString,3,1,1
NaturalStringSorting:SortString,10,1,2
NaturalStringSorting:GetSortedList,12,6,3
NaturalStringSortingTest:Setup,17,1,0
NaturalStringSortingTest:TearDown,4,1,0
NaturalStringSortingTest:CanSortStringDefaultOrder,18,1,0
NaturalStringSortingTest:CanSortStringDesOrder,18,1,0
NaturalStringSortingTest:ToList,3,1,1
PrimeFactor:Generate,7,5,1
PrimeFactorTest:List,3,1,1
PrimeFactorTest:Testone,3,1,0
PrimeFactorTest:Testwo,3,1,0
PrimeFactorTest:Testhree,3,1,0
PrimeFactorTest:Tesfour,3,1,0
PrimeFactorTest:TestSix,3,1,0
PrimeFactorTest:TestEight,3,1,0
PrimeFactorTest:TestNine,3,1,0
RecentlyUsedList:RecentlyUsedList,4,1,0
RecentlyUsedList:RecentlyUsedList,4,1,1
RecentlyUsedList:RecentlyUsedList,4,1,1
RecentlyUsedList:RecentlyUsedList,5,1,2
RecentlyUsedList:Add,7,2,1
RecentlyUsedList:GetListItem,4,1,1
RecentlyUsedList:ToList,3,1,0
RecentlyUsedList:GetEnumerator,3,1,0
RecentlyUsedList:GetEnumerator,3,1,0
RecentlyUsedList:SetDefaultListSize,3,1,0
RecentlyUsedList:CheckForValidIndex,6,3,1
RecentlyUsedList:AvoidDuplicateInsertion,5,2,1
RecentlyUsedList:TrimListToTheSizeDefined,6,2,0
RecentlyUsedListTest:Setup,4,1,0
RecentlyUsedListTest:TearDown,4,1,0
RecentlyUsedListTest:CanAddItems,5,1,0
RecentlyUsedListTest:CanAddUniqueItems,11,1,0
RecentlyUsedListTest:CanAddItemsInLifoOrder,10,1,0
RecentlyUsedListTest:CanAvoidInsertionOfItemsAreBeyondListSize,15,1,0
RecentlyUsedListTest:CanTestItemByIndex,10,1,0
RecentlyUsedListTest:CanTestDefaultListSize,5,1,0
RecentlyUsedListTest:CanThrowArgumentExceptionWhenSuppliedIndexIsOutOfScope,10,1,0
RecentlyUsedListTest:CanThrowArgumentExceptionWhenSuppliedIndexContainNegativeValue,10,1,0
RecentlyUsedListTest:CanThrowArgumentExceptionWhenSuppliedItemIsNullorEmpty,8,2,0
RecentlyUsedListTest:CanDefineListSize,4,1,0
RecentlyUsedListTest:ToList,3,1,1
WordWrap:Wrap,20,5,2
WordWrap:GetWrappedwordWithoutBlankSpacesAtStartOfNewLine,19,6,1
WordWrap:RemoveWhiteSpacesFromWrappedWord,3,1,3
WordWrap:IsContainNewLine,3,1,1
WordWrap:IsContainNullEmptyOrWhiteSpaces,3,1,1
WordWrap:IsWhiteSpaceOrNewLine,3,1,1
WordWrapTest:CanWrapSingleLine,3,1,0
WordWrapTest:CanTestForNullWord,3,1,0
WordWrapTest:CanTestForNullOrWhiteSpacesWord,4,1,0
WordWrapTest:CanTestNewLineCharacter,4,1,0
WordWrapTest:CanWrapMultipleLine,6,1,0
