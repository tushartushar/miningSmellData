Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UsbLibrary,UsbHidPort,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\UsbHidPort.cs,ParseMessages,Cyclomatic complexity of the method is 9
Long Parameter List,UsbLibrary,Win32Usb,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\Win32Usb.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,UsbLibrary,Win32Usb,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\Win32Usb.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,UsbLibrary,Win32Usb,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\Win32Usb.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,UsbLibrary,Win32Usb,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\Win32Usb.cs,CreateFile,The method has 7 parameters.
Long Identifier,UsbLibrary,Win32Usb,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\Win32Usb.cs,SetupDiGetDeviceInterfaceDetail,The length of the parameter nDeviceInterfaceDetailDataSize is 30.
Long Identifier,UsbLibrary,Win32Usb,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\Win32Usb.cs,SetupDiGetDeviceInterfaceDetail,The length of the parameter nDeviceInterfaceDetailDataSize is 30.
Long Statement,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Initialise,The length of the statement  "	m_hHandle = CreateFile (strPath' GENERIC_READ | GENERIC_WRITE' 0' IntPtr.Zero' OPEN_EXISTING' FILE_FLAG_OVERLAPPED' IntPtr.Zero); " is 129.
Long Statement,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Initialise,The length of the statement  "				m_oFile = new FileStream (new SafeFileHandle (m_hHandle' false)' FileAccess.Read | FileAccess.Write' m_nInputReportLength' true); " is 129.
Long Statement,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,ReadCompleted,The length of the statement  "			// and set the data portion - this processes the data received into a more easily understood format depending upon the report type " is 130.
Long Statement,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The length of the statement  "		//oDetail.Size = 5;	// hardcoded to 5! Sorry' but this works and trying more future proof versions by setting the size to the struct sizeof failed miserably. If you manage to sort it' mail me! Thx " is 196.
Long Statement,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The length of the statement  "		if (SetupDiGetDeviceInterfaceDetail (hInfoSet' ref oInterface' ref oDetail' nRequiredSize' ref nRequiredSize' IntPtr.Zero)) { " is 125.
Long Statement,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,FindDevice,The length of the statement  "		while (SetupDiEnumDeviceInterfaces (hInfoSet' 0' ref gHid' (uint)nIndex' ref oInterface))// this gets the device interface information for a device at index 'nIndex' in the memory block " is 185.
Long Statement,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,FindDevice,The length of the statement  "			if (strDevicePath.IndexOf (strSearch) >= 0)// do a string search' if we find the VID/PID string then we found our device! " is 121.
Empty Catch Block,UsbLibrary,SpecifiedDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\SpecifiedDevice.cs,SendData,The method has an empty catch block.
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Initialise,The following statement contains a magic number: if (m_hHandle != InvalidHandleValue || m_hHandle == null)// if the open worked...   {  	IntPtr lpData;  	if (HidD_GetPreparsedData (m_hHandle' out lpData))// get windows to read the device data into an internal buffer  	 {  		try {  			HidCaps oCaps;  			HidP_GetCaps (lpData' out oCaps);  			// extract the device capabilities from the internal buffer  			m_nInputReportLength = oCaps.InputReportByteLength;  			// get the input...  			m_nOutputReportLength = 2;  			//oCaps.OutputReportByteLength;	// ... and output report lengths  			//m_oFile = new FileStream(m_hHandle' FileAccess.Read | FileAccess.Write' true' m_nInputReportLength' true);  			m_oFile = new FileStream (new SafeFileHandle (m_hHandle' false)' FileAccess.Read | FileAccess.Write' m_nInputReportLength' true);  			BeginAsyncRead ();  			// kick off the first asynchronous read                                		}  		catch (Exception ex) {  			throw HIDDeviceException.GenerateWithWinError ("Failed to get the detailed data from the hid.");  		}  		finally {  			HidD_FreePreparsedData (ref lpData);  			// before we quit the funtion' we must free the internal buffer reserved in GetPreparsedData  		}  	}  	else// GetPreparsedData failed? Chuck an exception  	 {  		throw HIDDeviceException.GenerateWithWinError ("GetPreparsedData failed");  	}  }  else// File open failed? Chuck an exception   {  	int err = Marshal.GetLastWin32Error ();  	m_hHandle = IntPtr.Zero;  	throw HIDDeviceException.GenerateWithWinError ("Failed to create device file");  }  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Initialise,The following statement contains a magic number: if (HidD_GetPreparsedData (m_hHandle' out lpData))// get windows to read the device data into an internal buffer   {  	try {  		HidCaps oCaps;  		HidP_GetCaps (lpData' out oCaps);  		// extract the device capabilities from the internal buffer  		m_nInputReportLength = oCaps.InputReportByteLength;  		// get the input...  		m_nOutputReportLength = 2;  		//oCaps.OutputReportByteLength;	// ... and output report lengths  		//m_oFile = new FileStream(m_hHandle' FileAccess.Read | FileAccess.Write' true' m_nInputReportLength' true);  		m_oFile = new FileStream (new SafeFileHandle (m_hHandle' false)' FileAccess.Read | FileAccess.Write' m_nInputReportLength' true);  		BeginAsyncRead ();  		// kick off the first asynchronous read                                	}  	catch (Exception ex) {  		throw HIDDeviceException.GenerateWithWinError ("Failed to get the detailed data from the hid.");  	}  	finally {  		HidD_FreePreparsedData (ref lpData);  		// before we quit the funtion' we must free the internal buffer reserved in GetPreparsedData  	}  }  else// GetPreparsedData failed? Chuck an exception   {  	throw HIDDeviceException.GenerateWithWinError ("GetPreparsedData failed");  }  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Initialise,The following statement contains a magic number: try {  	HidCaps oCaps;  	HidP_GetCaps (lpData' out oCaps);  	// extract the device capabilities from the internal buffer  	m_nInputReportLength = oCaps.InputReportByteLength;  	// get the input...  	m_nOutputReportLength = 2;  	//oCaps.OutputReportByteLength;	// ... and output report lengths  	//m_oFile = new FileStream(m_hHandle' FileAccess.Read | FileAccess.Write' true' m_nInputReportLength' true);  	m_oFile = new FileStream (new SafeFileHandle (m_hHandle' false)' FileAccess.Read | FileAccess.Write' m_nInputReportLength' true);  	BeginAsyncRead ();  	// kick off the first asynchronous read                                }  catch (Exception ex) {  	throw HIDDeviceException.GenerateWithWinError ("Failed to get the detailed data from the hid.");  }  finally {  	HidD_FreePreparsedData (ref lpData);  	// before we quit the funtion' we must free the internal buffer reserved in GetPreparsedData  }  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Initialise,The following statement contains a magic number: m_nOutputReportLength = 2;  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Write,The following statement contains a magic number: try {  	//m_oFile.Write(oOutRep.Buffer' 0' (int)oOutRep.BufferLength);  	oOutRep.Buffer [0] = 1;  	m_oFile.Write (oOutRep.Buffer' 0' 2);  }  catch (IOException ex) {  	//Console.WriteLine(ex.ToString());  	// The device was removed!  	throw new HIDDeviceException ("Probbaly the device was removed");  }  catch (Exception exx) {  	Console.WriteLine (exx.ToString ());  }  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,Write,The following statement contains a magic number: m_oFile.Write (oOutRep.Buffer' 0' 2);  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: if (!SetupDiGetDeviceInterfaceDetail (hInfoSet' ref oInterface' IntPtr.Zero' 0' ref nRequiredSize' IntPtr.Zero)) {  	DeviceInterfaceDetailData oDetail = new DeviceInterfaceDetailData ();  	if (IntPtr.Size == 8)  		oDetail.Size = 8;  	else  		oDetail.Size = 5;  	//oDetail.Size = 5;	// hardcoded to 5! Sorry' but this works and trying more future proof versions by setting the size to the struct sizeof failed miserably. If you manage to sort it' mail me! Thx  	if (SetupDiGetDeviceInterfaceDetail (hInfoSet' ref oInterface' ref oDetail' nRequiredSize' ref nRequiredSize' IntPtr.Zero)) {  		return oDetail.DevicePath;  	}  	int err = Marshal.GetLastWin32Error ();  }  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: if (!SetupDiGetDeviceInterfaceDetail (hInfoSet' ref oInterface' IntPtr.Zero' 0' ref nRequiredSize' IntPtr.Zero)) {  	DeviceInterfaceDetailData oDetail = new DeviceInterfaceDetailData ();  	if (IntPtr.Size == 8)  		oDetail.Size = 8;  	else  		oDetail.Size = 5;  	//oDetail.Size = 5;	// hardcoded to 5! Sorry' but this works and trying more future proof versions by setting the size to the struct sizeof failed miserably. If you manage to sort it' mail me! Thx  	if (SetupDiGetDeviceInterfaceDetail (hInfoSet' ref oInterface' ref oDetail' nRequiredSize' ref nRequiredSize' IntPtr.Zero)) {  		return oDetail.DevicePath;  	}  	int err = Marshal.GetLastWin32Error ();  }  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: if (!SetupDiGetDeviceInterfaceDetail (hInfoSet' ref oInterface' IntPtr.Zero' 0' ref nRequiredSize' IntPtr.Zero)) {  	DeviceInterfaceDetailData oDetail = new DeviceInterfaceDetailData ();  	if (IntPtr.Size == 8)  		oDetail.Size = 8;  	else  		oDetail.Size = 5;  	//oDetail.Size = 5;	// hardcoded to 5! Sorry' but this works and trying more future proof versions by setting the size to the struct sizeof failed miserably. If you manage to sort it' mail me! Thx  	if (SetupDiGetDeviceInterfaceDetail (hInfoSet' ref oInterface' ref oDetail' nRequiredSize' ref nRequiredSize' IntPtr.Zero)) {  		return oDetail.DevicePath;  	}  	int err = Marshal.GetLastWin32Error ();  }  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: if (IntPtr.Size == 8)  	oDetail.Size = 8;  else  	oDetail.Size = 5;  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: if (IntPtr.Size == 8)  	oDetail.Size = 8;  else  	oDetail.Size = 5;  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: if (IntPtr.Size == 8)  	oDetail.Size = 8;  else  	oDetail.Size = 5;  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: oDetail.Size = 8;  
Magic Number,UsbLibrary,HIDDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\HIDDevice.cs,GetDevicePath,The following statement contains a magic number: oDetail.Size = 5;  
Magic Number,UsbLibrary,SpecifiedDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\SpecifiedDevice.cs,SendData,The following statement contains a magic number: while (count > 0) {  	byte[] mdata = new byte[2];  	int byteToWrite = Math.Min (count' 2);  	Array.Copy (data' index' mdata' 0' byteToWrite);  	index += byteToWrite;  	count -= byteToWrite;  	SpecifiedOutputReport oRep = new SpecifiedOutputReport (this);  	// create output report  	oRep.SendData (mdata);  	// set the lights states  	try {  		Write (oRep);  		// write the output report  		if (DataSend != null) {  			DataSend (this' new DataSendEventArgs (data));  		}  	}  	catch (HIDDeviceException ex) {  		// Device may have been removed!  	}  	catch (Exception ex) {  		Console.WriteLine (ex.ToString ());  	}  }  
Magic Number,UsbLibrary,SpecifiedDevice,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\SpecifiedDevice.cs,SendData,The following statement contains a magic number: while (count > 0) {  	byte[] mdata = new byte[2];  	int byteToWrite = Math.Min (count' 2);  	Array.Copy (data' index' mdata' 0' byteToWrite);  	index += byteToWrite;  	count -= byteToWrite;  	SpecifiedOutputReport oRep = new SpecifiedOutputReport (this);  	// create output report  	oRep.SendData (mdata);  	// set the lights states  	try {  		Write (oRep);  		// write the output report  		if (DataSend != null) {  			DataSend (this' new DataSendEventArgs (data));  		}  	}  	catch (HIDDeviceException ex) {  		// Device may have been removed!  	}  	catch (Exception ex) {  		Console.WriteLine (ex.ToString ());  	}  }  
Missing Default,UsbLibrary,UsbHidPort,C:\repos\sparkie79_UavObject-.Net-Parser\UsbLibrary\UsbHidPort.cs,ParseMessages,The following switch statement is missing a default case: switch (m.WParam.ToInt32 ()) // Check the W parameter to see if a device was inserted or removed  {  case Win32Usb.DEVICE_ARRIVAL:  	// inserted  	if (OnDeviceArrived != null) {  		OnDeviceArrived (this' new EventArgs ());  		CheckDevicePresent ();  	}  	break;  case Win32Usb.DEVICE_REMOVECOMPLETE:  	// removed  	if (OnDeviceRemoved != null) {  		OnDeviceRemoved (this' new EventArgs ());  		CheckDevicePresent ();  	}  	break;  }  
