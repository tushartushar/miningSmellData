Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,CreateFile,The method has 7 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,ReadFile,The method has 5 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,CreateFile,The method has 7 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,ReadFile,The method has 5 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,WriteFile,The method has 5 parameters.
Long Parameter List,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,CT_WriteFile,The method has 5 parameters.
Long Identifier,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,SetupDiGetDeviceInterfaceDetail,The length of the parameter myPSP_DEVICE_INTERFACE_DETAIL_DATA is 34.
Long Statement,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,CT_SetupDiGetDeviceInterfaceDetailx,The length of the statement  "	// !! Cannot take the address or size of a variable of a managed type ('USBSharp.USBSharp.PSP_DEVICE_INTERFACE_DETAIL_DATA') " is 124.
Long Statement,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,CT_CreateFile,The length of the statement  "	HidHandle = CreateFile (DeviceName' GENERIC_READ | GENERIC_WRITE' FILE_SHARE_READ | FILE_SHARE_WRITE' 0' OPEN_EXISTING' 0' 0); " is 126.
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: while (bytePos <= byteCount - 1) {  	if (bytePos > 0) {  		Thread.Sleep (5);  	}  	Byte[] transfByte = new byte[64];  	for (int u = 0; u < 64; u++) {  		if (bytePos < byteCount) {  			transfByte [u] = bytes [bytePos];  			bytePos++;  		}  		else {  			transfByte [u] = 0;  		}  	}  	//send the report  	if (!this.usbdevice.writeData (transfByte)) {  		success = false;  	}  	Thread.Sleep (5);  }  
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: while (bytePos <= byteCount - 1) {  	if (bytePos > 0) {  		Thread.Sleep (5);  	}  	Byte[] transfByte = new byte[64];  	for (int u = 0; u < 64; u++) {  		if (bytePos < byteCount) {  			transfByte [u] = bytes [bytePos];  			bytePos++;  		}  		else {  			transfByte [u] = 0;  		}  	}  	//send the report  	if (!this.usbdevice.writeData (transfByte)) {  		success = false;  	}  	Thread.Sleep (5);  }  
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: while (bytePos <= byteCount - 1) {  	if (bytePos > 0) {  		Thread.Sleep (5);  	}  	Byte[] transfByte = new byte[64];  	for (int u = 0; u < 64; u++) {  		if (bytePos < byteCount) {  			transfByte [u] = bytes [bytePos];  			bytePos++;  		}  		else {  			transfByte [u] = 0;  		}  	}  	//send the report  	if (!this.usbdevice.writeData (transfByte)) {  		success = false;  	}  	Thread.Sleep (5);  }  
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: while (bytePos <= byteCount - 1) {  	if (bytePos > 0) {  		Thread.Sleep (5);  	}  	Byte[] transfByte = new byte[64];  	for (int u = 0; u < 64; u++) {  		if (bytePos < byteCount) {  			transfByte [u] = bytes [bytePos];  			bytePos++;  		}  		else {  			transfByte [u] = 0;  		}  	}  	//send the report  	if (!this.usbdevice.writeData (transfByte)) {  		success = false;  	}  	Thread.Sleep (5);  }  
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: if (bytePos > 0) {  	Thread.Sleep (5);  }  
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: for (int u = 0; u < 64; u++) {  	if (bytePos < byteCount) {  		transfByte [u] = bytes [bytePos];  		bytePos++;  	}  	else {  		transfByte [u] = 0;  	}  }  
Magic Number,USBHIDDRIVER,USBInterface,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\Interface.cs,write,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [0] = 255;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [2] = 28;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [2] = 28;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [3] = 20;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [3] = 20;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [4] = 20;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [4] = 20;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [5] = 0;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [6] = 0x01;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStartCMD,The following statement contains a magic number: startCMD [7] = 0xF4;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,startRead,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,startRead,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,startRead,The following statement contains a magic number: for (int i = 0; i < 200; i++) {  	Assert.IsNotNull (USBHIDDRIVER.USBInterface.usbBuffer);  	Thread.Sleep (2);  }  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,startRead,The following statement contains a magic number: for (int i = 0; i < 200; i++) {  	Assert.IsNotNull (USBHIDDRIVER.USBInterface.usbBuffer);  	Thread.Sleep (2);  }  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,startRead,The following statement contains a magic number: Thread.Sleep (2);  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStopCMD,The following statement contains a magic number: stopCMD [0] = 128;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStopCMD,The following statement contains a magic number: stopCMD [64] = 8;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,sendStopCMD,The following statement contains a magic number: stopCMD [64] = 8;  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,userDefinedeventHandling,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	Thread.Sleep (4);  }  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,userDefinedeventHandling,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  	Thread.Sleep (4);  }  
Magic Number,USBHIDDRIVER.TESTS,USBTestFixture,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\TESTS\TestFixture.cs,userDefinedeventHandling,The following statement contains a magic number: Thread.Sleep (4);  
Magic Number,USBHIDDRIVER.USB,HIDUSBDevice,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\HIDUSBDevice.cs,writeData,The following statement contains a magic number: if (getConnectionState ()) {  	try {  		//get output report length  		int myPtrToPreparsedData = -1;  		// myUSB.CT_HidD_GetPreparsedData(myUSB.HidHandle' ref myPtrToPreparsedData);  		// int code = myUSB.CT_HidP_GetCaps(myPtrToPreparsedData);  		int outputReportByteLength = 65;  		int bytesSend = 0;  		//if bWriteData is bigger then one report diveide into sevral reports  		while (bytesSend < bDataToWrite.Length) {  			// Set the size of the Output report buffer.  			// byte[] OutputReportBuffer = new byte[myUSB.myHIDP_CAPS.OutputReportByteLength - 1 + 1];  			byte[] OutputReportBuffer = new byte[outputReportByteLength - 1 + 1];  			// Store the report ID in the first byte of the buffer:  			OutputReportBuffer [0] = 0;  			// Store the report data following the report ID.  			for (int i = 1; i < OutputReportBuffer.Length; i++) {  				if (bytesSend < bDataToWrite.Length) {  					OutputReportBuffer [i] = bDataToWrite [bytesSend];  					bytesSend++;  				}  				else {  					OutputReportBuffer [i] = 0;  				}  			}  			OutputReport myOutputReport = new OutputReport ();  			success = myOutputReport.Write (OutputReportBuffer' myUSB.HidHandle);  		}  	}  	catch (System.AccessViolationException ex) {  		success = false;  	}  }  else {  	success = false;  }  
Magic Number,USBHIDDRIVER.USB,HIDUSBDevice,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\HIDUSBDevice.cs,writeData,The following statement contains a magic number: try {  	//get output report length  	int myPtrToPreparsedData = -1;  	// myUSB.CT_HidD_GetPreparsedData(myUSB.HidHandle' ref myPtrToPreparsedData);  	// int code = myUSB.CT_HidP_GetCaps(myPtrToPreparsedData);  	int outputReportByteLength = 65;  	int bytesSend = 0;  	//if bWriteData is bigger then one report diveide into sevral reports  	while (bytesSend < bDataToWrite.Length) {  		// Set the size of the Output report buffer.  		// byte[] OutputReportBuffer = new byte[myUSB.myHIDP_CAPS.OutputReportByteLength - 1 + 1];  		byte[] OutputReportBuffer = new byte[outputReportByteLength - 1 + 1];  		// Store the report ID in the first byte of the buffer:  		OutputReportBuffer [0] = 0;  		// Store the report data following the report ID.  		for (int i = 1; i < OutputReportBuffer.Length; i++) {  			if (bytesSend < bDataToWrite.Length) {  				OutputReportBuffer [i] = bDataToWrite [bytesSend];  				bytesSend++;  			}  			else {  				OutputReportBuffer [i] = 0;  			}  		}  		OutputReport myOutputReport = new OutputReport ();  		success = myOutputReport.Write (OutputReportBuffer' myUSB.HidHandle);  	}  }  catch (System.AccessViolationException ex) {  	success = false;  }  
Magic Number,USBHIDDRIVER.USB,HIDUSBDevice,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\HIDUSBDevice.cs,readDataThread,The following statement contains a magic number: while (true) {  	int myPtrToPreparsedData = -1;  	if (myUSB.CT_HidD_GetPreparsedData (myUSB.HidHandle' ref myPtrToPreparsedData) != 0) {  		int code = myUSB.CT_HidP_GetCaps (myPtrToPreparsedData);  		int reportLength = myUSB.myHIDP_CAPS.InputReportByteLength;  		while (true) {  			//read until thread is stopped  			byte[] myRead = myUSB.CT_ReadFile (myUSB.myHIDP_CAPS.InputReportByteLength);  			if (myRead != null) {  				//ByteCount + bytes received  				byteCount += myRead.Length;  				//Store received bytes  				/*  lock (recieveBuffer.SyncRoot)                             {                                 recieveBuffer.Add(myRead);                             }*/lock (USBHIDDRIVER.USBInterface.usbBuffer.SyncRoot) {  					USBHIDDRIVER.USBInterface.usbBuffer.Add (myRead);  				}  			}  			else {  				//Recieved a lot of null bytes!  				//mybe device disconnected?  				if (receivedNull > 100) {  					receivedNull = 0;  					Thread.Sleep (1);  				}  				receivedNull++;  			}  		}  	}  }  
Magic Number,USBHIDDRIVER.USB,HIDUSBDevice,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\HIDUSBDevice.cs,readDataThread,The following statement contains a magic number: if (myUSB.CT_HidD_GetPreparsedData (myUSB.HidHandle' ref myPtrToPreparsedData) != 0) {  	int code = myUSB.CT_HidP_GetCaps (myPtrToPreparsedData);  	int reportLength = myUSB.myHIDP_CAPS.InputReportByteLength;  	while (true) {  		//read until thread is stopped  		byte[] myRead = myUSB.CT_ReadFile (myUSB.myHIDP_CAPS.InputReportByteLength);  		if (myRead != null) {  			//ByteCount + bytes received  			byteCount += myRead.Length;  			//Store received bytes  			/*  lock (recieveBuffer.SyncRoot)                             {                                 recieveBuffer.Add(myRead);                             }*/lock (USBHIDDRIVER.USBInterface.usbBuffer.SyncRoot) {  				USBHIDDRIVER.USBInterface.usbBuffer.Add (myRead);  			}  		}  		else {  			//Recieved a lot of null bytes!  			//mybe device disconnected?  			if (receivedNull > 100) {  				receivedNull = 0;  				Thread.Sleep (1);  			}  			receivedNull++;  		}  	}  }  
Magic Number,USBHIDDRIVER.USB,HIDUSBDevice,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\HIDUSBDevice.cs,readDataThread,The following statement contains a magic number: while (true) {  	//read until thread is stopped  	byte[] myRead = myUSB.CT_ReadFile (myUSB.myHIDP_CAPS.InputReportByteLength);  	if (myRead != null) {  		//ByteCount + bytes received  		byteCount += myRead.Length;  		//Store received bytes  		/*  lock (recieveBuffer.SyncRoot)                             {                                 recieveBuffer.Add(myRead);                             }*/lock (USBHIDDRIVER.USBInterface.usbBuffer.SyncRoot) {  			USBHIDDRIVER.USBInterface.usbBuffer.Add (myRead);  		}  	}  	else {  		//Recieved a lot of null bytes!  		//mybe device disconnected?  		if (receivedNull > 100) {  			receivedNull = 0;  			Thread.Sleep (1);  		}  		receivedNull++;  	}  }  
Magic Number,USBHIDDRIVER.USB,HIDUSBDevice,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\HIDUSBDevice.cs,readDataThread,The following statement contains a magic number: if (myRead != null) {  	//ByteCount + bytes received  	byteCount += myRead.Length;  	//Store received bytes  	/*  lock (recieveBuffer.SyncRoot)                             {                                 recieveBuffer.Add(myRead);                             }*/lock (USBHIDDRIVER.USBInterface.usbBuffer.SyncRoot) {  		USBHIDDRIVER.USBInterface.usbBuffer.Add (myRead);  	}  }  else {  	//Recieved a lot of null bytes!  	//mybe device disconnected?  	if (receivedNull > 100) {  		receivedNull = 0;  		Thread.Sleep (1);  	}  	receivedNull++;  }  
Magic Number,USBHIDDRIVER.USB,HIDUSBDevice,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\HIDUSBDevice.cs,readDataThread,The following statement contains a magic number: if (receivedNull > 100) {  	receivedNull = 0;  	Thread.Sleep (1);  }  
Magic Number,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,CT_SetupDiGetDeviceInterfaceDetailx,The following statement contains a magic number: myPSP_DEVICE_INTERFACE_DETAIL_DATA.cbSize = 5;  
Magic Number,USBHIDDRIVER.USB,USBSharp,C:\repos\sparkie79_UavObject-.Net-Parser\USBHIDDRIVER\USB\USBSharp.cs,CT_HidP_GetValueCaps,The following statement contains a magic number: myHIDP_VALUE_CAPS = new HIDP_VALUE_CAPS[5];  
