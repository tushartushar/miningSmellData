Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,MortgageMainTestMethod,The method has 6 parameters.
Long Parameter List,_2.Bank,ObservedPeriodData,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\ObservedPeriodData.cs,ObservedPeriodData,The method has 6 parameters.
Long Statement,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,TwoTransactionsDepositNonDefault,The length of the statement  "	Console.WriteLine ("Add two deposit transations: first is \"Deposit\" of value 1700(to make 2000) at the second" + " month of the period. Second is \"Withdraww\" of value 1000 at 4th month of period."); " is 202.
Long Statement,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,TwoTransactionMortgageCompanyNonDefault,The length of the statement  "	Console.WriteLine ("Non default morgage with two transactions -" + " one before' and one after the end of special period."); " is 124.
Long Statement,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,ThreeTransactionMortgageCompanyNonDefault,The length of the statement  "	Console.WriteLine ("Non default morgage with three transactions -" + " two before' and one after the end of special period."); " is 126.
Long Statement,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,DefaultInterestCalculation,The length of the statement  "	for (int transactionIndex = periodData.CurrentStartIndex; transactionIndex <= periodData.EndIndex; transactionIndex++) { " is 120.
Long Statement,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,MortgageInterestCalculation,The length of the statement  "	AccountInterestRateChange interestRateChangeEvent = (AccountInterestRateChange)account.Events.Find (x => x is AccountInterestRateChange); " is 137.
Long Statement,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,MortgageInterestCalculation,The length of the statement  "	for (int transactionIndex = periodData.CurrentStartIndex; transactionIndex <= periodData.EndIndex; transactionIndex++) { " is 120.
Long Statement,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,MortgageInterestCalculation,The length of the statement  "		periodData = PeriodDataFunctions.DetermineNextEndDate (account' ref periodData' interestRateChangeEvent' transactionIndex); " is 123.
Long Statement,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,LoanInterestCaclulation,The length of the statement  "	for (int transactionIndex = periodData.CurrentStartIndex; transactionIndex <= periodData.CurrentEndIndex; transactionIndex++) { " is 127.
Long Statement,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,DepositInterestCalculation,The length of the statement  "	for (int transactionIndex = periodData.CurrentStartIndex; transactionIndex <= periodData.EndIndex; transactionIndex++) { " is 120.
Long Statement,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,AppendTotalInterest,The length of the statement  "	totalInterest += CalculateInterestInPeriod (periodData.CurrentStartDate' periodData.CurrentEndDate' periodData.CurrentAmmount' periodData.CurrentInterestRate); " is 159.
Long Statement,_2.Bank,PeriodDataFunctions,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\PeriodDataFunctions.cs,InitialisePeriodData,The length of the statement  "	ObservedPeriodData periodData = new ObservedPeriodData (startTransactionIndex' endTransactionIndex' initialAmmount' startDate' endDate' currentInterestRate); " is 157.
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,DepositMainTest,The following statement contains a magic number: individualDeposit = new Deposit (ivan' creationDate' 300' 0.005m);  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,DepositMainTest,The following statement contains a magic number: individualDeposit = new Deposit (ivan' creationDate' 300' 0.005m);  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,DepositMainTest,The following statement contains a magic number: individualDeposit = new Deposit (ivan' creationDate' 300' 0.005m);  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,DepositMainTest,The following statement contains a magic number: individualDeposit = new Deposit (ivan' creationDate' 300' 0.005m);  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,TwoTransactionsDepositNonDefault,The following statement contains a magic number: individualDeposit.DepositAmmount (1700' creationDate.AddMonths (2));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,TwoTransactionsDepositNonDefault,The following statement contains a magic number: individualDeposit.DepositAmmount (1700' creationDate.AddMonths (2));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,TwoTransactionsDepositNonDefault,The following statement contains a magic number: individualDeposit.WithdrawAmmount (1000' creationDate.AddMonths (4));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,TwoTransactionsDepositNonDefault,The following statement contains a magic number: individualDeposit.WithdrawAmmount (1000' creationDate.AddMonths (4));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,OneTransactionDepositNonDefault,The following statement contains a magic number: individualDeposit.DepositAmmount (1700' creationDate.AddMonths (2));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,OneTransactionDepositNonDefault,The following statement contains a magic number: individualDeposit.DepositAmmount (1700' creationDate.AddMonths (2));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,OneTransactionDepositDefault,The following statement contains a magic number: individualDeposit.DepositAmmount (1700' creationDate.AddMonths (2));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,OneTransactionDepositDefault,The following statement contains a magic number: individualDeposit.DepositAmmount (1700' creationDate.AddMonths (2));  
Magic Number,_2.Bank,DepositTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\DepositTest.cs,SimpleDepositDefault,The following statement contains a magic number: Console.WriteLine ("Expected interest: {0} (300* 6*0.005)"' 9);  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,IndividualTestMethod,The following statement contains a magic number: individualMortgage = new Mortgage (ivan' creationDate' 500' 0.005m);  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,IndividualTestMethod,The following statement contains a magic number: individualMortgage = new Mortgage (ivan' creationDate' 500' 0.005m);  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,CompanyTestMethod,The following statement contains a magic number: companyMortgage = new Mortgage (comp' creationDate' 500' 0.005m);  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,CompanyTestMethod,The following statement contains a magic number: companyMortgage = new Mortgage (comp' creationDate' 500' 0.005m);  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,OneTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (6));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,OneTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (6));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,TwoTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (6));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,TwoTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (6));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,TwoTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (1000' creationDate.AddMonths (12));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,TwoTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (1000' creationDate.AddMonths (12));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,ThreeTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (6));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,ThreeTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (6));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,ThreeTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (9));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,ThreeTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (9));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,ThreeTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (15));  
Magic Number,_2.Bank,MortgageTest,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\MortgageTest.cs,ThreeTransactionMortgageCompanyNonDefault,The following statement contains a magic number: companyMortgage.DepositAmmount (500' creationDate.AddMonths (15));  
Magic Number,_2.Bank,InterestCalculator,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\InterestCalculator.cs,ResolveDepositInterestRate,The following statement contains a magic number: if (periodData.CurrentAmmount >= 0 && periodData.CurrentAmmount < 1000) {  	periodData.CurrentInterestRate = 0;  }  else {  	periodData.CurrentInterestRate = account.MonthlyInterestRate;  }  
Magic Number,_2.Bank,Loan,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Loan.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Individual) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (3)' 0);  }  else if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (2)' 0);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Loan,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Loan.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Individual) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (3)' 0);  }  else if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (2)' 0);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Loan,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Loan.cs,InterestRateChangeResolver,The following statement contains a magic number: return new AccountInterestRateChange (this.StartingDate.AddMonths (3)' 0);  
Magic Number,_2.Bank,Loan,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Loan.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (2)' 0);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Loan,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Loan.cs,InterestRateChangeResolver,The following statement contains a magic number: return new AccountInterestRateChange (this.StartingDate.AddMonths (2)' 0);  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Individual) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (6)' 0);  }  else if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (12)' this.MonthlyInterestRate / 2);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Individual) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (6)' 0);  }  else if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (12)' this.MonthlyInterestRate / 2);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Individual) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (6)' 0);  }  else if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (12)' this.MonthlyInterestRate / 2);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: return new AccountInterestRateChange (this.StartingDate.AddMonths (6)' 0);  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (12)' this.MonthlyInterestRate / 2);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: if (bankCustomer is Company) {  	return new AccountInterestRateChange (this.StartingDate.AddMonths (12)' this.MonthlyInterestRate / 2);  }  else {  	throw new ArgumentException ("Customer must be Individual or Company");  }  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: return new AccountInterestRateChange (this.StartingDate.AddMonths (12)' this.MonthlyInterestRate / 2);  
Magic Number,_2.Bank,Mortgage,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Mortgage.cs,InterestRateChangeResolver,The following statement contains a magic number: return new AccountInterestRateChange (this.StartingDate.AddMonths (12)' this.MonthlyInterestRate / 2);  
Magic Number,_2.Bank,Program,C:\repos\Stefanpu13_TelerikAcademyRepository\C# Programming\C#Part3-OOP\5. OOP Principles -II\5. OOP Principles -II\2. Bank\Program.cs,Main,The following statement contains a magic number: endDate = creationDate.AddMonths (18);  
