Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,LinqStatistics,Bin,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\Bin.cs,Bin,The method has 5 parameters. Parameters: v' min' max' count' maxInclusive
Long Statement,LinqStatistics,BinFactory,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\BinFactory.cs,CreateBinsMaxInclusive,The length of the statement  "                    // we can get some floating point noise as the ranges are calculated to ensure that the last bin encompasses the max value " is 122.
Long Statement,LinqStatistics,BinFactory,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\BinFactory.cs,CreateBinsExpandRange,The length of the statement  "            double binSize = (max - min) / ((double)binCount - 1);  // make the range such that the min and max are outside of the data set  " is 127.
Magic Number,LinqStatistics,Bin,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\Bin.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _range.GetHashCode();
Magic Number,LinqStatistics,Bin,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\Bin.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _maxInclusive.GetHashCode();
Magic Number,LinqStatistics,BinFactory,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\BinFactory.cs,CreateBinsMaxInclusive,The following statement contains a magic number: double halfBin = binSize / 2.0;
Magic Number,LinqStatistics,BinFactory,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\BinFactory.cs,CreateBinsUnbounded,The following statement contains a magic number: double halfBin = binSize / 2.0;
Magic Number,LinqStatistics,BinFactory,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\BinFactory.cs,CreateBinsExpandRange,The following statement contains a magic number: double halfBin = binSize / 2.0;
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,BinCountSturges,The following statement contains a magic number: return (int)Math.Round(Math.Log(source.Count()' 2) + 1' 0);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,BinCountRice,The following statement contains a magic number: return (int)Math.Round(2.0 * Math.Pow(source.Count()' 1.0 / 3.0)' 0);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,BinCountRice,The following statement contains a magic number: return (int)Math.Round(2.0 * Math.Pow(source.Count()' 1.0 / 3.0)' 0);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: if (n < 4)                  throw new InvalidOperationException("Source must have at least 4 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: if (n < 4)                  throw new InvalidOperationException("Source must have at least 4 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: if (n < 4)                  throw new InvalidOperationException("Source must have at least 4 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: if (n < 4)                  throw new InvalidOperationException("Source must have at least 4 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: if (n < 4)                  throw new InvalidOperationException("Source must have at least 4 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Kurtosis,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,LeastSquares,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,LeastSquares,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,LeastSquares,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,LeastSquares,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,LeastSquares,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: int itemIndex = count / 2;
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (double)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (double)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: int itemIndex = count / 2;
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (double)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (double)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: int itemIndex = count / 2;
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (decimal)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (decimal)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: int itemIndex = count / 2;
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (float)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (float)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: int itemIndex = count / 2;
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (double)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Median,The following statement contains a magic number: if (count % 2 == 0)              {                  // Even number of items.                  return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (double)2;              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,RootMeanSquare,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,RootMeanSquare,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,RootMeanSquare,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,RootMeanSquare,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,RootMeanSquare,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: if (n < 3)                  throw new InvalidOperationException("Source must have at least 3 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: return (double)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: if (n < 3)                  throw new InvalidOperationException("Source must have at least 3 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: return (double)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: if (n < 3)                  throw new InvalidOperationException("Source must have at least 3 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: return (decimal)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: if (n < 3)                  throw new InvalidOperationException("Source must have at least 3 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: return (float)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: if (n < 3)                  throw new InvalidOperationException("Source must have at least 3 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Skewness,The following statement contains a magic number: return (double)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Variance,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Variance,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Variance,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Variance,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\EnumerableStats.cs,Variance,The following statement contains a magic number: if (n < 2)                  throw new InvalidOperationException("Source must have at least 2 elements");
Magic Number,LinqStatistics,ItemCount<T>,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\ItemCount.cs,GetHashCode,The following statement contains a magic number: if (_value == null)              {                  int hash = 17;                  hash = hash * 23 + _value.GetHashCode();                  hash = hash * 23 + _count.GetHashCode();                  return hash;              }
Magic Number,LinqStatistics,ItemCount<T>,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\ItemCount.cs,GetHashCode,The following statement contains a magic number: if (_value == null)              {                  int hash = 17;                  hash = hash * 23 + _value.GetHashCode();                  hash = hash * 23 + _count.GetHashCode();                  return hash;              }
Magic Number,LinqStatistics,ItemCount<T>,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\ItemCount.cs,GetHashCode,The following statement contains a magic number: if (_value == null)              {                  int hash = 17;                  hash = hash * 23 + _value.GetHashCode();                  hash = hash * 23 + _count.GetHashCode();                  return hash;              }
Magic Number,LinqStatistics,LeastSquares,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\LeastSquares.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,LinqStatistics,LeastSquares,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\LeastSquares.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _m.GetHashCode();
Magic Number,LinqStatistics,LeastSquares,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\LeastSquares.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _b.GetHashCode();
Magic Number,LinqStatistics,LeastSquares,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\LeastSquares.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _r2.GetHashCode();
Magic Number,LinqStatistics,Range,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\Range.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,LinqStatistics,Range,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\Range.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _min.GetHashCode();
Magic Number,LinqStatistics,Range,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\Range.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _max.GetHashCode();
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: if (n < 4)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: if (n < 4)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: if (n < 4)                  return float.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                        double delta = (double)x - meanv;                      meanv += delta / n;                      M2 += delta * ((double)x - meanv);                      M4 += Math.Pow((double)x - mean' 4);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: if (n < 4)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term2 = M4 / Math.Pow(s' 4);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,KurtosisNaN,The following statement contains a magic number: double term3 = (3 * Math.Pow(n - 1' 2)) / ((n - 2.0) * (n - 3.0));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,LeastSquaresNaN,The following statement contains a magic number: if (n < 2)                  return new LeastSquares(double.NaN' double.NaN' double.NaN);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,LeastSquaresNaN,The following statement contains a magic number: if (n < 2)                  return new LeastSquares(double.NaN' double.NaN' double.NaN);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,LeastSquaresNaN,The following statement contains a magic number: if (n < 2)                  return new LeastSquares(double.NaN' double.NaN' double.NaN);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,LeastSquaresNaN,The following statement contains a magic number: if (n < 2)                  return new LeastSquares(double.NaN' double.NaN' double.NaN);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,LeastSquaresNaN,The following statement contains a magic number: if (n < 2)                  return new LeastSquares(double.NaN' double.NaN' double.NaN);
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,RootMeanSquareNaN,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,RootMeanSquareNaN,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,RootMeanSquareNaN,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,RootMeanSquareNaN,The following statement contains a magic number: checked              {                   foreach (var d in source)                  {                      n++;                      s += Math.Pow((double)d' 2);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: if (n < 3)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: return (double)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: if (n < 3)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: return (double)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: if (n < 3)                  return float.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: return (float)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: checked              {                   foreach (var x in source)                  {                      n++;                      M3 += Math.Pow(((double)x - mean) / s' 3.0);                  }              }
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: if (n < 3)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,SkewnessNaN,The following statement contains a magic number: return (double)((M3 * n) / ((n - 1) * (n - 2)));
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,VarianceNaN,The following statement contains a magic number: if (n < 2)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,VarianceNaN,The following statement contains a magic number: if (n < 2)                  return double.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,VarianceNaN,The following statement contains a magic number: if (n < 2)                  return float.NaN;
Magic Number,LinqStatistics.NaN,EnumerableStats,C:\repos\dkackman_LinqStatistics\src\LinqStatistics\NaN\AverageNaN.cs,VarianceNaN,The following statement contains a magic number: if (n < 2)                  return double.NaN;
