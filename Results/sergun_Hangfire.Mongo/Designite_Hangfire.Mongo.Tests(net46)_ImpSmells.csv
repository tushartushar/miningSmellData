Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Hangfire.Mongo.Tests.Utils,ConnectionUtils,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Utils\ConnectionUtils.cs,,The length of the parameter ConnectionStringTemplateVariable is 32.
Long Identifier,Hangfire.Mongo.Tests.Utils,ConnectionUtils,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Utils\ConnectionUtils.cs,,The length of the parameter DefaultConnectionStringTemplate is 31.
Long Statement,Hangfire.Mongo.Tests,ExpirationManagerFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\ExpirationManagerFacts.cs,CreateExpirationEntries,The length of the statement  "            Commit(connection' x => x.SetRangeInHash("my-hash-key"' new[] { new KeyValuePair<string' string>("key"' "value")' new KeyValuePair<string' string>("key1"' "value1") })); " is 169.
Long Statement,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_AlreadyReleased_QueueNameReturnedImmediately,The length of the statement  "            _semaphore.WaitAny(TestQueues' CancellationToken.None' TimeSpan.FromMilliseconds(100)' out var result' out var timedOut); " is 121.
Long Statement,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_AcquireLock_WhenLockExpired,The length of the statement  "                // simulate situation when lock was not disposed correctly (app crash) and there is no heartbeats to prolong ExpireAt value " is 123.
Long Statement,Hangfire.Mongo.Tests,MongoJobQueueFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoJobQueueFacts.cs,Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues,The length of the statement  "                Assert.ThrowsAny<OperationCanceledException>(() => queue.FetchNextJob(DefaultQueues' CreateTimingOutCancellationToken())); " is 122.
Long Statement,Hangfire.Mongo.Tests,MongoStorageFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoStorageFacts.cs,Ctor_ThrowsAnException_WhenConnectionStringIsEmpty,The length of the statement  "            var exception = Assert.Throws<MongoConfigurationException>(() => new MongoStorage(MongoClientSettings.FromConnectionString("")' "database")); " is 141.
Long Statement,Hangfire.Mongo.Tests,MongoStorageFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoStorageFacts.cs,Ctor_ThrowsAnException_WhenDatabaseNameIsNull,The length of the statement  "            var exception = Assert.Throws<ArgumentNullException>(() => new MongoStorage(MongoClientSettings.FromConnectionString("mongodb://localhost")' null)); " is 148.
Long Statement,Hangfire.Mongo.Tests,MongoStorageFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoStorageFacts.cs,Ctor_ThrowsAnException_WhenStorageOptionsValueIsNull,The length of the statement  "            var exception = Assert.Throws<ArgumentNullException>(() => new MongoStorage(MongoClientSettings.FromConnectionString("mongodb://localhost")' "database"' null)); " is 160.
Long Statement,Hangfire.Mongo.Tests,MongoStorageOptionsFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoStorageOptionsFacts.cs,Ctor_SetsTheDefaultOptions_ShouldGenerateUniqueClientId,The length of the statement  "            IEnumerable<string> result = new[] { storageOptions1.ClientId' storageOptions2.ClientId' storageOptions3.ClientId }.Distinct(); " is 127.
Long Statement,Hangfire.Mongo.Tests,MongoVersionHelperFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoVersionHelperFacts.cs,GetVersion_HasAdditionalInfo_Success,The length of the statement  "            dbMock.Setup(m => m.RunCommand(It.Is<JsonCommand<BsonDocument>>(b => b.Json.Contains("buildinfo"))' null' CancellationToken.None)) " is 130.
Long Statement,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,GetTestJob,The length of the statement  "            return database.JobGraph.OfType<JobDto>().Find(Builders<JobDto>.Filter.Eq(_ => _.Id' ObjectId.Parse(jobId))).FirstOrDefault(); " is 126.
Long Statement,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,GetTestSet,The length of the statement  "            return database.JobGraph.OfType<SetDto>().Find(Builders<SetDto>.Filter.Regex(_ => _.Key' $"^{Regex.Escape(key)}")).ToList(); " is 124.
Long Statement,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The length of the statement  "                var parentId = BackgroundJob.Schedule(() => HangfireTestJobs.ExecuteContinueWithJob("ContinueWith job"' false)' TimeSpan.FromSeconds(15)); " is 138.
Long Statement,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The length of the statement  "                BackgroundJob.ContinueWith(parentId' () => HangfireTestJobs.ExecuteContinueWithJob("ContinueWith job continued"' true)); " is 120.
Long Statement,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,BackupDatabaseToStream,The length of the statement  "                        Assert.True(jsonDocs.Any() || allowedEmptyCollections.Contains(collectionName)' $@"Expected collection '{collectionName}' to contain documents"); " is 145.
Magic Number,Hangfire.Mongo.Tests,DistributedLockMutexFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\DistributedLockMutexFacts.cs,Release_MultipleWaiters_OneGetsAccess,The following statement contains a magic number: var tasks = CreateWaitTasks(resource' 10' mutex);
Magic Number,Hangfire.Mongo.Tests,DistributedLockMutexFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\DistributedLockMutexFacts.cs,Release_MultipleWaiters_OneGetsAccess,The following statement contains a magic number: Assert.Equal(9' tasks.Count(t => !t.IsCompleted));
Magic Number,Hangfire.Mongo.Tests,DistributedLockMutexFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\DistributedLockMutexFacts.cs,CreateWaitTasks,The following statement contains a magic number: tasks[i] = Task.Factory.StartNew(() =>                  {                      mutex.Wait(resource' TimeSpan.FromSeconds(2));                  }' TaskCreationOptions.LongRunning);
Magic Number,Hangfire.Mongo.Tests,DistributedLockMutexFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\DistributedLockMutexFacts.cs,CreateWaitTasks,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_TimesOut_NullReturned,The following statement contains a magic number: var waitTask = Task.Run(async () =>              {                  await Task.Yield();                  _semaphore.WaitAny(TestQueues' CancellationToken.None' TimeSpan.FromMilliseconds(500)' out var q' out var timedOut);                  return q;              });
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_Cancelled_NullReturned,The following statement contains a magic number: var cts = new CancellationTokenSource(200);
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_Cancelled_NullReturned,The following statement contains a magic number: var waitTask = Task.Run(async () =>              {                  await Task.Yield();                  _semaphore.WaitAny(TestQueues' cts.Token' TimeSpan.FromMilliseconds(5000)' out var q' out var timedOut);                  return q;              });
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_Released_QueueNameReturned,The following statement contains a magic number: var waitTask = Task.Run(async () =>              {                  await Task.Yield();                  _semaphore.WaitAny(TestQueues' CancellationToken.None' TimeSpan.FromMilliseconds(5000)' out var q' out var timedOut);                  return q;              });
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_Released_QueueNameReturned,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_AlreadyReleased_QueueNameReturnedImmediately,The following statement contains a magic number: _semaphore.WaitAny(TestQueues' CancellationToken.None' TimeSpan.FromMilliseconds(100)' out var result' out var timedOut);
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_ReleasedMultipleTimes_CanBeWaitedMultipleTimes,The following statement contains a magic number: var results = new string[2];
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_ReleasedMultipleTimes_CanBeWaitedMultipleTimes,The following statement contains a magic number: _semaphore.WaitAny(TestQueues' CancellationToken.None' TimeSpan.FromMilliseconds(100)' out results[0]' out timedOut);
Magic Number,Hangfire.Mongo.Tests,JobQueueSemaphoreFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\JobQueueSemaphoreFacts.cs,WaitAny_ReleasedMultipleTimes_CanBeWaitedMultipleTimes,The following statement contains a magic number: _semaphore.WaitAny(TestQueues' CancellationToken.None' TimeSpan.FromMilliseconds(100)' out results[1]' out timedOut);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: var createdAt = new DateTime(2012' 12' 12' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: var createdAt = new DateTime(2012' 12' 12' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: var createdAt = new DateTime(2012' 12' 12' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore,The following statement contains a magic number: _dbContext.JobGraph.InsertOne(new SetDto              {                  Id = ObjectId.GenerateNewId()'                  Key = "key<-5.0>"'                  Value = "-5.0"'                  Score = -5.0              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore,The following statement contains a magic number: _dbContext.JobGraph.InsertOne(new SetDto              {                  Id = ObjectId.GenerateNewId()'                  Key = "another-key<-2.0>"'                  Value = "-2.0"'                  Score = -2.0              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore,The following statement contains a magic number: var result = _connection.GetFirstByLowestScoreFromSet("key"' -1.0' 3.0);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsTheValue_WhenKeyContainsRegexSpecialChars,The following statement contains a magic number: var result = _connection.GetFirstByLowestScoreFromSet(key' -1.0' 3.0);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,AnnounceServer_CreatesOrUpdatesARecord,The following statement contains a magic number: var context1 = new ServerContext              {                  Queues = new[] { "critical"' "default" }'                  WorkerCount = 4              };
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,AnnounceServer_CreatesOrUpdatesARecord,The following statement contains a magic number: var context2 = new ServerContext              {                  Queues = new[] { "default" }'                  WorkerCount = 1000              };
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server1"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server1"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server1"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server1"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server1"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server1"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server2"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server2"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server2"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server2"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server2"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server2"'                  LastHeartbeat = new DateTime(2012' 12' 12' 12' 12' 12' DateTimeKind.Utc)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: Assert.NotEqual(2012' servers["server1"].Value.Year);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: Assert.Equal(2012' servers["server2"].Value.Year);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => _connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)));
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,RemoveTimedOutServers_DoItsWorkPerfectly,The following statement contains a magic number: _dbContext.Server.InsertOne(new ServerDto              {                  Id = "server2"'                  LastHeartbeat = DateTime.UtcNow.AddHours(-12)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,RemoveTimedOutServers_DoItsWorkPerfectly,The following statement contains a magic number: _connection.RemoveTimedOutServers(TimeSpan.FromHours(15));
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetAllItemsFromSet_ReturnsAllItems_InCorrectOrder,The following statement contains a magic number: Assert.Equal(5' result.Count);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues,The following statement contains a magic number: Assert.Equal(2' result.Count);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetCount_ReturnsNumberOfElements_InASet,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetCount_ReturnsNumberOfElements_InASet_WhenKeyContainsRegexSpecialChars,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetRangeFromSet_ReturnsPagedElementsInCorrectOrder,The following statement contains a magic number: var result = _connection.GetRangeFromSet("set-1"' 1' 8);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetRangeFromSet_ReturnsPagedElementsInCorrectOrder_WhenKeyContainsRegexSpecialChars,The following statement contains a magic number: var result = _connection.GetRangeFromSet(key' 1' 8);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: _dbContext.JobGraph.InsertOne(new SetDto              {                  Id = ObjectId.GenerateNewId()'                  Key = "set-1<1>"'                  Score = 0.0'                  ExpireAt = DateTime.UtcNow.AddMinutes(60)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: Assert.True(TimeSpan.FromMinutes(59) < result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: Assert.True(result < TimeSpan.FromMinutes(61));
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet_WhenKeyContainsRegexSpecialChars,The following statement contains a magic number: _dbContext.JobGraph.InsertOne(new SetDto              {                  Id = ObjectId.GenerateNewId()'                  Key = $"{key}<1>"'                  Score = 0.0'                  ExpireAt = DateTime.UtcNow.AddMinutes(60)              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet_WhenKeyContainsRegexSpecialChars,The following statement contains a magic number: Assert.True(TimeSpan.FromMinutes(59) < result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet_WhenKeyContainsRegexSpecialChars,The following statement contains a magic number: Assert.True(result < TimeSpan.FromMinutes(61));
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetCounter_ReturnsSumOfValues_InCounterTable,The following statement contains a magic number: _dbContext.JobGraph.InsertOne(new CounterDto              {                  Id = ObjectId.GenerateNewId()'                  Key = "counter-1"'                  Value = 2L              });
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetCounter_ReturnsSumOfValues_InCounterTable,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetHashCount_ReturnsNumber_OfHashFields,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetHashTtl_ReturnsExpirationTimeForHash,The following statement contains a magic number: Assert.True(TimeSpan.FromMinutes(59) < result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetHashTtl_ReturnsExpirationTimeForHash,The following statement contains a magic number: Assert.True(result < TimeSpan.FromMinutes(61));
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetListCount_ReturnsTheNumberOfListElements,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetListTtl_ReturnsExpirationTimeForList,The following statement contains a magic number: Assert.True(TimeSpan.FromMinutes(59) < result);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetListTtl_ReturnsExpirationTimeForList,The following statement contains a magic number: Assert.True(result < TimeSpan.FromMinutes(61));
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetRangeFromList_ReturnsAllEntries_WithinGivenBounds,The following statement contains a magic number: var result = _connection.GetRangeFromList("list-1"' 1' 2);
Magic Number,Hangfire.Mongo.Tests,MongoConnectionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoConnectionFacts.cs,GetRangeFromList_ReturnsAllEntriesInCorrectOrder,The following statement contains a magic number: var result = _connection.GetRangeFromList("list-1"' 1' 5);
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_ThrowsAnException_WhenResourceIsLocked,The following statement contains a magic number: UseConnection(database =>              {                  using (new MongoDistributedLock("resource1"' TimeSpan.Zero' database' new MongoStorageOptions()'                      _distributedLockMutex))                  {                      var locksCount =                          database.DistributedLock.Count(                              Builders<DistributedLockDto>.Filter.Eq(_ => _.Resource' "resource1"));                      Assert.Equal(1' locksCount);                        var t = new Thread(() =>                      {                          Assert.Throws<DistributedLockTimeoutException>(() =>                              new MongoDistributedLock("resource1"' TimeSpan.Zero' database' new MongoStorageOptions()'                                  _distributedLockMutex));                      });                      t.Start();                      Assert.True(t.Join(5000)' "Thread is hanging unexpected");                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_WaitForLock_SignaledAtLockRelease,The following statement contains a magic number: UseConnection(database =>              {                  var t = new Thread(() =>                  {                      using (new MongoDistributedLock("resource1"' TimeSpan.Zero' database' new MongoStorageOptions()'                          _distributedLockMutex))                      {                          Thread.Sleep(TimeSpan.FromSeconds(3));                      }                  });                  t.Start();                    // Wait just a bit to make sure the above lock is acuired                  Thread.Sleep(TimeSpan.FromSeconds(1));                    // Record when we try to aquire the lock                  var startTime = DateTime.UtcNow;                  using (new MongoDistributedLock("resource1"' TimeSpan.FromSeconds(10)' database'                      new MongoStorageOptions()' _distributedLockMutex))                  {                      Assert.InRange(DateTime.UtcNow - startTime' TimeSpan.Zero' TimeSpan.FromSeconds(5));                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_WaitForLock_SignaledAtLockRelease,The following statement contains a magic number: UseConnection(database =>              {                  var t = new Thread(() =>                  {                      using (new MongoDistributedLock("resource1"' TimeSpan.Zero' database' new MongoStorageOptions()'                          _distributedLockMutex))                      {                          Thread.Sleep(TimeSpan.FromSeconds(3));                      }                  });                  t.Start();                    // Wait just a bit to make sure the above lock is acuired                  Thread.Sleep(TimeSpan.FromSeconds(1));                    // Record when we try to aquire the lock                  var startTime = DateTime.UtcNow;                  using (new MongoDistributedLock("resource1"' TimeSpan.FromSeconds(10)' database'                      new MongoStorageOptions()' _distributedLockMutex))                  {                      Assert.InRange(DateTime.UtcNow - startTime' TimeSpan.Zero' TimeSpan.FromSeconds(5));                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_WaitForLock_SignaledAtLockRelease,The following statement contains a magic number: UseConnection(database =>              {                  var t = new Thread(() =>                  {                      using (new MongoDistributedLock("resource1"' TimeSpan.Zero' database' new MongoStorageOptions()'                          _distributedLockMutex))                      {                          Thread.Sleep(TimeSpan.FromSeconds(3));                      }                  });                  t.Start();                    // Wait just a bit to make sure the above lock is acuired                  Thread.Sleep(TimeSpan.FromSeconds(1));                    // Record when we try to aquire the lock                  var startTime = DateTime.UtcNow;                  using (new MongoDistributedLock("resource1"' TimeSpan.FromSeconds(10)' database'                      new MongoStorageOptions()' _distributedLockMutex))                  {                      Assert.InRange(DateTime.UtcNow - startTime' TimeSpan.Zero' TimeSpan.FromSeconds(5));                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_SetLockExpireAtWorks_WhenResourceIsNotLocked,The following statement contains a magic number: UseConnection(database =>              {                  using (new MongoDistributedLock("resource1"' TimeSpan.Zero' database'                      new MongoStorageOptions() {DistributedLockLifetime = TimeSpan.FromSeconds(3)}'                      _distributedLockMutex))                  {                      DateTime initialExpireAt = DateTime.UtcNow;                      Thread.Sleep(TimeSpan.FromSeconds(5));                        DistributedLockDto lockEntry = database.DistributedLock                          .Find(Builders<DistributedLockDto>.Filter.Eq(_ => _.Resource' "resource1")).FirstOrDefault();                      Assert.NotNull(lockEntry);                      Assert.True(lockEntry.ExpireAt > initialExpireAt);                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_SetLockExpireAtWorks_WhenResourceIsNotLocked,The following statement contains a magic number: UseConnection(database =>              {                  using (new MongoDistributedLock("resource1"' TimeSpan.Zero' database'                      new MongoStorageOptions() {DistributedLockLifetime = TimeSpan.FromSeconds(3)}'                      _distributedLockMutex))                  {                      DateTime initialExpireAt = DateTime.UtcNow;                      Thread.Sleep(TimeSpan.FromSeconds(5));                        DistributedLockDto lockEntry = database.DistributedLock                          .Find(Builders<DistributedLockDto>.Filter.Eq(_ => _.Resource' "resource1")).FirstOrDefault();                      Assert.NotNull(lockEntry);                      Assert.True(lockEntry.ExpireAt > initialExpireAt);                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_AcquireLock_WhenLockExpired,The following statement contains a magic number: UseConnection(database =>              {                  // simulate situation when lock was not disposed correctly (app crash) and there is no heartbeats to prolong ExpireAt value                  var initialExpireAt = DateTime.UtcNow.AddSeconds(3);                  database.DistributedLock.InsertOne(new DistributedLockDto {ExpireAt = initialExpireAt' Resource = "resource1" });                    using (new MongoDistributedLock("resource1"' TimeSpan.FromSeconds(5)' database' new MongoStorageOptions()'                      _distributedLockMutex))                  {                      var lockEntry = database.DistributedLock                          .Find(Builders<DistributedLockDto>.Filter.Eq(_ => _.Resource' "resource1")).Single();                      Assert.True(lockEntry.ExpireAt > initialExpireAt);                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoDistributedLockFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoDistributedLockFacts.cs,Ctor_AcquireLock_WhenLockExpired,The following statement contains a magic number: UseConnection(database =>              {                  // simulate situation when lock was not disposed correctly (app crash) and there is no heartbeats to prolong ExpireAt value                  var initialExpireAt = DateTime.UtcNow.AddSeconds(3);                  database.DistributedLock.InsertOne(new DistributedLockDto {ExpireAt = initialExpireAt' Resource = "resource1" });                    using (new MongoDistributedLock("resource1"' TimeSpan.FromSeconds(5)' database' new MongoStorageOptions()'                      _distributedLockMutex))                  {                      var lockEntry = database.DistributedLock                          .Find(Builders<DistributedLockDto>.Filter.Eq(_ => _.Resource' "resource1")).Single();                      Assert.True(lockEntry.ExpireAt > initialExpireAt);                  }              });
Magic Number,Hangfire.Mongo.Tests,MongoFetchedJobFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoFetchedJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: CreateJobQueueRecord(_dbContext' ObjectId.GenerateNewId(2)' "critical");
Magic Number,Hangfire.Mongo.Tests,MongoFetchedJobFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoFetchedJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: CreateJobQueueRecord(_dbContext' ObjectId.GenerateNewId(3)' "default");
Magic Number,Hangfire.Mongo.Tests,MongoFetchedJobFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoFetchedJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: var fetchedJob = new MongoFetchedJob(_dbContext' ObjectId.GenerateNewId()' ObjectId.GenerateNewId(999)' "default");
Magic Number,Hangfire.Mongo.Tests,MongoFetchedJobFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoFetchedJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,Hangfire.Mongo.Tests,MongoJobQueueFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoJobQueueFacts.cs,Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs,The following statement contains a magic number: UseConnection(connection =>              {                  var cts = new CancellationTokenSource(200);                  var queue = CreateJobQueue(connection);                    Assert.ThrowsAny<OperationCanceledException>(() =>                      queue.FetchNextJob(DefaultQueues' cts.Token));              });
Magic Number,Hangfire.Mongo.Tests,MongoJobQueueFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoJobQueueFacts.cs,CreateTimingOutCancellationToken,The following statement contains a magic number: var source = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,GetStatistics_ReturnsExpectedCounts_WhenJobsExist,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(4)' FailedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(5)' ProcessingState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(6)' ScheduledState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(7)' ScheduledState.StateName);                    var result = monitoringApi.GetStatistics();                  Assert.Equal(2' result.Enqueued);                  Assert.Equal(1' result.Failed);                  Assert.Equal(1' result.Processing);                  Assert.Equal(2' result.Scheduled);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,GetStatistics_ReturnsExpectedCounts_WhenJobsExist,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(4)' FailedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(5)' ProcessingState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(6)' ScheduledState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(7)' ScheduledState.StateName);                    var result = monitoringApi.GetStatistics();                  Assert.Equal(2' result.Enqueued);                  Assert.Equal(1' result.Failed);                  Assert.Equal(1' result.Processing);                  Assert.Equal(2' result.Scheduled);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,GetStatistics_ReturnsExpectedCounts_WhenJobsExist,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(4)' FailedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(5)' ProcessingState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(6)' ScheduledState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(7)' ScheduledState.StateName);                    var result = monitoringApi.GetStatistics();                  Assert.Equal(2' result.Enqueued);                  Assert.Equal(1' result.Failed);                  Assert.Equal(1' result.Processing);                  Assert.Equal(2' result.Scheduled);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,GetStatistics_ReturnsExpectedCounts_WhenJobsExist,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(4)' FailedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(5)' ProcessingState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(6)' ScheduledState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(7)' ScheduledState.StateName);                    var result = monitoringApi.GetStatistics();                  Assert.Equal(2' result.Enqueued);                  Assert.Equal(1' result.Failed);                  Assert.Equal(1' result.Processing);                  Assert.Equal(2' result.Scheduled);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,GetStatistics_ReturnsExpectedCounts_WhenJobsExist,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(4)' FailedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(5)' ProcessingState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(6)' ScheduledState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(7)' ScheduledState.StateName);                    var result = monitoringApi.GetStatistics();                  Assert.Equal(2' result.Enqueued);                  Assert.Equal(1' result.Failed);                  Assert.Equal(1' result.Processing);                  Assert.Equal(2' result.Scheduled);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,GetStatistics_ReturnsExpectedCounts_WhenJobsExist,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(4)' FailedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(5)' ProcessingState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(6)' ScheduledState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(7)' ScheduledState.StateName);                    var result = monitoringApi.GetStatistics();                  Assert.Equal(2' result.Enqueued);                  Assert.Equal(1' result.Failed);                  Assert.Equal(1' result.Processing);                  Assert.Equal(2' result.Scheduled);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,GetStatistics_ReturnsExpectedCounts_WhenJobsExist,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(4)' FailedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(5)' ProcessingState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(6)' ScheduledState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(7)' ScheduledState.StateName);                    var result = monitoringApi.GetStatistics();                  Assert.Equal(2' result.Enqueued);                  Assert.Equal(1' result.Failed);                  Assert.Equal(1' result.Processing);                  Assert.Equal(2' result.Scheduled);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,EnqueuedJobs_ReturnsUnfetchedJobsOnly_WhenMultipleJobsExistsInFetchedAndUnfetchedStates,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(3)' FetchedStateName);                    var resultList = monitoringApi.EnqueuedJobs(DefaultQueue' From' PerPage);                    Assert.Equal(2' resultList.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,EnqueuedJobs_ReturnsUnfetchedJobsOnly_WhenMultipleJobsExistsInFetchedAndUnfetchedStates,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(3)' FetchedStateName);                    var resultList = monitoringApi.EnqueuedJobs(DefaultQueue' From' PerPage);                    Assert.Equal(2' resultList.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,EnqueuedJobs_ReturnsUnfetchedJobsOnly_WhenMultipleJobsExistsInFetchedAndUnfetchedStates,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' EnqueuedState.StateName);                  CreateJobInState(database' ObjectId.GenerateNewId(3)' FetchedStateName);                    var resultList = monitoringApi.EnqueuedJobs(DefaultQueue' From' PerPage);                    Assert.Equal(2' resultList.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FetchedJobs_ReturnsFetchedJobsOnly_WhenMultipleJobsExistsInFetchedAndUnfetchedStates,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' FetchedStateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' FetchedStateName);                  CreateJobInState(database' ObjectId.GenerateNewId(3)' EnqueuedState.StateName);                    var resultList = monitoringApi.FetchedJobs(DefaultQueue' From' PerPage);                    Assert.Equal(2' resultList.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FetchedJobs_ReturnsFetchedJobsOnly_WhenMultipleJobsExistsInFetchedAndUnfetchedStates,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' FetchedStateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' FetchedStateName);                  CreateJobInState(database' ObjectId.GenerateNewId(3)' EnqueuedState.StateName);                    var resultList = monitoringApi.FetchedJobs(DefaultQueue' From' PerPage);                    Assert.Equal(2' resultList.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FetchedJobs_ReturnsFetchedJobsOnly_WhenMultipleJobsExistsInFetchedAndUnfetchedStates,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' FetchedStateName);                  CreateJobInState(database' ObjectId.GenerateNewId(2)' FetchedStateName);                  CreateJobInState(database' ObjectId.GenerateNewId(3)' EnqueuedState.StateName);                    var resultList = monitoringApi.FetchedJobs(DefaultQueue' From' PerPage);                    Assert.Equal(2' resultList.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,ProcessingJobs_ReturnsProcessingJobsOnly_WhenMultipleJobsExistsInProcessingSucceededAndEnqueuedState,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' ProcessingState.StateName);                    CreateJobInState(database' ObjectId.GenerateNewId(2)' SucceededState.StateName' jobDto =>                  {                      var processingState = new StateDto()                      {                          Name = ProcessingState.StateName'                          Reason = null'                          CreatedAt = DateTime.UtcNow'                          Data = new Dictionary<string' string>                          {                              ["ServerId"] = Guid.NewGuid().ToString()'                              ["StartedAt"] =                              JobHelper.SerializeDateTime(DateTime.UtcNow.Subtract(TimeSpan.FromMilliseconds(500)))                          }                      };                      var succeededState = jobDto.StateHistory[0];                      jobDto.StateHistory = new[] { processingState' succeededState };                      return jobDto;                  });                    CreateJobInState(database' ObjectId.GenerateNewId(3)' EnqueuedState.StateName);                    var resultList = monitoringApi.ProcessingJobs(From' PerPage);                    Assert.Single(resultList);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,ProcessingJobs_ReturnsProcessingJobsOnly_WhenMultipleJobsExistsInProcessingSucceededAndEnqueuedState,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' ProcessingState.StateName);                    CreateJobInState(database' ObjectId.GenerateNewId(2)' SucceededState.StateName' jobDto =>                  {                      var processingState = new StateDto()                      {                          Name = ProcessingState.StateName'                          Reason = null'                          CreatedAt = DateTime.UtcNow'                          Data = new Dictionary<string' string>                          {                              ["ServerId"] = Guid.NewGuid().ToString()'                              ["StartedAt"] =                              JobHelper.SerializeDateTime(DateTime.UtcNow.Subtract(TimeSpan.FromMilliseconds(500)))                          }                      };                      var succeededState = jobDto.StateHistory[0];                      jobDto.StateHistory = new[] { processingState' succeededState };                      return jobDto;                  });                    CreateJobInState(database' ObjectId.GenerateNewId(3)' EnqueuedState.StateName);                    var resultList = monitoringApi.ProcessingJobs(From' PerPage);                    Assert.Single(resultList);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,ProcessingJobs_ReturnsProcessingJobsOnly_WhenMultipleJobsExistsInProcessingSucceededAndEnqueuedState,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  CreateJobInState(database' ObjectId.GenerateNewId(1)' ProcessingState.StateName);                    CreateJobInState(database' ObjectId.GenerateNewId(2)' SucceededState.StateName' jobDto =>                  {                      var processingState = new StateDto()                      {                          Name = ProcessingState.StateName'                          Reason = null'                          CreatedAt = DateTime.UtcNow'                          Data = new Dictionary<string' string>                          {                              ["ServerId"] = Guid.NewGuid().ToString()'                              ["StartedAt"] =                              JobHelper.SerializeDateTime(DateTime.UtcNow.Subtract(TimeSpan.FromMilliseconds(500)))                          }                      };                      var succeededState = jobDto.StateHistory[0];                      jobDto.StateHistory = new[] { processingState' succeededState };                      return jobDto;                  });                    CreateJobInState(database' ObjectId.GenerateNewId(3)' EnqueuedState.StateName);                    var resultList = monitoringApi.ProcessingJobs(From' PerPage);                    Assert.Single(resultList);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,ProcessingJobs_ReturnsLatestStateHistory_WhenJobRequeued,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var oldServerId = "oldserverid";                  var newServerId = "newserverid";                  var oldStartTime = DateTime.UtcNow.AddMinutes(-30);                  var newStartTime = DateTime.UtcNow;                    CreateJobInState(database' ObjectId.GenerateNewId(2)' ProcessingState.StateName' jobDto =>                  {                      var firstProcessingState = new StateDto()                      {                          Name = ProcessingState.StateName'                          Reason = null'                          CreatedAt = oldStartTime'                          Data = new Dictionary<string' string>                          {                              ["ServerId"] = oldServerId'                              ["StartedAt"] = JobHelper.SerializeDateTime(oldStartTime)                          }                      };                      var latestProcessingState = jobDto.StateHistory[0];                      latestProcessingState.CreatedAt = newStartTime;                      latestProcessingState.Data["ServerId"] = newServerId;                      latestProcessingState.Data["StartedAt"] = JobHelper.SerializeDateTime(newStartTime);                      jobDto.StateHistory = new[] { firstProcessingState' latestProcessingState };                      return jobDto;                  });                                    var resultList = monitoringApi.ProcessingJobs(From' PerPage);                    Assert.Single(resultList);                  Assert.Equal(newServerId' resultList[0].Value.ServerId);                  Assert.Equal(newStartTime' resultList[0].Value.StartedAt);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,ProcessingJobs_ReturnsLatestStateHistory_WhenJobRequeued,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var oldServerId = "oldserverid";                  var newServerId = "newserverid";                  var oldStartTime = DateTime.UtcNow.AddMinutes(-30);                  var newStartTime = DateTime.UtcNow;                    CreateJobInState(database' ObjectId.GenerateNewId(2)' ProcessingState.StateName' jobDto =>                  {                      var firstProcessingState = new StateDto()                      {                          Name = ProcessingState.StateName'                          Reason = null'                          CreatedAt = oldStartTime'                          Data = new Dictionary<string' string>                          {                              ["ServerId"] = oldServerId'                              ["StartedAt"] = JobHelper.SerializeDateTime(oldStartTime)                          }                      };                      var latestProcessingState = jobDto.StateHistory[0];                      latestProcessingState.CreatedAt = newStartTime;                      latestProcessingState.Data["ServerId"] = newServerId;                      latestProcessingState.Data["StartedAt"] = JobHelper.SerializeDateTime(newStartTime);                      jobDto.StateHistory = new[] { firstProcessingState' latestProcessingState };                      return jobDto;                  });                                    var resultList = monitoringApi.ProcessingJobs(From' PerPage);                    Assert.Single(resultList);                  Assert.Equal(newServerId' resultList[0].Value.ServerId);                  Assert.Equal(newStartTime' resultList[0].Value.StartedAt);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FailedJobs_ReturnsFailedJobs_InDescendingOrder,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var failedJob0 = CreateJobInState(database' ObjectId.GenerateNewId(1)' FailedState.StateName);                  var failedJob1 = CreateJobInState(database' ObjectId.GenerateNewId(2)' FailedState.StateName);                  var failedJob2 = CreateJobInState(database' ObjectId.GenerateNewId(3)' FailedState.StateName);                    var resultList = monitoringApi.FailedJobs(From' PerPage);                    Assert.Equal(failedJob0.Id.ToString()' resultList[2].Key);                  Assert.Equal(failedJob1.Id.ToString()' resultList[1].Key);                  Assert.Equal(failedJob2.Id.ToString()' resultList[0].Key);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FailedJobs_ReturnsFailedJobs_InDescendingOrder,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var failedJob0 = CreateJobInState(database' ObjectId.GenerateNewId(1)' FailedState.StateName);                  var failedJob1 = CreateJobInState(database' ObjectId.GenerateNewId(2)' FailedState.StateName);                  var failedJob2 = CreateJobInState(database' ObjectId.GenerateNewId(3)' FailedState.StateName);                    var resultList = monitoringApi.FailedJobs(From' PerPage);                    Assert.Equal(failedJob0.Id.ToString()' resultList[2].Key);                  Assert.Equal(failedJob1.Id.ToString()' resultList[1].Key);                  Assert.Equal(failedJob2.Id.ToString()' resultList[0].Key);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FailedJobs_ReturnsFailedJobs_InDescendingOrder,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var failedJob0 = CreateJobInState(database' ObjectId.GenerateNewId(1)' FailedState.StateName);                  var failedJob1 = CreateJobInState(database' ObjectId.GenerateNewId(2)' FailedState.StateName);                  var failedJob2 = CreateJobInState(database' ObjectId.GenerateNewId(3)' FailedState.StateName);                    var resultList = monitoringApi.FailedJobs(From' PerPage);                    Assert.Equal(failedJob0.Id.ToString()' resultList[2].Key);                  Assert.Equal(failedJob1.Id.ToString()' resultList[1].Key);                  Assert.Equal(failedJob2.Id.ToString()' resultList[0].Key);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,SucceededByDatesCount_ReturnsSuccededJobs_ForLastWeek,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var date = DateTime.UtcNow.Date;                  var succededCount = 10L;                                    database.JobGraph.OfType<CounterDto>().InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during date change... seems unlikely                      // TODO' wrap Datetime in a mock friendly wrapper                      Key = $"stats:succeeded:{date:yyyy-MM-dd}"'                       Value = succededCount                  });                               var results = monitoringApi.SucceededByDatesCount();                                    Assert.Equal(succededCount' results[date]);                  Assert.Equal(8' results.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,SucceededByDatesCount_ReturnsSuccededJobs_ForLastWeek,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var date = DateTime.UtcNow.Date;                  var succededCount = 10L;                                    database.JobGraph.OfType<CounterDto>().InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during date change... seems unlikely                      // TODO' wrap Datetime in a mock friendly wrapper                      Key = $"stats:succeeded:{date:yyyy-MM-dd}"'                       Value = succededCount                  });                               var results = monitoringApi.SucceededByDatesCount();                                    Assert.Equal(succededCount' results[date]);                  Assert.Equal(8' results.Count);              });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,HourlySucceededJobs_ReturnsSuccededJobs_ForLast24Hours,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var now = DateTime.UtcNow;                                    var succeededCount = 10L;                  database.JobGraph.InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during hour change... still unlikely                      // TODO' wrap Datetime in a mock friendly wrapper                      Key = $"stats:succeeded:{now:yyyy-MM-dd-HH}"'                       Value = succeededCount                  });                                    var results = monitoringApi.HourlySucceededJobs();                                    Assert.Equal(succeededCount' results.First(kv => kv.Key.Hour.Equals(now.Hour)).Value);                  Assert.Equal(24' results.Count);                });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,HourlySucceededJobs_ReturnsSuccededJobs_ForLast24Hours,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var now = DateTime.UtcNow;                                    var succeededCount = 10L;                  database.JobGraph.InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during hour change... still unlikely                      // TODO' wrap Datetime in a mock friendly wrapper                      Key = $"stats:succeeded:{now:yyyy-MM-dd-HH}"'                       Value = succeededCount                  });                                    var results = monitoringApi.HourlySucceededJobs();                                    Assert.Equal(succeededCount' results.First(kv => kv.Key.Hour.Equals(now.Hour)).Value);                  Assert.Equal(24' results.Count);                });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FailedByDatesCount_ReturnsFailedJobs_ForLastWeek,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var date = DateTime.UtcNow.Date;                  var failedCount = 10L;                                    database.JobGraph.OfType<CounterDto>().InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during date change... seems unlikely                      Key = $"stats:failed:{date:yyyy-MM-dd}"'                       Value = failedCount                  });                                    var results = monitoringApi.FailedByDatesCount();                                    Assert.Equal(failedCount' results[date]);                  Assert.Equal(8' results.Count);                });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,FailedByDatesCount_ReturnsFailedJobs_ForLastWeek,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var date = DateTime.UtcNow.Date;                  var failedCount = 10L;                                    database.JobGraph.OfType<CounterDto>().InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during date change... seems unlikely                      Key = $"stats:failed:{date:yyyy-MM-dd}"'                       Value = failedCount                  });                                    var results = monitoringApi.FailedByDatesCount();                                    Assert.Equal(failedCount' results[date]);                  Assert.Equal(8' results.Count);                });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,HourlyFailedJobs_ReturnsFailedJobs_ForLast24Hours,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var now = DateTime.UtcNow;                  var failedCount = 10L;                                  database.JobGraph.OfType<CounterDto>().InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during hour change... still unlikely                      // TODO' wrap Datetime in a mock friendly wrapper                      Key = $"stats:failed:{now:yyyy-MM-dd-HH}"'                       Value = failedCount                  });                                   var results = monitoringApi.HourlyFailedJobs();                                    Assert.Equal(failedCount' results.First(kv => kv.Key.Hour.Equals(now.Hour)).Value);                  Assert.Equal(24' results.Count);                });
Magic Number,Hangfire.Mongo.Tests,MongoMonitoringApiFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoMonitoringApiFacts.cs,HourlyFailedJobs_ReturnsFailedJobs_ForLast24Hours,The following statement contains a magic number: UseMonitoringApi((database' monitoringApi) =>              {                  var now = DateTime.UtcNow;                  var failedCount = 10L;                                  database.JobGraph.OfType<CounterDto>().InsertOne(new CounterDto                  {                      Id = ObjectId.GenerateNewId()'                      // this might fail if we test during hour change... still unlikely                      // TODO' wrap Datetime in a mock friendly wrapper                      Key = $"stats:failed:{now:yyyy-MM-dd-HH}"'                       Value = failedCount                  });                                   var results = monitoringApi.HourlyFailedJobs();                                    Assert.Equal(failedCount' results.First(kv => kv.Key.Hour.Equals(now.Hour)).Value);                  Assert.Equal(24' results.Count);                });
Magic Number,Hangfire.Mongo.Tests,MongoNotificationObserverErrorFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoNotificationObserverErrorFacts.cs,MongoNotificationObserverErrorFacts,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Hangfire.Mongo.Tests,MongoNotificationObserverErrorFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoNotificationObserverErrorFacts.cs,Execute_CollectionNotCapped_Stops,The following statement contains a magic number: var signalled = signal.Wait(1000);
Magic Number,Hangfire.Mongo.Tests,MongoNotificationObserverFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoNotificationObserverFacts.cs,MongoNotificationObserverFacts,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Hangfire.Mongo.Tests,MongoNotificationObserverFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoNotificationObserverFacts.cs,Execute_JobEnqueued_Signaled,The following statement contains a magic number: signal.Wait(1000);
Magic Number,Hangfire.Mongo.Tests,MongoNotificationObserverFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoNotificationObserverFacts.cs,Execute_LockReleasedEnqueued_Signaled,The following statement contains a magic number: signal.Wait(1000);
Magic Number,Hangfire.Mongo.Tests,MongoStorageOptionsFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoStorageOptionsFacts.cs,Ctor_SetsTheDefaultOptions_ShouldGenerateUniqueClientId,The following statement contains a magic number: Assert.Equal(3' result.Count());
Magic Number,Hangfire.Mongo.Tests,MongoVersionHelperFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoVersionHelperFacts.cs,GetVersion_HasAdditionalInfo_Success,The following statement contains a magic number: Assert.Equal(version' new Version(3' 6' 4));
Magic Number,Hangfire.Mongo.Tests,MongoVersionHelperFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoVersionHelperFacts.cs,GetVersion_HasAdditionalInfo_Success,The following statement contains a magic number: Assert.Equal(version' new Version(3' 6' 4));
Magic Number,Hangfire.Mongo.Tests,MongoVersionHelperFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoVersionHelperFacts.cs,GetVersion_HasAdditionalInfo_Success,The following statement contains a magic number: Assert.Equal(version' new Version(3' 6' 4));
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,ExpireJob_SetsJobExpirationData,The following statement contains a magic number: UseConnection(database =>              {                  JobDto job = new JobDto                  {                      Id = ObjectId.GenerateNewId(1)'                      InvocationData = ""'                      Arguments = ""'                      CreatedAt = DateTime.UtcNow                  };                  database.JobGraph.InsertOne(job);                    JobDto anotherJob = new JobDto                  {                      Id = ObjectId.GenerateNewId(2)'                      InvocationData = ""'                      Arguments = ""'                      CreatedAt = DateTime.UtcNow                  };                  database.JobGraph.InsertOne(anotherJob);                    var jobId = job.Id.ToString();                  var anotherJobId = anotherJob.Id.ToString();                    Commit(database' x => x.ExpireJob(jobId.ToString()' TimeSpan.FromDays(1)));                    var testJob = GetTestJob(database' jobId);                  Assert.True(DateTime.UtcNow.AddMinutes(-1) < testJob.ExpireAt && testJob.ExpireAt <= DateTime.UtcNow.AddDays(1));                    var anotherTestJob = GetTestJob(database' anotherJobId);                  Assert.Null(anotherTestJob.ExpireAt);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,PersistJob_ClearsTheJobExpirationData,The following statement contains a magic number: UseConnection(database =>              {                  JobDto job = new JobDto                  {                      Id = ObjectId.GenerateNewId(1)'                      InvocationData = ""'                      Arguments = ""'                      CreatedAt = DateTime.UtcNow'                      ExpireAt = DateTime.UtcNow                  };                  database.JobGraph.InsertOne(job);                    JobDto anotherJob = new JobDto                  {                      Id = ObjectId.GenerateNewId(2)'                      InvocationData = ""'                      Arguments = ""'                      CreatedAt = DateTime.UtcNow'                      ExpireAt = DateTime.UtcNow                  };                  database.JobGraph.InsertOne(anotherJob);                    var jobId = job.Id.ToString();                  var anotherJobId = anotherJob.Id.ToString();                    Commit(database' x => x.PersistJob(jobId.ToString()));                    var testjob = GetTestJob(database' jobId);                  Assert.Null(testjob.ExpireAt);                    var anotherTestJob = GetTestJob(database' anotherJobId);                  Assert.NotNull(anotherTestJob.ExpireAt);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,SetJobState_AppendsAStateAndSetItToTheJob,The following statement contains a magic number: UseConnection(database =>              {                  JobDto job = new JobDto                  {                      Id = ObjectId.GenerateNewId(1)'                      InvocationData = ""'                      Arguments = ""'                      CreatedAt = DateTime.UtcNow                  };                  database.JobGraph.InsertOne(job);                    JobDto anotherJob = new JobDto                  {                      Id = ObjectId.GenerateNewId(2)'                      InvocationData = ""'                      Arguments = ""'                      CreatedAt = DateTime.UtcNow                  };                  database.JobGraph.InsertOne(anotherJob);                    var jobId = job.Id.ToString();                  var anotherJobId = anotherJob.Id.ToString();                  var serializedData = new Dictionary<string' string> { { "Name"' "Value" } };                    var state = new Mock<IState>();                  state.Setup(x => x.Name).Returns("State");                  state.Setup(x => x.Reason).Returns("Reason");                  state.Setup(x => x.SerializeData()).Returns(serializedData);                    Commit(database' x => x.SetJobState(jobId.ToString()' state.Object));                    var testJob = GetTestJob(database' jobId);                  Assert.Equal("State"' testJob.StateName);                  Assert.Single(testJob.StateHistory);                    var anotherTestJob = GetTestJob(database' anotherJobId);                  Assert.Null(anotherTestJob.StateName);                  Assert.Empty(anotherTestJob.StateHistory);                    var jobWithStates = database.JobGraph.OfType<JobDto>().Find(new BsonDocument()).FirstOrDefault();                    var jobState = jobWithStates.StateHistory.Single();                  Assert.Equal("State"' jobState.Name);                  Assert.Equal("Reason"' jobState.Reason);                  Assert.Equal(serializedData' jobState.Data);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.IncrementCounter("my-key"' TimeSpan.FromDays(1)));                    CounterDto counter = database.JobGraph.OfType<CounterDto>().Find(new BsonDocument()).Single();                    Assert.Equal("my-key"' counter.Key);                  Assert.Equal(1L' counter.Value);                  Assert.NotNull(counter.ExpireAt);                    var expireAt = (DateTime)counter.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.IncrementCounter("my-key"' TimeSpan.FromDays(1)));                    CounterDto counter = database.JobGraph.OfType<CounterDto>().Find(new BsonDocument()).Single();                    Assert.Equal("my-key"' counter.Key);                  Assert.Equal(1L' counter.Value);                  Assert.NotNull(counter.ExpireAt);                    var expireAt = (DateTime)counter.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,IncrementCounter_WithExistingKey_AddsAnotherRecord,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.IncrementCounter("my-key");                      x.IncrementCounter("my-key");                  });                    var counter = database.JobGraph.OfType<CounterDto>()                      .Find(new BsonDocument(nameof(CounterDto.Key)' "my-key")).FirstOrDefault();                                    Assert.NotNull(counter);                  Assert.Equal(2' counter.Value);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.DecrementCounter("my-key"' TimeSpan.FromDays(1)));                    CounterDto counter = database.JobGraph.OfType<CounterDto>().Find(new BsonDocument()).Single();                    Assert.Equal("my-key"' counter.Key);                  Assert.Equal(-1L' counter.Value);                  Assert.NotNull(counter.ExpireAt);                    var expireAt = (DateTime)counter.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.DecrementCounter("my-key"' TimeSpan.FromDays(1)));                    CounterDto counter = database.JobGraph.OfType<CounterDto>().Find(new BsonDocument()).Single();                    Assert.Equal("my-key"' counter.Key);                  Assert.Equal(-1L' counter.Value);                  Assert.NotNull(counter.ExpireAt);                    var expireAt = (DateTime)counter.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,DecrementCounter_WithExistingKey_AddsAnotherRecord,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.DecrementCounter("my-key");                      x.DecrementCounter("my-key");                  });                    var counter = database.JobGraph.OfType<CounterDto>().Find(new BsonDocument()).Single();                    Assert.Equal(-2' counter.Value);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.AddToSet("my-key"' "my-value"));                    SetDto record = database.JobGraph.OfType<SetDto>().Find(new BsonDocument()).ToList().Single();                    Assert.Equal("my-key<my-value>"' record.Key);                  Assert.Equal(0.0' record.Score' 2);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "another-value");                  });                    var recordCount = database.JobGraph.OfType<SetDto>().Count(new BsonDocument());                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.AddToSet("my-key"' "my-value"' 3.2));                    SetDto record = database.JobGraph.OfType<SetDto>().Find(new BsonDocument()).ToList().Single();                    Assert.Equal("my-key<my-value>"' record.Key);                  Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.AddToSet("my-key"' "my-value"' 3.2));                    SetDto record = database.JobGraph.OfType<SetDto>().Find(new BsonDocument()).ToList().Single();                    Assert.Equal("my-key<my-value>"' record.Key);                  Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x => x.AddToSet("my-key"' "my-value"' 3.2));                    SetDto record = database.JobGraph.OfType<SetDto>().Find(new BsonDocument()).ToList().Single();                    Assert.Equal("my-key<my-value>"' record.Key);                  Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "my-value"' 3.2);                  });                    SetDto record = database.JobGraph.OfType<SetDto>().Find(new BsonDocument()).ToList().Single();                    Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "my-value"' 3.2);                  });                    SetDto record = database.JobGraph.OfType<SetDto>().Find(new BsonDocument()).ToList().Single();                    Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "my-value"' 3.2);                  });                    SetDto record = database.JobGraph.OfType<SetDto>().Find(new BsonDocument()).ToList().Single();                    Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.InsertToList("my-key"' "my-value");                      x.InsertToList("my-key"' "my-value");                  });                    var recordCount = database.JobGraph.OfType<ListDto>().Count(new BsonDocument());                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,TrimList_TrimsAList_ToASpecifiedRange,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.InsertToList("my-key"' "3");                      x.TrimList("my-key"' 1' 2);                  });                    ListDto[] records = database.JobGraph.OfType<ListDto>().Find(new BsonDocument()).ToList().ToArray();                    Assert.Equal(2' records.Length);                  Assert.Equal("1"' records[0].Value);                  Assert.Equal("2"' records[1].Value);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,TrimList_TrimsAList_ToASpecifiedRange,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.InsertToList("my-key"' "3");                      x.TrimList("my-key"' 1' 2);                  });                    ListDto[] records = database.JobGraph.OfType<ListDto>().Find(new BsonDocument()).ToList().ToArray();                    Assert.Equal(2' records.Length);                  Assert.Equal("1"' records[0].Value);                  Assert.Equal("2"' records[1].Value);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.TrimList("my-key"' 1' 100);                  });                    var recordCount = database.JobGraph.OfType<ListDto>().Count(new BsonDocument());                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.TrimList("my-key"' 1' 100);                  });                    var recordCount = database.JobGraph.OfType<ListDto>().Count(new BsonDocument());                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(database =>              {                  Commit(database' x =>                  {                      x.InsertToList("my-key"' "0");                      x.TrimList("my-key"' 1' 100);                  });                    var recordCount = database.JobGraph.OfType<ListDto>().Count(new BsonDocument());                    Assert.Equal(0' recordCount);              });
Magic Number,Hangfire.Mongo.Tests,MongoWriteOnlyTransactionFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MongoWriteOnlyTransactionFacts.cs,AddRangeToSet_AddToExistingSetData,The following statement contains a magic number: UseConnection(database =>              {                  // ASSERT                  var set1Val1 = new SetDto { Key = "Set1<value1>"' Value = "value1"' ExpireAt = DateTime.UtcNow };                  database.JobGraph.InsertOne(set1Val1);                    var set1Val2 = new SetDto { Key = "Set1<value2>"' Value = "value2"' ExpireAt = DateTime.UtcNow };                  database.JobGraph.InsertOne(set1Val2);                    var set2 = new SetDto { Key = "Set2<value2>"' Value = "value2"'  ExpireAt = DateTime.UtcNow };                  database.JobGraph.InsertOne(set2);                    var values = new[] { "test1"' "test2"' "test3" };                                    // ACT                  Commit(database' x => x.AddRangeToSet("Set1"' values));                    var testSet1 = GetTestSet(database' "Set1");                  var valuesToTest = new List<string>(values) { "value1"' "value2" };                    Assert.NotNull(testSet1);                  // verify all values are present in testSet1                  Assert.True(testSet1.Select(s => s.Value).All(value => valuesToTest.Contains(value)));                  Assert.Equal(5' testSet1.Count);                    var testSet2 = GetTestSet(database' set2.Key);                  Assert.NotNull(testSet2);                  Assert.Equal(1' testSet2.Count);              });
Magic Number,Hangfire.Mongo.Tests,MultipleServersFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MultipleServersFacts.cs,MultipleServerRunsRecurrentJobs,The following statement contains a magic number: const int serverCount = 20;
Magic Number,Hangfire.Mongo.Tests,MultipleServersFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MultipleServersFacts.cs,MultipleServerRunsRecurrentJobs,The following statement contains a magic number: const int workerCount = 20;
Magic Number,Hangfire.Mongo.Tests,MultipleServersFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\MultipleServersFacts.cs,MultipleServerRunsRecurrentJobs,The following statement contains a magic number: Task.Delay(1000).Wait();
Magic Number,Hangfire.Mongo.Tests.Migration.Mongo,MigrationFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MigrationFacts.cs,Migrate_MultipleInstances_ThereCanBeOnlyOne,The following statement contains a magic number: var taskCount = 10;
Magic Number,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The following statement contains a magic number: var storageOptions = new MongoStorageOptions              {                  MigrationOptions = new MongoMigrationOptions                  {                      Strategy = MongoMigrationStrategy.Drop'                      BackupStrategy = MongoBackupStrategy.None                  }'                  QueuePollInterval = TimeSpan.FromMilliseconds(500)              };
Magic Number,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The following statement contains a magic number: var serverOptions = new BackgroundJobServerOptions              {                  ShutdownTimeout = TimeSpan.FromSeconds(15)              };
Magic Number,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The following statement contains a magic number: BackgroundJob.Schedule(() => HangfireTestJobs.ExecuteScheduledJob("Scheduled job")' TimeSpan.FromSeconds(30));
Magic Number,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The following statement contains a magic number: var parentId = BackgroundJob.Schedule(() => HangfireTestJobs.ExecuteContinueWithJob("ContinueWith job"' false)' TimeSpan.FromSeconds(15));
Magic Number,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The following statement contains a magic number: BackgroundJob.Schedule(() => HangfireTestJobs.ExecuteScheduledJob("Scheduled job (*)")' TimeSpan.FromMinutes(30));
Magic Number,Hangfire.Mongo.Tests.Migration.Mongo,MongoDatabaseFiller,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Mongo\MongoDatabaseFiller.cs,Clean_Database_Filled,The following statement contains a magic number: connection.AcquireDistributedLock("test-lock"' TimeSpan.FromSeconds(30));
Magic Number,Hangfire.Mongo.Tests.Migration,Version15MigrationStepFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Version15MigrationStepFacts.cs,ExecuteStep03_MultipleCountersNotDeleted_OldCountersDeleted,The following statement contains a magic number: Enumerable.Range(0' 5)
Magic Number,Hangfire.Mongo.Tests.Migration,Version15MigrationStepFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Version15MigrationStepFacts.cs,ExecuteStep03_MultipleCountersNotDeleted_OldCountersDeleted,The following statement contains a magic number: var mergedCounter = new BsonDocument              {                  ["_id"] = ObjectId.GenerateNewId()'                  ["Key"] = "stats:succeeded"'                  ["Value"] = 5L'                  ["ExpireAt"] = BsonNull.Value'                  ["_t"] = "CounterDto"              };
Magic Number,Hangfire.Mongo.Tests.Migration,Version15MigrationStepFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Version15MigrationStepFacts.cs,ExecuteStep03_MultipleCountersNotDeleted_OldCountersDeleted,The following statement contains a magic number: Assert.Equal(5' remainingCounter["Value"].AsInt64);
Magic Number,Hangfire.Mongo.Tests.Migration,Version15MigrationStepFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Version15MigrationStepFacts.cs,ExecuteStep03_MultipleCountersDifferentValues_CountersMerged,The following statement contains a magic number: Enumerable.Range(0' 5)
Magic Number,Hangfire.Mongo.Tests.Migration,Version15MigrationStepFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Version15MigrationStepFacts.cs,ExecuteStep03_MultipleCountersDifferentValues_CountersMerged,The following statement contains a magic number: var mergedCounter = new BsonDocument              {                  ["_id"] = ObjectId.GenerateNewId()'                  ["Key"] = "stats:succeeded"'                  ["Value"] = 5L'                  ["ExpireAt"] = BsonNull.Value'                  ["_t"] = "CounterDto"              };
Magic Number,Hangfire.Mongo.Tests.Migration,Version15MigrationStepFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Version15MigrationStepFacts.cs,ExecuteStep03_MultipleCountersDifferentValues_CountersMerged,The following statement contains a magic number: var aggregatedCounter = new BsonDocument              {                  ["_id"] = ObjectId.GenerateNewId()'                  ["Key"] = "stats:succeeded"'                  ["Value"] = 5L'                  ["ExpireAt"] = BsonNull.Value'                  ["_t"] = "CounterDto"              };
Magic Number,Hangfire.Mongo.Tests.Migration,Version15MigrationStepFacts,D:\research\architectureSmells\repos1\sergun_Hangfire.Mongo\src\Hangfire.Mongo.Tests\Migration\Version15MigrationStepFacts.cs,ExecuteStep03_MultipleCountersDifferentValues_CountersMerged,The following statement contains a magic number: Assert.Equal(10' remainingCounter["Value"].AsInt64);
