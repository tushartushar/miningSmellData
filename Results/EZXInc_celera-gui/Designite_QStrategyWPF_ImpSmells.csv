Implementation smell,Namespace,Class,File,Method,Description
Long Method,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The method has 118 lines of code.
Complex Method,QStrategyWPF.Converters,ContextMenuIsOpenToEnableConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\ContextMenuIsOpenToEnableConverter.cs,Convert,Cyclomatic complexity of the method is 17
Complex Method,QStrategyWPF.Converters,EngineStatusToStatusColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\EngineStatusToStatusColorConverter.cs,Convert,Cyclomatic complexity of the method is 11
Complex Method,QStrategyWPF.Converters,NumberToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\NumberToColorConverter.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,QStrategyWPF.Converters,StrategyStatusToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\StrategyStatusToColorConverter.cs,Convert,Cyclomatic complexity of the method is 20
Complex Method,QStrategyWPF,DataManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\DataManager.cs,UpdateStrategyData,Cyclomatic complexity of the method is 8
Complex Method,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,Cyclomatic complexity of the method is 13
Complex Method,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetTextFormRersources,Cyclomatic complexity of the method is 18
Complex Method,QStrategyWPF.View,AlertView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\AlertView.xaml.cs,AlertView,Cyclomatic complexity of the method is 10
Complex Method,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,Cyclomatic complexity of the method is 12
Complex Method,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GetSelectedStrategyAndSymbol,Cyclomatic complexity of the method is 20
Complex Method,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,Cyclomatic complexity of the method is 11
Complex Method,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,startStopRowButton_Click,Cyclomatic complexity of the method is 8
Complex Method,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,Cyclomatic complexity of the method is 10
Complex Method,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GetSelectedStrategyAndSymbol,Cyclomatic complexity of the method is 16
Long Parameter List,QStrategyWPF.Converters,ContextMenuIsOpenToEnableConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\ContextMenuIsOpenToEnableConverter.cs,Convert,The method has 10 parameters.
Long Identifier,QStrategyWPF.Converters,SeedRemainingThresholdToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\SeedRemainingThresholdToColorConverter.cs,Convert,The length of the parameter TenPercentOfseedRemainingThreshold is 34.
Long Identifier,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The length of the parameter isHitByMaxLossBackgroundColorBinding is 36.
Long Identifier,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The length of the parameter statusBackgroundColorMultiBinding is 33.
Long Identifier,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The length of the parameter isHitByMaxLossBackgroundColorBinding is 36.
Long Identifier,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The length of the parameter statusBackgroundColorMultiBinding is 33.
Long Statement,QStrategyWPF.Converters,ContextMenuIsOpenToEnableConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\ContextMenuIsOpenToEnableConverter.cs,Convert,The length of the statement  "	if (App.AppManager != null && App.AppManager.DataMgr != null && App.AppManager.DataMgr.SelectedSymbolOrderInfoList != null && App.AppManager.DataMgr.SelectedSymbolOrderInfoList.Count > 0 && parameter != null && parameter is string) { " is 233.
Long Statement,QStrategyWPF,DataManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\DataManager.cs,UpdateStrategyData,The length of the statement  "					this.StrategyList.Add (new Strategy (updateOrderList [i].Strategy.StrategyId' updateOrderList [i].Strategy.StrategyName)); " is 122.
Long Statement,QStrategyWPF,DataManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\DataManager.cs,ModifyListCollectionView,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: ModifyListCollectionView({1}'{2}'{3})"' "DataManager"' strategyIdKey' symbolKey' operation); " is 148.
Long Statement,QStrategyWPF,DataManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\DataManager.cs,ModifySummaryListCollectionView,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: ModifySummaryListCollectionView({1}'{2})"' "DataManager"' key' operation); " is 130.
Long Statement,QStrategyWPF,DataManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\DataManager.cs,ModifyStrategyStatusListCollectionView,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: ModifyStrategyStatusListCollectionView({1}'{2}'{3})"' "DataManager"' strategyIdKey' symbolKey' operation); " is 162.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Initialize,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Initialize(CommunicationManager comMgr)"); " is 127.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Init,The length of the statement  "	if ((ConfigurationManager.AppSettings.AllKeys.Contains ("AUTOREFRESH_INTERVAL")) && (int.TryParse (ConfigurationManager.AppSettings ["AUTOREFRESH_INTERVAL"]' out autoRefreshSec))) { " is 181.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Init,The length of the statement  "	logMessage = string.Format ("Class: {0}' Method: {1}' Set auto-refresh interval: {2}"' "ApplicationManager"' "Init()"' autoRefreshSec); " is 135.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Start,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Start(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 169.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Stop,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Stop(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 168.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Cancel,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Cancel(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 170.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Buy,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Buy(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 167.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Sell,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Sell(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 168.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Both,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Both(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 168.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Unwind,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Unwind(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 170.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Lock,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Lock(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 168.
Long Statement,QStrategyWPF,ApplicationManager,C:\repos\EZXInc_celera-gui\QStrategyWPF\ApplicationManager.cs,Unlock,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "ApplicationManager"' "Unlock(Dictionary<string' List<string>> _strategySymbolDictionary' bool allSymbol)"); " is 170.
Long Statement,QStrategyWPF,MainWindow,C:\repos\EZXInc_celera-gui\QStrategyWPF\MainWindow.xaml.cs,IsStrategyStatusExists,The length of the statement  "			if (orderInfo != null && !string.IsNullOrEmpty (orderInfo.Status) && orderInfo.Status.ToUpper ().Equals (strategyStatus.ToUpper ())) { " is 134.
Long Statement,QStrategyWPF,MainWindow,C:\repos\EZXInc_celera-gui\QStrategyWPF\MainWindow.xaml.cs,LoginTimer_Tick,The length of the statement  "		string logMessage = string.Format ("Class: {0}' Method: {1}' ApplicationConnectionMode.LOGOUT occurred!"' "MainWindow"' "LoginTimer_Tick(...)"); " is 144.
Long Statement,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetTextFormRersources,The length of the statement  "	if (propertyName.Equals ("PnL") || propertyName.Equals ("UR_PnL") || propertyName.Equals ("PositionShares") || propertyName.Equals ("PositionAmount") || propertyName.Equals ("OpenOrders") || propertyName.Equals ("PnLPerShares") || propertyName.Equals ("TradingRevenue") || propertyName.Equals ("RebateRevenue") || propertyName.Equals ("MaxLoss")) { " is 348.
Long Statement,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetTextFormRersources,The length of the statement  "	else if (propertyName.Equals ("Position_Shares") || propertyName.Equals ("Position_Amount") || propertyName.Equals ("Number_Of_Open_Orders") || propertyName.Equals ("PnL_Per_Share") || propertyName.Equals ("Trading_Revenue") || propertyName.Equals ("Rebate_Revenue") || propertyName.Equals ("Max_Loss")) { " is 305.
Long Statement,QStrategyWPF.ViewModel,LoginVM,C:\repos\EZXInc_celera-gui\QStrategyWPF\ViewModel\LoginVM.cs,ValidateConnectionStatus,The length of the statement  "		logMessage = string.Format ("Class: {0}' Method: {1}"' "LoginVM"' "ValidateConnectionStatus(...)' Connection failed!" + ex.Message); " is 132.
Long Statement,QStrategyWPF.View,AlertView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\AlertView.xaml.cs,btnYes_Click,The length of the statement  "	if (alertType == AlertType.START || alertType == AlertType.STOP || alertType == AlertType.LOCK || alertType == AlertType.UNLOCK || alertType == AlertType.BUY || alertType == AlertType.SELL || alertType == AlertType.BOTH) { " is 222.
Long Statement,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,SetConnectionSetting,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: {1}"' "LoginView"' "SetConnectionSetting()' Get value from config and set in TextBox Host/Port"); " is 153.
Long Statement,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,SetConnectionSetting,The length of the statement  "		logMessage = string.Format ("Class: {0}' Method: {1}' ServerURL: {2}"' "LoginView"' "SetConnectionSetting()"' ServerURL); " is 121.
Long Statement,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,UpdateSetting,The length of the statement  "	string logMessage = string.Format ("Class: {0}' Method: UpdateSetting(string {1}' string {2})"' "LoginView"' key' value); " is 121.
Long Statement,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,button1_Click,The length of the statement  "		logMessage = string.Format ("Class: {0}' Method: {1}' Message: {2}"' "LoginView"' "button1_Click(...)"' this.VM.ErroMessage); " is 125.
Long Statement,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,AllowUIToUpdate,The length of the statement  "	Dispatcher.CurrentDispatcher.BeginInvoke (DispatcherPriority.Render' new DispatcherOperationCallback (delegate (object parameter) { " is 131.
Long Statement,QStrategyWPF.View,StatusbarUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\StatusbarUserControl.xaml.cs,Button_Click,The length of the statement  "	string msg = "Connection error occurred!\nPlease check network-connection and strategy-engine status." + "\n\nException Details\n" + App.AppManager.StgEngine.LastInvalidSymbolUpdateMessage + "\n" + App.AppManager.StgEngine.LastInvalidSymbolUpdateMessageDetail; " is 260.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The length of the statement  "		if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) { " is 192.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The length of the statement  "			statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter; " is 137.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The length of the statement  "			multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter; " is 132.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The length of the statement  "		else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) { " is 233.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The length of the statement  "		else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) { " is 123.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,CreateMessageText,The length of the statement  "		string strategyName = App.AppManager.DataMgr.StrategyList.Where (s => s.StrategyId == key).Select (s => s.StrategyName).FirstOrDefault (); " is 138.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,fltdg_Loaded,The length of the statement  "	if (buttonSelectAll != null && buttonSelectAll.Command != null && buttonSelectAll.Command == DataGrid.SelectAllCommand) { " is 121.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,RegisterForColumnWidthsChanged,The length of the statement  "		DependencyPropertyDescriptor dpd = DependencyPropertyDescriptor.FromProperty (DataGridColumn.ActualWidthProperty' typeof(DataGridColumn)); " is 138.
Long Statement,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,UpdateColumnsLayout,The length of the statement  "			if (((colIndex + 1) <= fltdg.Columns.Count) && ((colIndex + 1) <= fltdgSummary.Columns.Count) && (fltdgSummary.Columns [colIndex] != null) && (fltdg.Columns [colIndex] != null)) { " is 179.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The length of the statement  "		if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) { " is 192.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The length of the statement  "			statusBackgroundColorBinding.Converter = App.Current.Resources ["EngineStatusToStatusColorConverter"] as EngineStatusToStatusColorConverter; " is 140.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The length of the statement  "			multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter; " is 132.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The length of the statement  "		else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) { " is 227.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,startStopRowButton_Click,The length of the statement  "				string messageTextLine2 = string.Format ("{0}"' App.AppManager.DataMgr.StrategyList.Where (s => s.StrategyId == key).Select (s => s.StrategyName).FirstOrDefault ()); " is 165.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,cancelAllRowButton_Click,The length of the statement  "			string messageTextLine2 = string.Format ("{0}"' App.AppManager.DataMgr.StrategyList.Where (s => s.StrategyId == key).Select (s => s.StrategyName).FirstOrDefault ()); " is 165.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,lockUnLockRowButton_Click,The length of the statement  "			string messageTextLine2 = string.Format ("{0}"' App.AppManager.DataMgr.StrategyList.Where (s => s.StrategyId == key).Select (s => s.StrategyName).FirstOrDefault ()); " is 165.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GetSelectedStrategyAndSymbol,The length of the statement  "			if ((_alertType == AlertType.STOP && (App.AppManager.DataMgr.StrategyOrderDictionary [strategyId] [symbol].Status == "Stopped") || App.AppManager.DataMgr.StrategyOrderDictionary [strategyId] [symbol].Status == "Locked")) { " is 222.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,CreateMessageText,The length of the statement  "		string strategyName = App.AppManager.DataMgr.StrategyList.Where (s => s.StrategyId == key).Select (s => s.StrategyName).FirstOrDefault (); " is 138.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,dgAggregate_Loaded,The length of the statement  "	if (buttonSelectAll != null && buttonSelectAll.Command != null && buttonSelectAll.Command == DataGrid.SelectAllCommand) { " is 121.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,RegisterForColumnWidthsChanged,The length of the statement  "		DependencyPropertyDescriptor dpd = DependencyPropertyDescriptor.FromProperty (DataGridColumn.ActualWidthProperty' typeof(DataGridColumn)); " is 138.
Long Statement,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,UpdateColumnsLayout,The length of the statement  "			if (((colIndex + 1) <= fltdg.Columns.Count) && ((colIndex + 1) <= fltdgSummary.Columns.Count) && (fltdgSummary.Columns [colIndex] != null) && (fltdg.Columns [colIndex] != null)) { " is 179.
Long Statement,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The length of the statement  "		if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) { " is 192.
Long Statement,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The length of the statement  "			statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter; " is 137.
Long Statement,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The length of the statement  "			multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter; " is 132.
Long Statement,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The length of the statement  "		else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) { " is 233.
Long Statement,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The length of the statement  "		else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) { " is 123.
Long Statement,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,CreateMessageText,The length of the statement  "		string strategyName = App.AppManager.DataMgr.StrategyList.Where (s => s.StrategyId == key).Select (s => s.StrategyName).FirstOrDefault (); " is 138.
Complex Conditional,QStrategyWPF.Converters,ContextMenuIsOpenToEnableConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\ContextMenuIsOpenToEnableConverter.cs,Convert,The conditional expression  "App.AppManager != null && App.AppManager.DataMgr != null && App.AppManager.DataMgr.SelectedSymbolOrderInfoList != null && App.AppManager.DataMgr.SelectedSymbolOrderInfoList.Count > 0 && parameter != null && parameter is string"  is complex.
Complex Conditional,QStrategyWPF.Converters,EngineStatusToStatusColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\EngineStatusToStatusColorConverter.cs,Convert,The conditional expression  "(o != null) && (o is string) && parameter != null && parameter is string"  is complex.
Complex Conditional,QStrategyWPF.Converters,SeedRemainingThresholdToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\SeedRemainingThresholdToColorConverter.cs,Convert,The conditional expression  "values != null && values.Count () >= 2 && values [0] is int && values [1] is int"  is complex.
Complex Conditional,QStrategyWPF.Converters,StrategyStatusToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\StrategyStatusToColorConverter.cs,Convert,The conditional expression  "values != null && values.Count () > 1 && values [0] is string && values [1] is bool"  is complex.
Complex Conditional,QStrategyWPF.Converters,StrategyStatusToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\StrategyStatusToColorConverter.cs,Convert,The conditional expression  "(o != null) && (o is string) && parameter != null && parameter is string"  is complex.
Complex Conditional,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetTextFormRersources,The conditional expression  "propertyName.Equals ("PnL") || propertyName.Equals ("UR_PnL") || propertyName.Equals ("PositionShares") || propertyName.Equals ("PositionAmount") || propertyName.Equals ("OpenOrders") || propertyName.Equals ("PnLPerShares") || propertyName.Equals ("TradingRevenue") || propertyName.Equals ("RebateRevenue") || propertyName.Equals ("MaxLoss")"  is complex.
Complex Conditional,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetTextFormRersources,The conditional expression  "propertyName.Equals ("Position_Shares") || propertyName.Equals ("Position_Amount") || propertyName.Equals ("Number_Of_Open_Orders") || propertyName.Equals ("PnL_Per_Share") || propertyName.Equals ("Trading_Revenue") || propertyName.Equals ("Rebate_Revenue") || propertyName.Equals ("Max_Loss")"  is complex.
Complex Conditional,QStrategyWPF.View,AlertView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\AlertView.xaml.cs,btnYes_Click,The conditional expression  "alertType == AlertType.START || alertType == AlertType.STOP || alertType == AlertType.LOCK || alertType == AlertType.UNLOCK || alertType == AlertType.BUY || alertType == AlertType.SELL || alertType == AlertType.BOTH"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The conditional expression  "columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The conditional expression  "column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,UpdateColumnsLayout,The conditional expression  "((colIndex + 1) <= fltdg.Columns.Count) && ((colIndex + 1) <= fltdgSummary.Columns.Count) && (fltdgSummary.Columns [colIndex] != null) && (fltdg.Columns [colIndex] != null)"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The conditional expression  "columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The conditional expression  "column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,UpdateColumnsLayout,The conditional expression  "((colIndex + 1) <= fltdg.Columns.Count) && ((colIndex + 1) <= fltdgSummary.Columns.Count) && (fltdgSummary.Columns [colIndex] != null) && (fltdg.Columns [colIndex] != null)"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The conditional expression  "columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")"  is complex.
Complex Conditional,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The conditional expression  "column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))"  is complex.
Empty Catch Block,QStrategyWPF,App,C:\repos\EZXInc_celera-gui\QStrategyWPF\App.xaml.cs,Current_DispatcherUnhandledException,The method has an empty catch block.
Magic Number,QStrategyWPF.Converters,SeedRemainingThresholdToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\SeedRemainingThresholdToColorConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Count () >= 2 && values [0] is int && values [1] is int) {  	int seedRemaining = (int)values [0];  	int seedRemainingThreshold = (int)values [1];  	if (seedRemaining < seedRemainingThreshold) {  		returnedColor = App.Current.Resources ["SolidColorBrush_Red"] as SolidColorBrush;  	}  	else {  		//double TenPercentOfseedRemainingThreshold = seedRemainingThreshold * 0.10;  		//double TenPercentOfseedRemainingThreshold = seedRemaining * 0.10;  		double TenPercentOfseedRemainingThreshold = 1000;  		double TenPercentAboveThreshold = TenPercentOfseedRemainingThreshold + seedRemainingThreshold;  		if (seedRemaining <= TenPercentAboveThreshold) {  			returnedColor = App.Current.Resources ["SolidColorBrush_Yellow"] as SolidColorBrush;  		}  	}  }  
Magic Number,QStrategyWPF.Converters,SeedRemainingThresholdToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\SeedRemainingThresholdToColorConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Count () >= 2 && values [0] is int && values [1] is int) {  	int seedRemaining = (int)values [0];  	int seedRemainingThreshold = (int)values [1];  	if (seedRemaining < seedRemainingThreshold) {  		returnedColor = App.Current.Resources ["SolidColorBrush_Red"] as SolidColorBrush;  	}  	else {  		//double TenPercentOfseedRemainingThreshold = seedRemainingThreshold * 0.10;  		//double TenPercentOfseedRemainingThreshold = seedRemaining * 0.10;  		double TenPercentOfseedRemainingThreshold = 1000;  		double TenPercentAboveThreshold = TenPercentOfseedRemainingThreshold + seedRemainingThreshold;  		if (seedRemaining <= TenPercentAboveThreshold) {  			returnedColor = App.Current.Resources ["SolidColorBrush_Yellow"] as SolidColorBrush;  		}  	}  }  
Magic Number,QStrategyWPF.Converters,SeedRemainingThresholdToColorConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\SeedRemainingThresholdToColorConverter.cs,Convert,The following statement contains a magic number: if (seedRemaining < seedRemainingThreshold) {  	returnedColor = App.Current.Resources ["SolidColorBrush_Red"] as SolidColorBrush;  }  else {  	//double TenPercentOfseedRemainingThreshold = seedRemainingThreshold * 0.10;  	//double TenPercentOfseedRemainingThreshold = seedRemaining * 0.10;  	double TenPercentOfseedRemainingThreshold = 1000;  	double TenPercentAboveThreshold = TenPercentOfseedRemainingThreshold + seedRemainingThreshold;  	if (seedRemaining <= TenPercentAboveThreshold) {  		returnedColor = App.Current.Resources ["SolidColorBrush_Yellow"] as SolidColorBrush;  	}  }  
Magic Number,QStrategyWPF,MainWindow,C:\repos\EZXInc_celera-gui\QStrategyWPF\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: LoginTimer.Interval = new TimeSpan (0' 0' 2);  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (propertyName != null && propertyName.Length > 5) {  	int headerLength = propertyName.Length;  	if (headerLength > 20) {  		return -1.0;  	}  	else if (headerLength > 14) {  		return 125.0;  	}  	else if (headerLength > 13) {  		return 120.0;  	}  	else if (headerLength > 12) {  		return 115.0;  	}  	else if (headerLength > 11) {  		return 110.0;  	}  	else if (headerLength > 10) {  		return 105.0;  	}  	else if (headerLength > 9) {  		return 100.0;  	}  	else if (headerLength > 8) {  		return 95.0;  	}  	else if (headerLength > 7) {  		return 90.0;  	}  	else if (headerLength > 6) {  		return 85.0;  	}  	else if (headerLength > 5) {  		return 80;  	}  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 20) {  	return -1.0;  }  else if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 14) {  	return 125.0;  }  else if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 125.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 13) {  	return 120.0;  }  else if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 120.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 12) {  	return 115.0;  }  else if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 115.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 11) {  	return 110.0;  }  else if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 110.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 10) {  	return 105.0;  }  else if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 105.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 9) {  	return 100.0;  }  else if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 100.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 8) {  	return 95.0;  }  else if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 95.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 7) {  	return 90.0;  }  else if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 90.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 6) {  	return 85.0;  }  else if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 85.0;  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: if (headerLength > 5) {  	return 80;  }  
Magic Number,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetColumnMinWidth,The following statement contains a magic number: return 80;  
Magic Number,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,AllowUIToUpdate,The following statement contains a magic number: Dispatcher.CurrentDispatcher.BeginInvoke (DispatcherPriority.Render' new DispatcherOperationCallback (delegate (object parameter) {  	frame.Continue = false;  	System.Threading.Thread.Sleep (2000);  	return null;  })' null);  
Magic Number,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,AllowUIToUpdate,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
Magic Number,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,Expander_Collapsed,The following statement contains a magic number: this.Height = 240;  
Magic Number,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,Expander_Expanded,The following statement contains a magic number: this.Height = 300;  
Magic Number,QStrategyWPF.View,LoginView,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\LoginView.xaml.cs,Window_PreviewKeyDown,The following statement contains a magic number: if (e.Key.GetHashCode () == 13) {  	this.Close ();  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  		dgCol.ClipboardContentBinding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  		dgCol.ClipboardContentBinding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  		if (isSummaryRowGrid) {  			autofilterDataGrid.Columns.Add (new DataGridTextColumn {  				Width = 30'  				IsReadOnly = true'  			});  		}  		else {  			FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  			chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  			Binding visibilityBinding = new Binding (column.Name);  			visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  			chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			dgCol.Width = 30;  			dgCol.Header = " ";  			dgCol.IsReadOnly = true;  			FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  			factoryChk.AppendChild (chkBobBlock);  			DataTemplate cellTemplateChk = new DataTemplate ();  			cellTemplateChk.VisualTree = factoryChk;  			dgCol.CellTemplate = cellTemplateChk;  			autofilterDataGrid.Columns.Add (dgCol);  			//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  			//{  			//    Width = 30'  			//    IsReadOnly = true'  			//    Header = " "'  			//    Binding = new Binding(column.Name)'  			//    Visibility = new Binding(column.Name) { }  			//});  		}  		continue;  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  		dgCol.ClipboardContentBinding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  		dgCol.ClipboardContentBinding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  		if (isSummaryRowGrid) {  			autofilterDataGrid.Columns.Add (new DataGridTextColumn {  				Width = 30'  				IsReadOnly = true'  			});  		}  		else {  			FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  			chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  			Binding visibilityBinding = new Binding (column.Name);  			visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  			chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			dgCol.Width = 30;  			dgCol.Header = " ";  			dgCol.IsReadOnly = true;  			FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  			factoryChk.AppendChild (chkBobBlock);  			DataTemplate cellTemplateChk = new DataTemplate ();  			cellTemplateChk.VisualTree = factoryChk;  			dgCol.CellTemplate = cellTemplateChk;  			autofilterDataGrid.Columns.Add (dgCol);  			//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  			//{  			//    Width = 30'  			//    IsReadOnly = true'  			//    Header = " "'  			//    Binding = new Binding(column.Name)'  			//    Visibility = new Binding(column.Name) { }  			//});  		}  		continue;  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  		dgCol.ClipboardContentBinding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  		dgCol.ClipboardContentBinding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  		if (isSummaryRowGrid) {  			autofilterDataGrid.Columns.Add (new DataGridTextColumn {  				Width = 30'  				IsReadOnly = true'  			});  		}  		else {  			FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  			chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  			Binding visibilityBinding = new Binding (column.Name);  			visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  			chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			dgCol.Width = 30;  			dgCol.Header = " ";  			dgCol.IsReadOnly = true;  			FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  			factoryChk.AppendChild (chkBobBlock);  			DataTemplate cellTemplateChk = new DataTemplate ();  			cellTemplateChk.VisualTree = factoryChk;  			dgCol.CellTemplate = cellTemplateChk;  			autofilterDataGrid.Columns.Add (dgCol);  			//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  			//{  			//    Width = 30'  			//    IsReadOnly = true'  			//    Header = " "'  			//    Binding = new Binding(column.Name)'  			//    Visibility = new Binding(column.Name) { }  			//});  		}  		continue;  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  		dgCol.ClipboardContentBinding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  		dgCol.ClipboardContentBinding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  		if (isSummaryRowGrid) {  			autofilterDataGrid.Columns.Add (new DataGridTextColumn {  				Width = 30'  				IsReadOnly = true'  			});  		}  		else {  			FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  			chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  			Binding visibilityBinding = new Binding (column.Name);  			visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  			chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			dgCol.Width = 30;  			dgCol.Header = " ";  			dgCol.IsReadOnly = true;  			FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  			factoryChk.AppendChild (chkBobBlock);  			DataTemplate cellTemplateChk = new DataTemplate ();  			cellTemplateChk.VisualTree = factoryChk;  			dgCol.CellTemplate = cellTemplateChk;  			autofilterDataGrid.Columns.Add (dgCol);  			//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  			//{  			//    Width = 30'  			//    IsReadOnly = true'  			//    Header = " "'  			//    Binding = new Binding(column.Name)'  			//    Visibility = new Binding(column.Name) { }  			//});  		}  		continue;  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  		dgCol.ClipboardContentBinding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  		dgCol.ClipboardContentBinding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  		if (isSummaryRowGrid) {  			autofilterDataGrid.Columns.Add (new DataGridTextColumn {  				Width = 30'  				IsReadOnly = true'  			});  		}  		else {  			FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  			chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  			Binding visibilityBinding = new Binding (column.Name);  			visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  			chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			dgCol.Width = 30;  			dgCol.Header = " ";  			dgCol.IsReadOnly = true;  			FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  			factoryChk.AppendChild (chkBobBlock);  			DataTemplate cellTemplateChk = new DataTemplate ();  			cellTemplateChk.VisualTree = factoryChk;  			dgCol.CellTemplate = cellTemplateChk;  			autofilterDataGrid.Columns.Add (dgCol);  			//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  			//{  			//    Width = 30'  			//    IsReadOnly = true'  			//    Header = " "'  			//    Binding = new Binding(column.Name)'  			//    Visibility = new Binding(column.Name) { }  			//});  		}  		continue;  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  		dgCol.ClipboardContentBinding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  		dgCol.ClipboardContentBinding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  		if (isSummaryRowGrid) {  			autofilterDataGrid.Columns.Add (new DataGridTextColumn {  				Width = 30'  				IsReadOnly = true'  			});  		}  		else {  			FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  			chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  			Binding visibilityBinding = new Binding (column.Name);  			visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  			chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			dgCol.Width = 30;  			dgCol.Header = " ";  			dgCol.IsReadOnly = true;  			FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  			factoryChk.AppendChild (chkBobBlock);  			DataTemplate cellTemplateChk = new DataTemplate ();  			cellTemplateChk.VisualTree = factoryChk;  			dgCol.CellTemplate = cellTemplateChk;  			autofilterDataGrid.Columns.Add (dgCol);  			//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  			//{  			//    Width = 30'  			//    IsReadOnly = true'  			//    Header = " "'  			//    Binding = new Binding(column.Name)'  			//    Visibility = new Binding(column.Name) { }  			//});  		}  		continue;  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  		dgCol.ClipboardContentBinding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  		dgCol.ClipboardContentBinding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  		if (isSummaryRowGrid) {  			autofilterDataGrid.Columns.Add (new DataGridTextColumn {  				Width = 30'  				IsReadOnly = true'  			});  		}  		else {  			FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  			chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  			Binding visibilityBinding = new Binding (column.Name);  			visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  			chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  			dgCol.Width = 30;  			dgCol.Header = " ";  			dgCol.IsReadOnly = true;  			FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  			factoryChk.AppendChild (chkBobBlock);  			DataTemplate cellTemplateChk = new DataTemplate ();  			cellTemplateChk.VisualTree = factoryChk;  			dgCol.CellTemplate = cellTemplateChk;  			autofilterDataGrid.Columns.Add (dgCol);  			//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  			//{  			//    Width = 30'  			//    IsReadOnly = true'  			//    Header = " "'  			//    Binding = new Binding(column.Name)'  			//    Visibility = new Binding(column.Name) { }  			//});  		}  		continue;  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: textBlock.SetValue (TextBlock.WidthProperty' 100.00);  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: dgCol.Width = 75;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: dgCol.MinWidth = 75;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: dgCol.Width = 120;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  	dgCol.ClipboardContentBinding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  	dgCol.ClipboardContentBinding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  else if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("IsAlreadyHadSameProcess")) {  	if (isSummaryRowGrid) {  		autofilterDataGrid.Columns.Add (new DataGridTextColumn {  			Width = 30'  			IsReadOnly = true'  		});  	}  	else {  		FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  		chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  		Binding visibilityBinding = new Binding (column.Name);  		visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  		chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  		dgCol.Width = 30;  		dgCol.Header = " ";  		dgCol.IsReadOnly = true;  		FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  		factoryChk.AppendChild (chkBobBlock);  		DataTemplate cellTemplateChk = new DataTemplate ();  		cellTemplateChk.VisualTree = factoryChk;  		dgCol.CellTemplate = cellTemplateChk;  		autofilterDataGrid.Columns.Add (dgCol);  		//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  		//{  		//    Width = 30'  		//    IsReadOnly = true'  		//    Header = " "'  		//    Binding = new Binding(column.Name)'  		//    Visibility = new Binding(column.Name) { }  		//});  	}  	continue;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (isSummaryRowGrid) {  	autofilterDataGrid.Columns.Add (new DataGridTextColumn {  		Width = 30'  		IsReadOnly = true'  	});  }  else {  	FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  	chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  	Binding visibilityBinding = new Binding (column.Name);  	visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  	chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  	chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  	chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  	dgCol.Width = 30;  	dgCol.Header = " ";  	dgCol.IsReadOnly = true;  	FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  	factoryChk.AppendChild (chkBobBlock);  	DataTemplate cellTemplateChk = new DataTemplate ();  	cellTemplateChk.VisualTree = factoryChk;  	dgCol.CellTemplate = cellTemplateChk;  	autofilterDataGrid.Columns.Add (dgCol);  	//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  	//{  	//    Width = 30'  	//    IsReadOnly = true'  	//    Header = " "'  	//    Binding = new Binding(column.Name)'  	//    Visibility = new Binding(column.Name) { }  	//});  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (isSummaryRowGrid) {  	autofilterDataGrid.Columns.Add (new DataGridTextColumn {  		Width = 30'  		IsReadOnly = true'  	});  }  else {  	FrameworkElementFactory chkBobBlock = new FrameworkElementFactory (typeof(CheckBox));  	chkBobBlock.SetBinding (CheckBox.IsCheckedProperty' binding);  	Binding visibilityBinding = new Binding (column.Name);  	visibilityBinding.Converter = new QStrategyWPF.Converters.BooleanToVisibilityConverter ();  	chkBobBlock.SetBinding (CheckBox.VisibilityProperty' visibilityBinding);  	chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  	chkBobBlock.SetValue (UIElement.IsHitTestVisibleProperty' false);  	dgCol.Width = 30;  	dgCol.Header = " ";  	dgCol.IsReadOnly = true;  	FrameworkElementFactory factoryChk = new FrameworkElementFactory (typeof(Grid));  	factoryChk.AppendChild (chkBobBlock);  	DataTemplate cellTemplateChk = new DataTemplate ();  	cellTemplateChk.VisualTree = factoryChk;  	dgCol.CellTemplate = cellTemplateChk;  	autofilterDataGrid.Columns.Add (dgCol);  	//autofilterDataGrid.Columns.Add(new DataGridCheckBoxColumn  	//{  	//    Width = 30'  	//    IsReadOnly = true'  	//    Header = " "'  	//    Binding = new Binding(column.Name)'  	//    Visibility = new Binding(column.Name) { }  	//});  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: autofilterDataGrid.Columns.Add (new DataGridTextColumn {  	Width = 30'  	IsReadOnly = true'  });  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: dgCol.Width = 30;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: foreach (DataGridColumn column in this.fltdg.Columns) {  	if (column.DisplayIndex == lastColumnIndex) {  		double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  		if (colMinWidth > 30) {  			column.MinWidth = colMinWidth;  			if (column.Width.Value < column.MinWidth) {  				column.Width = column.MinWidth;  			}  		}  	}  	else {  		column.MinWidth = 15;  	}  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: foreach (DataGridColumn column in this.fltdg.Columns) {  	if (column.DisplayIndex == lastColumnIndex) {  		double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  		if (colMinWidth > 30) {  			column.MinWidth = colMinWidth;  			if (column.Width.Value < column.MinWidth) {  				column.Width = column.MinWidth;  			}  		}  	}  	else {  		column.MinWidth = 15;  	}  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: if (column.DisplayIndex == lastColumnIndex) {  	double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  	if (colMinWidth > 30) {  		column.MinWidth = colMinWidth;  		if (column.Width.Value < column.MinWidth) {  			column.Width = column.MinWidth;  		}  	}  }  else {  	column.MinWidth = 15;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: if (column.DisplayIndex == lastColumnIndex) {  	double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  	if (colMinWidth > 30) {  		column.MinWidth = colMinWidth;  		if (column.Width.Value < column.MinWidth) {  			column.Width = column.MinWidth;  		}  	}  }  else {  	column.MinWidth = 15;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: if (colMinWidth > 30) {  	column.MinWidth = colMinWidth;  	if (column.Width.Value < column.MinWidth) {  		column.Width = column.MinWidth;  	}  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,OrderBlotterUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\OrderBlotterUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: column.MinWidth = 15;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	dgCol.IsReadOnly = isReadOnlyProperty;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		Binding colorBinding = new Binding (column.Name);  		colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("StrategyName") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		statusBackgroundColorBinding.Converter = App.Current.Resources ["EngineStatusToStatusColorConverter"] as EngineStatusToStatusColorConverter;  		statusBackgroundColorBinding.ConverterParameter = "SUMMARYSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 60.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  	}  	else if (column.Name.Equals ("SymbolTrading")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Center);  	}  	else if (column.Name.Equals ("PnLPerShares")) {  		binding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) {  		binding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("PositionShares")) {  		binding.StringFormat = "###'##0";  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	dgCol.IsReadOnly = isReadOnlyProperty;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		Binding colorBinding = new Binding (column.Name);  		colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("StrategyName") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		statusBackgroundColorBinding.Converter = App.Current.Resources ["EngineStatusToStatusColorConverter"] as EngineStatusToStatusColorConverter;  		statusBackgroundColorBinding.ConverterParameter = "SUMMARYSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 60.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  	}  	else if (column.Name.Equals ("SymbolTrading")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Center);  	}  	else if (column.Name.Equals ("PnLPerShares")) {  		binding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) {  		binding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("PositionShares")) {  		binding.StringFormat = "###'##0";  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("StrategyName") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	statusBackgroundColorBinding.Converter = App.Current.Resources ["EngineStatusToStatusColorConverter"] as EngineStatusToStatusColorConverter;  	statusBackgroundColorBinding.ConverterParameter = "SUMMARYSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 60.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  }  else if (column.Name.Equals ("SymbolTrading")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Center);  }  else if (column.Name.Equals ("PnLPerShares")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("PositionShares")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("StrategyName") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	statusBackgroundColorBinding.Converter = App.Current.Resources ["EngineStatusToStatusColorConverter"] as EngineStatusToStatusColorConverter;  	statusBackgroundColorBinding.ConverterParameter = "SUMMARYSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 60.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  }  else if (column.Name.Equals ("SymbolTrading")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Center);  }  else if (column.Name.Equals ("PnLPerShares")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("PositionShares")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	statusBackgroundColorBinding.Converter = App.Current.Resources ["EngineStatusToStatusColorConverter"] as EngineStatusToStatusColorConverter;  	statusBackgroundColorBinding.ConverterParameter = "SUMMARYSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 60.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  }  else if (column.Name.Equals ("SymbolTrading")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Center);  }  else if (column.Name.Equals ("PnLPerShares")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("PositionShares")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	statusBackgroundColorBinding.Converter = App.Current.Resources ["EngineStatusToStatusColorConverter"] as EngineStatusToStatusColorConverter;  	statusBackgroundColorBinding.ConverterParameter = "SUMMARYSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 60.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  }  else if (column.Name.Equals ("SymbolTrading")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Center);  }  else if (column.Name.Equals ("PnLPerShares")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("PositionShares")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: textBlock.SetValue (TextBlock.WidthProperty' 60.00);  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  }  else if (column.Name.Equals ("SymbolTrading")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Center);  }  else if (column.Name.Equals ("PnLPerShares")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || column.Name.Equals ("UR_PnL") || column.Name.Equals ("PositionAmount") || column.Name.Equals ("TradingRevenue") || column.Name.Equals ("RebateRevenue") || column.Name.Equals ("MaxLoss")) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("PositionShares")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,SummaryUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\SummaryUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (50' 0' 0' 0));  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: foreach (System.Reflection.PropertyInfo column in propertyInfo) {  	//Avoid manually created columns from code  	if (ColumnsNotToGenerate.Contains (column.Name)) {  		continue;  	}  	bool isReadOnlyProperty = true;  	DataGridTemplateColumn dgCol = new DataGridTemplateColumn ();  	// DataGridTextColumn dgCol = new DataGridTextColumn();  	dgCol.SortMemberPath = column.Name;  	dgCol.Header = GUIUtilityClass.GetTextFormRersources (column.Name' true);  	Binding binding = new Binding (column.Name);  	//dgCol.Binding = binding;  	dgCol.IsReadOnly = isReadOnlyProperty;  	dgCol.ClipboardContentBinding = new Binding (column.Name);  	Binding colorBinding = new Binding (column.Name);  	colorBinding.Converter = App.Current.Resources ["NumberToColorConverter"] as NumberToColorConverter;  	string columnDataType = column.PropertyType.Name;  	FrameworkElementFactory textBlock = new FrameworkElementFactory (typeof(TextBlock));  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.Black));  	if (columnDataType.Contains ("Int") || columnDataType.Contains ("Float") || columnDataType.Contains ("Double") || columnDataType.Contains ("Decimal") || columnDataType.Contains ("DateTime")) {  		//dgCol.ElementStyle = FindResource("RightAlignTextBox") as Style;  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		textBlock.SetBinding (TextBlock.ForegroundProperty' colorBinding);  	}  	else {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Left);  	}  	if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  		textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	}  	else if (column.Name.Equals ("Status")) {  		Binding statusBackgroundColorBinding = new Binding (column.Name);  		Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  		MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  		statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  		statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  		statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  		textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  		textBlock.SetValue (TextBlock.WidthProperty' 100.00);  		textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  		dgCol.Width = 75;  		dgCol.MinWidth = 75;  	}  	else if (column.Name.Equals ("SeedRemaining")) {  		textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  		MultiBinding multiBinding = new MultiBinding ();  		multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  		Binding seedRemainingBinding = new Binding (column.Name);  		multiBinding.Bindings.Add (seedRemainingBinding);  		Binding seedThresholdBinding = new Binding ();  		seedThresholdBinding.Source = App.AppManager.StgEngine;  		seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  		multiBinding.Bindings.Add (seedThresholdBinding);  		textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  		binding.StringFormat = "###'##0";  		textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  		dgCol.Width = 120;  	}  	else if (column.Name.Equals ("PnL_Per_Share")) {  		binding.StringFormat = "0.00000";  	}  	else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  		binding.StringFormat = "C2";  	}  	else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  		binding.StringFormat = "###'##0";  	}  	textBlock.SetBinding (TextBlock.TextProperty' binding);  	FrameworkElementFactory factory = new FrameworkElementFactory (typeof(Grid));  	factory.AppendChild (textBlock);  	DataTemplate cellTemplate = new DataTemplate ();  	cellTemplate.VisualTree = factory;  	dgCol.CellTemplate = cellTemplate;  	autofilterDataGrid.Columns.Add (dgCol);  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Symbol") && isSummaryRowGrid) {  	textBlock.SetValue (TextBlock.FontWeightProperty' FontWeights.Bold);  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  }  else if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("Status")) {  	Binding statusBackgroundColorBinding = new Binding (column.Name);  	Binding isHitByMaxLossBackgroundColorBinding = new Binding ("IsHitByMaxLoss");  	MultiBinding statusBackgroundColorMultiBinding = new MultiBinding ();  	statusBackgroundColorMultiBinding.Bindings.Add (statusBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Bindings.Add (isHitByMaxLossBackgroundColorBinding);  	statusBackgroundColorMultiBinding.Converter = App.Current.Resources ["StrategyStatusToColorConverter"] as StrategyStatusToColorConverter;  	statusBackgroundColorMultiBinding.ConverterParameter = "SYMBOLSTATUS";  	textBlock.SetBinding (TextBlock.BackgroundProperty' statusBackgroundColorMultiBinding);  	textBlock.SetValue (TextBlock.WidthProperty' 100.00);  	textBlock.SetValue (TextBlock.ForegroundProperty' new SolidColorBrush (Colors.White));  	dgCol.Width = 75;  	dgCol.MinWidth = 75;  }  else if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: textBlock.SetValue (TextBlock.WidthProperty' 100.00);  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: dgCol.Width = 75;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: dgCol.MinWidth = 75;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: if (column.Name.Equals ("SeedRemaining")) {  	textBlock.SetValue (TextBlock.HorizontalAlignmentProperty' HorizontalAlignment.Right);  	MultiBinding multiBinding = new MultiBinding ();  	multiBinding.Converter = App.Current.Resources ["SeedRemainingThresholdToColorConverter"] as SeedRemainingThresholdToColorConverter;  	Binding seedRemainingBinding = new Binding (column.Name);  	multiBinding.Bindings.Add (seedRemainingBinding);  	Binding seedThresholdBinding = new Binding ();  	seedThresholdBinding.Source = App.AppManager.StgEngine;  	seedThresholdBinding.Path = new PropertyPath ("SeedQtyThreshold");  	multiBinding.Bindings.Add (seedThresholdBinding);  	textBlock.SetBinding (TextBlock.BackgroundProperty' multiBinding);  	binding.StringFormat = "###'##0";  	textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  	dgCol.Width = 120;  }  else if (column.Name.Equals ("PnL_Per_Share")) {  	binding.StringFormat = "0.00000";  }  else if (column.Name.Equals ("PnL") || (column.Name.Equals ("UR_PnL") || column.Name.Equals ("Position_Amount") || column.Name.Equals ("Trading_Revenue") || column.Name.Equals ("Rebate_Revenue") || column.Name.Equals ("Max_Loss"))) {  	binding.StringFormat = "C2";  }  else if (column.Name.Equals ("Volume") || column.Name.Equals ("Position_Shares") || column.Name.Equals ("SeedRemaining")) {  	binding.StringFormat = "###'##0";  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: textBlock.SetValue (TextBlock.PaddingProperty' new Thickness (250' 0' 0' 0));  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,GenerateColumns,The following statement contains a magic number: dgCol.Width = 120;  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: foreach (DataGridColumn column in this.fltdgStrategyStatus.Columns) {  	if (column.DisplayIndex == lastColumnIndex) {  		double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  		if (colMinWidth > 30) {  			column.MinWidth = colMinWidth;  			if (column.Width.Value < column.MinWidth) {  				column.Width = column.MinWidth;  			}  		}  	}  	else {  		column.MinWidth = 15;  	}  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: foreach (DataGridColumn column in this.fltdgStrategyStatus.Columns) {  	if (column.DisplayIndex == lastColumnIndex) {  		double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  		if (colMinWidth > 30) {  			column.MinWidth = colMinWidth;  			if (column.Width.Value < column.MinWidth) {  				column.Width = column.MinWidth;  			}  		}  	}  	else {  		column.MinWidth = 15;  	}  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: if (column.DisplayIndex == lastColumnIndex) {  	double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  	if (colMinWidth > 30) {  		column.MinWidth = colMinWidth;  		if (column.Width.Value < column.MinWidth) {  			column.Width = column.MinWidth;  		}  	}  }  else {  	column.MinWidth = 15;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: if (column.DisplayIndex == lastColumnIndex) {  	double colMinWidth = GUIUtilityClass.GetColumnMinWidth (column.SortMemberPath);  	if (colMinWidth > 30) {  		column.MinWidth = colMinWidth;  		if (column.Width.Value < column.MinWidth) {  			column.Width = column.MinWidth;  		}  	}  }  else {  	column.MinWidth = 15;  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: if (colMinWidth > 30) {  	column.MinWidth = colMinWidth;  	if (column.Width.Value < column.MinWidth) {  		column.Width = column.MinWidth;  	}  }  
Magic Number,QStrategyWPF.View.QStrategyUserControls,StrategyStatusUserControl,C:\repos\EZXInc_celera-gui\QStrategyWPF\View\QStrategyUserControls\StrategyStatusUserControl.xaml.cs,ManageLastColumnMinWidth,The following statement contains a magic number: column.MinWidth = 15;  
Missing Default,QStrategyWPF.Converters,ContextMenuIsOpenToEnableConverter,C:\repos\EZXInc_celera-gui\QStrategyWPF\Converters\ContextMenuIsOpenToEnableConverter.cs,Convert,The following switch statement is missing a default case: switch (paramValue) {  case "START":  	if (allSeletedCount == countTrading || allSeletedCount == countLocked) {  		return false;  	}  	else {  		if (App.AppManager.StgEngine.StrategyEngineStatus.Equals ("Running")) {  			if (countStopped > 0 || countHung > 0 || countMAXLOSS > 0) {  				return true;  			}  			else {  				return false;  			}  		}  		else {  			return false;  		}  	}  case "STOP":  	if (allSeletedCount == countStopped || allSeletedCount == countLocked) {  		return false;  	}  	else if (allSeletedCount == (countStopped + countLocked)) {  		return false;  	}  	else {  		return true;  	}  case "LOCK":  	if (allSeletedCount == countLocked) {  		return false;  	}  	else {  		return true;  	}  case "UNLOCK":  	int countUnlocked = StrategyOrderInfo.Where (s => s.Status == "Locked").Count ();  	if (countUnlocked <= 0) {  		return false;  	}  	else {  		return true;  	}  }  
Missing Default,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetTextFormRersources,The following switch statement is missing a default case: switch (propertyName) {  case "PnL":  	return "PnL $";  case "UR_PnL":  	return "UR_PnL $";  case "PositionShares":  	return "Position (Shrs)";  case "PositionAmount":  	return "Position $";  case "OpenOrders":  	return "# Open Orders";  case "PnLPerShares":  	return "PnL/Share";  case "TradingRevenue":  	return "Trading Rev. $";  case "RebateRevenue":  	return "Rebate Rev. $";  case "MaxLoss":  	return "MAX Loss $";  }  
Missing Default,QStrategyWPF.GUIUtils,GUIUtilityClass,C:\repos\EZXInc_celera-gui\QStrategyWPF\GUIUtils\GUIUtilityClass.cs,GetTextFormRersources,The following switch statement is missing a default case: switch (propertyName) {  case "Position_Shares":  	return "Position (Shrs)";  case "Position_Amount":  	return "Position $";  case "Number_Of_Open_Orders":  	return "# Open Orders";  case "PnL_Per_Share":  	return "PnL/Share";  case "Trading_Revenue":  	return "Trading Rev. $";  case "Rebate_Revenue":  	return "Rebate Rev. $";  case "Max_Loss":  	return "MAX Loss $";  }  
