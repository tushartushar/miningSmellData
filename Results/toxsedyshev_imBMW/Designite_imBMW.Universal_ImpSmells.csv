Implementation smell,Namespace,Class,File,Method,Description
Long Method,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The method has 162 lines of code.
Complex Method,imBMW.Tools,ArrayHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,imBMW.Tools,ArrayHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,PasteASCII,Cyclomatic complexity of the method is 9
Complex Method,imBMW.Tools,StringHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,Translit,Cyclomatic complexity of the method is 9
Complex Method,imBMW.iBus.Devices.Real,BordmonitorText,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ParseItems,Cyclomatic complexity of the method is 8
Long Parameter List,imBMW.Tools,ArrayHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,PasteASCII,The method has 5 parameters. Parameters: data' s' offset' limit' align
Long Parameter List,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,init,The method has 6 parameters. Parameters: source' destination' data' packetLength' check' description
Long Parameter List,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The method has 5 parameters. Parameters: s' field' index' isChecked' send
Long Parameter List,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The method has 6 parameters. Parameters: s' align' field' index' isChecked' send
Long Identifier,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,,The length of the parameter MessageOpenWindowPassengerFront is 31.
Long Identifier,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,,The length of the parameter MessageOpenWindowPassengerRear is 30.
Long Identifier,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,,The length of the parameter MessageCloseWindowPassengerFront is 32.
Long Identifier,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,,The length of the parameter MessageCloseWindowPassengerRear is 31.
Long Identifier,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,,The length of the parameter MessageUnfoldPassengerMirrorE39 is 31.
Long Statement,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The length of the statement  "                    s = "Processed: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format " is 130.
Long Statement,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The length of the statement  "                    s += "In queue: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format " is 130.
Long Statement,imBMW.iBus,MessageRegistry,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\MessageRegistry.cs,ToPrettyString,The length of the statement  "            description = message.SourceDevice.ToStringValue() + " > " + message.DestinationDevice.ToStringValue() + ": " + description; " is 124.
Long Statement,imBMW.iBus,Manager,C:\repos\toxsedyshev_imBMW\Sources\NET\imBMW.Universal\iBus\Manager.cs,AddMessageReceiverForSourceDevice,The length of the statement  "            messageReceiverList.Add(new MessageReceiverRegistration(source' DeviceAddress.Unset' callback' MessageReceiverRegistration.MatchType.Source)); " is 142.
Long Statement,imBMW.iBus,Manager,C:\repos\toxsedyshev_imBMW\Sources\NET\imBMW.Universal\iBus\Manager.cs,AddMessageReceiverForDestinationDevice,The length of the statement  "            messageReceiverList.Add(new MessageReceiverRegistration(DeviceAddress.Unset' destination' callback' MessageReceiverRegistration.MatchType.Destination)); " is 152.
Long Statement,imBMW.iBus,Manager,C:\repos\toxsedyshev_imBMW\Sources\NET\imBMW.Universal\iBus\Manager.cs,AddMessageReceiverForSourceAndDestinationDevice,The length of the statement  "            messageReceiverList.Add(new MessageReceiverRegistration(source' destination' callback' MessageReceiverRegistration.MatchType.SourceAndDestination)); " is 148.
Long Statement,imBMW.iBus,Manager,C:\repos\toxsedyshev_imBMW\Sources\NET\imBMW.Universal\iBus\Manager.cs,AddMessageReceiverForSourceOrDestinationDevice,The length of the statement  "            messageReceiverList.Add(new MessageReceiverRegistration(source' destination' callback' MessageReceiverRegistration.MatchType.SourceOrDestination)); " is 147.
Long Statement,imBMW.iBus.Devices.Real,BordmonitorText,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ParseItems,The length of the statement  "                        var s = ASCIIEncoding.GetString(Data' offset' i - offset + (isNext ? 0 : 1) - (isChecked ? 1 : 0)' false).Trim().ASCIIToUTF8(); " is 127.
Long Statement,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,OnScreenUpdated,The length of the statement  "                Manager.EnqueueMessage(new Message(DeviceAddress.GraphicsNavigationDriver' DeviceAddress.Radio' "Screen updated messages: " + (i + 1)' 0x22' 0x00' i)); " is 151.
Long Statement,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,OnScreenUpdated,The length of the statement  "                Manager.EnqueueMessage(new Message(DeviceAddress.GraphicsNavigationDriver' DeviceAddress.Radio' "Menu updated messages: " + (i + 1)' 0x22' i' 0xFF)); " is 149.
Long Statement,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The length of the statement  "            var m = new Message(iBus.DeviceAddress.Radio' iBus.DeviceAddress.GraphicsNavigationDriver' "Show message on BM (" + index.ToHex() + "): " + s' data); " is 149.
Long Statement,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,PressItem,The length of the statement  "            Manager.EnqueueMessage(new Message(DeviceAddress.GraphicsNavigationDriver' DeviceAddress.Radio' "Press Screen item #" + index' 0x31' 0x60' 0x00' index)); " is 153.
Long Statement,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,PressItem,The length of the statement  "            Manager.EnqueueMessage(new Message(DeviceAddress.GraphicsNavigationDriver' DeviceAddress.Radio' "Release Screen item #" + index' 0x31' 0x60' 0x00' index)); " is 155.
Long Statement,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,SetSpeedLimit,The length of the statement  "                Manager.EnqueueMessage(new Message(DeviceAddress.GraphicsNavigationDriver' DeviceAddress.InstrumentClusterElectronics' "Set speed limit"' 0x40' 0x09' (byte)(limit >> 8)' (byte)(limit & 0xFF))); " is 193.
Long Statement,imBMW.iBus.Devices.Real,MultiFunctionSteeringWheel,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\MultiFunctionSteeringWheel.cs,VolumeUp,The length of the statement  "            Manager.EnqueueMessage(new Message(DeviceAddress.MultiFunctionSteeringWheel' DeviceAddress.Radio' "Volume Up +" + step' 0x32' p)); " is 130.
Long Statement,imBMW.iBus.Devices.Real,MultiFunctionSteeringWheel,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\MultiFunctionSteeringWheel.cs,VolumeDown,The length of the statement  "            Manager.EnqueueMessage(new Message(DeviceAddress.MultiFunctionSteeringWheel' DeviceAddress.Radio' "Volume Down -" + step' 0x32' p)); " is 132.
Long Statement,imBMW.iBus.Devices.Real,Radio,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Radio.cs,DisplayTextMID,The length of the statement  "            Manager.EnqueueMessage(new Message(DeviceAddress.Radio' DeviceAddress.MultiInfoDisplay' "Show text \"" + s + "\" on MID"' data)); " is 129.
Long Statement,imBMW.iBus.Devices.Real,Radio,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Radio.cs,DisplayTextRadio,The length of the statement  "            Manager.EnqueueMessage(new Message(DeviceAddress.Telephone' DeviceAddress.InstrumentClusterElectronics' "Show text \"" + s + "\" on the radio"' data)); " is 151.
Long Statement,imBMW.Clients,BluetoothClient,C:\repos\toxsedyshev_imBMW\Sources\NET\imBMW.Universal\Clients\BluetoothClient.cs,Connect,The length of the statement  "            var deviceList = await DeviceInformation.FindAllAsync(RfcommDeviceService.GetDeviceSelector(RfcommServiceId.SerialPort)); " is 121.
Complex Conditional,imBMW.iBus,MessageReceiverRegistration,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\ManagerTools.cs,Matches,The conditional expression  "Source == m.SourceDevice                          && (Destination == m.DestinationDevice                              || m.DestinationDevice == DeviceAddress.Broadcast                              || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress)"  is complex.
Complex Conditional,imBMW.iBus,MessageReceiverRegistration,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\ManagerTools.cs,Matches,The conditional expression  "Source == m.SourceDevice                          || Destination == m.DestinationDevice                          || m.DestinationDevice == DeviceAddress.Broadcast                          || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress"  is complex.
Complex Conditional,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,OnDateChanged,The conditional expression  "_dateIsSet && _dateDay == day && _dateMonth == month && _dateYear == year"  is complex.
Virtual Method Call from Constructor,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,MS43AnalogValues,The constructor "MS43AnalogValues" calls a virtual method "Parse".
Virtual Method Call from Constructor,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,MS43AnalogValues,The constructor "MS43AnalogValues" calls a virtual method "Parse".
Magic Number,imBMW.Diagnostics,DBusMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DBusMessage.cs,DBusMessage,The following statement contains a magic number: var packetLength = data.Length + 3;
Magic Number,imBMW.Diagnostics,DBusMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DBusMessage.cs,TryCreate,The following statement contains a magic number: return new DBusMessage((DeviceAddress)packet[0]' packet.SkipAndTake(2' ParseDataLength(packet)));
Magic Number,imBMW.Diagnostics,DBusMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DBusMessage.cs,CanStartWith,The following statement contains a magic number: byte packetLength = (byte)(packet[1] + 2);
Magic Number,imBMW.Diagnostics,DBusMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DBusMessage.cs,ParseDataLength,The following statement contains a magic number: return ParsePacketLength(packet) - 3;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,CanParse,The following statement contains a magic number: return message.SourceDevice == DeviceAddress.DME                  && message.DestinationDevice == DeviceAddress.Diagnostic                  && message.Data.Length == 42                   && message.Data[0] == 0xA0;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: RPM = (d[1] << 8) + d[2];
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: RPM = (d[1] << 8) + d[2];
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Speed = d[3];
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Pedal = ((d[4] << 8) + d[5]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Pedal = ((d[4] << 8) + d[5]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Pedal = ((d[4] << 8) + d[5]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Pedal = ((d[4] << 8) + d[5]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Throttle = ((d[6] << 8) + d[7]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Throttle = ((d[6] << 8) + d[7]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Throttle = ((d[6] << 8) + d[7]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: Throttle = ((d[6] << 8) + d[7]) * 0.0018311;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMass = ((d[8] << 8) + d[9]) * 0.25;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMass = ((d[8] << 8) + d[9]) * 0.25;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMass = ((d[8] << 8) + d[9]) * 0.25;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMass = ((d[8] << 8) + d[9]) * 0.25;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: IntakeTemp = d[10] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: IntakeTemp = d[10] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: IntakeTemp = d[10] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: CoolantTemp = d[11] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: CoolantTemp = d[11] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: CoolantTemp = d[11] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: OilTemp = d[12] * 0.796 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: OilTemp = d[12] * 0.796 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: OilTemp = d[12] * 0.796 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: CoolantRadiatorTemp = d[13] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: CoolantRadiatorTemp = d[13] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: CoolantRadiatorTemp = d[13] * 0.75 - 48;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: IgnitionAngle = -d[14] * 0.375 + 72;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: IgnitionAngle = -d[14] * 0.375 + 72;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: IgnitionAngle = -d[14] * 0.375 + 72;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: InjectionTime = ((d[15] << 8) + d[16]) * 0.0053333;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: InjectionTime = ((d[15] << 8) + d[16]) * 0.0053333;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: InjectionTime = ((d[15] << 8) + d[16]) * 0.0053333;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: InjectionTime = ((d[15] << 8) + d[16]) * 0.0053333;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_IS = ((d[17] << 8) + d[18]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_IS = ((d[17] << 8) + d[18]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_IS = ((d[17] << 8) + d[18]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_IS = ((d[17] << 8) + d[18]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_ISA = ((d[19] << 8) + d[20]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_ISA = ((d[19] << 8) + d[20]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_ISA = ((d[19] << 8) + d[20]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ISAPWM_ISA = ((d[19] << 8) + d[20]) * 0.0015;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VanosPositionIntake = d[21] * 0.375 + 60;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VanosPositionIntake = d[21] * 0.375 + 60;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VanosPositionIntake = d[21] * 0.375 + 60;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VanosPositionExhaust = -d[22] * 0.375 - 60;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VanosPositionExhaust = -d[22] * 0.375 - 60;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VanosPositionExhaust = -d[22] * 0.375 - 60;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VoltageKL15 = d[23] * 0.10156;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VoltageKL15 = d[23] * 0.10156;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator1 = ((d[24] << 8) + d[25]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator1 = ((d[24] << 8) + d[25]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator1 = ((d[24] << 8) + d[25]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator1 = ((d[24] << 8) + d[25]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator1 = ((d[24] << 8) + d[25]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator2 = ((d[26] << 8) + d[27]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator2 = ((d[26] << 8) + d[27]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator2 = ((d[26] << 8) + d[27]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator2 = ((d[26] << 8) + d[27]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaIntegrator2 = ((d[26] << 8) + d[27]) * 0.000015259 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingBeforeCats1 = d[28] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingBeforeCats1 = d[28] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingBeforeCats2 = d[29] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingBeforeCats2 = d[29] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingAfterCats1 = d[30] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingAfterCats1 = d[30] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingAfterCats2 = d[31] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: LambdaHeatingAfterCats2 = d[31] * 0.391;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMassPerStroke = ((d[32] << 8) + d[33]) * 0.0212;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMassPerStroke = ((d[32] << 8) + d[33]) * 0.0212;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMassPerStroke = ((d[32] << 8) + d[33]) * 0.0212;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AirMassPerStroke = ((d[32] << 8) + d[33]) * 0.0212;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor2 = ((d[34] << 8) + d[35]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor2 = ((d[34] << 8) + d[35]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor2 = ((d[34] << 8) + d[35]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor2 = ((d[34] << 8) + d[35]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor5 = ((d[36] << 8) + d[37]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor5 = ((d[36] << 8) + d[37]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor5 = ((d[36] << 8) + d[37]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: KnockSensor5 = ((d[36] << 8) + d[37]) * 0.0000778;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ElectricFanSpeed = d[38] * 0.39063;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: ElectricFanSpeed = d[38] * 0.39063;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AtmosphericPressure = (int)(((d[39] << 8) + d[40]) * 0.08292);
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AtmosphericPressure = (int)(((d[39] << 8) + d[40]) * 0.08292);
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AtmosphericPressure = (int)(((d[39] << 8) + d[40]) * 0.08292);
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: AtmosphericPressure = (int)(((d[39] << 8) + d[40]) * 0.08292);
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VoltageBattery = d[41] * 0.10156;
Magic Number,imBMW.Diagnostics.DME,MS43AnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43AnalogValues.cs,Parse,The following statement contains a magic number: VoltageBattery = d[41] * 0.10156;
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,Parse,The following statement contains a magic number: WideBandLambda = (double)d[30] / 255 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,Parse,The following statement contains a magic number: WideBandLambda = (double)d[30] / 255 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,Parse,The following statement contains a magic number: WideBandLambda = (double)d[30] / 255 + 0.5;
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,Parse,The following statement contains a magic number: AFR = WideBandLambda * 14.7;
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,Parse,The following statement contains a magic number: IntakePressure = d[31] * 10;
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,Parse,The following statement contains a magic number: IntakePressure = d[31] * 10;
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,ModifyMS43Message,The following statement contains a magic number: data[30] = ToByte((av.WideBandLambda - 0.5) * 255);
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,ModifyMS43Message,The following statement contains a magic number: data[30] = ToByte((av.WideBandLambda - 0.5) * 255);
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,ModifyMS43Message,The following statement contains a magic number: data[30] = ToByte((av.WideBandLambda - 0.5) * 255);
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,ModifyMS43Message,The following statement contains a magic number: data[31] = ToByte(av.IntakePressure / 10);
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,ModifyMS43Message,The following statement contains a magic number: data[31] = ToByte(av.IntakePressure / 10);
Magic Number,imBMW.Diagnostics.DME,MS43JMGAnalogValues,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Diagnostics\DME\MS43JMGAnalogValues.cs,ToByte,The following statement contains a magic number: return (byte)System.Math.Min(255' System.Math.Max(0' d));
Magic Number,imBMW.Tools,ArrayHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,ToHex,The following statement contains a magic number: var sb = new StringBuilder(data.Length * 2);
Magic Number,imBMW.Tools,ArrayHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,ToHex,The following statement contains a magic number: var sb = new StringBuilder(data.Length * 2 + (data.Length - 1) * spacer.Length);
Magic Number,imBMW.Tools,ArrayHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,ToHex,The following statement contains a magic number: var sb = new StringBuilder(data.Length * 2 + data.Length - 1);
Magic Number,imBMW.Tools,ArrayHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,PasteASCII,The following statement contains a magic number: if (align == TextAlign.Center)              {                  alignOffset = (byte)((limit - len) / 2);              }              else if (align == TextAlign.Right)              {                  alignOffset = (byte)(limit - len);              }
Magic Number,imBMW.Tools,NumHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\NumHelpers.cs,ToHex,The following statement contains a magic number: return hexChars[b >> 4].ToString() + hexChars[b & 0x0F].ToString();
Magic Number,imBMW.Tools,NumHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\NumHelpers.cs,checkByteBitIndex,The following statement contains a magic number: if (bitIndex < 0 || bitIndex > 7)              {                  throw new ArgumentException("bitIndex");              }
Magic Number,imBMW.Tools,StringHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,Translit,The following statement contains a magic number: for (int j = 0; j < s.Length; j++)              {                  c = s[j];                  t = c.GetRussianCharType();                  if (t == CharType.None)                  {                      r += c;                      continue;                  }                  int i;                  switch (t)                  {                      case CharType.Upper:                          i = c - 0x0410;                          break;                      case CharType.Lower:                          i = c - 0x0430;                          break;                      case CharType.UpperYo:                      case CharType.LowerYo:                          i = 32;                          break;                      default:                          throw new Exception("Unknown char for translit.");                  }                  var nc = translitTo[i];                  if (nc is string)                  {                      if (t == CharType.Lower || t == CharType.LowerYo)                      {                          nc = ((string)nc).ToLower();                      }                      r += (string)nc;                  }                  else                  {                      if (t == CharType.Lower || t == CharType.LowerYo)                      {                          nc = ((char)nc).ToLower();                      }                      r += (char)nc;                  }              }
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,InternalMessage,The following statement contains a magic number: if (PacketLength > 1024) // TODO try up to 0xFFFF length              {                  throw new Exception("Message packet length exceeds 1024 bytes.");              }
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,TryCreate,The following statement contains a magic number: return new InternalMessage((DeviceAddress)packet[0]' packet.SkipAndTake(3' ParseDataLength(packet)));
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParsePacketLength,The following statement contains a magic number: return (packet[2] << 8) + packet[1] + 2;
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParsePacketLength,The following statement contains a magic number: return (packet[2] << 8) + packet[1] + 2;
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParsePacketLength,The following statement contains a magic number: return (packet[2] << 8) + packet[1] + 2;
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParseDataLength,The following statement contains a magic number: return ParsePacketLength(packet) - 4;
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,init,The following statement contains a magic number: check ^= (byte)(data.Length + 2);
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,init,The following statement contains a magic number: init(source' destination' data' data.Length + 4' check' description);
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,TryCreate,The following statement contains a magic number: return new Message(packet[0]' packet[2]' packet.SkipAndTake(3' ParseDataLength(packet)));
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,TryCreate,The following statement contains a magic number: return new Message(packet[0]' packet[2]' packet.SkipAndTake(3' ParseDataLength(packet)));
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ParsePacketLength,The following statement contains a magic number: return packet[1] + 2;
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ParseDataLength,The following statement contains a magic number: return ParsePacketLength(packet) - 4;
Magic Number,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The following statement contains a magic number: if (TimeStartedProcessing != default(DateTime))              {                  string s = "";                  if (TimeEndedProcessing != default(DateTime))                  {                      TimeSpan span = TimeEndedProcessing - TimeStartedProcessing;                      s = "Processed: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  if (TimeEnqueued != default(DateTime))                  {                      if (s != "")                      {                          s += " + ";                      }                      TimeSpan span = TimeStartedProcessing - TimeEnqueued;                      s += "In queue: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  return s;              }
Magic Number,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The following statement contains a magic number: if (TimeStartedProcessing != default(DateTime))              {                  string s = "";                  if (TimeEndedProcessing != default(DateTime))                  {                      TimeSpan span = TimeEndedProcessing - TimeStartedProcessing;                      s = "Processed: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  if (TimeEnqueued != default(DateTime))                  {                      if (s != "")                      {                          s += " + ";                      }                      TimeSpan span = TimeStartedProcessing - TimeEnqueued;                      s += "In queue: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  return s;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BodyModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\BodyModule.cs,ProcessGMMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x72)              {                  var btn = m.Data[1];                  if (btn.HasBit(4)) // 0x1_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Lock);                  }                  else if (btn.HasBit(5)) // 0x2_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Unlock);                  }                  else if (btn.HasBit(6)) // 0x4_                  {                      OnRemoteKeyButton(m' RemoteKeyButton.Trunk);                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x7A)              {                  // Data[1] = 7654 3210. 7 = ??' 6 = light' 5 = lock' 4 = unlock' 5+4 = hard lock'                  //      doors statuses: 0 = left front (driver)' 1 = right front' 2 = left rear' 3 = right rear.                  // Car could have locked status even after doors are opened!                  // Data[2] = 7654 3210. 5 = trunk.                  isCarLocked = m.Data[1].HasBit(5);                  if (isCarLocked)                  {                      if (m.Data[1].HasBit(0))                      {                          wasDriverDoorOpened = true;                      }                  }                  else                  {                      wasDriverDoorOpened = false;                  }              }              else if (m.Data.Length > 3 && m.Data[0] == 0xA0)              {                  // TODO filter not analog-values responses                  var voltage = ((double)m.Data[1]) / 10 + ((double)m.Data[2]) / 1000;                    m.ReceiverDescription = "Analog values. Battery voltage = " + voltage + "V";                  BatteryVoltage = voltage;              }
Magic Number,imBMW.iBus.Devices.Real,BordmonitorText,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ParseItems,The following statement contains a magic number: if (Data.Length > 3)              {                  var index = (byte)(Data[3] & 0x0F);                  bool isChecked = false;                  var offset = 4;                  for (int i = offset; i < Data.Length; i++)                  {                      var isNext = Data[i] == 0x06;                      var isLast = i == Data.Length - 1;                      if (isNext || isLast)                      {                          if (!isNext)                          {                              isChecked = Data[i] == 0x2A;                          }                          var s = ASCIIEncoding.GetString(Data' offset' i - offset + (isNext ? 0 : 1) - (isChecked ? 1 : 0)' false).Trim().ASCIIToUTF8();                          res.Add(new BordmonitorText(Field' s' index' isChecked));                          index++;                          if (isNext && isLast)                          {                              res.Add(new BordmonitorText(Field' ""' index' false));                          }                          offset = i + 1;                          continue;                      }                      isChecked = Data[i] == 0x2A;                  }              }
Magic Number,imBMW.iBus.Devices.Real,BordmonitorText,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ParseItems,The following statement contains a magic number: if (Data.Length > 3)              {                  var index = (byte)(Data[3] & 0x0F);                  bool isChecked = false;                  var offset = 4;                  for (int i = offset; i < Data.Length; i++)                  {                      var isNext = Data[i] == 0x06;                      var isLast = i == Data.Length - 1;                      if (isNext || isLast)                      {                          if (!isNext)                          {                              isChecked = Data[i] == 0x2A;                          }                          var s = ASCIIEncoding.GetString(Data' offset' i - offset + (isNext ? 0 : 1) - (isChecked ? 1 : 0)' false).Trim().ASCIIToUTF8();                          res.Add(new BordmonitorText(Field' s' index' isChecked));                          index++;                          if (isNext && isLast)                          {                              res.Add(new BordmonitorText(Field' ""' index' false));                          }                          offset = i + 1;                          continue;                      }                      isChecked = Data[i] == 0x2A;                  }              }
Magic Number,imBMW.iBus.Devices.Real,BordmonitorText,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ParseItems,The following statement contains a magic number: if (Data.Length > 3)              {                  var index = (byte)(Data[3] & 0x0F);                  bool isChecked = false;                  var offset = 4;                  for (int i = offset; i < Data.Length; i++)                  {                      var isNext = Data[i] == 0x06;                      var isLast = i == Data.Length - 1;                      if (isNext || isLast)                      {                          if (!isNext)                          {                              isChecked = Data[i] == 0x2A;                          }                          var s = ASCIIEncoding.GetString(Data' offset' i - offset + (isNext ? 0 : 1) - (isChecked ? 1 : 0)' false).Trim().ASCIIToUTF8();                          res.Add(new BordmonitorText(Field' s' index' isChecked));                          index++;                          if (isNext && isLast)                          {                              res.Add(new BordmonitorText(Field' ""' index' false));                          }                          offset = i + 1;                          continue;                      }                      isChecked = Data[i] == 0x2A;                  }              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,OnScreenUpdated,The following statement contains a magic number: if (isMenuUpdated)              {                  _screenUpdatedMenuCounter++;                  if (_screenUpdatedMenuCounter >= 3)                  {                      OnScreenUpdated();                  }              }              else              {                  _screenUpdatedCounter++;                   OnScreenUpdated();              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The following statement contains a magic number: switch (field)              {                  case BordmonitorFields.Title:                      len = 11;                      data = DataShowTitle;                      break;                  case BordmonitorFields.Status:                      len = 11;                      data = DataShowStatus;                      break;                  case BordmonitorFields.Item:                      if (isChecked)                      {                          len = 15;                      }                      else                      {                          switch (NaviVersion)                          {                              case Tools.NaviVersion.MK4:                                  len = System.Math.Min(23' s.Length);                                  break;                              default:                                  len = 15;                                  break;                          }                      }                      index += 0x40;                      /*if (index == 0x47)                      {                          index = 0x7;                      }*/                      if (NaviVersion == Tools.NaviVersion.MK2)                      {                          data = new byte[] { 0xA5' 0x62' 0x00' (byte)index };                      }                      else                      {                          data = new byte[] { 0x21' 0x60' 0x00' (byte)index };                      }                      break;                  default:                      throw new Exception("TODO");              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The following statement contains a magic number: switch (field)              {                  case BordmonitorFields.Title:                      len = 11;                      data = DataShowTitle;                      break;                  case BordmonitorFields.Status:                      len = 11;                      data = DataShowStatus;                      break;                  case BordmonitorFields.Item:                      if (isChecked)                      {                          len = 15;                      }                      else                      {                          switch (NaviVersion)                          {                              case Tools.NaviVersion.MK4:                                  len = System.Math.Min(23' s.Length);                                  break;                              default:                                  len = 15;                                  break;                          }                      }                      index += 0x40;                      /*if (index == 0x47)                      {                          index = 0x7;                      }*/                      if (NaviVersion == Tools.NaviVersion.MK2)                      {                          data = new byte[] { 0xA5' 0x62' 0x00' (byte)index };                      }                      else                      {                          data = new byte[] { 0x21' 0x60' 0x00' (byte)index };                      }                      break;                  default:                      throw new Exception("TODO");              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The following statement contains a magic number: switch (field)              {                  case BordmonitorFields.Title:                      len = 11;                      data = DataShowTitle;                      break;                  case BordmonitorFields.Status:                      len = 11;                      data = DataShowStatus;                      break;                  case BordmonitorFields.Item:                      if (isChecked)                      {                          len = 15;                      }                      else                      {                          switch (NaviVersion)                          {                              case Tools.NaviVersion.MK4:                                  len = System.Math.Min(23' s.Length);                                  break;                              default:                                  len = 15;                                  break;                          }                      }                      index += 0x40;                      /*if (index == 0x47)                      {                          index = 0x7;                      }*/                      if (NaviVersion == Tools.NaviVersion.MK2)                      {                          data = new byte[] { 0xA5' 0x62' 0x00' (byte)index };                      }                      else                      {                          data = new byte[] { 0x21' 0x60' 0x00' (byte)index };                      }                      break;                  default:                      throw new Exception("TODO");              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The following statement contains a magic number: switch (field)              {                  case BordmonitorFields.Title:                      len = 11;                      data = DataShowTitle;                      break;                  case BordmonitorFields.Status:                      len = 11;                      data = DataShowStatus;                      break;                  case BordmonitorFields.Item:                      if (isChecked)                      {                          len = 15;                      }                      else                      {                          switch (NaviVersion)                          {                              case Tools.NaviVersion.MK4:                                  len = System.Math.Min(23' s.Length);                                  break;                              default:                                  len = 15;                                  break;                          }                      }                      index += 0x40;                      /*if (index == 0x47)                      {                          index = 0x7;                      }*/                      if (NaviVersion == Tools.NaviVersion.MK2)                      {                          data = new byte[] { 0xA5' 0x62' 0x00' (byte)index };                      }                      else                      {                          data = new byte[] { 0x21' 0x60' 0x00' (byte)index };                      }                      break;                  default:                      throw new Exception("TODO");              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The following statement contains a magic number: switch (field)              {                  case BordmonitorFields.Title:                      len = 11;                      data = DataShowTitle;                      break;                  case BordmonitorFields.Status:                      len = 11;                      data = DataShowStatus;                      break;                  case BordmonitorFields.Item:                      if (isChecked)                      {                          len = 15;                      }                      else                      {                          switch (NaviVersion)                          {                              case Tools.NaviVersion.MK4:                                  len = System.Math.Min(23' s.Length);                                  break;                              default:                                  len = 15;                                  break;                          }                      }                      index += 0x40;                      /*if (index == 0x47)                      {                          index = 0x7;                      }*/                      if (NaviVersion == Tools.NaviVersion.MK2)                      {                          data = new byte[] { 0xA5' 0x62' 0x00' (byte)index };                      }                      else                      {                          data = new byte[] { 0x21' 0x60' 0x00' (byte)index };                      }                      break;                  default:                      throw new Exception("TODO");              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,ShowText,The following statement contains a magic number: if (isChecked)              {                  data[data.Length - 2] = 0x2A;              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,GetItemIndex,The following statement contains a magic number: if (index > 9)              {                  index -= 0x40;              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,GetItemIndex,The following statement contains a magic number: var smallscreenOffset = count > 6 ? 0 : 2;
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,GetItemIndex,The following statement contains a magic number: var smallscreenOffset = count > 6 ? 0 : 2;
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,GetItemIndex,The following statement contains a magic number: if (back)              {                  if (index > 2 && index < smallscreenOffset + 3)                  {                      index += (byte)(3 + smallscreenOffset);                  }                  smallscreenOffset *= -1;              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,GetItemIndex,The following statement contains a magic number: if (back)              {                  if (index > 2 && index < smallscreenOffset + 3)                  {                      index += (byte)(3 + smallscreenOffset);                  }                  smallscreenOffset *= -1;              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,GetItemIndex,The following statement contains a magic number: if (back)              {                  if (index > 2 && index < smallscreenOffset + 3)                  {                      index += (byte)(3 + smallscreenOffset);                  }                  smallscreenOffset *= -1;              }
Magic Number,imBMW.iBus.Devices.Real,Bordmonitor,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,GetItemIndex,The following statement contains a magic number: return (byte)(index <= 2 ? index : index + smallscreenOffset);
Magic Number,imBMW.iBus.Devices.Real,Immobiliser,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Immobiliser.cs,ProcessEWSMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x74)              {                  if (m.Data[1] == 0x04)                  {                      IsKeyInserted = true;                      LastKeyInserted = m.Data[2];                      var e = KeyInserted;                      if (e != null)                      {                          e(new KeyEventArgs(LastKeyInserted));                      }                      m.ReceiverDescription = "Key " + LastKeyInserted + " inserted";                      Logger.Info(m.ReceiverDescription);                  }                  else if (m.Data[1] == 0x00)                  {                      IsKeyInserted = false;                      var e = KeyRemoved;                      if (e != null)                      {                          e(new KeyEventArgs(LastKeyInserted));                      }                      m.ReceiverDescription = "Key " + LastKeyInserted + " removed";                      Logger.Info(m.ReceiverDescription);                  }              }
Magic Number,imBMW.iBus.Devices.Real,Immobiliser,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Immobiliser.cs,ProcessEWSMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x74)              {                  if (m.Data[1] == 0x04)                  {                      IsKeyInserted = true;                      LastKeyInserted = m.Data[2];                      var e = KeyInserted;                      if (e != null)                      {                          e(new KeyEventArgs(LastKeyInserted));                      }                      m.ReceiverDescription = "Key " + LastKeyInserted + " inserted";                      Logger.Info(m.ReceiverDescription);                  }                  else if (m.Data[1] == 0x00)                  {                      IsKeyInserted = false;                      var e = KeyRemoved;                      if (e != null)                      {                          e(new KeyEventArgs(LastKeyInserted));                      }                      m.ReceiverDescription = "Key " + LastKeyInserted + " removed";                      Logger.Info(m.ReceiverDescription);                  }              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x18)              {                  OnSpeedRPMChanged((ushort)(m.Data[1] * 2)' (ushort)(m.Data[2] * 100));                  m.ReceiverDescription = "Speed " + CurrentSpeed + "km/h " + CurrentRPM + "RPM";              }              else if (m.Data.Length == 2 && m.Data[0] == 0x11)              {                  byte ign = m.Data[1];                  if ((ign & 0x02) != 0)                  {                      CurrentIgnitionState = IgnitionState.Ign;                  }                  else if ((ign & 0x01) != 0)                  {                      CurrentIgnitionState = IgnitionState.Acc;                  }                  else if (ign == 0x00)                  {                      CurrentIgnitionState = IgnitionState.Off;                  }                   else                  {                      m.ReceiverDescription = "Ignition unknown " + ign.ToHex();                      return;                  }                  m.ReceiverDescription = "Ignition " + CurrentIgnitionState.ToStringValue();              }              else if (m.Data[0] == 0x17 && m.Data.Length == 8)              {                  OnOdometerChanged((uint)(m.Data[3] << 16 + m.Data[2] << 8 + m.Data[1]));                  m.ReceiverDescription = "Odometer " + Odometer + " km";              }              else if (m.Data[0] == 0x54 && m.Data.Length == 14)              {                  OnVinChanged("" + (char)m.Data[1] + (char)m.Data[2] + m.Data[3].ToHex() + m.Data[4].ToHex() + m.Data[5].ToHex()[0]);                  m.ReceiverDescription = "VIN " + VIN;              }              else if (m.Data.Length == 4 && m.Data[0] == 0x19)              {                  OnTemperatureChanged((sbyte)m.Data[1]' (sbyte)m.Data[2]);                  m.ReceiverDescription = "Temperature. Outside " + TemperatureOutside + "°C' Coolant " + TemperatureCoolant + "°C";              }              else if (m.Data[0] == 0x24 && m.Data.Length > 2)              {                  switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x00' 0x00))              {                  OnSpeedLimitChanged(0);                  m.ReceiverDescription = "Speed limit turned off";              }              else if (m.DestinationDevice == DeviceAddress.FrontDisplay && m.Data.Compare(0x2A' 0x02' 0x00))              {                  OnSpeedLimitChanged(_lastSpeedLimit);                  m.ReceiverDescription = "Speed limit turned on";              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,SetSpeedLimit,The following statement contains a magic number: if (limit < 10) // TODO check mph              {                  limit = 10;              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,SetSpeedLimit,The following statement contains a magic number: if (limit < 10) // TODO check mph              {                  limit = 10;              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,SetSpeedLimit,The following statement contains a magic number: if (limit > 300) // TODO fix region settings              {                  limit = 300;              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,SetSpeedLimit,The following statement contains a magic number: if (limit > 300) // TODO fix region settings              {                  limit = 300;              }
Magic Number,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,SetSpeedLimit,The following statement contains a magic number: if (limit != _lastSpeedLimit)              {                  if (refresh)                  {                      _lastSpeedLimit = limit;                  }                  Manager.EnqueueMessage(new Message(DeviceAddress.GraphicsNavigationDriver' DeviceAddress.InstrumentClusterElectronics' "Set speed limit"' 0x40' 0x09' (byte)(limit >> 8)' (byte)(limit & 0xFF)));              }
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,ProcessLCMMessage,The following statement contains a magic number: if (m.Data.Length == 5 && m.Data[0] == 0x5B)              {                  OnLightStatusReceived(m);              }
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,OnLightStatusReceived,The following statement contains a magic number: var error = m.Data[2];
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,OnLightStatusReceived,The following statement contains a magic number: var errorUnk = m.Data[3];
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,OnLightStatusReceived,The following statement contains a magic number: var errorReason = m.Data[4];
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,OnLightStatusReceived,The following statement contains a magic number: if (errorReason == 0)              {                  if (error != 0)                  {                      description += "Unknown=" + errorUnk.ToHex() + "00";                  }                  else                  {                      description += "| Lights OK";                  }              }              else              {                  if (errorReason.HasBit(4))                  {                      args.ErrorFrontRightsLights = true;                      errorReason = errorReason.RemoveBit(4);                      description += "FrontRight ";                  }                  if (errorReason.HasBit(5))                  {                      args.ErrorFrontLeftLights = true;                      errorReason = errorReason.RemoveBit(5);                      description += "FrontLeft ";                  }                  if (errorReason != 0)                  {                      description += "Unknown=" + errorReason.ToHex();                  }              }
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,OnLightStatusReceived,The following statement contains a magic number: if (errorReason == 0)              {                  if (error != 0)                  {                      description += "Unknown=" + errorUnk.ToHex() + "00";                  }                  else                  {                      description += "| Lights OK";                  }              }              else              {                  if (errorReason.HasBit(4))                  {                      args.ErrorFrontRightsLights = true;                      errorReason = errorReason.RemoveBit(4);                      description += "FrontRight ";                  }                  if (errorReason.HasBit(5))                  {                      args.ErrorFrontLeftLights = true;                      errorReason = errorReason.RemoveBit(5);                      description += "FrontLeft ";                  }                  if (errorReason != 0)                  {                      description += "Unknown=" + errorReason.ToHex();                  }              }
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,OnLightStatusReceived,The following statement contains a magic number: if (errorReason == 0)              {                  if (error != 0)                  {                      description += "Unknown=" + errorUnk.ToHex() + "00";                  }                  else                  {                      description += "| Lights OK";                  }              }              else              {                  if (errorReason.HasBit(4))                  {                      args.ErrorFrontRightsLights = true;                      errorReason = errorReason.RemoveBit(4);                      description += "FrontRight ";                  }                  if (errorReason.HasBit(5))                  {                      args.ErrorFrontLeftLights = true;                      errorReason = errorReason.RemoveBit(5);                      description += "FrontLeft ";                  }                  if (errorReason != 0)                  {                      description += "Unknown=" + errorReason.ToHex();                  }              }
Magic Number,imBMW.iBus.Devices.Real,LightControlModule,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\LightControlModule.cs,OnLightStatusReceived,The following statement contains a magic number: if (errorReason == 0)              {                  if (error != 0)                  {                      description += "Unknown=" + errorUnk.ToHex() + "00";                  }                  else                  {                      description += "| Lights OK";                  }              }              else              {                  if (errorReason.HasBit(4))                  {                      args.ErrorFrontRightsLights = true;                      errorReason = errorReason.RemoveBit(4);                      description += "FrontRight ";                  }                  if (errorReason.HasBit(5))                  {                      args.ErrorFrontLeftLights = true;                      errorReason = errorReason.RemoveBit(5);                      description += "FrontLeft ";                  }                  if (errorReason != 0)                  {                      description += "Unknown=" + errorReason.ToHex();                  }              }
Magic Number,imBMW.iBus.Devices.Real,MultiFunctionSteeringWheel,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\MultiFunctionSteeringWheel.cs,VolumeUp,The following statement contains a magic number: step = (byte)System.Math.Max((byte)1' System.Math.Min(step' (byte)9));
Magic Number,imBMW.iBus.Devices.Real,MultiFunctionSteeringWheel,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\MultiFunctionSteeringWheel.cs,VolumeUp,The following statement contains a magic number: var p = (byte)((step << 4) + 1);
Magic Number,imBMW.iBus.Devices.Real,MultiFunctionSteeringWheel,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\MultiFunctionSteeringWheel.cs,VolumeDown,The following statement contains a magic number: step = (byte)System.Math.Max((byte)1' System.Math.Min(step' (byte)9));
Magic Number,imBMW.iBus.Devices.Real,MultiFunctionSteeringWheel,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\MultiFunctionSteeringWheel.cs,VolumeDown,The following statement contains a magic number: var p = (byte)(step << 4);
Magic Number,imBMW.iBus.Devices.Real,MultiFunctionSteeringWheel,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\MultiFunctionSteeringWheel.cs,ProcessMFLMessage,The following statement contains a magic number: if (m.Data.Compare(MessageRegistry.DataPollRequest))              {                  if (EmulatePhone)                  {                      Manager.EnqueueMessage(MessagePhoneResponse);                  }              }              else if (m.Data.Length == 2 && m.Data[0] == 0x3B)              {                  var btn = m.Data[1];                  switch (btn)                  {                      case 0x01:                          OnButtonPressed(m' MFLButton.Next);                          break;                        case 0x08:                          OnButtonPressed(m' MFLButton.Prev);                          break;                        case 0x40:                      case 0x00:                          if (RTAsButton)                          {                              if (!needSkipRT || btn == 0x40)                              {                                  OnButtonPressed(m' MFLButton.RT);                              }                              else                              {                                  m.ReceiverDescription = "RT (skipped)";                              }                          }                          else                          {                              OnButtonPressed(m' btn == 0x00 ? MFLButton.ModeRadio : MFLButton.ModeTelephone);                          }                          needSkipRT = false;                          break;                        case 0x80:                          wasDialLongPressed = false;                          m.ReceiverDescription = "Dial pressed";                          break;                        case 0x90:                          wasDialLongPressed = true;                          OnButtonPressed(m' MFLButton.DialLong);                          break;                        case 0xA0:                          if (!wasDialLongPressed)                          {                              OnButtonPressed(m' MFLButton.Dial);                          }                          else                          {                              m.ReceiverDescription = "Dial released";                          }                          wasDialLongPressed = false;                          break;                        default:                          m.ReceiverDescription = "Button unknown " + btn.ToHex();                          break;                  }              }
Magic Number,imBMW.iBus.Devices.Real,Radio,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Radio.cs,DisplayTextMID,The following statement contains a magic number: data.PasteASCII(s.Translit()' 3' DisplayTextMaxLen' align);
Magic Number,imBMW.iBus.Devices.Real,Radio,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Radio.cs,DisplayTextRadio,The following statement contains a magic number: data.PasteASCII(s.Translit()' 3' DisplayTextMaxLen' align);
Magic Number,imBMW.Clients,SocketClient,C:\repos\toxsedyshev_imBMW\Sources\NET\imBMW.Universal\Clients\SocketClient.cs,ReadingLoop,The following statement contains a magic number: try              {                  var parser = new MessageParser();                  parser.MessageReceived += parser_MessageReceived;                  while (true)                  {                      var size = await dataReader.LoadAsync(1028);                      var data = new byte[size];                      dataReader.ReadBytes(data);                        try                      {                          parser.Parse(data);                      }                      catch (Exception ex)                      {                          Logger.Error(ex' "Parsing message by SocketClient.");                      }                  }              }              catch (Exception ex)              {                  Logger.Error(ex' "imBMW socket client reading");                  lock (this)                  {                      if (Socket != null)                      {                          Disconnect();                          Reconnect();                      }                  }              }
Missing Default,imBMW.iBus,MessageReceiverRegistration,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\ManagerTools.cs,Matches,The following switch statement is missing a default case: switch (Match)              {                  case MessageReceiverRegistration.MatchType.Source:                      if (Source == m.SourceDevice)                      {                          return true;                      }                      break;                  case MessageReceiverRegistration.MatchType.Destination:                      if (Destination == m.DestinationDevice                          || m.DestinationDevice == DeviceAddress.Broadcast                          || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress)                      {                          return true;                      }                      break;                  case MessageReceiverRegistration.MatchType.SourceAndDestination:                      if (Source == m.SourceDevice                          && (Destination == m.DestinationDevice                              || m.DestinationDevice == DeviceAddress.Broadcast                              || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress))                      {                          return true;                      }                      break;                  case MessageReceiverRegistration.MatchType.SourceOrDestination:                      if (Source == m.SourceDevice                          || Destination == m.DestinationDevice                          || m.DestinationDevice == DeviceAddress.Broadcast                          || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress)                      {                          return true;                      }                      break;              }
Missing Default,imBMW.iBus.Devices.Real,BordmonitorText,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\Bordmonitor.cs,Parse,The following switch statement is missing a default case: switch (Field)              {                  case BordmonitorFields.Title:                      Text = ASCIIEncoding.GetString(Data' Bordmonitor.DataShowTitle.Length' -1' false).Trim().ASCIIToUTF8();                      break;                  case BordmonitorFields.Status:                      Text = ASCIIEncoding.GetString(Data' Bordmonitor.DataShowStatus.Length' -1' false).Trim().ASCIIToUTF8();                      break;                  case BordmonitorFields.Item:                      throw new Exception("Use ParseItems() instead.");              }
Missing Default,imBMW.iBus.Devices.Real,InstrumentClusterElectronics,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Devices\InstrumentClusterElectronics.cs,ProcessIKEMessage,The following switch statement is missing a default case: switch (m.Data[1])                  {                      case 0x01:                          if (m.Data.Length == 10)                          {                              var hourStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var minuteStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              if (hourStr == "--" || minuteStr == "--")                              {                                  m.ReceiverDescription = "Time: unset";                                  break;                              }                              var hour = Convert.ToByte(hourStr);                              var minute = Convert.ToByte(minuteStr);                              if (hour == 12 && m.Data[8] == 'A') // 12AM                              {                                  hour = 0;                              }                              else if (hour != 12 && m.Data[8] == 'P') // PM < 12                              {                                  hour += 12;                              }                              OnTimeChanged(hour' minute);                              m.ReceiverDescription = "Time: " + hour + ":" + minute;                          }                          break;                      case 0x02:                          if (m.Data.Length == 13)                          {                              var dayStr = new string(new[] { (char)m.Data[3]' (char)m.Data[4] });                              var monthStr = new string(new[] { (char)m.Data[6]' (char)m.Data[7] });                              var yearStr = new string(new[] { (char)m.Data[9]' (char)m.Data[10]' (char)m.Data[11]' (char)m.Data[12] });                              if (dayStr == "--" || monthStr == "--" || yearStr == "----") // year is always set                              {                                  m.ReceiverDescription = "Date: unset";                                  break;                              }                              var day = Convert.ToByte(dayStr);                              var month = Convert.ToByte(monthStr);                              var year = Convert.ToUInt16(yearStr);                              if (m.Data[5] == 0x2F || month > 12 && day <= 12)                              {                                  // TODO use region settings                                  var t = day;                                  day = month;                                  month = t;                              }                              OnDateChanged(day' month' year);                              m.ReceiverDescription = "Date: " + day + "/" + month + "/" + year;                          }                          break;                      case 0x03:                          if (m.Data.Length == 8)                          {                              float temperature;                              if (m.Data.ParseFloat(out temperature' 3' 5))                              {                                  //TemperatureOutside = (sbyte)temperature;                                  m.ReceiverDescription = "Outside temperature  " + temperature + "°C";                              }                          }                          break;                      case 0x04:                      case 0x05:                          if (m.Data.Length == 7)                          {                              float consumption = 0;                              m.Data.ParseFloat(out consumption' 3' 4);                              OnConsumptionChanged(m.Data[1] == 0x04' consumption);                              m.ReceiverDescription = "Consumption " + (m.Data[1] == 0x04 ? 1 : 2) + " = " + consumption + " l/km";                          }                          break;                      case 0x06:                          if (m.Data.Length == 7)                          {                              int range;                              if (m.Data.ParseInt(out range' 3' 4))                              {                                  OnRangeChanged((uint)range);                                  m.ReceiverDescription = "Range  " + Range + " km";                              }                          }                          break;                      case 0x09:                          if (m.Data.Length == 7)                          {                              int speedLimit;                              if (m.Data.ParseInt(out speedLimit' 3' 3))                              {                                  OnSpeedLimitChanged((ushort)speedLimit);                                  m.ReceiverDescription = "Speed limit  " + SpeedLimit + " km/h";                              }                          }                          break;                      case 0x0A:                          if (m.Data.Length == 7)                          {                              float speed = 0;                              m.Data.ParseFloat(out speed' 3' 4);                              OnAverageSpeedChanged(speed);                              m.ReceiverDescription = "Average speed  " + AverageSpeed + " km/h";                          }                          break;                  }
