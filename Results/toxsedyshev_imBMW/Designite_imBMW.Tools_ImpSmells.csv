Implementation smell,Namespace,Class,File,Method,Description
Complex Method,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,PasteASCII,Cyclomatic complexity of the method is 10
Complex Method,imBMW.Tools,LoggerArgs,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\LoggerArgs.cs,LoggerArgs,Cyclomatic complexity of the method is 10
Complex Method,imBMW.Tools,StringHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,Translit,Cyclomatic complexity of the method is 20
Complex Method,imBMW.Tools,StringHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,UTF8ToASCII,Cyclomatic complexity of the method is 18
Complex Method,imBMW.Tools,StringHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,IsNumeric,Cyclomatic complexity of the method is 7
Long Parameter List,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,SkipAndTake,The method has 4 parameters.
Long Parameter List,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,Compare,The method has 4 parameters.
Long Parameter List,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,PasteASCII,The method has 5 parameters.
Long Parameter List,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,IndexOf,The method has 4 parameters.
Long Parameter List,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,ParseFloat,The method has 4 parameters.
Long Parameter List,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,ParseInt,The method has 4 parameters.
Long Parameter List,imBMW.Tools,StringHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,GetString,The method has 4 parameters.
Long Parameter List,System.Text,ASCIIEncoding,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ASCIIEncoding.cs,GetString,The method has 4 parameters.
Magic Number,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,PasteASCII,The following statement contains a magic number: if (align == TextAlign.Center) {  	alignOffset = (byte)((limit - len) / 2);  } else if (align == TextAlign.Right) {  	alignOffset = (byte)(limit - len);  }  
Magic Number,imBMW.Tools,ArrayHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\ArrayHelpers.cs,PasteASCII,The following statement contains a magic number: alignOffset = (byte)((limit - len) / 2);  
Magic Number,imBMW.Tools,DateTimeHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\DateTimeHelpers.cs,GetTotalHours,The following statement contains a magic number: return timespan.Days * 24 + timespan.Hours;  
Magic Number,imBMW.Tools,DateTimeHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\DateTimeHelpers.cs,GetTotalMinutes,The following statement contains a magic number: return timespan.GetTotalHours () * 60 + timespan.Minutes;  
Magic Number,imBMW.Tools,DateTimeHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\DateTimeHelpers.cs,GetTotalSeconds,The following statement contains a magic number: return timespan.GetTotalMinutes () * 60 + timespan.Seconds;  
Magic Number,imBMW.Tools,DateTimeHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\DateTimeHelpers.cs,GetTotalMilliseconds,The following statement contains a magic number: return timespan.GetTotalSeconds () * 1000 + timespan.Milliseconds;  
Magic Number,imBMW.Tools,NumHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\NumHelpers.cs,ToHex,The following statement contains a magic number: return hexChars [b >> 4].ToString () + hexChars [b & 0x0F].ToString ();  
Magic Number,imBMW.Tools,NumHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\NumHelpers.cs,checkByteBitIndex,The following statement contains a magic number: if (bitIndex < 0 || bitIndex > 7) {  	throw new ArgumentException ("bitIndex");  }  
Magic Number,imBMW.Tools,StringHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,Translit,The following statement contains a magic number: for (int j = 0; j < s.Length; j++) {  	c = s [j];  	t = c.GetRussianCharType ();  	if (t == CharType.None) {  		r += c;  		continue;  	}  	int i;  	switch (t) {  	case CharType.Upper:  		i = c - 0x0410;  		break;  	case CharType.Lower:  		i = c - 0x0430;  		break;  	case CharType.UpperYo:  	case CharType.LowerYo:  		i = 32;  		break;  	default:  		throw new Exception ("Unknown char for translit.");  	}  	var nc = translitTo [i];  	if (nc is string) {  		if (t == CharType.Lower || t == CharType.LowerYo) {  			nc = ((string)nc).ToLower ();  		}  		r += (string)nc;  	} else {  		if (t == CharType.Lower || t == CharType.LowerYo) {  			nc = ((char)nc).ToLower ();  		}  		r += (char)nc;  	}  }  
Magic Number,imBMW.Tools,StringHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,Translit,The following statement contains a magic number: switch (t) {  case CharType.Upper:  	i = c - 0x0410;  	break;  case CharType.Lower:  	i = c - 0x0430;  	break;  case CharType.UpperYo:  case CharType.LowerYo:  	i = 32;  	break;  default:  	throw new Exception ("Unknown char for translit.");  }  
Magic Number,imBMW.Tools,StringHelpers,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\StringHelpers.cs,Translit,The following statement contains a magic number: i = 32;  
Missing Default,imBMW.Tools,LoggerArgs,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Tools\LoggerArgs.cs,LoggerArgs,The following switch statement is missing a default case: switch (priority) {  case LogPriority.Error:  	PriorityTitle = "ERROR";  	break;  case LogPriority.Warning:  	PriorityTitle = "warn";  	break;  case LogPriority.Info:  	PriorityTitle = "i";  	break;  }  
