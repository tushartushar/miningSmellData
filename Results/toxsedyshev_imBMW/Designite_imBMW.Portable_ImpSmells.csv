Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,init,The method has 6 parameters. Parameters: source' destination' data' packetLength' check' description
Long Statement,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The length of the statement  "                    s = "Processed: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format " is 130.
Long Statement,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The length of the statement  "                    s += "In queue: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format " is 130.
Long Statement,imBMW.iBus,MessageRegistry,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\MessageRegistry.cs,ToPrettyString,The length of the statement  "            description = message.SourceDevice.ToStringValue() + " > " + message.DestinationDevice.ToStringValue() + ": " + description; " is 124.
Complex Conditional,imBMW.iBus,MessageReceiverRegistration,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\ManagerTools.cs,Matches,The conditional expression  "Source == m.SourceDevice                          && (Destination == m.DestinationDevice                              || m.DestinationDevice == DeviceAddress.Broadcast                              || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress)"  is complex.
Complex Conditional,imBMW.iBus,MessageReceiverRegistration,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\ManagerTools.cs,Matches,The conditional expression  "Source == m.SourceDevice                          || Destination == m.DestinationDevice                          || m.DestinationDevice == DeviceAddress.Broadcast                          || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress"  is complex.
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,InternalMessage,The following statement contains a magic number: if (PacketLength > 1024) // TODO try up to 0xFFFF length              {                  throw new Exception("Message packet length exceeds 1024 bytes.");              }
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,TryCreate,The following statement contains a magic number: return new InternalMessage((DeviceAddress)packet[0]' packet.SkipAndTake(3' ParseDataLength(packet)));
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParsePacketLength,The following statement contains a magic number: return (packet[2] << 8) + packet[1] + 2;
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParsePacketLength,The following statement contains a magic number: return (packet[2] << 8) + packet[1] + 2;
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParsePacketLength,The following statement contains a magic number: return (packet[2] << 8) + packet[1] + 2;
Magic Number,imBMW.iBus,InternalMessage,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\InternalMessage.cs,ParseDataLength,The following statement contains a magic number: return ParsePacketLength(packet) - 4;
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,init,The following statement contains a magic number: check ^= (byte)(data.Length + 2);
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,init,The following statement contains a magic number: init(source' destination' data' data.Length + 4' check' description);
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,TryCreate,The following statement contains a magic number: return new Message(packet[0]' packet[2]' packet.SkipAndTake(3' ParseDataLength(packet)));
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,TryCreate,The following statement contains a magic number: return new Message(packet[0]' packet[2]' packet.SkipAndTake(3' ParseDataLength(packet)));
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ParsePacketLength,The following statement contains a magic number: return packet[1] + 2;
Magic Number,imBMW.iBus,Message,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ParseDataLength,The following statement contains a magic number: return ParsePacketLength(packet) - 4;
Magic Number,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The following statement contains a magic number: if (TimeStartedProcessing != default(DateTime))              {                  string s = "";                  if (TimeEndedProcessing != default(DateTime))                  {                      TimeSpan span = TimeEndedProcessing - TimeStartedProcessing;                      s = "Processed: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  if (TimeEnqueued != default(DateTime))                  {                      if (s != "")                      {                          s += " + ";                      }                      TimeSpan span = TimeStartedProcessing - TimeEnqueued;                      s += "In queue: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  return s;              }
Magic Number,imBMW.iBus,PerformanceInfo,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\Message.cs,ToString,The following statement contains a magic number: if (TimeStartedProcessing != default(DateTime))              {                  string s = "";                  if (TimeEndedProcessing != default(DateTime))                  {                      TimeSpan span = TimeEndedProcessing - TimeStartedProcessing;                      s = "Processed: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  if (TimeEnqueued != default(DateTime))                  {                      if (s != "")                      {                          s += " + ";                      }                      TimeSpan span = TimeStartedProcessing - TimeEnqueued;                      s += "In queue: " + span.GetTotalSeconds() + "." + span.Milliseconds.ToString().PrependToLength(3' '0'); // TODO use string format                  }                  return s;              }
Missing Default,imBMW.iBus,MessageReceiverRegistration,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW\iBus\ManagerTools.cs,Matches,The following switch statement is missing a default case: switch (Match)              {                  case MessageReceiverRegistration.MatchType.Source:                      if (Source == m.SourceDevice)                      {                          return true;                      }                      break;                  case MessageReceiverRegistration.MatchType.Destination:                      if (Destination == m.DestinationDevice                          || m.DestinationDevice == DeviceAddress.Broadcast                          || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress)                      {                          return true;                      }                      break;                  case MessageReceiverRegistration.MatchType.SourceAndDestination:                      if (Source == m.SourceDevice                          && (Destination == m.DestinationDevice                              || m.DestinationDevice == DeviceAddress.Broadcast                              || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress))                      {                          return true;                      }                      break;                  case MessageReceiverRegistration.MatchType.SourceOrDestination:                      if (Source == m.SourceDevice                          || Destination == m.DestinationDevice                          || m.DestinationDevice == DeviceAddress.Broadcast                          || m.DestinationDevice == DeviceAddress.GlobalBroadcastAddress)                      {                          return true;                      }                      break;              }
