Implementation smell,Namespace,Class,File,Method,Description
Long Method,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,ProcessBTNotification,The method has 106 lines of code.
Long Method,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The method has 109 lines of code.
Long Method,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The method has 148 lines of code.
Complex Method,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,Cyclomatic complexity of the method is 12
Complex Method,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,Cyclomatic complexity of the method is 14
Long Statement,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The length of the statement  "                            messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06)); " is 140.
Long Statement,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The length of the statement  "                    messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes); " is 122.
Long Statement,imBMW.Features.Menu,MenuHelpers,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuHelpers.cs,AddBackButton,The length of the statement  "            screen.AddItem(new MenuItem(i => "Â« " + Localization.Current.Back' MenuItemType.Button' MenuItemAction.GoBackScreen)' index); " is 125.
Long Statement,imBMW.Features.Menu,MenuScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuScreen.cs,OnNavigatedTo,The length of the statement  "                throw new Exception("Already navigated to screen " + this + " in another menu " + parentMenu + ". Can't navigate in " + menu); " is 126.
Long Statement,imBMW.Features.Menu,MenuScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuScreen.cs,OnNavigatedFrom,The length of the statement  "                throw new Exception("Navigated to screen " + this + " in another menu " + parentMenu + ". Can't navigate from in " + menu); " is 123.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Speed + ": " + InstrumentClusterElectronics.CurrentSpeed + Localization.Current.KMH)); " is 133.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Consumption + " 1: " + (InstrumentClusterElectronics.Consumption1 == 0 ? "-" : InstrumentClusterElectronics.Consumption1.ToString("F1"))' i =>  " is 189.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Consumption + " 2: " + (InstrumentClusterElectronics.Consumption2 == 0 ? "-" : InstrumentClusterElectronics.Consumption2.ToString("F1"))' i =>  " is 189.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Range + ": " + (InstrumentClusterElectronics.Range == 0 ? "-" : InstrumentClusterElectronics.Range + Localization.Current.KM))); " is 175.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Voltage + ": " + (BodyModule.BatteryVoltage > 0 ? BodyModule.BatteryVoltage.ToString("F1") : "-") + " " + Localization.Current.VoltageShort' i => UpdateVoltage())); " is 211.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "                var coolant = InstrumentClusterElectronics.TemperatureCoolant == sbyte.MinValue ? "-" : InstrumentClusterElectronics.TemperatureCoolant.ToString(); " is 147.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "                var outside = InstrumentClusterElectronics.TemperatureOutside == sbyte.MinValue ? "-" : InstrumentClusterElectronics.TemperatureOutside.ToString(); " is 147.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Limit + ": " + (InstrumentClusterElectronics.SpeedLimit == 0 ? "-" : InstrumentClusterElectronics.SpeedLimit + Localization.Current.KMH)' MenuItemType.Button' MenuItemAction.GoToScreen) " is 232.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "                AddItem(new MenuItem(i => Localization.Current.Language + ": " + Localization.Current.LanguageName' i => SwitchLanguage()' MenuItemType.Button' MenuItemAction.Refresh)); " is 169.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.ComfortWindows' i => Comfort.AutoCloseWindows = i.IsChecked' MenuItemType.Checkbox) " is 130.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.ComfortSunroof' i => Comfort.AutoCloseSunroof = i.IsChecked' MenuItemType.Checkbox) " is 130.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.AutoLock' i => Comfort.AutoLockDoors = i.IsChecked' MenuItemType.Checkbox) " is 121.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.AutoUnlock' i => Comfort.AutoUnlockDoors = i.IsChecked' MenuItemType.Checkbox) " is 125.
Long Statement,imBMW.Features.Menu.Screens,SpeedLimitScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,UpdateLimit,The length of the statement  "            Status = InstrumentClusterElectronics.SpeedLimit == 0 ? "" : InstrumentClusterElectronics.SpeedLimit + Localization.Current.KMH; " is 128.
Long Statement,imBMW.Features.Menu.Screens,SpeedLimitScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.LimitCurrentSpeed' i => InstrumentClusterElectronics.SetSpeedLimitToCurrentSpeed())); " is 132.
Long Statement,imBMW.Features.Menu.Screens,SpeedLimitScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => InstrumentClusterElectronics.SpeedLimit == 0 ? Localization.Current.TurnOn : Localization.Current.TurnOff' i => " is 137.
Long Statement,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreatePhoneScreen,The length of the statement  "            screen.AddItem(new MenuItem(i => Localization.Current.Contacts' MenuItemType.Button' MenuItemAction.GoToScreen) { GoToScreen = CreateContactsScreen() }); " is 153.
Long Statement,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreateContactsScreen,The length of the statement  "            contactsScreen.AddItem(new MenuItem(i => "< " + Localization.Current.PrevItems' i => { offset -= contactsPerPage; SetContactsScreenItems(); })' 0); // TODO navigate " is 164.
Long Statement,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreateContactsScreen,The length of the statement  "            contactsScreen.AddItem(new MenuItem(i => Localization.Current.NextItems + " >"' i => { offset += contactsPerPage; SetContactsScreenItems(); })' 1); // TODO test' fix and make 1 " is 176.
Complex Conditional,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,The conditional expression  "m.Data.Length == 2 && m.Data[0] == 0x46 && (m.Data[1] == 0x01 || m.Data[1] == 0x02)"  is complex.
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,BordcomputerScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,BordcomputerScreen,The constructor "BordcomputerScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,HomeScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\HomeScreen.cs,HomeScreen,The constructor "HomeScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,SettingsScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SettingsScreen,The constructor "SettingsScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,SpeedLimitScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,SpeedLimitScreen,The constructor "SpeedLimitScreen" calls a virtual method "SetItems".
Empty Catch Block,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The method has an empty catch block.
Empty Catch Block,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The method has an empty catch block.
Empty Catch Block,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The method has an empty catch block.
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Light,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Light.cs,LightControlModule_LightStatusReceived,The following statement contains a magic number: if (IgnoreFrontLightsError && args.ErrorFrontLeftLights && args.ErrorFrontRightsLights)              {                  var data = (byte[])message.Data.Clone();                  data[4] = data[4].RemoveBits(0x30);                  var m = new Message(DeviceAddress.LightControlModule' DeviceAddress.GlobalBroadcastAddress' data);                  Manager.EnqueueMessage(m);              }
Magic Number,imBMW.Features,Light,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Light.cs,LightControlModule_LightStatusReceived,The following statement contains a magic number: if (IgnoreFrontLightsError && args.ErrorFrontLeftLights && args.ErrorFrontRightsLights)              {                  var data = (byte[])message.Data.Clone();                  data[4] = data[4].RemoveBits(0x30);                  var m = new Message(DeviceAddress.LightControlModule' DeviceAddress.GlobalBroadcastAddress' data);                  Manager.EnqueueMessage(m);              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x46 && (m.Data[1] == 0x01 || m.Data[1] == 0x02))              {                  switch (m.Data[1])                  {                      case 0x01:                          m.ReceiverDescription = "Screen SW by nav";                          break;                      case 0x02:                          m.ReceiverDescription = "Screen SW by rad";                          skipClearScreen = true; // to prevent on "clear screen" update on switch to BC/nav                          break;                  }                  IsScreenSwitched = true;                  return;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: if (m.Data.Length == 4 && m.Data.StartsWith(0x31' 0x60' 0x00) && m.Data[3] <= 9)              {                  var index = GetItemIndex(m.Data[3]' true);                  m.ReceiverDescription = "Screen item click #" + index;                  var item = CurrentScreen.GetItem(index);                  if (item != null)                  {                      item.Click();                  }                  return;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: if (m.Data.Length == 4 && m.Data.StartsWith(0x31' 0x60' 0x00) && m.Data[3] <= 9)              {                  var index = GetItemIndex(m.Data[3]' true);                  m.ReceiverDescription = "Screen item click #" + index;                  var item = CurrentScreen.GetItem(index);                  if (item != null)                  {                      item.Click();                  }                  return;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: if (m.Data.Length == 4 && m.Data.StartsWith(0x31' 0x60' 0x00) && m.Data[3] <= 9)              {                  var index = GetItemIndex(m.Data[3]' true);                  m.ReceiverDescription = "Screen item click #" + index;                  var item = CurrentScreen.GetItem(index);                  if (item != null)                  {                      item.Click();                  }                  return;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: if (m.Data.Length == 4 && m.Data.StartsWith(0x31' 0x60' 0x00) && m.Data[3] <= 9)              {                  var index = GetItemIndex(m.Data[3]' true);                  m.ReceiverDescription = "Screen item click #" + index;                  var item = CurrentScreen.GetItem(index);                  if (item != null)                  {                      item.Click();                  }                  return;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x48)              {                  switch (m.Data[1])                  {                      case 0x14: // <>                          m.ReceiverDescription = "BM button <> - navigate home";                          NavigateHome();                          break;                      case 0x07:                          m.ReceiverDescription = "BM button Clock - navigate BC";                          NavigateAfterHome(BordcomputerScreen.Instance);                          break;                      case 0x20:                          m.ReceiverDescription = "BM button Sel"; // - navigate player";                          // TODO fix in cdc mode                          //NavigateAfterHome(HomeScreen.Instance.PlayerScreen);                          break;                      case 0x30:                          m.ReceiverDescription = "BM button Switch Screen";                          /*if (screenSwitched)                          {                              UpdateScreen();                          }*/                          break;                      case 0x23:                          m.ReceiverDescription = "BM button Mode";                          IsEnabled = false;                          Bordmonitor.EnableRadioMenu(); // TODO test [and remove]                          break;                      case 0x04:                          m.ReceiverDescription = "BM button Tone";                          // TODO fix Tone - skip clear till aux title                          IsEnabled = false;                          //Bordmonitor.EnableRadioMenu(); // TODO test [and remove]                          break;                  }                  return;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: lock (drawLock)              {                  isDrawing = true;                  skipRefreshScreen = true;                  skipClearTillRefresh = true; // TODO test no screen items lost                  base.DrawScreen(args);                    var messages = new Message[FastMenuDrawing ? 4 : 13];                  var n = 0;                  messages[n++] = Bordmonitor.ShowText(CurrentScreen.Status ?? String.Empty' BordmonitorFields.Status' 0' false' false);                  lastTitle = Bordmonitor.ShowText(CurrentScreen.Title ?? String.Empty' BordmonitorFields.Title' 0' false' false);                  messages[n++] = lastTitle;                  byte[] itemsBytes = null;                  for (byte i = 0; i < 10; i++)                  {                      var index = GetItemIndex(i' true);                      var item = CurrentScreen.GetItem(index);                      if (FastMenuDrawing)                      {                          if (item == null && itemsBytes != null)                          {                              itemsBytes = itemsBytes.Combine(0x06);                              continue;                          }                          var m = DrawItem(item' i);                          if (itemsBytes == null)                          {                              itemsBytes = m.Data;                          }                          else                          {                              var d = m.Data.Skip(3);                              d[0] = 0x06;                              itemsBytes = itemsBytes.Combine(d);                          }                      }                      else                      {                          if (item == null && n > 2)                          {                              var prevMess = messages[n-1];                              messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06));                          }                          else                          {                              messages[n++] = DrawItem(item' i);                          }                          messages[n - 1].AfterSendDelay = 40;                      }                  }                  if (FastMenuDrawing)                  {                      itemsBytes = itemsBytes.Combine(0x06);                      messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes);                  }                  messages[n++] = Bordmonitor.MessageRefreshScreen;                  skipRefreshScreen = true;                  skipClearTillRefresh = true;                  Manager.EnqueueMessage(messages);                  isDrawing = false;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: lock (drawLock)              {                  isDrawing = true;                  skipRefreshScreen = true;                  skipClearTillRefresh = true; // TODO test no screen items lost                  base.DrawScreen(args);                    var messages = new Message[FastMenuDrawing ? 4 : 13];                  var n = 0;                  messages[n++] = Bordmonitor.ShowText(CurrentScreen.Status ?? String.Empty' BordmonitorFields.Status' 0' false' false);                  lastTitle = Bordmonitor.ShowText(CurrentScreen.Title ?? String.Empty' BordmonitorFields.Title' 0' false' false);                  messages[n++] = lastTitle;                  byte[] itemsBytes = null;                  for (byte i = 0; i < 10; i++)                  {                      var index = GetItemIndex(i' true);                      var item = CurrentScreen.GetItem(index);                      if (FastMenuDrawing)                      {                          if (item == null && itemsBytes != null)                          {                              itemsBytes = itemsBytes.Combine(0x06);                              continue;                          }                          var m = DrawItem(item' i);                          if (itemsBytes == null)                          {                              itemsBytes = m.Data;                          }                          else                          {                              var d = m.Data.Skip(3);                              d[0] = 0x06;                              itemsBytes = itemsBytes.Combine(d);                          }                      }                      else                      {                          if (item == null && n > 2)                          {                              var prevMess = messages[n-1];                              messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06));                          }                          else                          {                              messages[n++] = DrawItem(item' i);                          }                          messages[n - 1].AfterSendDelay = 40;                      }                  }                  if (FastMenuDrawing)                  {                      itemsBytes = itemsBytes.Combine(0x06);                      messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes);                  }                  messages[n++] = Bordmonitor.MessageRefreshScreen;                  skipRefreshScreen = true;                  skipClearTillRefresh = true;                  Manager.EnqueueMessage(messages);                  isDrawing = false;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: lock (drawLock)              {                  isDrawing = true;                  skipRefreshScreen = true;                  skipClearTillRefresh = true; // TODO test no screen items lost                  base.DrawScreen(args);                    var messages = new Message[FastMenuDrawing ? 4 : 13];                  var n = 0;                  messages[n++] = Bordmonitor.ShowText(CurrentScreen.Status ?? String.Empty' BordmonitorFields.Status' 0' false' false);                  lastTitle = Bordmonitor.ShowText(CurrentScreen.Title ?? String.Empty' BordmonitorFields.Title' 0' false' false);                  messages[n++] = lastTitle;                  byte[] itemsBytes = null;                  for (byte i = 0; i < 10; i++)                  {                      var index = GetItemIndex(i' true);                      var item = CurrentScreen.GetItem(index);                      if (FastMenuDrawing)                      {                          if (item == null && itemsBytes != null)                          {                              itemsBytes = itemsBytes.Combine(0x06);                              continue;                          }                          var m = DrawItem(item' i);                          if (itemsBytes == null)                          {                              itemsBytes = m.Data;                          }                          else                          {                              var d = m.Data.Skip(3);                              d[0] = 0x06;                              itemsBytes = itemsBytes.Combine(d);                          }                      }                      else                      {                          if (item == null && n > 2)                          {                              var prevMess = messages[n-1];                              messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06));                          }                          else                          {                              messages[n++] = DrawItem(item' i);                          }                          messages[n - 1].AfterSendDelay = 40;                      }                  }                  if (FastMenuDrawing)                  {                      itemsBytes = itemsBytes.Combine(0x06);                      messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes);                  }                  messages[n++] = Bordmonitor.MessageRefreshScreen;                  skipRefreshScreen = true;                  skipClearTillRefresh = true;                  Manager.EnqueueMessage(messages);                  isDrawing = false;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: lock (drawLock)              {                  isDrawing = true;                  skipRefreshScreen = true;                  skipClearTillRefresh = true; // TODO test no screen items lost                  base.DrawScreen(args);                    var messages = new Message[FastMenuDrawing ? 4 : 13];                  var n = 0;                  messages[n++] = Bordmonitor.ShowText(CurrentScreen.Status ?? String.Empty' BordmonitorFields.Status' 0' false' false);                  lastTitle = Bordmonitor.ShowText(CurrentScreen.Title ?? String.Empty' BordmonitorFields.Title' 0' false' false);                  messages[n++] = lastTitle;                  byte[] itemsBytes = null;                  for (byte i = 0; i < 10; i++)                  {                      var index = GetItemIndex(i' true);                      var item = CurrentScreen.GetItem(index);                      if (FastMenuDrawing)                      {                          if (item == null && itemsBytes != null)                          {                              itemsBytes = itemsBytes.Combine(0x06);                              continue;                          }                          var m = DrawItem(item' i);                          if (itemsBytes == null)                          {                              itemsBytes = m.Data;                          }                          else                          {                              var d = m.Data.Skip(3);                              d[0] = 0x06;                              itemsBytes = itemsBytes.Combine(d);                          }                      }                      else                      {                          if (item == null && n > 2)                          {                              var prevMess = messages[n-1];                              messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06));                          }                          else                          {                              messages[n++] = DrawItem(item' i);                          }                          messages[n - 1].AfterSendDelay = 40;                      }                  }                  if (FastMenuDrawing)                  {                      itemsBytes = itemsBytes.Combine(0x06);                      messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes);                  }                  messages[n++] = Bordmonitor.MessageRefreshScreen;                  skipRefreshScreen = true;                  skipClearTillRefresh = true;                  Manager.EnqueueMessage(messages);                  isDrawing = false;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: lock (drawLock)              {                  isDrawing = true;                  skipRefreshScreen = true;                  skipClearTillRefresh = true; // TODO test no screen items lost                  base.DrawScreen(args);                    var messages = new Message[FastMenuDrawing ? 4 : 13];                  var n = 0;                  messages[n++] = Bordmonitor.ShowText(CurrentScreen.Status ?? String.Empty' BordmonitorFields.Status' 0' false' false);                  lastTitle = Bordmonitor.ShowText(CurrentScreen.Title ?? String.Empty' BordmonitorFields.Title' 0' false' false);                  messages[n++] = lastTitle;                  byte[] itemsBytes = null;                  for (byte i = 0; i < 10; i++)                  {                      var index = GetItemIndex(i' true);                      var item = CurrentScreen.GetItem(index);                      if (FastMenuDrawing)                      {                          if (item == null && itemsBytes != null)                          {                              itemsBytes = itemsBytes.Combine(0x06);                              continue;                          }                          var m = DrawItem(item' i);                          if (itemsBytes == null)                          {                              itemsBytes = m.Data;                          }                          else                          {                              var d = m.Data.Skip(3);                              d[0] = 0x06;                              itemsBytes = itemsBytes.Combine(d);                          }                      }                      else                      {                          if (item == null && n > 2)                          {                              var prevMess = messages[n-1];                              messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06));                          }                          else                          {                              messages[n++] = DrawItem(item' i);                          }                          messages[n - 1].AfterSendDelay = 40;                      }                  }                  if (FastMenuDrawing)                  {                      itemsBytes = itemsBytes.Combine(0x06);                      messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes);                  }                  messages[n++] = Bordmonitor.MessageRefreshScreen;                  skipRefreshScreen = true;                  skipClearTillRefresh = true;                  Manager.EnqueueMessage(messages);                  isDrawing = false;              }
Magic Number,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: lock (drawLock)              {                  isDrawing = true;                  skipRefreshScreen = true;                  skipClearTillRefresh = true; // TODO test no screen items lost                  base.DrawScreen(args);                    var messages = new Message[FastMenuDrawing ? 4 : 13];                  var n = 0;                  messages[n++] = Bordmonitor.ShowText(CurrentScreen.Status ?? String.Empty' BordmonitorFields.Status' 0' false' false);                  lastTitle = Bordmonitor.ShowText(CurrentScreen.Title ?? String.Empty' BordmonitorFields.Title' 0' false' false);                  messages[n++] = lastTitle;                  byte[] itemsBytes = null;                  for (byte i = 0; i < 10; i++)                  {                      var index = GetItemIndex(i' true);                      var item = CurrentScreen.GetItem(index);                      if (FastMenuDrawing)                      {                          if (item == null && itemsBytes != null)                          {                              itemsBytes = itemsBytes.Combine(0x06);                              continue;                          }                          var m = DrawItem(item' i);                          if (itemsBytes == null)                          {                              itemsBytes = m.Data;                          }                          else                          {                              var d = m.Data.Skip(3);                              d[0] = 0x06;                              itemsBytes = itemsBytes.Combine(d);                          }                      }                      else                      {                          if (item == null && n > 2)                          {                              var prevMess = messages[n-1];                              messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06));                          }                          else                          {                              messages[n++] = DrawItem(item' i);                          }                          messages[n - 1].AfterSendDelay = 40;                      }                  }                  if (FastMenuDrawing)                  {                      itemsBytes = itemsBytes.Combine(0x06);                      messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes);                  }                  messages[n++] = Bordmonitor.MessageRefreshScreen;                  skipRefreshScreen = true;                  skipClearTillRefresh = true;                  Manager.EnqueueMessage(messages);                  isDrawing = false;              }
Magic Number,imBMW.Features.Menu,MenuBase,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuBase.cs,ProcessRadioMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x38 && m.Data[1] == 0x0A)              {                  switch (m.Data[2])                  {                      case 0x00:                          mediaEmulator.Player.Next();                          m.ReceiverDescription = "Next track";                          break;                      case 0x01:                          mediaEmulator.Player.Prev();                          m.ReceiverDescription = "Prev track";                          break;                  }              }
Magic Number,imBMW.Features.Menu,MenuBase,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuBase.cs,ProcessRadioMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x38 && m.Data[1] == 0x0A)              {                  switch (m.Data[2])                  {                      case 0x00:                          mediaEmulator.Player.Next();                          m.ReceiverDescription = "Next track";                          break;                      case 0x01:                          mediaEmulator.Player.Prev();                          m.ReceiverDescription = "Prev track";                          break;                  }              }
Magic Number,imBMW.Features.Menu,MenuScreen,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuScreen.cs,MenuScreen,The following statement contains a magic number: MaxItemsCount = 10;
Magic Number,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x38 && m.Data[1] == 0x06)              {                  // switch cd buttons:                  //   2 - select                  //                  //   3 - prev                  //   4 - next                  //                  //   5 - back                  //   6 - home                  byte cdNumber = m.Data[2];                  switch (cdNumber)                  {                      case 0x02:                          PressedSelect();                          break;                      case 0x03:                          ScrollPrev();                          break;                      case 0x04:                          ScrollNext();                          break;                      case 0x05:                          PressedBack();                          break;                      case 0x06:                          PressedHome();                          break;                  }                  m.ReceiverDescription = "Change CD: " + cdNumber;              }
Magic Number,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The following statement contains a magic number: if (m.Data.Length == 3 && m.Data[0] == 0x38 && m.Data[1] == 0x06)              {                  // switch cd buttons:                  //   2 - select                  //                  //   3 - prev                  //   4 - next                  //                  //   5 - back                  //   6 - home                  byte cdNumber = m.Data[2];                  switch (cdNumber)                  {                      case 0x02:                          PressedSelect();                          break;                      case 0x03:                          ScrollPrev();                          break;                      case 0x04:                          ScrollNext();                          break;                      case 0x05:                          PressedBack();                          break;                      case 0x06:                          PressedHome();                          break;                  }                  m.ReceiverDescription = "Change CD: " + cdNumber;              }
Magic Number,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The following statement contains a magic number: if (Radio.HasMID && m.DestinationDevice == DeviceAddress.MultiInfoDisplay)              {                  if (m.Data.StartsWith(DataMIDCDC))                  {                      UpdateScreen(MenuScreenUpdateReason.Refresh);                      wereMIDButtonsOverriden = false;                      m.ReceiverDescription = "CD 1-01";                  }                  else if (m.Data.Compare(DataMIDFirstButtons))                  {                      wereMIDButtonsOverriden = false;                      m.ReceiverDescription = "Disk change buttons display";                  }                  else if (m.Data.Compare(MaskMIDLastButtons' MessageMIDLastButtons.Data))                  {                      m.ReceiverDescription = MessageMIDLastButtons.ReceiverDescription;                      MessageMIDLastButtons = m; // to save statuses of TP' RND and SC flags                      if (!wereMIDButtonsOverriden)                      {                          Manager.EnqueueMessage(MessageMIDMenuButtons' m);                          wereMIDButtonsOverriden = true;                      }                      else                      {                          wereMIDButtonsOverriden = false;                      }                  }              }              else if (m.Data.Length == 3 && m.Data[0] == 0x38 && m.Data[1] == 0x0A)              {                  if (CurrentScreen != mediaEmulator.Player.Menu)                  {                      UpdateScreen(MenuScreenUpdateReason.Refresh);                  }              }
Magic Number,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,DrawScreen,The following statement contains a magic number: switch (args.Reason)              {                  case MenuScreenUpdateReason.Navigation:                      showText = CurrentScreen.Title;                      if (showText.Length < Radio.DisplayTextMaxLen)                      {                          showText = CharIcons.NetRect + showText;                      }                      if (showText.Length < Radio.DisplayTextMaxLen)                      {                          showText += CharIcons.NetRect;                      }                      align = TextAlign.Center;                      RefreshScreenWithDelay(MenuScreenUpdateReason.Scroll);                      break;                  case MenuScreenUpdateReason.StatusChanged:                      if (CurrentScreen.Status == String.Empty)                      {                          UpdateScreen(MenuScreenUpdateReason.Refresh);                          return;                      }                      showText = CurrentScreen.Status;                      align = TextAlign.Center;                      RefreshScreenWithDelay();                      break;                  default:                      showText = GetShownItemString();                      var separator = showText.IndexOf(": ");                      if (separator >= 0)                      {                          if (args.Reason == MenuScreenUpdateReason.Scroll)                          {                              showText = showText.Substring(0' separator + 1);                              RefreshScreenWithDelay();                          }                          else                          {                              showText = showText.Substring(separator + 2);                          }                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,BluetoothOVC3860,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200)' Cpu.Pin.GPIO_NONE' 0' 16' 10);
Magic Number,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,BluetoothOVC3860,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200)' Cpu.Pin.GPIO_NONE' 0' 16' 10);
Magic Number,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,GetContacts,The following statement contains a magic number: try              {                  if (contactsPath == null || !File.Exists(contactsPath))                  {                      Logger.Info("No contacts file");                      return contacts;                  }                    using (var sr = new StreamReader(contactsPath))                  {                      uint found = 0;                      bool hasPhone = false;                      PhoneContact contact = null;                        string s;                      while ((s = sr.ReadLine()) != null)                      {                          if (s == string.Empty)                          {                              continue;                          }                          switch (s)                          {                              case "BEGIN:VCARD":                                  Debug.GC(true); // Logger.Info("Free memory = " + Debug.GC(true)' "MEM");                                  hasPhone = false;                                  if (found >= offset)                                  {                                      contact = new PhoneContact();                                  }                                  break;                              case "END:VCARD":                                  if (hasPhone)                                  {                                      if (contact != null)                                      {                                          contacts.Add(contact);                                          if (contacts.Count == count)                                          {                                              return contacts;                                          }                                      }                                      found++;                                  }                                  break;                              default:                                  if (s.Substring(0' 2) == "FN")                                  {                                      if (contact != null)                                      {                                          contact.Name = s.Split(':')[1];                                      }                                  }                                  else if (s.Substring(0' 3) == "TEL")                                  {                                      if (contact != null)                                      {                                          contact.AddPhone(s.Split(':')[1]);                                      }                                      hasPhone = true;                                  }                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  Logger.Error(ex' "contacts loading");              }
Magic Number,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,GetContacts,The following statement contains a magic number: try              {                  if (contactsPath == null || !File.Exists(contactsPath))                  {                      Logger.Info("No contacts file");                      return contacts;                  }                    using (var sr = new StreamReader(contactsPath))                  {                      uint found = 0;                      bool hasPhone = false;                      PhoneContact contact = null;                        string s;                      while ((s = sr.ReadLine()) != null)                      {                          if (s == string.Empty)                          {                              continue;                          }                          switch (s)                          {                              case "BEGIN:VCARD":                                  Debug.GC(true); // Logger.Info("Free memory = " + Debug.GC(true)' "MEM");                                  hasPhone = false;                                  if (found >= offset)                                  {                                      contact = new PhoneContact();                                  }                                  break;                              case "END:VCARD":                                  if (hasPhone)                                  {                                      if (contact != null)                                      {                                          contacts.Add(contact);                                          if (contacts.Count == count)                                          {                                              return contacts;                                          }                                      }                                      found++;                                  }                                  break;                              default:                                  if (s.Substring(0' 2) == "FN")                                  {                                      if (contact != null)                                      {                                          contact.Name = s.Split(':')[1];                                      }                                  }                                  else if (s.Substring(0' 3) == "TEL")                                  {                                      if (contact != null)                                      {                                          contact.AddPhone(s.Split(':')[1]);                                      }                                      hasPhone = true;                                  }                                  break;                          }                      }                  }              }              catch (Exception ex)              {                  Logger.Error(ex' "contacts loading");              }
Magic Number,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreateContactsScreen,The following statement contains a magic number: contactsPerPage = MenuScreen.MaxItemsCount - 3;
Magic Number,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,SetContactsScreenItems,The following statement contains a magic number: var i = 2;
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,BluetoothWT32,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200' Parity.None' 8' StopBits.One' true)' Cpu.Pin.GPIO_NONE' 0' 60' 0);
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,BluetoothWT32,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200' Parity.None' 8' StopBits.One' true)' Cpu.Pin.GPIO_NONE' 0' 60' 0);
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,SendCommand,The following statement contains a magic number: if (command.Length > 1023)              {                  throw new Exception("WT32 command length limit is 10 bytes. Can't send: " + description);              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessSendCommand,The following statement contains a magic number: if (o is string)              {                  var s = (string)o;                  Logger.Info(s' "> BT");                  port.WriteLine(s);              }              else              {                  var cmd = (MuxCommand)o;                  var bytes = cmd.GetBytes();                  var len = bytes.Length;                  if (len > 1023)                  {                      throw new Exception("WT32 command length limit is 10 bytes. Can't send: " + cmd.Command);                  }                  var buf = new byte[len + 5];                    int pos = 0;                  buf[pos++] = 0xBF;  // SOF                   buf[pos++] = (byte)cmd.Link;                  buf[pos++] = (byte)(len >> 8);  // Flags (reserved) 6 bits + len 2 bits (256-1023)                  buf[pos++] = (byte)len;         //                         + len 8 bits (0-255)                  Array.Copy(bytes' 0' buf' pos' len);                  pos += len;                  buf[pos++] = (byte)(((byte)cmd.Link) ^ 0xFF); // nlink                    Logger.Info("MUX " + (cmd.Link == Link.Control ? "CTRL" : cmd.Link.ToString()) + ": " + cmd.Command' "> BT");                  port.Write(buf);              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessSendCommand,The following statement contains a magic number: if (o is string)              {                  var s = (string)o;                  Logger.Info(s' "> BT");                  port.WriteLine(s);              }              else              {                  var cmd = (MuxCommand)o;                  var bytes = cmd.GetBytes();                  var len = bytes.Length;                  if (len > 1023)                  {                      throw new Exception("WT32 command length limit is 10 bytes. Can't send: " + cmd.Command);                  }                  var buf = new byte[len + 5];                    int pos = 0;                  buf[pos++] = 0xBF;  // SOF                   buf[pos++] = (byte)cmd.Link;                  buf[pos++] = (byte)(len >> 8);  // Flags (reserved) 6 bits + len 2 bits (256-1023)                  buf[pos++] = (byte)len;         //                         + len 8 bits (0-255)                  Array.Copy(bytes' 0' buf' pos' len);                  pos += len;                  buf[pos++] = (byte)(((byte)cmd.Link) ^ 0xFF); // nlink                    Logger.Info("MUX " + (cmd.Link == Link.Control ? "CTRL" : cmd.Link.ToString()) + ": " + cmd.Command' "> BT");                  port.Write(buf);              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessSendCommand,The following statement contains a magic number: if (o is string)              {                  var s = (string)o;                  Logger.Info(s' "> BT");                  port.WriteLine(s);              }              else              {                  var cmd = (MuxCommand)o;                  var bytes = cmd.GetBytes();                  var len = bytes.Length;                  if (len > 1023)                  {                      throw new Exception("WT32 command length limit is 10 bytes. Can't send: " + cmd.Command);                  }                  var buf = new byte[len + 5];                    int pos = 0;                  buf[pos++] = 0xBF;  // SOF                   buf[pos++] = (byte)cmd.Link;                  buf[pos++] = (byte)(len >> 8);  // Flags (reserved) 6 bits + len 2 bits (256-1023)                  buf[pos++] = (byte)len;         //                         + len 8 bits (0-255)                  Array.Copy(bytes' 0' buf' pos' len);                  pos += len;                  buf[pos++] = (byte)(((byte)cmd.Link) ^ 0xFF); // nlink                    Logger.Info("MUX " + (cmd.Link == Link.Control ? "CTRL" : cmd.Link.ToString()) + ": " + cmd.Command' "> BT");                  port.Write(buf);              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  if (btBuffer == null || btBuffer.Length != btBufferMuxLen)                  {                      btBuffer = new byte[btBufferMuxLen];                      btBufferLen = 0;                  }                  if (btBuffer.Length - btBufferLen < data.Length)                  {                      btBufferMuxLen *= 2;                      Logger.Info("Extending buffer to " + btBufferMuxLen' "BT");                      var newBuf = new byte[btBufferMuxLen];                      if (btBufferLen > 0)                      {                          Array.Copy(btBuffer' newBuf' btBufferLen);                      }                      btBuffer = newBuf;                  }                  Array.Copy(data' 0' btBuffer' btBufferLen' data.Length);                  btBufferLen += data.Length;              }              else              {                  if (btBuffer == null || btBuffer.Length == btBufferMuxLen)                  {                      btBuffer = data;                  }                  else                  {                      btBuffer = btBuffer.Combine(data);                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  while ((index = btBuffer.IndexOf(0xBF' index + 1' btBufferLen)) != -1)                  {                      bLen = btBufferLen - index;                      if (bLen < 5)                      {                          break;                      }                      var link = btBuffer[index + 1];                      if (link != (byte)Link.Control && link > (byte)Link.Seven)                      {                          continue;                      }                      var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3]; // 10-byte length                      var packLen = dataLen + 5;                      if (bLen < packLen)                      {                          break;                      }                      if (btBuffer[index + packLen - 1] != (link ^ 0xFF))                      {                          continue;                      }                      OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));                      if (bLen != packLen)                      {                          Array.Copy(btBuffer' index + packLen' btBuffer' 0' bLen - packLen);                      }                      btBufferLen = bLen - packLen;                      index = -1;                  }                  if (index > 0)                  {                      #if DEBUG                      Logger.Warning("Skipping BT data: " + ASCIIEncoding.GetString(btBuffer' 0' btBufferLen - index));                      #endif                      Array.Copy(btBuffer' index' btBuffer' 0' btBufferLen - index);                      btBufferLen -= index;                  }              }              else              {                  while (btBuffer != null && ((index = btBuffer.IndexOf(0x0D)) != -1 || (index = btBuffer.IndexOf(0x0A)) != -1))                  {                      if (index != 0)                      {                          try                          {                              OnBTCommandReceived(Link.Control' btBuffer.SkipAndTake(0' index));                          }                          catch (Exception ex)                          {                              Logger.Error(ex' "while parsing WT32 message in command mode");                          }                      }                      var skip = btBuffer[index] == 0x0A ? 1 : 2;                      if (index + skip >= btBuffer.Length)                      {                          btBuffer = null;                      }                      else                      {                          btBuffer = btBuffer.Skip(index + skip);                      }                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  while ((index = btBuffer.IndexOf(0xBF' index + 1' btBufferLen)) != -1)                  {                      bLen = btBufferLen - index;                      if (bLen < 5)                      {                          break;                      }                      var link = btBuffer[index + 1];                      if (link != (byte)Link.Control && link > (byte)Link.Seven)                      {                          continue;                      }                      var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3]; // 10-byte length                      var packLen = dataLen + 5;                      if (bLen < packLen)                      {                          break;                      }                      if (btBuffer[index + packLen - 1] != (link ^ 0xFF))                      {                          continue;                      }                      OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));                      if (bLen != packLen)                      {                          Array.Copy(btBuffer' index + packLen' btBuffer' 0' bLen - packLen);                      }                      btBufferLen = bLen - packLen;                      index = -1;                  }                  if (index > 0)                  {                      #if DEBUG                      Logger.Warning("Skipping BT data: " + ASCIIEncoding.GetString(btBuffer' 0' btBufferLen - index));                      #endif                      Array.Copy(btBuffer' index' btBuffer' 0' btBufferLen - index);                      btBufferLen -= index;                  }              }              else              {                  while (btBuffer != null && ((index = btBuffer.IndexOf(0x0D)) != -1 || (index = btBuffer.IndexOf(0x0A)) != -1))                  {                      if (index != 0)                      {                          try                          {                              OnBTCommandReceived(Link.Control' btBuffer.SkipAndTake(0' index));                          }                          catch (Exception ex)                          {                              Logger.Error(ex' "while parsing WT32 message in command mode");                          }                      }                      var skip = btBuffer[index] == 0x0A ? 1 : 2;                      if (index + skip >= btBuffer.Length)                      {                          btBuffer = null;                      }                      else                      {                          btBuffer = btBuffer.Skip(index + skip);                      }                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  while ((index = btBuffer.IndexOf(0xBF' index + 1' btBufferLen)) != -1)                  {                      bLen = btBufferLen - index;                      if (bLen < 5)                      {                          break;                      }                      var link = btBuffer[index + 1];                      if (link != (byte)Link.Control && link > (byte)Link.Seven)                      {                          continue;                      }                      var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3]; // 10-byte length                      var packLen = dataLen + 5;                      if (bLen < packLen)                      {                          break;                      }                      if (btBuffer[index + packLen - 1] != (link ^ 0xFF))                      {                          continue;                      }                      OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));                      if (bLen != packLen)                      {                          Array.Copy(btBuffer' index + packLen' btBuffer' 0' bLen - packLen);                      }                      btBufferLen = bLen - packLen;                      index = -1;                  }                  if (index > 0)                  {                      #if DEBUG                      Logger.Warning("Skipping BT data: " + ASCIIEncoding.GetString(btBuffer' 0' btBufferLen - index));                      #endif                      Array.Copy(btBuffer' index' btBuffer' 0' btBufferLen - index);                      btBufferLen -= index;                  }              }              else              {                  while (btBuffer != null && ((index = btBuffer.IndexOf(0x0D)) != -1 || (index = btBuffer.IndexOf(0x0A)) != -1))                  {                      if (index != 0)                      {                          try                          {                              OnBTCommandReceived(Link.Control' btBuffer.SkipAndTake(0' index));                          }                          catch (Exception ex)                          {                              Logger.Error(ex' "while parsing WT32 message in command mode");                          }                      }                      var skip = btBuffer[index] == 0x0A ? 1 : 2;                      if (index + skip >= btBuffer.Length)                      {                          btBuffer = null;                      }                      else                      {                          btBuffer = btBuffer.Skip(index + skip);                      }                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  while ((index = btBuffer.IndexOf(0xBF' index + 1' btBufferLen)) != -1)                  {                      bLen = btBufferLen - index;                      if (bLen < 5)                      {                          break;                      }                      var link = btBuffer[index + 1];                      if (link != (byte)Link.Control && link > (byte)Link.Seven)                      {                          continue;                      }                      var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3]; // 10-byte length                      var packLen = dataLen + 5;                      if (bLen < packLen)                      {                          break;                      }                      if (btBuffer[index + packLen - 1] != (link ^ 0xFF))                      {                          continue;                      }                      OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));                      if (bLen != packLen)                      {                          Array.Copy(btBuffer' index + packLen' btBuffer' 0' bLen - packLen);                      }                      btBufferLen = bLen - packLen;                      index = -1;                  }                  if (index > 0)                  {                      #if DEBUG                      Logger.Warning("Skipping BT data: " + ASCIIEncoding.GetString(btBuffer' 0' btBufferLen - index));                      #endif                      Array.Copy(btBuffer' index' btBuffer' 0' btBufferLen - index);                      btBufferLen -= index;                  }              }              else              {                  while (btBuffer != null && ((index = btBuffer.IndexOf(0x0D)) != -1 || (index = btBuffer.IndexOf(0x0A)) != -1))                  {                      if (index != 0)                      {                          try                          {                              OnBTCommandReceived(Link.Control' btBuffer.SkipAndTake(0' index));                          }                          catch (Exception ex)                          {                              Logger.Error(ex' "while parsing WT32 message in command mode");                          }                      }                      var skip = btBuffer[index] == 0x0A ? 1 : 2;                      if (index + skip >= btBuffer.Length)                      {                          btBuffer = null;                      }                      else                      {                          btBuffer = btBuffer.Skip(index + skip);                      }                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  while ((index = btBuffer.IndexOf(0xBF' index + 1' btBufferLen)) != -1)                  {                      bLen = btBufferLen - index;                      if (bLen < 5)                      {                          break;                      }                      var link = btBuffer[index + 1];                      if (link != (byte)Link.Control && link > (byte)Link.Seven)                      {                          continue;                      }                      var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3]; // 10-byte length                      var packLen = dataLen + 5;                      if (bLen < packLen)                      {                          break;                      }                      if (btBuffer[index + packLen - 1] != (link ^ 0xFF))                      {                          continue;                      }                      OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));                      if (bLen != packLen)                      {                          Array.Copy(btBuffer' index + packLen' btBuffer' 0' bLen - packLen);                      }                      btBufferLen = bLen - packLen;                      index = -1;                  }                  if (index > 0)                  {                      #if DEBUG                      Logger.Warning("Skipping BT data: " + ASCIIEncoding.GetString(btBuffer' 0' btBufferLen - index));                      #endif                      Array.Copy(btBuffer' index' btBuffer' 0' btBufferLen - index);                      btBufferLen -= index;                  }              }              else              {                  while (btBuffer != null && ((index = btBuffer.IndexOf(0x0D)) != -1 || (index = btBuffer.IndexOf(0x0A)) != -1))                  {                      if (index != 0)                      {                          try                          {                              OnBTCommandReceived(Link.Control' btBuffer.SkipAndTake(0' index));                          }                          catch (Exception ex)                          {                              Logger.Error(ex' "while parsing WT32 message in command mode");                          }                      }                      var skip = btBuffer[index] == 0x0A ? 1 : 2;                      if (index + skip >= btBuffer.Length)                      {                          btBuffer = null;                      }                      else                      {                          btBuffer = btBuffer.Skip(index + skip);                      }                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  while ((index = btBuffer.IndexOf(0xBF' index + 1' btBufferLen)) != -1)                  {                      bLen = btBufferLen - index;                      if (bLen < 5)                      {                          break;                      }                      var link = btBuffer[index + 1];                      if (link != (byte)Link.Control && link > (byte)Link.Seven)                      {                          continue;                      }                      var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3]; // 10-byte length                      var packLen = dataLen + 5;                      if (bLen < packLen)                      {                          break;                      }                      if (btBuffer[index + packLen - 1] != (link ^ 0xFF))                      {                          continue;                      }                      OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));                      if (bLen != packLen)                      {                          Array.Copy(btBuffer' index + packLen' btBuffer' 0' bLen - packLen);                      }                      btBufferLen = bLen - packLen;                      index = -1;                  }                  if (index > 0)                  {                      #if DEBUG                      Logger.Warning("Skipping BT data: " + ASCIIEncoding.GetString(btBuffer' 0' btBufferLen - index));                      #endif                      Array.Copy(btBuffer' index' btBuffer' 0' btBufferLen - index);                      btBufferLen -= index;                  }              }              else              {                  while (btBuffer != null && ((index = btBuffer.IndexOf(0x0D)) != -1 || (index = btBuffer.IndexOf(0x0A)) != -1))                  {                      if (index != 0)                      {                          try                          {                              OnBTCommandReceived(Link.Control' btBuffer.SkipAndTake(0' index));                          }                          catch (Exception ex)                          {                              Logger.Error(ex' "while parsing WT32 message in command mode");                          }                      }                      var skip = btBuffer[index] == 0x0A ? 1 : 2;                      if (index + skip >= btBuffer.Length)                      {                          btBuffer = null;                      }                      else                      {                          btBuffer = btBuffer.Skip(index + skip);                      }                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: if (mux)              {                  while ((index = btBuffer.IndexOf(0xBF' index + 1' btBufferLen)) != -1)                  {                      bLen = btBufferLen - index;                      if (bLen < 5)                      {                          break;                      }                      var link = btBuffer[index + 1];                      if (link != (byte)Link.Control && link > (byte)Link.Seven)                      {                          continue;                      }                      var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3]; // 10-byte length                      var packLen = dataLen + 5;                      if (bLen < packLen)                      {                          break;                      }                      if (btBuffer[index + packLen - 1] != (link ^ 0xFF))                      {                          continue;                      }                      OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));                      if (bLen != packLen)                      {                          Array.Copy(btBuffer' index + packLen' btBuffer' 0' bLen - packLen);                      }                      btBufferLen = bLen - packLen;                      index = -1;                  }                  if (index > 0)                  {                      #if DEBUG                      Logger.Warning("Skipping BT data: " + ASCIIEncoding.GetString(btBuffer' 0' btBufferLen - index));                      #endif                      Array.Copy(btBuffer' index' btBuffer' 0' btBufferLen - index);                      btBufferLen -= index;                  }              }              else              {                  while (btBuffer != null && ((index = btBuffer.IndexOf(0x0D)) != -1 || (index = btBuffer.IndexOf(0x0A)) != -1))                  {                      if (index != 0)                      {                          try                          {                              OnBTCommandReceived(Link.Control' btBuffer.SkipAndTake(0' index));                          }                          catch (Exception ex)                          {                              Logger.Error(ex' "while parsing WT32 message in command mode");                          }                      }                      var skip = btBuffer[index] == 0x0A ? 1 : 2;                      if (index + skip >= btBuffer.Length)                      {                          btBuffer = null;                      }                      else                      {                          btBuffer = btBuffer.Skip(index + skip);                      }                  }              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The following statement contains a magic number: foreach (var s in p)              {                  var isLast = i == p.Length - 1;                  var isTag = nowPlayingTags.Contains(s) && (value == null || value.Length > 0 && value[value.Length - 1] == '"');                  if (tag != null && !isTag)                  {                      value = (value == null) ? s : value + " " + s;                  }                  if (isLast || isTag)                  {                      if (tag != null && value.Length > 2)                      {                          value = value.Substring(1' value.Length - 2);                          switch (tag)                          {                              case "TITLE":                                  n.Title = value;                                  break;                              case "ARTIST":                                  n.Artist = value;                                  break;                              case "ALBUM":                                  n.Album = value;                                  break;                              case "GENRE":                                  n.Genre = value;                                  break;                              case "TRACK_NUMBER":                                  try { n.TrackNumber = int.Parse(value); }                                  catch { }                                  break;                              case "TOTAL_TRACK_NUMBER":                                  try { n.TotalTracks = int.Parse(value); }                                  catch { }                                  break;                              case "PLAYING_TIME":                                  try { n.TrackLength = int.Parse(value); }                                  catch { }                                  break;                          }                      }                      if (isTag)                      {                          tag = s;                          value = null;                      }                  }                  i++;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The following statement contains a magic number: foreach (var s in p)              {                  var isLast = i == p.Length - 1;                  var isTag = nowPlayingTags.Contains(s) && (value == null || value.Length > 0 && value[value.Length - 1] == '"');                  if (tag != null && !isTag)                  {                      value = (value == null) ? s : value + " " + s;                  }                  if (isLast || isTag)                  {                      if (tag != null && value.Length > 2)                      {                          value = value.Substring(1' value.Length - 2);                          switch (tag)                          {                              case "TITLE":                                  n.Title = value;                                  break;                              case "ARTIST":                                  n.Artist = value;                                  break;                              case "ALBUM":                                  n.Album = value;                                  break;                              case "GENRE":                                  n.Genre = value;                                  break;                              case "TRACK_NUMBER":                                  try { n.TrackNumber = int.Parse(value); }                                  catch { }                                  break;                              case "TOTAL_TRACK_NUMBER":                                  try { n.TotalTracks = int.Parse(value); }                                  catch { }                                  break;                              case "PLAYING_TIME":                                  try { n.TrackLength = int.Parse(value); }                                  catch { }                                  break;                          }                      }                      if (isTag)                      {                          tag = s;                          value = null;                      }                  }                  i++;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,PressIPodButton,The following statement contains a magic number: Thread.Sleep(longPause ? 300 : 25);
Magic Number,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,PressIPodButton,The following statement contains a magic number: Thread.Sleep(longPause ? 300 : 25);
Magic Number,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.iBus.Devices.Emulators,BordmonitorAUX,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\BordmonitorAUX.cs,ProcessToRadioMessage,The following statement contains a magic number: if (m.Data.Length == 2 && m.Data[0] == 0x48)              {                  switch (m.Data[1])                  {                      case 0x00:                          m.ReceiverDescription = "BM Button > Next Track";                          Next();                          break;                      case 0x10:                          m.ReceiverDescription = "BM Button < Prev Track";                          Prev();                          break;                  }              }
Magic Number,imBMW.iBus.Devices.Emulators,CDChanger,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\CDChanger.cs,announce,The following statement contains a magic number: while (true)              {                  Manager.EnqueueMessage(MessageAnnounce' MessagePollResponse);                  Thread.Sleep(30000);              }
Missing Default,imBMW.Features,Comfort,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following switch statement is missing a default case: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Missing Default,imBMW.Features,InternalCommunications,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\InternalCommunications.cs,ProcessInternalMessage,The following switch statement is missing a default case: switch (m.DataString)              {                  case "GET_BM_SCREEN":                      // TODO send last BM screen                      if (BordmonitorMenu.Instance.IsEnabled)                      {                          BordmonitorMenu.Instance.UpdateScreen(MenuScreenUpdateReason.Refresh);                      }                      break;              }
Missing Default,imBMW,FeaturesEnumConverter,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\FeaturesEnumConverter.cs,ToStringValue,The following switch statement is missing a default case: switch (e)              {                  case iPodViaHeadset.iPodCommand.Next: return "Next";                  case iPodViaHeadset.iPodCommand.Prev: return "Prev";                  case iPodViaHeadset.iPodCommand.Play: return "Play";                  case iPodViaHeadset.iPodCommand.Pause: return "Pause";                  case iPodViaHeadset.iPodCommand.PlayPauseToggle: return "PlayPauseToggle";                  case iPodViaHeadset.iPodCommand.VoiceOverCurrent: return "VoiceOverCurrent";                  case iPodViaHeadset.iPodCommand.VoiceOverMenu: return "VoiceOverMenu";                  case iPodViaHeadset.iPodCommand.VolumeUp: return "VolumeUp";                  case iPodViaHeadset.iPodCommand.VolumeDown: return "VolumeDown";              }
Missing Default,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ShowPlayerStatus,The following switch statement is missing a default case: switch (playerEvent)              {                  case PlayerEvent.Next:                      status = Localization.Current.Next;                      showAfterWithDelay = true;                      break;                  case PlayerEvent.Prev:                      status = Localization.Current.Previous;                      showAfterWithDelay = true;                      break;                  case PlayerEvent.Playing:                      status = TextWithIcon(">"' status);                      break;                  case PlayerEvent.Current:                      status = TextWithIcon("\x07"' status);                      break;                  case PlayerEvent.Voice:                      status = TextWithIcon("*"' status);                      break;                  case PlayerEvent.Settings:                      status = TextWithIcon("*"' status);                      showAfterWithDelay = true;                      break;              }
Missing Default,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,The following switch statement is missing a default case: switch (m.Data[1])                  {                      case 0x01:                          m.ReceiverDescription = "Screen SW by nav";                          break;                      case 0x02:                          m.ReceiverDescription = "Screen SW by rad";                          skipClearScreen = true; // to prevent on "clear screen" update on switch to BC/nav                          break;                  }
Missing Default,imBMW.Features.Menu,BordmonitorMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following switch statement is missing a default case: switch (m.Data[1])                  {                      case 0x14: // <>                          m.ReceiverDescription = "BM button <> - navigate home";                          NavigateHome();                          break;                      case 0x07:                          m.ReceiverDescription = "BM button Clock - navigate BC";                          NavigateAfterHome(BordcomputerScreen.Instance);                          break;                      case 0x20:                          m.ReceiverDescription = "BM button Sel"; // - navigate player";                          // TODO fix in cdc mode                          //NavigateAfterHome(HomeScreen.Instance.PlayerScreen);                          break;                      case 0x30:                          m.ReceiverDescription = "BM button Switch Screen";                          /*if (screenSwitched)                          {                              UpdateScreen();                          }*/                          break;                      case 0x23:                          m.ReceiverDescription = "BM button Mode";                          IsEnabled = false;                          Bordmonitor.EnableRadioMenu(); // TODO test [and remove]                          break;                      case 0x04:                          m.ReceiverDescription = "BM button Tone";                          // TODO fix Tone - skip clear till aux title                          IsEnabled = false;                          //Bordmonitor.EnableRadioMenu(); // TODO test [and remove]                          break;                  }
Missing Default,imBMW.Features.Menu,MenuBase,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuBase.cs,ProcessRadioMessage,The following switch statement is missing a default case: switch (m.Data[2])                  {                      case 0x00:                          mediaEmulator.Player.Next();                          m.ReceiverDescription = "Next track";                          break;                      case 0x01:                          mediaEmulator.Player.Prev();                          m.ReceiverDescription = "Prev track";                          break;                  }
Missing Default,imBMW.Features.Menu,MenuBase,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuBase.cs,currentScreen_ItemClicked,The following switch statement is missing a default case: switch (item.Action)              {                  case MenuItemAction.GoToScreen:                      Navigate(item.GoToScreen);                      break;                  case MenuItemAction.GoBackScreen:                      NavigateBack();                      break;                  case MenuItemAction.GoHomeScreen:                      NavigateHome();                      break;              }
Missing Default,imBMW.Features.Menu,MenuItem,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuItem.cs,OnClicked,The following switch statement is missing a default case: switch (Type)              {                  case MenuItemType.Checkbox:                      IsChecked = !IsChecked;                      break;              }
Missing Default,imBMW.Features.Menu,MenuItem,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuItem.cs,OnClicked,The following switch statement is missing a default case: switch (Action)              {                  case MenuItemAction.Refresh:                      Refresh();                      break;              }
Missing Default,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ShowPlayerStatus,The following switch statement is missing a default case: switch (playerEvent)              {                  case PlayerEvent.Next:                      status = TextWithIcon(CharIcons.Next' status);                      showAfterWithDelay = true;                      break;                  case PlayerEvent.Prev:                      status = TextWithIcon(CharIcons.Prev' status);                      showAfterWithDelay = true;                      break;                  case PlayerEvent.Playing:                      status = TextWithIcon(CharIcons.Play' status);                      break;                  case PlayerEvent.Current:                      status = TextWithIcon(CharIcons.SelectedArrow' status);                      break;                  case PlayerEvent.Voice:                      status = TextWithIcon(CharIcons.Voice' status);                      break;                  case PlayerEvent.Settings:                      status = TextWithIcon(CharIcons.Voice' status);                      showAfterWithDelay = true;                      break;              }
Missing Default,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)              {                  case MFLButton.ModeRadio:                      MflModeTelephone = false;                      return;                  case MFLButton.ModeTelephone:                      MflModeTelephone = true;                      return;              }
Missing Default,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)                  {                      case MFLButton.Next:                          ScrollNext();                          break;                      case MFLButton.Prev:                          ScrollPrev();                          break;                      case MFLButton.Dial:                          PressedSelect();                          break;                      case MFLButton.DialLong:                          PressedBack();                          break;                  }
Missing Default,imBMW.Features.Menu,RadioMenu,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The following switch statement is missing a default case: switch (cdNumber)                  {                      case 0x02:                          PressedSelect();                          break;                      case 0x03:                          ScrollPrev();                          break;                      case 0x04:                          ScrollNext();                          break;                      case 0x05:                          PressedBack();                          break;                      case 0x06:                          PressedHome();                          break;                  }
Missing Default,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,OnPlayerHostStateChanged,The following switch statement is missing a default case: switch (playerHostState)              {                  case PlayerHostState.On:                      if (!connected)                      {                          Reconnect();                      }                      break;                  case PlayerHostState.StandBy:                      //SendCommand("MJ"); // disconn av                      break;                  case PlayerHostState.Off:                      //SendCommand("VX");   // power off ool                      //SendCommand("MH"); // disable auto conn                      //SendCommand("CD"); // disconn hfp                      break;              }
Missing Default,imBMW.Multimedia,BluetoothOVC3860,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,ProcessBTOK,The following switch statement is missing a default case: switch (lastCommand)              {                  case "CC":                      SendCommand("CY"); // query hfp status                      break;                  case "MJ":                      SendCommand("CD"); // disconn hfp                      break;                  case "MI":                      if (IsEnabled && playAfterConnectTimer == null)                      {                          playAfterConnectTimer = new Timer(delegate                          {                              Play();                              playAfterConnectTimer = null;                          }' null' PlayAfterConnectMilliseconds' 0);                      }                      break;              }
Missing Default,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following switch statement is missing a default case: switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following switch statement is missing a default case: switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following switch statement is missing a default case: switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The following switch statement is missing a default case: switch (tag)                          {                              case "TITLE":                                  n.Title = value;                                  break;                              case "ARTIST":                                  n.Artist = value;                                  break;                              case "ALBUM":                                  n.Album = value;                                  break;                              case "GENRE":                                  n.Genre = value;                                  break;                              case "TRACK_NUMBER":                                  try { n.TrackNumber = int.Parse(value); }                                  catch { }                                  break;                              case "TOTAL_TRACK_NUMBER":                                  try { n.TotalTracks = int.Parse(value); }                                  catch { }                                  break;                              case "PLAYING_TIME":                                  try { n.TrackLength = int.Parse(value); }                                  catch { }                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,OnPlayerHostStateChanged,The following switch statement is missing a default case: switch (playerHostState)              {                  case PlayerHostState.On:                      Connect();                      break;                  case PlayerHostState.StandBy:                      // disconn av                      break;                  case PlayerHostState.Off:                      Disconnect();                      break;              }
Missing Default,imBMW.Multimedia,iPodViaHeadset,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following switch statement is missing a default case: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Missing Default,imBMW.iBus.Devices.Emulators,BordmonitorAUX,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\BordmonitorAUX.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)                  {                      case MFLButton.Next:                          Next();                          break;                      case MFLButton.Prev:                          Prev();                          break;                  }
Missing Default,imBMW.iBus.Devices.Emulators,BordmonitorAUX,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\BordmonitorAUX.cs,ProcessToRadioMessage,The following switch statement is missing a default case: switch (m.Data[1])                  {                      case 0x00:                          m.ReceiverDescription = "BM Button > Next Track";                          Next();                          break;                      case 0x10:                          m.ReceiverDescription = "BM Button < Prev Track";                          Prev();                          break;                  }
Missing Default,imBMW.iBus.Devices.Emulators,MediaEmulator,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\MediaEmulator.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)              {                  case MFLButton.ModeRadio:                      mflModeTelephone = false;                      return;                  case MFLButton.ModeTelephone:                      mflModeTelephone = true;                      return;              }
Missing Default,imBMW.iBus.Devices.Emulators,MediaEmulator,C:\repos\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\MediaEmulator.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)                  {                      case MFLButton.Dial:                          VoiceButtonPress();                          break;                      case MFLButton.DialLong:                          VoiceButtonLongPress();                          break;                  }
