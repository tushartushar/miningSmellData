Implementation smell,Namespace,Class,File,Method,Description
Long Method,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The method has 236 lines of code.
Long Method,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The method has 116 lines of code.
Long Method,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,ProcessBTNotification,The method has 106 lines of code.
Long Method,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The method has 109 lines of code.
Long Method,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The method has 148 lines of code.
Complex Method,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,Cyclomatic complexity of the method is 10
Complex Method,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,Cyclomatic complexity of the method is 11
Complex Method,imBMW,FeaturesEnumConverter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\FeaturesEnumConverter.cs,ToStringValue,Cyclomatic complexity of the method is 9
Complex Method,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,Cyclomatic complexity of the method is 13
Complex Method,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ShowPlayerStatus,Cyclomatic complexity of the method is 8
Complex Method,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,Cyclomatic complexity of the method is 12
Complex Method,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,Cyclomatic complexity of the method is 10
Complex Method,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,Cyclomatic complexity of the method is 8
Complex Method,imBMW.Features.Menu,OneRowMenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\OneRowMenuBase.cs,DrawScreen,Cyclomatic complexity of the method is 8
Complex Method,imBMW.Features.Menu,OneRowMenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\OneRowMenuBase.cs,GetItemString,Cyclomatic complexity of the method is 9
Complex Method,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessMIDToRadioMessage,Cyclomatic complexity of the method is 8
Complex Method,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,Cyclomatic complexity of the method is 24
Complex Method,imBMW.Multimedia,AudioPlayerBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\AudioPlayerBase.cs,GetStatusString,Cyclomatic complexity of the method is 8
Complex Method,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,GetContacts,Cyclomatic complexity of the method is 14
Complex Method,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,ProcessBTNotification,Cyclomatic complexity of the method is 22
Complex Method,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,Cyclomatic complexity of the method is 18
Complex Method,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,Cyclomatic complexity of the method is 30
Complex Method,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,Cyclomatic complexity of the method is 12
Complex Method,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,UpdateNowPlayingScreen,Cyclomatic complexity of the method is 10
Complex Method,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,Cyclomatic complexity of the method is 11
Complex Method,imBMW.iBus.Devices.Emulators,CDChanger,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\CDChanger.cs,ProcessCDCMessage,Cyclomatic complexity of the method is 11
Long Parameter List,imBMW.Features.CanBus.Adapters,CanMCP2515AdapterSettings,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanAdapterSettings.cs,CanMCP2515AdapterSettings,The method has 5 parameters. Parameters: spi' chipSelect' interrupt' speed' frequency
Long Statement,imBMW.Features.CanBus.Devices,E65SeatsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,SetItems,The length of the statement  "            driverMassage = new MenuItem(i => "Driver Massage"' i => E65Seats.ButtonMassageDriver()' MenuItemType.Checkbox' MenuItemAction.PassiveCheckbox) " is 143.
Long Statement,imBMW.Features.CanBus.Devices,E65SeatsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,SetItems,The length of the statement  "            passengerMassage = new MenuItem(i => "Pass Massage"' i => E65Seats.ButtonMassagePassenger()' MenuItemType.Checkbox' MenuItemAction.PassiveCheckbox) " is 147.
Long Statement,imBMW.Features.CanBus.Devices,E65SeatsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => "Driver Move"' MenuItemType.Button' MenuItemAction.GoToScreen) { GoToScreen = driverMoveScreen }); " is 124.
Long Statement,imBMW.Features.CanBus.Devices,E65SeatsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => "Passenger Move"' MenuItemType.Button' MenuItemAction.GoToScreen) { GoToScreen = passengerMoveScreen' RadioAbbreviation = "Pass. Move" }); " is 164.
Long Statement,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The length of the statement  "                ISerialPort cdc = new SerialPortCDC(USBClientController.StandardDevices.StartCDC_WithDebugging()' 0' iBus.Message.PacketLengthMax); " is 131.
Long Statement,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The length of the statement  "                //CanAdapter.Current = new CanMCP2515Adapter(Pin.SPI' Pin.SPI_ChipSelect' canInterrupt' speed' CanMCP2515AdapterSettings.AdapterFrequency.Mhz8); " is 144.
Long Statement,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The length of the statement  "                    //HardwareButton.Toggle(Pin.Di2' pressed => { if (pressed) E65Seats.EmulatorPaused = true; else E65Seats.EmulatorPaused = false; }); " is 132.
Long Statement,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The length of the statement  "                            messages[n - 1] = new Message(prevMess.SourceDevice' prevMess.DestinationDevice' prevMess.ReceiverDescription' prevMess.Data.Combine(0x06)); " is 140.
Long Statement,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The length of the statement  "                    messages[n++] = new Message(DeviceAddress.Radio' DeviceAddress.GraphicsNavigationDriver' "Fill screen items"' itemsBytes); " is 122.
Long Statement,imBMW.Features.Menu,MenuHelpers,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuHelpers.cs,AddBackButton,The length of the statement  "            screen.AddItem(new MenuItem(i => "Â« " + Localization.Current.Back' MenuItemType.Button' MenuItemAction.GoBackScreen)' index); " is 125.
Long Statement,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,DrawScreen,The length of the statement  "                        var midButtons = new Message[] { MessageMIDMenuButtons' EmulatorIsMIDAUX ? MessageMIDAUXLastButtons : MessageMIDCDCLastButtons }; " is 129.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Speed + ": " + InstrumentClusterElectronics.CurrentSpeed + Localization.Current.KMH) { RadioAbbreviation = "Spd:" }); " is 164.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Consumption + " 1: " + (InstrumentClusterElectronics.Consumption1 == 0 ? "-" : InstrumentClusterElectronics.Consumption1.ToString("F1"))' i => " is 189.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Consumption + " 2: " + (InstrumentClusterElectronics.Consumption2 == 0 ? "-" : InstrumentClusterElectronics.Consumption2.ToString("F1"))' i => " is 189.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Range + ": " + (InstrumentClusterElectronics.Range == 0 ? "-" : InstrumentClusterElectronics.Range + Localization.Current.KM))); " is 175.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Voltage + ": " + (BodyModule.BatteryVoltage > 0 ? BodyModule.BatteryVoltage.ToString("F1") : "-") + " " + Localization.Current.VoltageShort' i => UpdateVoltage()) { RadioAbbreviation = "Volt:" }); " is 243.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "                var coolant = InstrumentClusterElectronics.TemperatureCoolant == sbyte.MinValue ? "-" : InstrumentClusterElectronics.TemperatureCoolant.ToString(); " is 147.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "                var outside = InstrumentClusterElectronics.TemperatureOutside == sbyte.MinValue ? "-" : InstrumentClusterElectronics.TemperatureOutside.ToString(); " is 147.
Long Statement,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.Limit + ": " + (InstrumentClusterElectronics.SpeedLimit == 0 ? "-" : InstrumentClusterElectronics.SpeedLimit + Localization.Current.KMH)' MenuItemType.Button' MenuItemAction.GoToScreen) " is 232.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "                AddItem(new MenuItem(i => Localization.Current.Language + ": " + Localization.Current.LanguageName' i => SwitchLanguage()' MenuItemType.Button' MenuItemAction.Refresh)); " is 169.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.ComfortWindows' i => Comfort.AutoCloseWindows = i.IsChecked' MenuItemType.Checkbox) " is 130.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.ComfortSunroof' i => Comfort.AutoCloseSunroof = i.IsChecked' MenuItemType.Checkbox) " is 130.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.AutoLock' i => Comfort.AutoLockDoors = i.IsChecked' MenuItemType.Checkbox) " is 121.
Long Statement,imBMW.Features.Menu.Screens,SettingsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.AutoUnlock' i => Comfort.AutoUnlockDoors = i.IsChecked' MenuItemType.Checkbox) " is 125.
Long Statement,imBMW.Features.Menu.Screens,SpeedLimitScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,UpdateLimit,The length of the statement  "            Status = InstrumentClusterElectronics.SpeedLimit == 0 ? "" : InstrumentClusterElectronics.SpeedLimit + Localization.Current.KMH; " is 128.
Long Statement,imBMW.Features.Menu.Screens,SpeedLimitScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => Localization.Current.LimitCurrentSpeed' i => InstrumentClusterElectronics.SetSpeedLimitToCurrentSpeed())); " is 132.
Long Statement,imBMW.Features.Menu.Screens,SpeedLimitScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,SetItems,The length of the statement  "            AddItem(new MenuItem(i => InstrumentClusterElectronics.SpeedLimit == 0 ? Localization.Current.TurnOn : Localization.Current.TurnOff' i => " is 137.
Long Statement,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreatePhoneScreen,The length of the statement  "            screen.AddItem(new MenuItem(i => Localization.Current.Contacts' MenuItemType.Button' MenuItemAction.GoToScreen) { GoToScreen = CreateContactsScreen() }); " is 153.
Long Statement,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreateContactsScreen,The length of the statement  "            contactsScreen.AddItem(new MenuItem(i => "< " + Localization.Current.PrevItems' i => { offset -= contactsPerPage; SetContactsScreenItems(); })' 0); // TODO navigate " is 164.
Long Statement,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreateContactsScreen,The length of the statement  "            contactsScreen.AddItem(new MenuItem(i => Localization.Current.NextItems + " >"' i => { offset += contactsPerPage; SetContactsScreenItems(); })' 1); // TODO test' fix and make 1 " is 176.
Complex Conditional,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,The conditional expression  "m.Data.Length == 2 && m.Data[0] == 0x46 && (m.Data[1] == 0x01 || m.Data[1] == 0x02)"  is complex.
Complex Conditional,imBMW.Features.Menu,OneRowMenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\OneRowMenuBase.cs,GetShownItemString,The conditional expression  "useAbbr && !StringHelpers.IsNullOrEmpty(item.RadioAbbreviation)                  && (s.Length > maxLength                       || item.Type == MenuItemType.Checkbox && s.Length + 1 > maxLength)"  is complex.
Complex Conditional,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessMIDToRadioMessage,The conditional expression  "m.Data.Length == 4 && m.Data[0] == 0x31 && m.Data[1] == 0x00 && m.Data[2] == 0x00"  is complex.
Complex Conditional,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,ProcessRadioMessage,The conditional expression  "m.Data.Length > 3                          && !m.Data.Compare(DataDisplayAUX)                           && !m.Data.Compare(DataDisplayAUX2)                           && !m.Compare(MessageDisplayLast)"  is complex.
Complex Conditional,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,ProcessToRadioMessage,The conditional expression  "m.Data.Length == 4 && m.Data[0] == 0x31 && m.Data[1] == 0x00 && m.Data[2] == 0x00"  is complex.
Virtual Method Call from Constructor,imBMW.Features.CanBus.Devices,E65SeatsMoveScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,E65SeatsMoveScreen,The constructor "E65SeatsMoveScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.CanBus.Devices,E65SeatsSettingsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,E65SeatsSettingsScreen,The constructor "E65SeatsSettingsScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.CanBus.Devices,E65SeatsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,E65SeatsScreen,The constructor "E65SeatsScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,BordcomputerScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\BordcomputerScreen.cs,BordcomputerScreen,The constructor "BordcomputerScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,HomeScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\HomeScreen.cs,HomeScreen,The constructor "HomeScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,SettingsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SettingsScreen.cs,SettingsScreen,The constructor "SettingsScreen" calls a virtual method "SetItems".
Virtual Method Call from Constructor,imBMW.Features.Menu.Screens,SpeedLimitScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\Screens\SpeedLimitScreen.cs,SpeedLimitScreen,The constructor "SpeedLimitScreen" calls a virtual method "SetItems".
Empty Catch Block,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The method has an empty catch block.
Empty Catch Block,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The method has an empty catch block.
Empty Catch Block,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The method has an empty catch block.
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following statement contains a magic number: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Magic Number,imBMW.Features.CanBus,CanMessage,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\CanMessage.cs,PrepareData,The following statement contains a magic number: data.Length == 8
Magic Number,imBMW.Features.CanBus,CanMessage,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\CanMessage.cs,PrepareData,The following statement contains a magic number: data.Length > 8
Magic Number,imBMW.Features.CanBus,CanMessage,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\CanMessage.cs,PrepareData,The following statement contains a magic number: var newData = new byte[8];
Magic Number,imBMW.Features.CanBus.Devices,E65SeatsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,GetLevel,The following statement contains a magic number: switch (level)              {                  case 3:                      return "XXX";                  case 2:                      return "XX_";                  case 1:                      return "X__";                  default:                      return "___";              }
Magic Number,imBMW.Features.CanBus.Devices,E65SeatsScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,GetLevel,The following statement contains a magic number: switch (level)              {                  case 3:                      return "XXX";                  case 2:                      return "XX_";                  case 1:                      return "X__";                  default:                      return "___";              }
Magic Number,imBMW.Features.CanBus.Devices,E65SeatInfo,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ParseStatusMessage,The following statement contains a magic number: var heater = (byte)(message.Data[0] >> 4);
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,InstrumentClusterElectronics_EngineStarted,The following statement contains a magic number: AutoHeater                  && InstrumentClusterElectronics.TemperatureOutside < 10                  && InstrumentClusterElectronics.TemperatureCoolant < 80
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,InstrumentClusterElectronics_EngineStarted,The following statement contains a magic number: AutoHeater                  && InstrumentClusterElectronics.TemperatureOutside < 10                  && InstrumentClusterElectronics.TemperatureCoolant < 80
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,InstrumentClusterElectronics_EngineStarted,The following statement contains a magic number: AutoVentilation                  && InstrumentClusterElectronics.TemperatureOutside >= 20
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following statement contains a magic number: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: Thread.Sleep(80);
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: fromLastIBusMessage.GetTotalMinutes() >= 5
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: time % 10 == 0 && lastIBusMessageTime != DateTime.MinValue
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: var counter = messageEngineRunning.Data[4];
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: messageEngineRunning.Data[4] = counter;
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: dimmer != lastDimmer || time % 10 == 0
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: time % 100 == 0
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: time % 7 == 0
Magic Number,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,EmulatorWorker,The following statement contains a magic number: Thread.Sleep(80);
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following statement contains a magic number: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Magic Number,imBMW.Features,Light,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Light.cs,LightControlModule_LightStatusReceived,The following statement contains a magic number: data[4] = data[4].RemoveBits(0x30);
Magic Number,imBMW.Features,Light,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Light.cs,LightControlModule_LightStatusReceived,The following statement contains a magic number: data[4] = data[4].RemoveBits(0x30);
Magic Number,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The following statement contains a magic number: SettingsScreen.Instance.Status = version.Length > 11 ? version.Replace(" "' "") : version;
Magic Number,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The following statement contains a magic number: Manager.BeforeMessageSent += (e) =>              {                  LED.Write(Busy(true' 2));              };
Magic Number,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The following statement contains a magic number: Manager.AfterMessageSent += (e) =>              {                  LED.Write(Busy(false' 2));                    if (!log)                  {                      return;                  }                    Logger.Info(e.Message' " >");                  if (isSent1)                  {                      sent1 = e.Message;                  }                  else                  {                      sent2 = e.Message;                  }                  isSent1 = !isSent1;              };
Magic Number,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,Init,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,imBMW,Launcher,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Launcher.cs,RefreshLEDs,The following statement contains a magic number: b = b.AddBit(4);
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,The following statement contains a magic number: m.Data.Length == 2 && m.Data[0] == 0x46 && (m.Data[1] == 0x01 || m.Data[1] == 0x02)
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: var index = GetItemIndex(m.Data[3]' true);
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: m.Data.Length == 4 && m.Data.StartsWith(0x31' 0x60' 0x00) && m.Data[3] <= 9
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: m.Data.Length == 4 && m.Data.StartsWith(0x31' 0x60' 0x00) && m.Data[3] <= 9
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: m.Data.Length == 4 && m.Data.StartsWith(0x31' 0x60' 0x00) && m.Data[3] <= 9
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following statement contains a magic number: m.Data.Length == 2 && m.Data[0] == 0x48
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: var messages = new Message[FastMenuDrawing ? 4 : 13];
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: var messages = new Message[FastMenuDrawing ? 4 : 13];
Magic Number,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,DrawScreen,The following statement contains a magic number: i < 10
Magic Number,imBMW.Features.Menu,MenuScreen,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuScreen.cs,MenuScreen,The following statement contains a magic number: MaxItemsCount = 10;
Magic Number,imBMW.Features.Menu,OneRowMenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\OneRowMenuBase.cs,GetItemString,The following statement contains a magic number: separator <= 0 || separator == showText.Length - 2
Magic Number,imBMW.Features.Menu,OneRowMenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\OneRowMenuBase.cs,GetItemString,The following statement contains a magic number: return showText.Substring(0' separator + 1) + showText.Substring(separator + 2);
Magic Number,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessMIDToRadioMessage,The following statement contains a magic number: switch (m.Data[3])                  {                      case 0x00:                      case 0x01:                          PressedSelect();                          break;                      case 0x02:                          ScrollPrev();                          break;                      case 0x03:                          ScrollNext();                          break;                      case 0x04:                          PressedBack();                          break;                      case 0x05:                          PressedHome();                          break;                  }
Magic Number,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessMIDToRadioMessage,The following statement contains a magic number: m.Data.Length == 4 && m.Data[0] == 0x31 && m.Data[1] == 0x00 && m.Data[2] == 0x00
Magic Number,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessMIDToRadioMessage,The following statement contains a magic number: m.Data.Length == 4 && m.Data[0] == 0x31 && m.Data[1] == 0x00 && m.Data[2] == 0x00
Magic Number,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The following statement contains a magic number: byte cdNumber = m.Data[2];
Magic Number,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The following statement contains a magic number: m.Data.Length == 3 && m.Data[0] == 0x38 && m.Data[1] == 0x06
Magic Number,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,BluetoothOVC3860,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200)' Cpu.Pin.GPIO_NONE' 0' 16' 10);
Magic Number,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,BluetoothOVC3860,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200)' Cpu.Pin.GPIO_NONE' 0' 16' 10);
Magic Number,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,GetContacts,The following statement contains a magic number: switch (s)                          {                              case "BEGIN:VCARD":                                  Debug.GC(true); // Logger.Info("Free memory = " + Debug.GC(true)' "MEM");                                  hasPhone = false;                                  if (found >= offset)                                  {                                      contact = new PhoneContact();                                  }                                  break;                              case "END:VCARD":                                  if (hasPhone)                                  {                                      if (contact != null)                                      {                                          contacts.Add(contact);                                          if (contacts.Count == count)                                          {                                              return contacts;                                          }                                      }                                      found++;                                  }                                  break;                              default:                                  if (s.Substring(0' 2) == "FN")                                  {                                      if (contact != null)                                      {                                          contact.Name = s.Split(':')[1];                                      }                                  }                                  else if (s.Substring(0' 3) == "TEL")                                  {                                      if (contact != null)                                      {                                          contact.AddPhone(s.Split(':')[1]);                                      }                                      hasPhone = true;                                  }                                  break;                          }
Magic Number,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,GetContacts,The following statement contains a magic number: switch (s)                          {                              case "BEGIN:VCARD":                                  Debug.GC(true); // Logger.Info("Free memory = " + Debug.GC(true)' "MEM");                                  hasPhone = false;                                  if (found >= offset)                                  {                                      contact = new PhoneContact();                                  }                                  break;                              case "END:VCARD":                                  if (hasPhone)                                  {                                      if (contact != null)                                      {                                          contacts.Add(contact);                                          if (contacts.Count == count)                                          {                                              return contacts;                                          }                                      }                                      found++;                                  }                                  break;                              default:                                  if (s.Substring(0' 2) == "FN")                                  {                                      if (contact != null)                                      {                                          contact.Name = s.Split(':')[1];                                      }                                  }                                  else if (s.Substring(0' 3) == "TEL")                                  {                                      if (contact != null)                                      {                                          contact.AddPhone(s.Split(':')[1]);                                      }                                      hasPhone = true;                                  }                                  break;                          }
Magic Number,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,CreateContactsScreen,The following statement contains a magic number: contactsPerPage = MenuScreen.MaxItemsCount - 3;
Magic Number,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,SetContactsScreenItems,The following statement contains a magic number: var i = 2;
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,BluetoothWT32,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200' Parity.None' 8' StopBits.One' true)' Cpu.Pin.GPIO_NONE' 0' 60' 0);
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,BluetoothWT32,The following statement contains a magic number: this.port = new SerialInterruptPort(new SerialPortConfiguration(port' BaudRate.Baudrate115200' Parity.None' 8' StopBits.One' true)' Cpu.Pin.GPIO_NONE' 0' 60' 0);
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,SendCommand,The following statement contains a magic number: command.Length > 1023
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: btBufferMuxLen *= 2;
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: bLen < 5
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3];
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3];
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: var dataLen = ((btBuffer[index + 2] & 0x11) << 8) + btBuffer[index + 3];
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: var packLen = dataLen + 5;
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,port_DataReceived,The following statement contains a magic number: OnBTCommandReceived((Link)link' btBuffer.SkipAndTake(index + 4' dataLen));
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following statement contains a magic number: switch (s)              {                  case "READY.":                      switch (initStep)                      {                          case 0:                              // init                              //SendCommand("SET");                              SendCommand("SET PROFILE SPP imBMW");                              SendCommand("SET PROFILE A2DP SINK");                              SendCommand("SET PROFILE AVRCP CONTROLLER");                              SendCommand("SET PROFILE HFP ON");                              SendCommand("SET BT PAGEMODE 3 2000 1");                              SendCommand("SET BT CLASS 240408");                              SendCommand("SET BT SSP 3 0");                              SendCommand("SET BT AUTH * " + pin);                              SendCommand("SET BT NAME imBMW");                              SendCommand("SET CONTROL MICBIAS b a");                              SendCommand("SET CONTROL GAIN 8 8 DEFAULT");                              SendCommand("SET CONTROL PREAMP 1 0");                              SendCommand("RESET");                              break;                          default:                              // inited                              SendCommand("VOLUME 8");                              //SendCommand("SET CONTROL MICBIAS b 10");                              SendCommand("SET");                              //SendCommand("RFCOMM CREATE");                              //Connect();                              break;                      }                      initStep++;                      break;                  case "RING":                      if (plen == 5)                      {                          switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }                      }                      break;                  case "CONNECT":                      if (plen == 4)                      {                          switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }                      }                      break;                  case "AVRCP":                      if (plen > 5 && p[1] == "GET_ELEMENT_ATTRIBUTES_RSP")                      {                          ParseNowPlaying(p);                      }                      else if (plen > 3 && p[1] == "REGISTER_NOTIFICATION_RSP")                      {                          switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }                      }                      break;                  case "NO":                      if (plen > 2 && p[1] == "CARRIER")                      {                          if (p[2] == "0")                          {                              IsConnected = false;                          }                          if (p[2] == ((byte)SPPLink).ToString())                          {                              SPPLink = Link.Unset;                          }                      }                      break;                  case "VOLUME":                      if (plen > 1)                      {                          OnStatusChanged((int)(100 * int.Parse(p[1]) / 15) + "%"' PlayerEvent.Settings);                      }                      break;              }
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The following statement contains a magic number: value = value.Substring(1' value.Length - 2);
Magic Number,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The following statement contains a magic number: tag != null && value.Length > 2
Magic Number,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,PressIPodButton,The following statement contains a magic number: Thread.Sleep(longPause ? 300 : 25);
Magic Number,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,PressIPodButton,The following statement contains a magic number: Thread.Sleep(longPause ? 300 : 25);
Magic Number,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following statement contains a magic number: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Magic Number,imBMW.iBus.Devices.Emulators,BordmonitorAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\BordmonitorAUX.cs,ProcessToRadioMessage,The following statement contains a magic number: m.Data.Length == 2 && m.Data[0] == 0x48
Magic Number,imBMW.iBus.Devices.Emulators,CDChanger,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\CDChanger.cs,announce,The following statement contains a magic number: Thread.Sleep(30000);
Magic Number,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,IsDisplayMessage,The following statement contains a magic number: return data.Length >= 3 && data[0] == 0x23 && data[2] == 0x20                  && (data[1] == 0x00 || data[1] == 0x40 || data[1] == 0xC0);
Magic Number,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,IsDisplayMessage,The following statement contains a magic number: return data.Length >= 3 && data[0] == 0x23 && data[2] == 0x20                  && (data[1] == 0x00 || data[1] == 0x40 || data[1] == 0xC0);
Magic Number,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,ProcessRadioMessage,The following statement contains a magic number: IsRadioActive = m.Data.Length > 3;
Magic Number,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,ProcessToRadioMessage,The following statement contains a magic number: switch (m.Data[3])                  {                      case 0x0D:                          m.ReceiverDescription = "MID Button > Next Track";                          Next();                          break;                      case 0x0C:                          m.ReceiverDescription = "MID Button < Prev Track";                          Prev();                          break;                  }
Magic Number,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,ProcessToRadioMessage,The following statement contains a magic number: m.Data.Length == 4 && m.Data[0] == 0x31 && m.Data[1] == 0x00 && m.Data[2] == 0x00
Magic Number,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,ProcessToRadioMessage,The following statement contains a magic number: m.Data.Length == 4 && m.Data[0] == 0x31 && m.Data[1] == 0x00 && m.Data[2] == 0x00
Missing Default,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following switch statement is missing a default case: switch (ControllerAreaNetwork.SourceClock)              {                  case 42000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }                      break;                  case 72000000:                      switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }                      break;              }
Missing Default,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following switch statement is missing a default case: switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 21TQ' 66%SP                              return new ControllerAreaNetwork.Timings(0' 12' 8' 20' 1);                      }
Missing Default,imBMW.Features.CanBus.Adapters,CanNativeAdapter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Adapters\CanNativeAdapter.cs,GetTimings,The following switch statement is missing a default case: switch (settings.Speed)                      {                          case CanAdapterSettings.CanSpeed.Kbps100:                              // 24TQ' 65%SP                              return new ControllerAreaNetwork.Timings(0' 15' 8' 30' 1);                      }
Missing Default,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,Can_MessageReceived,The following switch statement is missing a default case: switch (message.ArbitrationId)              {                  case 0x232:                      DriverSeat.ParseStatusMessage(message);                      break;                  case 0x22A:                      PassengerSeat.ParseStatusMessage(message);                      break;              }
Missing Default,imBMW.Features.CanBus.Devices,E65Seats,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\CanBus\Devices\E65Seats.cs,ProcessQueue,The following switch statement is missing a default case: switch ((QueueCommand)item)              {                  case QueueCommand.ButtonHeaterDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonHeaterPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonHeaterPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimateDriver' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonVentilationPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonVentilationPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonClimatePassenger' dataButtonClimateRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassageDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassageDriver' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMassagePassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassagePress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMassagePassenger' dataButtonMassageRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMDriver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Driver:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryDriver' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonMPassenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMPress));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;                  case QueueCommand.ButtonM1Passenger:                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonM1Press));                      Thread.Sleep(100);                      CanAdapter.Current.SendMessage(new CanMessage(buttonMemoryPassenger' dataButtonMRelease));                      Thread.Sleep(100);                      break;              }
Missing Default,imBMW.Features,Comfort,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Comfort.cs,ProcessCommand,The following switch statement is missing a default case: switch (c)              {                  // TODO Fix windows closing: current commands close them just by half                  case Command.FullCloseWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageCloseWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;                  case Command.FullOpenWindows:                      for (int i = 0; i < 3; i++)                      {                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerFront);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowDriverRear);                          Thread.Sleep(750);                          Manager.EnqueueMessage(BodyModule.MessageOpenWindowPassengerRear);                          Thread.Sleep(750);                      }                      break;              }
Missing Default,imBMW.Features,InternalCommunications,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\InternalCommunications.cs,ProcessInternalMessage,The following switch statement is missing a default case: switch (m.DataString)              {                  case "GET_BM_SCREEN":                      // TODO send last BM screen                      if (BordmonitorMenu.Instance.IsEnabled)                      {                          BordmonitorMenu.Instance.UpdateScreen(MenuScreenUpdateReason.Refresh);                      }                      break;              }
Missing Default,imBMW,FeaturesEnumConverter,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\FeaturesEnumConverter.cs,ToStringValue,The following switch statement is missing a default case: switch (e)              {                  case iPodViaHeadset.iPodCommand.Next: return "Next";                  case iPodViaHeadset.iPodCommand.Prev: return "Prev";                  case iPodViaHeadset.iPodCommand.Play: return "Play";                  case iPodViaHeadset.iPodCommand.Pause: return "Pause";                  case iPodViaHeadset.iPodCommand.PlayPauseToggle: return "PlayPauseToggle";                  case iPodViaHeadset.iPodCommand.VoiceOverCurrent: return "VoiceOverCurrent";                  case iPodViaHeadset.iPodCommand.VoiceOverMenu: return "VoiceOverMenu";                  case iPodViaHeadset.iPodCommand.VolumeUp: return "VolumeUp";                  case iPodViaHeadset.iPodCommand.VolumeDown: return "VolumeDown";              }
Missing Default,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ShowPlayerStatus,The following switch statement is missing a default case: switch (args.Event)              {                  case PlayerEvent.Next:                      status = Localization.Current.Next;                      showAfterWithDelay = true;                      break;                  case PlayerEvent.Prev:                      status = Localization.Current.Previous;                      showAfterWithDelay = true;                      break;                  case PlayerEvent.Playing:                      status = status.TextWithIcon(">"' StatusTextMaxlen);                      break;                  case PlayerEvent.Current:                      status = status.TextWithIcon("\x07"' StatusTextMaxlen);                      break;                  case PlayerEvent.Voice:                      status = status.TextWithIcon("*"' StatusTextMaxlen);                      break;                  case PlayerEvent.Settings:                      status = status.TextWithIcon("*"' StatusTextMaxlen);                      showAfterWithDelay = true;                      break;              }
Missing Default,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessRadioMessage,The following switch statement is missing a default case: switch (m.Data[1])                  {                      case 0x01:                          m.ReceiverDescription = "Screen SW by nav";                          break;                      case 0x02:                          m.ReceiverDescription = "Screen SW by rad";                          skipClearScreen = true; // to prevent on "clear screen" update on switch to BC/nav                          break;                  }
Missing Default,imBMW.Features.Menu,BordmonitorMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\BordmonitorMenu.cs,ProcessToRadioMessage,The following switch statement is missing a default case: switch (m.Data[1])                  {                      case 0x14: // <>                          m.ReceiverDescription = "BM button <> - navigate home";                          NavigateHome();                          break;                      case 0x07:                          m.ReceiverDescription = "BM button Clock - navigate BC";                          NavigateAfterHome(BordcomputerScreen.Instance);                          break;                      case 0x20:                          m.ReceiverDescription = "BM button Sel"; // - navigate player";                          // TODO fix in cdc mode                          //NavigateAfterHome(HomeScreen.Instance.PlayerScreen);                          break;                      case 0x30:                          m.ReceiverDescription = "BM button Switch Screen";                          /*if (screenSwitched)                          {                              UpdateScreen();                          }*/                          break;                      case 0x23:                          m.ReceiverDescription = "BM button Mode";                          IsEnabled = false;                          Bordmonitor.EnableRadioMenu(); // TODO test [and remove]                          break;                      case 0x04:                          m.ReceiverDescription = "BM button Tone";                          // TODO fix Tone - skip clear till aux title                          IsEnabled = false;                          //Bordmonitor.EnableRadioMenu(); // TODO test [and remove]                          break;                  }
Missing Default,imBMW.Features.Menu,MenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuBase.cs,currentScreen_ItemClicked,The following switch statement is missing a default case: switch (item.Action)              {                  case MenuItemAction.GoToScreen:                      Navigate(item.GoToScreen);                      break;                  case MenuItemAction.GoBackScreen:                      NavigateBack();                      break;                  case MenuItemAction.GoHomeScreen:                      NavigateHome();                      break;              }
Missing Default,imBMW.Features.Menu,MenuItem,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuItem.cs,OnClicked,The following switch statement is missing a default case: switch (Type)              {                  case MenuItemType.Checkbox:                      if (Action != MenuItemAction.PassiveCheckbox)                      {                          IsChecked = !IsChecked;                      }                      break;              }
Missing Default,imBMW.Features.Menu,MenuItem,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\MenuItem.cs,OnClicked,The following switch statement is missing a default case: switch (Action)              {                  case MenuItemAction.Refresh:                      Refresh();                      break;              }
Missing Default,imBMW.Features.Menu,OneRowMenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\OneRowMenuBase.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)              {                  case MFLButton.ModeRadio:                      MflModeTelephone = false;                      return;                  case MFLButton.ModeTelephone:                      MflModeTelephone = true;                      return;              }
Missing Default,imBMW.Features.Menu,OneRowMenuBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\OneRowMenuBase.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)                  {                      case MFLButton.Next:                          ScrollNext();                          break;                      case MFLButton.Prev:                          ScrollPrev();                          break;                      case MFLButton.Dial:                          PressedSelect();                          break;                      case MFLButton.DialLong:                          PressedBack();                          break;                  }
Missing Default,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessMIDToRadioMessage,The following switch statement is missing a default case: switch (m.Data[3])                  {                      case 0x00:                      case 0x01:                          PressedSelect();                          break;                      case 0x02:                          ScrollPrev();                          break;                      case 0x03:                          ScrollNext();                          break;                      case 0x04:                          PressedBack();                          break;                      case 0x05:                          PressedHome();                          break;                  }
Missing Default,imBMW.Features.Menu,RadioMenu,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Menu\RadioMenu.cs,ProcessRadioMessage,The following switch statement is missing a default case: switch (cdNumber)                      {                          case 0x02:                              PressedSelect();                              break;                          case 0x03:                              ScrollPrev();                              break;                          case 0x04:                              ScrollNext();                              break;                          case 0x05:                              PressedBack();                              break;                          case 0x06:                              PressedHome();                              break;                      }
Missing Default,imBMW.Multimedia,AudioPlayerBase,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\AudioPlayerBase.cs,GetStatusString,The following switch statement is missing a default case: switch (playerEvent)              {                  case PlayerEvent.Next:                      status = status.TextWithIcon(CharIcons.Next' maxLength);                      break;                  case PlayerEvent.Prev:                      status = status.TextWithIcon(CharIcons.Prev' maxLength);                      break;                  case PlayerEvent.Playing:                      status = status.TextWithIcon(CharIcons.Play' maxLength);                      break;                  case PlayerEvent.Current:                      status = status.TextWithIcon(CharIcons.SelectedArrow' maxLength);                      break;                  case PlayerEvent.Voice:                  case PlayerEvent.Settings:                      status = status.TextWithIcon(CharIcons.Voice' maxLength);                      break;                  case PlayerEvent.IncomingCall:                      if (status.Length > maxLength)                      {                          status = status.Substring(status.Length - maxLength' maxLength);                      }                      break;              }
Missing Default,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,OnPlayerHostStateChanged,The following switch statement is missing a default case: switch (playerHostState)              {                  case PlayerHostState.On:                      if (!connected)                      {                          Reconnect();                      }                      break;                  case PlayerHostState.StandBy:                      //SendCommand("MJ"); // disconn av                      break;                  case PlayerHostState.Off:                      //SendCommand("VX");   // power off ool                      //SendCommand("MH"); // disable auto conn                      //SendCommand("CD"); // disconn hfp                      break;              }
Missing Default,imBMW.Multimedia,BluetoothOVC3860,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothOVC3860.cs,ProcessBTOK,The following switch statement is missing a default case: switch (lastCommand)              {                  case "CC":                      SendCommand("CY"); // query hfp status                      break;                  case "MJ":                      SendCommand("CD"); // disconn hfp                      break;                  case "MI":                      if (IsEnabled && playAfterConnectTimer == null)                      {                          playAfterConnectTimer = new Timer(delegate                          {                              Play();                              playAfterConnectTimer = null;                          }' null' PlayAfterConnectMilliseconds' 0);                      }                      break;              }
Missing Default,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following switch statement is missing a default case: switch (p[4])                          {                              case "A2DP":                                  OnA2DPConnected(p[2]' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(p[2]' p[1]);                                  break;                              case "RFCOMM":                                  if (p[3] == "1")                                  {                                      SPPLink = (Link)byte.Parse(p[1]);                                  }                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following switch statement is missing a default case: switch (p[2])                          {                              case "A2DP":                                  OnA2DPConnected(lastConnectedAddress' p[1]);                                  break;                              case "AVRCP":                                  OnAVRCPConnected(lastConnectedAddress' p[1]);                                  break;                              case "RFCOMM":                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ProcessBTNotification,The following switch statement is missing a default case: switch (p[3])                          {                              case "PLAYBACK_STATUS_CHANGED":                                  IsPlaying = p[4] == "PLAYING";                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 1"); // resubscribe                                  }                                  break;                              case "TRACK_CHANGED":                                  // [4] and [5] = 0 and 0 ?                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 20 0"); // get track info                                      SendCommand("AVRCP PDU 31 2"); // resubscribe                                  }                                  break;                              case "NOW_PLAYING_CHANGED":                                  if (p[2] == "CHANGED")                                  {                                      SendCommand("AVRCP PDU 31 9"); // resubscribe                                  }                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,ParseNowPlaying,The following switch statement is missing a default case: switch (tag)                          {                              case "TITLE":                                  n.Title = value;                                  break;                              case "ARTIST":                                  n.Artist = value;                                  break;                              case "ALBUM":                                  n.Album = value;                                  break;                              case "GENRE":                                  n.Genre = value;                                  break;                              case "TRACK_NUMBER":                                  try { n.TrackNumber = int.Parse(value); }                                  catch { }                                  break;                              case "TOTAL_TRACK_NUMBER":                                  try { n.TotalTracks = int.Parse(value); }                                  catch { }                                  break;                              case "PLAYING_TIME":                                  try { n.TrackLength = int.Parse(value); }                                  catch { }                                  break;                          }
Missing Default,imBMW.Multimedia,BluetoothWT32,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\BluetoothWT32.cs,OnPlayerHostStateChanged,The following switch statement is missing a default case: switch (playerHostState)              {                  case PlayerHostState.On:                      Connect();                      break;                  case PlayerHostState.StandBy:                      // disconn av                      break;                  case PlayerHostState.Off:                      Disconnect();                      break;              }
Missing Default,imBMW.Multimedia,iPodViaHeadset,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iPodViaHeadset.cs,ExecuteIPodCommand,The following switch statement is missing a default case: switch (command)              {                  case iPodCommand.PlayPauseToggle:                      IsPlaying = !IsPlaying;                      break;                    case iPodCommand.Play:                      IsPlaying = true;                      break;                    case iPodCommand.Pause:                      IsPlaying = false;                      break;                    case iPodCommand.Next:                      OnStatusChanged(PlayerEvent.Next);                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.Prev:                      OnStatusChanged(PlayerEvent.Prev);                      PressIPodButton();                      PressIPodButton();                      PressIPodButton(true);                      break;                    case iPodCommand.VoiceOverCurrent:                      if (IsInVoiceOverMenu)                      {                          if (IsPlaying)                          {                              PressIPodButton(true); // Select currently saying playlist                              IsInVoiceOverMenu = false;                              OnStatusChanged("VoiceOver"' PlayerEvent.Playing);                          }                          else                          {                              IsPlaying = true; // Playing starts on VO select when paused                          }                      }                      else                      {                          OnStatusChanged("VoiceOver"' PlayerEvent.Voice);                          PressIPodButton(false' 550); // Say current track                      }                      break;                    case iPodCommand.VoiceOverMenu:                      IsInVoiceOverMenu = true;                      break;                    case iPodCommand.VolumeUp:                      iPodVolumeUp.Write(true);                      Thread.Sleep(50);                      iPodVolumeUp.Write(false);                      Thread.Sleep(25);                      break;                    case iPodCommand.VolumeDown:                      iPodVolumeDown.Write(true);                      Thread.Sleep(50);                      iPodVolumeDown.Write(false);                      Thread.Sleep(25);                      break;              }
Missing Default,imBMW.iBus.Devices.Emulators,BordmonitorAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\BordmonitorAUX.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)                  {                      case MFLButton.Next:                          Next();                          break;                      case MFLButton.Prev:                          Prev();                          break;                  }
Missing Default,imBMW.iBus.Devices.Emulators,BordmonitorAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\BordmonitorAUX.cs,ProcessToRadioMessage,The following switch statement is missing a default case: switch (m.Data[1])                  {                      case 0x00:                          m.ReceiverDescription = "BM Button > Next Track";                          Next();                          break;                      case 0x10:                          m.ReceiverDescription = "BM Button < Prev Track";                          Prev();                          break;                  }
Missing Default,imBMW.iBus.Devices.Emulators,CDChanger,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\CDChanger.cs,ProcessCDCMessage,The following switch statement is missing a default case: switch (m.Data[2])                  {                      case 0x00:                          Player.Next();                          m.ReceiverDescription = "Next track";                          break;                      case 0x01:                          Player.Prev();                          m.ReceiverDescription = "Prev track";                          break;                  }
Missing Default,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)                  {                      case MFLButton.Next:                          Next();                          break;                      case MFLButton.Prev:                          Prev();                          break;                  }
Missing Default,imBMW.iBus.Devices.Emulators,MIDAUX,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\iBus\MIDAUX.cs,ProcessToRadioMessage,The following switch statement is missing a default case: switch (m.Data[3])                  {                      case 0x0D:                          m.ReceiverDescription = "MID Button > Next Track";                          Next();                          break;                      case 0x0C:                          m.ReceiverDescription = "MID Button < Prev Track";                          Prev();                          break;                  }
Missing Default,imBMW.iBus.Devices.Emulators,MediaEmulator,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\MediaEmulator.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)              {                  case MFLButton.ModeRadio:                      mflModeTelephone = false;                      return;                  case MFLButton.ModeTelephone:                      mflModeTelephone = true;                      return;              }
Missing Default,imBMW.iBus.Devices.Emulators,MediaEmulator,D:\research\architectureSmells\repos1\toxsedyshev_imBMW\Sources\NET-MF\imBMW.Features\Multimedia\MediaEmulator.cs,MultiFunctionSteeringWheel_ButtonPressed,The following switch statement is missing a default case: switch (button)                  {                      case MFLButton.Dial:                          VoiceButtonPress();                          break;                      case MFLButton.DialLong:                          VoiceButtonLongPress();                          break;                  }
