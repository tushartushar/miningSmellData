Implementation smell,Namespace,Class,File,Method,Description
Long Method,imBMW.App,App,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\App.xaml.cs,OnLaunched,The method has 66 lines of code.
Complex Method,imBMW.App,BordmonitorPage,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Windows\BordmonitorPage.xaml.cs,Bordmonitor_TextReceived,Cyclomatic complexity of the method is 12
Complex Method,imBMW.App,App,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\App.xaml.cs,OnLaunched,Cyclomatic complexity of the method is 8
Long Parameter List,imBMW.App.Converters,NotEmptyToVisibilityConverter,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Converters\NotEmptyToVisibilityConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,imBMW.App.Converters,NotEmptyToVisibilityConverter,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Converters\NotEmptyToVisibilityConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,imBMW.App.Data,SampleDataItem,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\DataModel\SampleDataSource.cs,SampleDataItem,The method has 6 parameters.
Long Parameter List,imBMW.App.Data,SampleDataGroup,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\DataModel\SampleDataSource.cs,SampleDataGroup,The method has 5 parameters.
Long Statement,imBMW.App,App,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\App.xaml.cs,Logger_Logged,The length of the statement  "		toastXml.GetElementsByTagName ("text") [1].AppendChild (toastXml.CreateTextNode (log.Exception != null ? log.Exception.Message : "")); " is 134.
Long Statement,imBMW.App.Data,SampleDataSource,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\DataModel\SampleDataSource.cs,GetItemAsync,The length of the statement  "	var matches = _sampleDataSource.Groups.SelectMany (group => group.Items).Where (item => item.UniqueId.Equals (uniqueId)); " is 121.
Long Statement,imBMW.App.Data,SampleDataSource,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\DataModel\SampleDataSource.cs,GetSampleDataAsync,The length of the statement  "		SampleDataGroup group = new SampleDataGroup (groupObject ["UniqueId"].GetString ()' groupObject ["Title"].GetString ()' groupObject ["Subtitle"].GetString ()' groupObject ["ImagePath"].GetString ()' groupObject ["Description"].GetString ()); " is 241.
Long Statement,imBMW.App.Data,SampleDataSource,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\DataModel\SampleDataSource.cs,GetSampleDataAsync,The length of the statement  "			group.Items.Add (new SampleDataItem (itemObject ["UniqueId"].GetString ()' itemObject ["Title"].GetString ()' itemObject ["Subtitle"].GetString ()' itemObject ["ImagePath"].GetString ()' itemObject ["Description"].GetString ()' itemObject ["Content"].GetString ())); " is 266.
Long Statement,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The length of the statement  "	// Дальнейшее изучение следует выполнять' только если нажата клавиша со стрелкой влево или вправо либо назначенная клавиша "Назад" или " is 134.
Long Statement,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The length of the statement  "	if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) { " is 240.
Long Statement,imBMW.App.Common,SuspensionManager,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "		StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync (sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 141.
Long Statement,imBMW.App.Common,SuspensionManager,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\SuspensionManager.cs,RestoreAsync,The length of the statement  "			if (weakFrameReference.TryGetTarget (out frame) && (string)frame.GetValue (FrameSessionBaseKeyProperty) == sessionBaseKey) { " is 124.
Long Statement,imBMW.App.Common,SuspensionManager,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "		throw new InvalidOperationException ("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 139.
Long Statement,imBMW.App.Common,SuspensionManager,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "	// Свойство зависимостей используется для связывания сеансового ключа с фреймом и сохранения списка фреймов' состоянием навигации которых " is 137.
Long Statement,imBMW.App.Common,ObservableDictionary,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\ObservableDictionary.cs,Remove,The length of the statement  "	if (this._dictionary.TryGetValue (item.Key' out currentValue) && Object.Equals (item.Value' currentValue) && this._dictionary.Remove (item.Key)) { " is 146.
Complex Conditional,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,imBMW.App,App,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\App.xaml.cs,OnLaunched,The method has an empty catch block.
Magic Number,imBMW.App,BordmonitorPage,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Windows\BordmonitorPage.xaml.cs,RefreshScreen,The following statement contains a magic number: for (byte i = 0; i < 10; i++) {  	var item = currentScreen.Items.Keys.Contains (i) ? currentScreen.Items [i] : null;  	if (item != null && string.IsNullOrWhiteSpace (item.Text)) {  		item = null;  	}  	DefaultViewModel ["Item" + i] = item;  }  
Magic Number,imBMW.App,BordmonitorPage,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Windows\BordmonitorPage.xaml.cs,HoldVolume,The following statement contains a magic number: if (!holding) {  	volStep = 1;  } else {  	while (volHolding) {  		if (increase) {  			MultiFunctionSteeringWheel.VolumeUp (volStep);  		} else {  			MultiFunctionSteeringWheel.VolumeDown (volStep);  		}  		volStep++;  		await Task.Delay (TimeSpan.FromMilliseconds (100));  	}  }  
Magic Number,imBMW.App,BordmonitorPage,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Windows\BordmonitorPage.xaml.cs,HoldVolume,The following statement contains a magic number: while (volHolding) {  	if (increase) {  		MultiFunctionSteeringWheel.VolumeUp (volStep);  	} else {  		MultiFunctionSteeringWheel.VolumeDown (volStep);  	}  	volStep++;  	await Task.Delay (TimeSpan.FromMilliseconds (100));  }  
Magic Number,imBMW.App,BordmonitorPage,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Windows\BordmonitorPage.xaml.cs,HoldVolume,The following statement contains a magic number: await Task.Delay (TimeSpan.FromMilliseconds (100));  
Magic Number,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// Переход назад при нажатии клавиши "Назад" или сочетания клавиш ALT+СТРЕЛКА ВЛЕВО  		e.Handled = true;  		this.GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// Переход вперед при нажатии клавиши "Вперед" или сочетания клавиш ALT+СТРЕЛКА ВПРАВО  		e.Handled = true;  		this.GoForwardCommand.Execute (null);  	}  }  
Magic Number,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// Переход назад при нажатии клавиши "Назад" или сочетания клавиш ALT+СТРЕЛКА ВЛЕВО  		e.Handled = true;  		this.GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// Переход вперед при нажатии клавиши "Вперед" или сочетания клавиш ALT+СТРЕЛКА ВПРАВО  		e.Handled = true;  		this.GoForwardCommand.Execute (null);  	}  }  
Magic Number,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// Переход назад при нажатии клавиши "Назад" или сочетания клавиш ALT+СТРЕЛКА ВЛЕВО  		e.Handled = true;  		this.GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// Переход вперед при нажатии клавиши "Вперед" или сочетания клавиш ALT+СТРЕЛКА ВПРАВО  		e.Handled = true;  		this.GoForwardCommand.Execute (null);  	}  }  
Magic Number,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// Переход назад при нажатии клавиши "Назад" или сочетания клавиш ALT+СТРЕЛКА ВЛЕВО  		e.Handled = true;  		this.GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// Переход вперед при нажатии клавиши "Вперед" или сочетания клавиш ALT+СТРЕЛКА ВПРАВО  		e.Handled = true;  		this.GoForwardCommand.Execute (null);  	}  }  
Magic Number,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// Переход назад при нажатии клавиши "Назад" или сочетания клавиш ALT+СТРЕЛКА ВЛЕВО  	e.Handled = true;  	this.GoBackCommand.Execute (null);  } else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// Переход вперед при нажатии клавиши "Вперед" или сочетания клавиш ALT+СТРЕЛКА ВПРАВО  	e.Handled = true;  	this.GoForwardCommand.Execute (null);  }  
Magic Number,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// Переход назад при нажатии клавиши "Назад" или сочетания клавиш ALT+СТРЕЛКА ВЛЕВО  	e.Handled = true;  	this.GoBackCommand.Execute (null);  } else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// Переход вперед при нажатии клавиши "Вперед" или сочетания клавиш ALT+СТРЕЛКА ВПРАВО  	e.Handled = true;  	this.GoForwardCommand.Execute (null);  }  
Magic Number,imBMW.App.Common,NavigationHelper,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// Переход вперед при нажатии клавиши "Вперед" или сочетания клавиш ALT+СТРЕЛКА ВПРАВО  	e.Handled = true;  	this.GoForwardCommand.Execute (null);  }  
Missing Default,imBMW.App,BordmonitorPage,D:\newReposJune17\toxsedyshev_imBMW\Sources\NET\imBMW.App\imBMW.App\imBMW.App.Windows\BordmonitorPage.xaml.cs,Bordmonitor_TextReceived,The following switch statement is missing a default case: switch (args.Field) {  case BordmonitorFields.Title:  	currentScreen.Title = args.Text;  	RefreshScreen ();  	break;  case BordmonitorFields.Status:  	currentScreen.Status = args.Text;  	break;  case BordmonitorFields.Item:  	var items = args.ParseItems ();  	foreach (var i in items) {  		currentScreen.Items [i.Index] = i;  	}  	break;  }  
