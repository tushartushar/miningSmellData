Implementation smell,Namespace,Class,File,Method,Description
Long Method,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,IsModified,The method has 107 lines of code.
Long Method,GitSharp.Core,ObjectWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectWriter.cs,WriteObject,The method has 129 lines of code.
Long Method,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,The method has 262 lines of code.
Long Method,GitSharp.Core,WorkDirCheckout,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WorkDirCheckout.cs,ProcessEntry,The method has 101 lines of code.
Long Method,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetMandrivaPlatform,The method has 101 lines of code.
Long Method,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The method has 523 lines of code.
Long Method,GitSharp.Core.Merge,MergeAlgorithm,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\MergeAlgorithm.cs,merge,The method has 148 lines of code.
Long Method,GitSharp.Core.RevWalk,RewriteTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RewriteTreeFilter.cs,include,The method has 127 lines of code.
Long Method,GitSharp.Core.Transport,FetchProcess,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\FetchProcess.cs,executeImp,The method has 105 lines of code.
Long Method,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,Negotiate,The method has 131 lines of code.
Long Method,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,ValidateCommands,The method has 115 lines of code.
Complex Method,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,ScanPacksImpl,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,IsModified,Cyclomatic complexity of the method is 15
Complex Method,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,Commit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Commit.cs,Commit,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core,Commit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Commit.cs,Decode,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core,GitIndex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\GitIndex.cs,writeTree,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,IndexTreeWalker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\IndexTreeWalker.cs,FinishVisitTree,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,IndexTreeWalker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\IndexTreeWalker.cs,VisitEntry,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,checkCommit,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,duplicateName,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,checkTree,Cyclomatic complexity of the method is 20
Complex Method,GitSharp.Core,ObjectWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectWriter.cs,WriteObject,Cyclomatic complexity of the method is 17
Complex Method,GitSharp.Core,OffsetCache<V;R>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\OffsetCache.cs,Evict,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,Cyclomatic complexity of the method is 12
Complex Method,GitSharp.Core,RefUpdate,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefUpdate.cs,link,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,RefUpdate,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefUpdate.cs,updateImpl,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Repository,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,Cyclomatic complexity of the method is 47
Complex Method,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,IsValidRefName,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,EscapeValue,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,replaceStringList,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,toText,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,fromText,Cyclomatic complexity of the method is 14
Complex Method,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,ReadValue,Cyclomatic complexity of the method is 21
Complex Method,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,readSectionName,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,readKeyName,Cyclomatic complexity of the method is 12
Complex Method,GitSharp.Core,Tag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tag.cs,decode,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core,Tree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tree.cs,CompareNames,Cyclomatic complexity of the method is 15
Complex Method,GitSharp.Core,Tree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tree.cs,ReadTree,Cyclomatic complexity of the method is 14
Complex Method,GitSharp.Core,TreeIterator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeIterator.cs,Step,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,UnpackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\UnpackedObjectLoader.cs,UnpackedObjectLoader,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,WorkDirCheckout,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WorkDirCheckout.cs,ProcessEntry,Cyclomatic complexity of the method is 14
Complex Method,GitSharp.Core,RefWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefWriter.cs,writePackedRefs,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,Linux,Cyclomatic complexity of the method is 12
Complex Method,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetMandrivaPlatform,Cyclomatic complexity of the method is 27
Complex Method,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,Cyclomatic complexity of the method is 82
Complex Method,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,resolve,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,parsePackedRefs,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,readRef,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,scanRef,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,LooseScanner,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,scan,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,LooseScanner,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,scanOne,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core,RefDirectoryRename,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectoryRename.cs,doRename,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.Core.Diff,EditPaths,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\MyersDiff.cs,calculate,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.DirectoryCache,DirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEditor.cs,ApplyEdits,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.DirectoryCache,DirCacheTree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheTree.cs,validate,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.FnMatch,GroupHead,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FnMatch\GroupHead.cs,GroupHead,Cyclomatic complexity of the method is 18
Complex Method,GitSharp.Core.Merge,InCoreMerger,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\StrategySimpleTwoWayInCore.cs,MergeImpl,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core.Merge,MergeAlgorithm,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\MergeAlgorithm.cs,merge,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.Core.RevWalk,InitialGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\BoundaryGenerator.cs,next,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.RevWalk,MergeBaseGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\MergeBaseGenerator.cs,next,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core.RevWalk,ObjectWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\ObjectWalk.cs,nextObject,Cyclomatic complexity of the method is 15
Complex Method,GitSharp.Core.RevWalk,PendingGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\PendingGenerator.cs,next,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,parseCanonical,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,GetFooterLines,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.RevWalk,RevCommitList<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommitList.cs,fillTo,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.RevWalk,RevWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevWalk.cs,reset,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.RevWalk,RewriteGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RewriteGenerator.cs,Cleanup,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.RevWalk,RewriteTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RewriteTreeFilter.cs,include,Cyclomatic complexity of the method is 18
Complex Method,GitSharp.Core.RevWalk,StartGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\StartGenerator.cs,next,Cyclomatic complexity of the method is 14
Complex Method,GitSharp.Core.Transport,FetchProcess,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\FetchProcess.cs,executeImp,Cyclomatic complexity of the method is 16
Complex Method,GitSharp.Core.Transport,OpenSshConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\OpenSshConfig.cs,lookup,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Transport,OpenSshConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\OpenSshConfig.cs,parse,Cyclomatic complexity of the method is 28
Complex Method,GitSharp.Core.Transport,Host,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\OpenSshConfig.cs,copyFrom,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Transport,PushProcess,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PushProcess.cs,PrepareRemoteUpdates,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,HttpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportHttp.cs,ReadAdvertisedImpl,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,WalkFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,WalkFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,DownloadObject,Cyclomatic complexity of the method is 16
Complex Method,GitSharp.Core.Transport,WalkPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkPushConnection.cs,Push,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core.Transport,WalkRemoteObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkRemoteObjectDatabase.cs,readPackedRefsImpl,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Transport,BasePackConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackConnection.cs,readAdvertisedRefsImpl,Cyclomatic complexity of the method is 12
Complex Method,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,EnableCapabilities,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,Negotiate,Cyclomatic complexity of the method is 15
Complex Method,GitSharp.Core.Transport,BasePackPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackPushConnection.cs,readStatusReport,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,verifyPrerequisites,Cyclomatic complexity of the method is 12
Complex Method,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,OpenRepository,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,index,Cyclomatic complexity of the method is 14
Complex Method,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,renameAndOpenPack,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,readACK,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,Service,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,RecvCommands,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,ValidateCommands,Cyclomatic complexity of the method is 15
Complex Method,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,SendStatusReport,Cyclomatic complexity of the method is 19
Complex Method,GitSharp.Core.Transport,RefSpec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\RefSpec.cs,RefSpec,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,SideBandInputStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandInputStream.cs,needDataPacket,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,Transport,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Transport.cs,open,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,RecvWants,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,Negotiate,Cyclomatic complexity of the method is 16
Complex Method,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,SendPack,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,Format,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.Util,PathUtil,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\PathUtil.cs,RelativePath,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,dq,Cyclomatic complexity of the method is 15
Complex Method,GitSharp.Core.Util,RawSubStringPattern,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawSubstringPattern.cs,match,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Util,TemporaryBuffer,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\TemporaryBuffer.cs,copy,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.Util,PipeStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\PipeStream.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core.Patch,CombinedFileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\CombinedFileHeader.cs,parseGitHeaders,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Patch,CombinedHunkHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\CombinedHunkHeader.cs,parseBody,Cyclomatic complexity of the method is 15
Complex Method,GitSharp.Core.Patch,CombinedHunkHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\CombinedHunkHeader.cs,extractFileLines,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.Core.Patch,CombinedHunkHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\CombinedHunkHeader.cs,extractFileLines,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.Core.Patch,FileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\FileHeader.cs,parseGitFileName,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Patch,FileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\FileHeader.cs,parseGitHeaders,Cyclomatic complexity of the method is 18
Complex Method,GitSharp.Core.Patch,HunkHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\HunkHeader.cs,ToEditList,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Core.Patch,HunkHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\HunkHeader.cs,parseBody,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.Patch,Patch,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\Patch.cs,ParseFile,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.Patch,Patch,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\Patch.cs,ParseHunks,Cyclomatic complexity of the method is 14
Complex Method,GitSharp.Core.TreeWalk,NameConflictTreeWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\NameConflictTreeWalk.cs,FastMin,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.TreeWalk,NameConflictTreeWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\NameConflictTreeWalk.cs,CombineDF,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Core.TreeWalk,TreeWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\TreeWalk.cs,next,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Core.RevPlot,PlotCommitList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\PlotCommitList.cs,enter,Cyclomatic complexity of the method is 11
Long Parameter List,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,AbbreviatedObjectId,The method has 6 parameters. Parameters: nibbles' w1' w2' w3' w4' w5
Long Parameter List,GitSharp.Core,DeltaOfsPackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DeltaOfsPackedObjectLoader.cs,DeltaOfsPackedObjectLoader,The method has 5 parameters. Parameters: pr' dataOffset' objectOffset' deltaSz' base
Long Parameter List,GitSharp.Core,DeltaRefPackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DeltaRefPackedObjectLoader.cs,DeltaRefPackedObjectLoader,The method has 5 parameters. Parameters: pr' dataOffset' objectOffset' deltaSz' base
Long Parameter List,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The method has 5 parameters. Parameters: repository' key' f' stage' newContent
Long Parameter List,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,AnyObjectId,The method has 5 parameters. Parameters: w1' w2' w3' w4' w5
Long Parameter List,GitSharp.Core,IndexTreeWalker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\IndexTreeWalker.cs,IndexTreeWalker,The method has 5 parameters. Parameters: index' mainTree' newTree' root' visitor
Long Parameter List,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,pathCompare,The method has 7 parameters. Parameters: raw' aPos' aEnd' aMode' bPos' bEnd' bMode
Long Parameter List,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,ObjectId,The method has 5 parameters. Parameters: w1' w2' w3' w4' w5
Long Parameter List,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,ReadFully,The method has 5 parameters. Parameters: position' dstbuf' dstoff' cnt' curs
Long Parameter List,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,CopyToStream,The method has 5 parameters. Parameters: position' buffer' count' stream' windowCursor
Long Parameter List,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Repository,The method has 5 parameters. Parameters: d' workTree' objectDir' alternateObjectDir' indexFile
Long Parameter List,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,replaceStringList,The method has 5 parameters. Parameters: srcState' section' subsection' name' values
Long Parameter List,GitSharp.Core,Tree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tree.cs,CompareNames,The method has 6 parameters. Parameters: a' nameUTF8' nameStart' nameEnd' lastA' lastB
Long Parameter List,GitSharp.Core,Tree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tree.cs,BinarySearch,The method has 5 parameters. Parameters: entries' nameUTF8' nameUTF8Last' nameStart' nameEnd
Long Parameter List,GitSharp.Core,WholePackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WholePackedObjectLoader.cs,WholePackedObjectLoader,The method has 5 parameters. Parameters: pr' dataOffset' objectOffset' type' size
Long Parameter List,GitSharp.Core,WindowCursor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCursor.cs,Copy,The method has 5 parameters. Parameters: pack' position' dstbuf' dstoff' cnt
Long Parameter List,GitSharp.Core,WorkDirCheckout,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WorkDirCheckout.cs,WorkDirCheckout,The method has 5 parameters. Parameters: repo' root' head' index' merge
Long Parameter List,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,GetProductInfo,The method has 5 parameters. Parameters: dwOSMajorVersion' dwOSMinorVersion' dwSpMajorVersion' dwSpMinorVersion' dwOSEdition
Long Parameter List,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,resolve,The method has 5 parameters. Parameters: ref' depth' prefix' loose' packed
Long Parameter List,GitSharp.Core.Diff,DiffFormatter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\DiffFormatter.cs,WriteHunkHeader,The method has 5 parameters. Parameters: out' aCur' aEnd' bCur' bEnd
Long Parameter List,GitSharp.Core.Exceptions,NoClosingBracketException,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Exceptions\NoClosingBracketException.cs,NoClosingBracketException,The method has 5 parameters. Parameters: indexOfOpeningBracket' openingBracket' closingBracket' pattern' inner
Long Parameter List,GitSharp.Core.Merge,MergeFormatter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\MergeFormatter.cs,formatMerge,The method has 6 parameters. Parameters: out' res' baseName' oursName' theirsName' charsetName
Long Parameter List,GitSharp.Core.RevWalk,FooterLine,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\FooterLine.cs,FooterLine,The method has 6 parameters. Parameters: b' e' ks' ke' vs' ve
Long Parameter List,GitSharp.Core.Transport,FetchProcess,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\FetchProcess.cs,deleteTrackingRef,The method has 5 parameters. Parameters: result' db' walk' spec' localRef
Long Parameter List,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,RemotePack,The method has 6 parameters. Parameters: lockMessage' packLocks' oC' r' c' pn
Long Parameter List,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The method has 5 parameters. Parameters: pos' oldCrc' type' data' oe
Long Parameter List,GitSharp.Core.Transport,RemoteRefUpdate,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The method has 6 parameters. Parameters: localDb' srcRef' remoteName' forceUpdate' localName' expectedOldObjectId
Long Parameter List,GitSharp.Core.Transport,TrackingRefUpdate,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TrackingRefUpdate.cs,TrackingRefUpdate,The method has 6 parameters. Parameters: db' localName' remoteName' forceUpdate' nv' msg
Long Parameter List,GitSharp.Core.Util,IO,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\IO.cs,ReadFully,The method has 5 parameters. Parameters: fd' pos' dst' off' len
Long Parameter List,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,drawLine,The method has 6 parameters. Parameters: color' x1' y1' x2' y2' width
Long Identifier,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,,The length of the parameter GIT_ALTERNATE_OBJECT_DIRECTORIES_KEY is 36.
Long Identifier,GitSharp.Core,ProductType,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,,The length of the parameter MediumBusinessServerManagement is 30.
Long Statement,GitSharp.Core,Commit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Commit.cs,Decode,The length of the statement  "                throw new CorruptObjectException(CommitId' "malformed header:" + new ASCIIEncoding().GetString(res.Buffer ?? new byte[0])); " is 123.
Long Statement,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteObjectHeader,The length of the statement  "			_buf[size++] = (byte)((nextLength > 0 ? (byte)0x80 : (byte)0x00) | (byte)(objectType << 4) | (byte)(dataLength & 0x0F)); " is 120.
Long Statement,GitSharp.Core.Exceptions,NoClosingBracketException,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Exceptions\NoClosingBracketException.cs,CreateMessage,The length of the statement  "            return string.Format("No closing {0} found for {1} at index {2}."' closingBracket' openingBracket' Convert.ToInt32(indexOfOpeningBracket)); " is 139.
Long Statement,GitSharp.Core.Transport,FetchProcess,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\FetchProcess.cs,deleteTrackingRef,The length of the statement  "                        throw new TransportException(_transport.Uri' "Cannot delete stale tracking ref " + name + ": " + Enum.GetName(typeof(RefUpdate.RefUpdateResult)' u.Result)); " is 156.
Long Statement,GitSharp.Core.Transport,PushProcess,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PushProcess.cs,UpdateTrackingRefs,The length of the statement  "                if (rru.HasTrackingRefUpdate && (status == RemoteRefUpdate.UpdateStatus.UP_TO_DATE || status == RemoteRefUpdate.UpdateStatus.OK)) " is 129.
Long Statement,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,WriteIdx,The length of the statement  "				PackIndexWriter iw = _outputVersion <= 0 ? PackIndexWriter.CreateOldestPossible(os' list) : PackIndexWriter.CreateVersion(os' _outputVersion); " is 142.
Long Statement,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,ValidateCommands,The length of the statement  "				if (cmd.getType() == ReceiveCommand.Type.DELETE && @ref != null && !ObjectId.ZeroId.Equals(cmd.getOldId()) && !@ref.ObjectId.Equals(cmd.getOldId())) " is 148.
Long Statement,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,getHumanishName,The length of the statement  "            // In order to match Java Split behavior (http://java.sun.com/j2se/1.4.2/docs/api/java/lang/String.html#split(java.lang.String) " is 127.
Long Statement,GitSharp.Core.Util,FS,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\FS.cs,globalHomeImpl,The length of the statement  "                    throw new ArgumentException("GlobalHomeImpl support for '" + Environment.OSVersion.VersionString + " ' is not implemented."); " is 125.
Long Statement,GitSharp.Core.Util,FS,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\FS.cs,systemHomeImpl,The length of the statement  "                    throw new ArgumentException("SystemHomeImpl support for '" + Environment.OSVersion.VersionString + " ' is not implemented."); " is 125.
Long Statement,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,decodeNoFallback,The length of the statement  "                 throw new DecoderFallbackException(string.Format("Unable to decode provided buffer using encoder '{0}'."' cs.WebName) ); " is 120.
Long Statement,GitSharp.Core.Util,AlarmState,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\IO\InterruptTimer.cs,end,The length of the statement  "				//   Thread.interrupted(); // <-- Note: [henon] this code does nothing but reset an irrelevant java thread internal flag AFAIK (which is not supported by our thread implementation) " is 180.
Long Statement,GitSharp.Core.Util,RefMap,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RefMap.cs,GetEnumerator,The length of the statement  "            return new LambdaConverterIterator<Ent' KeyValuePair<string' Ref>>(entrySet().iterator()' (ent) => new KeyValuePair<string' Ref>(ent.getKey()' ent.getValue())); " is 160.
Long Statement,GitSharp.Core.Util.JavaHelper,AtomicReference<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\JavaHelper\AtomicReference.cs,compareAndSet,The length of the statement  "                if ((Equals(_reference' default(T)) && Equals(expected' default(T))) || (!Equals(_reference' default(T)) && _reference.Equals(expected))) " is 137.
Long Statement,GitSharp.Core.Util.JavaHelper,Charset,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\JavaHelper\Charset.cs,forName,The length of the statement  "                encodingAlias = "EUC-JP";   // Hacked as euc_JP is not valid from the IANA perspective (http://www.iana.org/assignments/character-sets) " is 135.
Long Statement,GitSharp.Core.RevWalk.Filter,BetweenCommitTimeRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\CommitTimeRevFilter.cs,ToString,The length of the statement  "                return base.ToString() + "(" + ((long)_when * 1000).MillisToUtcDateTime() + " - " + ((long)_until * 1000).MillisToUtcDateTime() + ")"; " is 134.
Complex Conditional,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,IsModified,The conditional expression  "!File.Exists(file.FullName) || ConfigFileMode && FileCanExecute(file) && FileHasExecute()"  is complex.
Complex Conditional,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The conditional expression  "typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark"  is complex.
Complex Conditional,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The conditional expression  "typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark"  is complex.
Complex Conditional,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The conditional expression  "typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark"  is complex.
Complex Conditional,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The conditional expression  "typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark"  is complex.
Complex Conditional,GitSharp.Core,GitIndex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\GitIndex.cs,MakeKey,The conditional expression  "!string.IsNullOrEmpty(f.DirectoryName()) &&  				 wd.IsDirectory() && wd.Exists &&  				 !f.DirectoryName().StartsWith(wd.DirectoryName())"  is complex.
Complex Conditional,GitSharp.Core,IndexTreeWalker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\IndexTreeWalker.cs,Compare,The conditional expression  "(((t1 != null) && (t1.Parent == null)) && (t2 != null)) && (t2.Parent == null)"  is complex.
Complex Conditional,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,SelectDeltaReuseForObject,The conditional expression  "(otpBase != null || (Thin && _edgeObjects.Get(idBase) != null)) && IsBetterDeltaReuseLoader(bestLoader' loader)"  is complex.
Complex Conditional,GitSharp.Core.Transport,TransportLocal,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportLocal.cs,canHandle,The conditional expression  "uri.Host != null || uri.Port > 0 || uri.User != null || uri.Pass != null || uri.Path == null"  is complex.
Complex Conditional,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,ValidateCommands,The conditional expression  "cmd.getType() == ReceiveCommand.Type.DELETE && @ref != null && !ObjectId.ZeroId.Equals(cmd.getOldId()) && !@ref.ObjectId.Equals(cmd.getOldId())"  is complex.
Complex Conditional,GitSharp.Core.Transport,TransportBundleFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportBundleFile.cs,canHandle,The conditional expression  "uri.Host != null || uri.Port > 0 || uri.User != null || uri.Pass != null || uri.Path == null"  is complex.
Complex Conditional,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The conditional expression  "Path.Length >= 3 && Path[0] == '/' && Path[2] == ':' && (Path[1] >= 'A' && Path[1] <= 'Z' || Path[1] >= 'a' && Path[1] <= 'z')"  is complex.
Complex Conditional,GitSharp.Core.Util,AtomicReferenceArray<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\AtomicReferenceArray.cs,compareAndSet,The conditional expression  "(array[slot] == null && expect==null) || (array[slot] != null && array[slot].Equals(expect))"  is complex.
Complex Conditional,GitSharp.Core.Util,StringUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\StringUtils.cs,toBoolean,The conditional expression  "equalsIgnoreCase("yes"' stringValue)                      || equalsIgnoreCase("true"' stringValue)                      || equalsIgnoreCase("1"' stringValue)                      || equalsIgnoreCase("on"' stringValue)"  is complex.
Complex Conditional,GitSharp.Core.Util,StringUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\StringUtils.cs,toBoolean,The conditional expression  "equalsIgnoreCase("no"' stringValue)                      || equalsIgnoreCase("false"' stringValue)                      || equalsIgnoreCase("0"' stringValue)                      || equalsIgnoreCase("off"' stringValue)"  is complex.
Complex Conditional,GitSharp.Core.Util.JavaHelper,AtomicReference<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\JavaHelper\AtomicReference.cs,compareAndSet,The conditional expression  "(Equals(_reference' default(T)) && Equals(expected' default(T))) || (!Equals(_reference' default(T)) && _reference.Equals(expected))"  is complex.
Complex Conditional,GitSharp.Core.Patch,HunkHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\HunkHeader.cs,parseBody,The conditional expression  "last < end && LinesContext + _oldImage.LinesDeleted - 1 == _oldImage.LineCount  				&& LinesContext + _oldImage.LinesAdded == NewLineCount  				&& RawParseUtils.match(buf' last' Patch.SigFooter) >= 0"  is complex.
Complex Conditional,GitSharp.Core.Patch,Patch,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\Patch.cs,ParseHunks,The conditional expression  "fh.Hunks.isEmpty() && BinTrailer.Length < eol - c  						&& RawParseUtils.match(buf' eol - BinTrailer.Length' BinTrailer) >= 0  						&& MatchAny(buf' c' BinHeaders)"  is complex.
Complex Conditional,GitSharp.Core.TreeWalk,NameConflictTreeWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\NameConflictTreeWalk.cs,FastMin,The conditional expression  "_fastMinHasMatch && IsTree(minRef) && !IsTree(t)                              && NameEqual(minRef' t)"  is complex.
Complex Conditional,GitSharp.Core.TreeWalk,NameConflictTreeWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\NameConflictTreeWalk.cs,FastMin,The conditional expression  "_fastMinHasMatch && IsTree(t) && !IsTree(minRef)                        && NameEqual(t' minRef)"  is complex.
Virtual Method Call from Constructor,GitSharp.Core,RefRename,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefRename.cs,RefRename,The constructor "RefRename" calls a virtual method "getRepository".
Virtual Method Call from Constructor,GitSharp.Core,RepositoryConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RepositoryConfig.cs,RepositoryConfig,The constructor "RepositoryConfig" calls a virtual method "openUserConfig".
Virtual Method Call from Constructor,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "getCurrentTime".
Virtual Method Call from Constructor,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "getTimezone".
Virtual Method Call from Constructor,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "getCurrentTime".
Virtual Method Call from Constructor,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "getTimezone".
Virtual Method Call from Constructor,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Repository,The constructor "Repository" calls a virtual method "openUserConfig".
Virtual Method Call from Constructor,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Repository,The constructor "Repository" calls a virtual method "load".
Virtual Method Call from Constructor,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Repository,The constructor "Repository" calls a virtual method "load".
Virtual Method Call from Constructor,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,BlockRevQueue,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\BlockRevQueue.cs,BlockRevQueue,The constructor "BlockRevQueue" calls a virtual method "shareFreeList".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,BlockRevQueue,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\BlockRevQueue.cs,BlockRevQueue,The constructor "BlockRevQueue" calls a virtual method "next".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,BlockRevQueue,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\BlockRevQueue.cs,BlockRevQueue,The constructor "BlockRevQueue" calls a virtual method "add".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,InitialGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\BoundaryGenerator.cs,InitialGenerator,The constructor "InitialGenerator" calls a virtual method "shareFreeList".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,DateRevQueue,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\DateRevQueue.cs,DateRevQueue,The constructor "DateRevQueue" calls a virtual method "next".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,Iterator<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevWalk.cs,Iterator,The constructor "Iterator" calls a virtual method "next".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,RewriteTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RewriteTreeFilter.cs,RewriteTreeFilter,The constructor "RewriteTreeFilter" calls a virtual method "shouldBeRecursive".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,TopoSortGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\TopoSortGenerator.cs,TopoSortGenerator,The constructor "TopoSortGenerator" calls a virtual method "shareFreeList".
Virtual Method Call from Constructor,GitSharp.Core.RevWalk,TopoSortGenerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\TopoSortGenerator.cs,TopoSortGenerator,The constructor "TopoSortGenerator" calls a virtual method "next".
Virtual Method Call from Constructor,GitSharp.Core.Transport,ReceiveCommand,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceiveCommand.cs,ReceiveCommand,The constructor "ReceiveCommand" calls a virtual method "Equals".
Virtual Method Call from Constructor,GitSharp.Core.Transport,ReceiveCommand,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceiveCommand.cs,ReceiveCommand,The constructor "ReceiveCommand" calls a virtual method "Equals".
Virtual Method Call from Constructor,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The constructor "URIish" calls a virtual method "getOperatingSystem".
Virtual Method Call from Constructor,GitSharp.Core.Patch,OldImage,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\HunkHeader.cs,OldImage,The constructor "OldImage" calls a virtual method "getOldId".
Virtual Method Call from Constructor,GitSharp.Core.RevPlot,PlotWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\PlotWalk.cs,PlotWalk,The constructor "PlotWalk" calls a virtual method "sort".
Empty Catch Block,GitSharp.Core,IgnoreHandler,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\IgnoreHandler.cs,IgnoreHandler,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,IgnoreHandler,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\IgnoreHandler.cs,IgnoreHandler,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,RenameTo,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,RenameTo,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,RenameTo,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,RenameTo,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,RenameTo,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,RenameTo,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,LockFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\LockFile.cs,Lock,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,LockFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\LockFile.cs,CopyCurrentContent,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,LockFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\LockFile.cs,Unlock,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,LockFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\LockFile.cs,Unlock,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,DoClose,The method has an empty catch block.
Empty Catch Block,GitSharp.Core,CachedObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\CachedObjectDirectory.cs,CachedObjectDirectory,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,read,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.RevWalk,RevCommitList<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommitList.cs,clearFlag,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,OpenSshConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\OpenSshConfig.cs,parse,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,PushProcess,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PushProcess.cs,UpdateTrackingRefs,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,SshConfigSessionFactory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SshConfigSessionFactory.cs,knownHosts,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,SshConfigSessionFactory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SshConfigSessionFactory.cs,knownHosts,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,SshConfigSessionFactory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SshConfigSessionFactory.cs,loadIdentity,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,TransportBundleStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportBundleStream.cs,close,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,TransportGitAnon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportGitAnon.cs,OpenConnection,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,TcpFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportGitAnon.cs,Close,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,TcpPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportGitAnon.cs,Close,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,HttpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportHttp.cs,getAlternates,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,HttpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportHttp.cs,getAlternates,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,SftpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportSftp.cs,writeFile,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,OpenIndex,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,WalkPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkPushConnection.cs,SafeDelete,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,WalkRemoteObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkRemoteObjectDatabase.cs,readPackedRefs,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,MaxTimeWanted,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,MarkReachable,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,MarkReachable,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,SendWants,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,MarkAdvertised,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackPushConnection.cs,noRepository,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BasePackPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackPushConnection.cs,noRepository,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,verifyPrerequisites,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,Start,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,Start,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,startClient,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,startClient,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,startClient,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,startClient,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,Daemon,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\Daemon.cs,OpenRepository,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,sendError,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,sendMessage,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,Service,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseBase10,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseLongBase10,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,decodeNoFallback,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,decodeNoFallback,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,decodeNoFallback,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Util,TemporaryBuffer,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\TemporaryBuffer.cs,destroy,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.Patch,FileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\FileHeader.cs,getScriptText,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.TreeWalk,WorkingTreeIterator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\WorkingTreeIterator.cs,IdBufferBlob,The method has an empty catch block.
Empty Catch Block,GitSharp.Core.TreeWalk,WorkingTreeIterator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\WorkingTreeIterator.cs,IdBufferBlob,The method has an empty catch block.
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: int b = (word - 1) * 8;
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: b + 8 <= nibbles
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: int s = 32 - (nibbles - b) * 4;
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: int s = 32 - (nibbles - b) * 4;
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,prefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(_w2' mask(2' other.W2));
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,prefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(_w3' mask(3' other.W3));
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,prefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(_w4' mask(4' other.W4));
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,prefixCompare,The following statement contains a magic number: return NB.CompareUInt32(_w5' mask(5' other.W5));
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: _nibbles <= 8
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: Hex.FillHexCharArray(b' 8' _w2);
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: _nibbles <= 16
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: Hex.FillHexCharArray(b' 16' _w3);
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: _nibbles <= 24
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: Hex.FillHexCharArray(b' 24' _w4);
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: _nibbles <= 32
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,name,The following statement contains a magic number: Hex.FillHexCharArray(b' 32' _w5);
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int b = Hex.HexUInt32(bs' ptr + 8' end);
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int c = Hex.HexUInt32(bs' ptr + 16' end);
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int d = Hex.HexUInt32(bs' ptr + 24' end);
Magic Number,GitSharp.Core,AbbreviatedObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int e = Hex.HexUInt32(bs' ptr + 32' end);
Magic Number,GitSharp.Core,ByteArrayExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ByteArrayExtensions.cs,ReadLine,The following statement contains a magic number: switch (num)                  {                      case 13:                          if ((currentIndex != (source.Length - 1)) && (source[currentIndex + 1] == 10))                          {                              indexModifier = 2;                          }                          break;                        case 10:                          indexModifier = 1;                          break;                  }
Magic Number,GitSharp.Core,ByteArrayExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ByteArrayExtensions.cs,ReadLine,The following statement contains a magic number: switch (num)                  {                      case 13:                          if ((currentIndex != (source.Length - 1)) && (source[currentIndex + 1] == 10))                          {                              indexModifier = 2;                          }                          break;                        case 10:                          indexModifier = 1;                          break;                  }
Magic Number,GitSharp.Core,ByteArrayExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ByteArrayExtensions.cs,ReadLine,The following statement contains a magic number: switch (num)                  {                      case 13:                          if ((currentIndex != (source.Length - 1)) && (source[currentIndex + 1] == 10))                          {                              indexModifier = 2;                          }                          break;                        case 10:                          indexModifier = 1;                          break;                  }
Magic Number,GitSharp.Core,ByteArrayExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ByteArrayExtensions.cs,ReadLine,The following statement contains a magic number: switch (num)                  {                      case 13:                          if ((currentIndex != (source.Length - 1)) && (source[currentIndex + 1] == 10))                          {                              indexModifier = 2;                          }                          break;                        case 10:                          indexModifier = 1;                          break;                  }
Magic Number,GitSharp.Core,ByteBufferWindow,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ByteBufferWindow.cs,Inflate,The following statement contains a magic number: var tmp = new byte[512];
Magic Number,GitSharp.Core,ByteBufferWindow,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ByteBufferWindow.cs,inflateVerify,The following statement contains a magic number: var tmp = new byte[512];
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,fileFor,The following statement contains a magic number: string d = objectName.Slice(0' 2);
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,fileFor,The following statement contains a magic number: string f = objectName.Substring(2);
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,openPack,The following statement contains a magic number: p.Length != 50 || !p.StartsWith("pack-") || !p.EndsWith(IndexPack.PackSuffix)
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,openPack,The following statement contains a magic number: i.Length != 49 || !i.StartsWith("pack-") || !i.EndsWith(IndexPack.IndexSuffix)
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,openPack,The following statement contains a magic number: !p.Slice(0' 45).Equals(i.Slice(0' 45))
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,openPack,The following statement contains a magic number: !p.Slice(0' 45).Equals(i.Slice(0' 45))
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,ScanPacksImpl,The following statement contains a magic number: var list = new List<PackFile>(names.Count >> 2);
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,ScanPacksImpl,The following statement contains a magic number: indexName.Length != 49 || !indexName.EndsWith(".idx")
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,ScanPacksImpl,The following statement contains a magic number: string @base = indexName.Slice(0' indexName.Length - 4);
Magic Number,GitSharp.Core,ObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,loadAlternates,The following statement contains a magic number: var l = new List<ObjectDatabase>(4);
Magic Number,GitSharp.Core,PackList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,notRacyClean,The following statement contains a magic number: return read - lastModified > 2 * 60 * 1000L;
Magic Number,GitSharp.Core,PackList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,notRacyClean,The following statement contains a magic number: return read - lastModified > 2 * 60 * 1000L;
Magic Number,GitSharp.Core,PackList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectDirectory.cs,notRacyClean,The following statement contains a magic number: return read - lastModified > 2 * 60 * 1000L;
Magic Number,GitSharp.Core,ReflogReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,getReverseEntries,The following statement contains a magic number: Entry entry = new Entry(log' rs < 0 ? 0 : rs + 2);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: Ctime = f.lastModified() * 1000000L;
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: _flags = (short)((stage << 12) | _name.Length);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: _flags = (short)((stage << 12) | _name.Length);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: Ctime = b.ReadInt32() * 1000000000L + (b.ReadInt32() % 1000000000L);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: Ctime = b.ReadInt32() * 1000000000L + (b.ReadInt32() % 1000000000L);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: Mtime = b.ReadInt32() * 1000000000L + (b.ReadInt32() % 1000000000L);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: Mtime = b.ReadInt32() * 1000000000L + (b.ReadInt32() % 1000000000L);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Entry,The following statement contains a magic number: b.BaseStream.Position = startposition +  												((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,update,The following statement contains a magic number: long lm = f.lastModified() * 1000000L;
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: var tmpBuffer = t.GetBytes((int)(Ctime / 1000000000L));
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: tmpBuffer = t.GetBytes((int)(Ctime % 1000000000L));
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: tmpBuffer = t.GetBytes((int)(Mtime / 1000000000L));
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: tmpBuffer = t.GetBytes((int)(Mtime % 1000000000L));
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,Write,The following statement contains a magic number: long end = startposition  						  + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + _name.Length + 8) & ~7);
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,IsModified,The following statement contains a magic number: long javamtime = Mtime / 1000000L;
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,IsModified,The following statement contains a magic number: lastm = lastm - lastm % 1000;
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,IsModified,The following statement contains a magic number: javamtime % 1000 == 0
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,ToString,The following statement contains a magic number: return Name + "/SHA-1(" +  						 ObjectId.Name + ")/M:" +                           (Ctime / 1000000L).MillisToUtcDateTime() + "/C:" +                           (Mtime / 1000000L).MillisToUtcDateTime() + "/d" +  						 _dev +  						 "/i" + _ino +  						 "/m" + Convert.ToString(Mode' 8) +  						 "/u" + _uid +  						 "/g" + _gid +  						 "/s" + _size +  						 "/f" + _flags +  						 "/@" + Stage;
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,ToString,The following statement contains a magic number: return Name + "/SHA-1(" +  						 ObjectId.Name + ")/M:" +                           (Ctime / 1000000L).MillisToUtcDateTime() + "/C:" +                           (Mtime / 1000000L).MillisToUtcDateTime() + "/d" +  						 _dev +  						 "/i" + _ino +  						 "/m" + Convert.ToString(Mode' 8) +  						 "/u" + _uid +  						 "/g" + _gid +  						 "/s" + _size +  						 "/f" + _flags +  						 "/@" + Stage;
Magic Number,GitSharp.Core,Entry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ReflogReader.cs,ToString,The following statement contains a magic number: return Name + "/SHA-1(" +  						 ObjectId.Name + ")/M:" +                           (Ctime / 1000000L).MillisToUtcDateTime() + "/C:" +                           (Mtime / 1000000L).MillisToUtcDateTime() + "/d" +  						 _dev +  						 "/i" + _ino +  						 "/m" + Convert.ToString(Mode' 8) +  						 "/u" + _uid +  						 "/g" + _gid +  						 "/s" + _size +  						 "/f" + _flags +  						 "/@" + Stage;
Magic Number,GitSharp.Core,RepositoryCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RepositoryCache.cs,RepositoryCache,The following statement contains a magic number: openLocks = new Lock[4];
Magic Number,GitSharp.Core,RepositoryCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RepositoryCache.cs,clearAll,The following statement contains a magic number: stage < 2
Magic Number,GitSharp.Core,FileKey,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RepositoryCache.cs,readFirstLine,The following statement contains a magic number: byte[] buf = IO.ReadFully(head' 4096);
Magic Number,GitSharp.Core,UnpackedObjectCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\UnpackedObjectCache.cs,Hash,The following statement contains a magic number: return (int)((uint)(((int)position) << 22) >> 22);
Magic Number,GitSharp.Core,UnpackedObjectCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\UnpackedObjectCache.cs,Hash,The following statement contains a magic number: return (int)((uint)(((int)position) << 22) >> 22);
Magic Number,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,UnsignedRightShift,The following statement contains a magic number: return (n >> s) + (((long) 2) << ~s);
Magic Number,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,UnsignedRightShift,The following statement contains a magic number: return (n >> s) + (2 << ~s);
Magic Number,GitSharp.Core,Extensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Extensions.cs,CreateTempFile,The following statement contains a magic number: int i = 8;
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: var buf = new byte[20];
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 4' W2);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 8' W3);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 12' W4);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 16' W5);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: s.Write(buf' 0' 20);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 4 + off' W2);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 8 + off' W3);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 12 + off' W4);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: NB.encodeInt32(buf' 16 + off' W5);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: b[offset + 2] = W3;
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: b[offset + 3] = W4;
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,copyRawTo,The following statement contains a magic number: b[offset + 4] = W5;
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: Hex.FillHexByteArray(dst' 8' W2);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: Hex.FillHexByteArray(dst' 16' W3);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: Hex.FillHexByteArray(dst' 24' W4);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: Hex.FillHexByteArray(dst' 32' W5);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: return Abbreviate(repo' 8);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int b = AbbreviatedObjectId.Mask(len' 2' W2);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int c = AbbreviatedObjectId.Mask(len' 3' W3);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int d = AbbreviatedObjectId.Mask(len' 4' W4);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int e = AbbreviatedObjectId.Mask(len' 5' W5);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,GetFirstByte,The following statement contains a magic number: return (byte)(((uint)W1) >> 24);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(W2' NB.DecodeInt32(bs' p + 4));
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(W3' NB.DecodeInt32(bs' p + 8));
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(W4' NB.DecodeInt32(bs' p + 12));
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,CompareTo,The following statement contains a magic number: return NB.CompareUInt32(W5' NB.DecodeInt32(bs' p + 16));
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(W3' bs[p + 2]);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(W4' bs[p + 3]);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,CompareTo,The following statement contains a magic number: return NB.CompareUInt32(W5' bs[p + 4]);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: Hex.FillHexCharArray(dest' 8' W2);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: Hex.FillHexCharArray(dest' 16' W3);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: Hex.FillHexCharArray(dest' 24' W4);
Magic Number,GitSharp.Core,AnyObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: Hex.FillHexCharArray(dest' 32' W5);
Magic Number,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,The following statement contains a magic number: shift += 7;
Magic Number,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,The following statement contains a magic number: shift += 7;
Magic Number,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & 0xff) << 8;
Magic Number,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & 0xff) << 16;
Magic Number,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & 0xff) << 24;
Magic Number,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,The following statement contains a magic number: copySize |= (delta[deltaPtr++] & 0xff) << 8;
Magic Number,GitSharp.Core,BinaryDelta,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\BinaryDelta.cs,Apply,The following statement contains a magic number: copySize |= (delta[deltaPtr++] & 0xff) << 16;
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Magic Number,GitSharp.Core,Commit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Commit.cs,Commit,The following statement contains a magic number: _treeId = ObjectId.FromString(raw' 5);
Magic Number,GitSharp.Core,Commit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Commit.cs,Commit,The following statement contains a magic number: int rawPtr = 46;
Magic Number,GitSharp.Core,Commit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Commit.cs,Commit,The following statement contains a magic number: ParentIds[np++] = ObjectId.FromString(raw' rawPtr + 7);
Magic Number,GitSharp.Core,Commit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Commit.cs,Commit,The following statement contains a magic number: rawPtr += 48;
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,decodeTypeString,The following statement contains a magic number: switch (typeString[position])                  {                      case (byte)'b':                          if (typeString[position + 1] != (byte)'l'                              || typeString[position + 2] != (byte)'o'                              || typeString[position + 3] != (byte)'b'                              || typeString[position + 4] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 5;                          return OBJ_BLOB;                        case (byte)'c':                          if (typeString[position + 1] != (byte)'o'                                  || typeString[position + 2] != (byte)'m'                                  || typeString[position + 3] != (byte)'m'                                  || typeString[position + 4] != (byte)'i'                                  || typeString[position + 5] != (byte)'t'                                  || typeString[position + 6] != endMark)                          {                              throw new CorruptObjectException(id' "invalid type");                          }                          offset.value = position + 7;                          return OBJ_COMMIT;                        case (byte)'t':                          switch (typeString[position + 1])                          {                              case (byte)'a':                                  if (typeString[position + 2] != (byte)'g'                                      || typeString[position + 3] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 4;                                  return OBJ_TAG;                                case (byte)'r':                                  if (typeString[position + 2] != (byte)'e'                                          || typeString[position + 3] != (byte)'e'                                          || typeString[position + 4] != endMark)                                      throw new CorruptObjectException(id' "invalid type");                                  offset.value = position + 5;                                  return OBJ_TREE;                                default:                                  throw new CorruptObjectException(id' "invalid type");                          }                        default:                          throw new CorruptObjectException(id' "invalid type");                  }
Magic Number,GitSharp.Core,Constants,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Constants.cs,encodeASCII,The following statement contains a magic number: c > 127
Magic Number,GitSharp.Core,CoreConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\CoreConfig.cs,CoreConfig,The following statement contains a magic number: packIndexVersion = rc.getInt("pack"' "indexversion"' 2);
Magic Number,GitSharp.Core,FileMode,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FileMode.cs,FileMode,The following statement contains a magic number: var tmp = new byte[10];
Magic Number,GitSharp.Core,FileMode,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FileMode.cs,FileMode,The following statement contains a magic number: tmp[--p] = (byte)((byte)'0' + (mode & 07));
Magic Number,GitSharp.Core,FileMode,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FileMode.cs,FileMode,The following statement contains a magic number: mode >>= 3;
Magic Number,GitSharp.Core,FileMode,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FileMode.cs,GetHashCode,The following statement contains a magic number: return (EqualityFunction.GetHashCode() * 397) ^ ObjectType.GetHashCode();
Magic Number,GitSharp.Core,GitIndex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\GitIndex.cs,checkoutEntry,The following statement contains a magic number: e.Mtime = file.lastModified() * 1000000L;
Magic Number,GitSharp.Core,GitIndex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\GitIndex.cs,SplitDirPath,The following statement contains a magic number: var tmp = new string[name.Length / 2 + 1];
Magic Number,GitSharp.Core,Header,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\GitIndex.cs,Header,The following statement contains a magic number: _version = 2;
Magic Number,GitSharp.Core,Header,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\GitIndex.cs,Read,The following statement contains a magic number: _version != 2
Magic Number,GitSharp.Core,LockFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\LockFile.cs,CopyCurrentContent,The following statement contains a magic number: var buf = new byte[2048];
Magic Number,GitSharp.Core,LockFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\LockFile.cs,waitForStatChange,The following statement contains a magic number: Thread.Sleep(25 /* milliseconds */);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromRaw,The following statement contains a magic number: W2 = NB.DecodeInt32(bs' p + 4);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromRaw,The following statement contains a magic number: W3 = NB.DecodeInt32(bs' p + 8);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromRaw,The following statement contains a magic number: W4 = NB.DecodeInt32(bs' p + 12);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromRaw,The following statement contains a magic number: W5 = NB.DecodeInt32(bs' p + 16);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromRaw,The following statement contains a magic number: W3 = ints[p + 2];
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromRaw,The following statement contains a magic number: W4 = ints[p + 3];
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromRaw,The following statement contains a magic number: W5 = ints[p + 4];
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromHexString,The following statement contains a magic number: W2 = RawParseUtils.parseHexInt32(bs' p + 8);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromHexString,The following statement contains a magic number: W3 = RawParseUtils.parseHexInt32(bs' p + 16);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromHexString,The following statement contains a magic number: W4 = RawParseUtils.parseHexInt32(bs' p + 24);
Magic Number,GitSharp.Core,MutableObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\MutableObjectId.cs,FromHexString,The following statement contains a magic number: W5 = RawParseUtils.parseHexInt32(bs' p + 32);
Magic Number,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,duplicateName,The following statement contains a magic number: nextMode <<= 3;
Magic Number,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,checkTree,The following statement contains a magic number: thisMode <<= 3;
Magic Number,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,checkTree,The following statement contains a magic number: throw new CorruptObjectException("invalid mode " + NB.DecimalToBase(thisMode' 8));
Magic Number,GitSharp.Core,ObjectChecker,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectChecker.cs,checkTree,The following statement contains a magic number: nameLen == 2 && raw[thisNameB + 1] == '.'
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si]  				   && firstBuffer[fi + 1] == secondBuffer[si + 1]  				   && firstBuffer[fi + 2] == secondBuffer[si + 2]  				   && firstBuffer[fi + 3] == secondBuffer[si + 3]  				   && firstBuffer[fi + 4] == secondBuffer[si + 4]  				   && firstBuffer[fi + 5] == secondBuffer[si + 5]  				   && firstBuffer[fi + 6] == secondBuffer[si + 6]  				   && firstBuffer[fi + 7] == secondBuffer[si + 7]  				   && firstBuffer[fi + 8] == secondBuffer[si + 8]  				   && firstBuffer[fi + 9] == secondBuffer[si + 9]  				   && firstBuffer[fi + 10] == secondBuffer[si + 10]  				   && firstBuffer[fi + 11] == secondBuffer[si + 11]  				   && firstBuffer[fi + 12] == secondBuffer[si + 12]  				   && firstBuffer[fi + 13] == secondBuffer[si + 13]  				   && firstBuffer[fi + 14] == secondBuffer[si + 14]  				   && firstBuffer[fi + 15] == secondBuffer[si + 15]  				   && firstBuffer[fi + 16] == secondBuffer[si + 16]  				   && firstBuffer[fi + 17] == secondBuffer[si + 17]  				   && firstBuffer[fi + 18] == secondBuffer[si + 18]  				   && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromHexString,The following statement contains a magic number: int b = RawParseUtils.parseHexInt32(bs' p + 8);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromHexString,The following statement contains a magic number: int c = RawParseUtils.parseHexInt32(bs' p + 16);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromHexString,The following statement contains a magic number: int d = RawParseUtils.parseHexInt32(bs' p + 24);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromHexString,The following statement contains a magic number: int e = RawParseUtils.parseHexInt32(bs' p + 32);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromRaw,The following statement contains a magic number: int b = NB.DecodeInt32(buffer' offset + 4);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromRaw,The following statement contains a magic number: int c = NB.DecodeInt32(buffer' offset + 8);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromRaw,The following statement contains a magic number: int d = NB.DecodeInt32(buffer' offset + 12);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromRaw,The following statement contains a magic number: int e = NB.DecodeInt32(buffer' offset + 16);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromRaw,The following statement contains a magic number: return new ObjectId(intbuffer[offset]' intbuffer[offset + 1]' intbuffer[offset + 2]' intbuffer[offset + 3]'  								intbuffer[offset + 4]);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromRaw,The following statement contains a magic number: return new ObjectId(intbuffer[offset]' intbuffer[offset + 1]' intbuffer[offset + 2]' intbuffer[offset + 3]'  								intbuffer[offset + 4]);
Magic Number,GitSharp.Core,ObjectId,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ObjectId.cs,FromRaw,The following statement contains a magic number: return new ObjectId(intbuffer[offset]' intbuffer[offset + 1]' intbuffer[offset + 2]' intbuffer[offset + 3]'  								intbuffer[offset + 4]);
Magic Number,GitSharp.Core,OffsetCache<V;R>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\OffsetCache.cs,OffsetCache,The following statement contains a magic number: var eb = (int)(_tableSize * .1);
Magic Number,GitSharp.Core,OffsetCache<V;R>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\OffsetCache.cs,OffsetCache,The following statement contains a magic number: eb = 64;
Magic Number,GitSharp.Core,OffsetCache<V;R>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\OffsetCache.cs,OffsetCache,The following statement contains a magic number: 64 < eb
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,PackFile,The following statement contains a magic number: _packLastModified = (int)(packFile.lastModified() >> 10);
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,PackFile,The following statement contains a magic number: _hash = GetHashCode() * 31;
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: var buf = new byte[20];
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: IO.ReadFully(_fd' 0' buf' 0' 12);
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: RawParseUtils.match(buf' 0' Constants.PACK_SIGNATURE) != 4
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: long vers = NB.decodeUInt32(buf' 4);
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: long packCnt = NB.decodeUInt32(buf' 8);
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: IO.ReadFully(_fd' Length - 20' buf' 0' 20);
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,OnOpenPack,The following statement contains a magic number: IO.ReadFully(_fd' Length - 20' buf' 0' 20);
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: ReadFully(pos' ib' 0' 20' curs);
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: long dataSize = c & 15;
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: int shift = 4;
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: shift += 7;
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					return new WholePackedObjectLoader(this' pos' objOffset' typeCode' (int)dataSize);    				case Constants.OBJ_OFS_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					p = 0;  					c = ib[p++] & 0xff;  					long ofs = c & 127;    					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ib[p++] & 0xff;  						ofs <<= 7;  						ofs += (c & 127);  					}    					return new DeltaOfsPackedObjectLoader(this' pos + p' objOffset' (int)dataSize' objOffset - ofs);    				case Constants.OBJ_REF_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					return new DeltaRefPackedObjectLoader(this' pos + ib.Length' objOffset' (int)dataSize' ObjectId.FromRaw(ib));    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					return new WholePackedObjectLoader(this' pos' objOffset' typeCode' (int)dataSize);    				case Constants.OBJ_OFS_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					p = 0;  					c = ib[p++] & 0xff;  					long ofs = c & 127;    					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ib[p++] & 0xff;  						ofs <<= 7;  						ofs += (c & 127);  					}    					return new DeltaOfsPackedObjectLoader(this' pos + p' objOffset' (int)dataSize' objOffset - ofs);    				case Constants.OBJ_REF_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					return new DeltaRefPackedObjectLoader(this' pos + ib.Length' objOffset' (int)dataSize' ObjectId.FromRaw(ib));    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					return new WholePackedObjectLoader(this' pos' objOffset' typeCode' (int)dataSize);    				case Constants.OBJ_OFS_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					p = 0;  					c = ib[p++] & 0xff;  					long ofs = c & 127;    					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ib[p++] & 0xff;  						ofs <<= 7;  						ofs += (c & 127);  					}    					return new DeltaOfsPackedObjectLoader(this' pos + p' objOffset' (int)dataSize' objOffset - ofs);    				case Constants.OBJ_REF_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					return new DeltaRefPackedObjectLoader(this' pos + ib.Length' objOffset' (int)dataSize' ObjectId.FromRaw(ib));    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					return new WholePackedObjectLoader(this' pos' objOffset' typeCode' (int)dataSize);    				case Constants.OBJ_OFS_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					p = 0;  					c = ib[p++] & 0xff;  					long ofs = c & 127;    					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ib[p++] & 0xff;  						ofs <<= 7;  						ofs += (c & 127);  					}    					return new DeltaOfsPackedObjectLoader(this' pos + p' objOffset' (int)dataSize' objOffset - ofs);    				case Constants.OBJ_REF_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					return new DeltaRefPackedObjectLoader(this' pos + ib.Length' objOffset' (int)dataSize' ObjectId.FromRaw(ib));    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					return new WholePackedObjectLoader(this' pos' objOffset' typeCode' (int)dataSize);    				case Constants.OBJ_OFS_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					p = 0;  					c = ib[p++] & 0xff;  					long ofs = c & 127;    					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ib[p++] & 0xff;  						ofs <<= 7;  						ofs += (c & 127);  					}    					return new DeltaOfsPackedObjectLoader(this' pos + p' objOffset' (int)dataSize' objOffset - ofs);    				case Constants.OBJ_REF_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					return new DeltaRefPackedObjectLoader(this' pos + ib.Length' objOffset' (int)dataSize' ObjectId.FromRaw(ib));    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,Reader,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					return new WholePackedObjectLoader(this' pos' objOffset' typeCode' (int)dataSize);    				case Constants.OBJ_OFS_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					p = 0;  					c = ib[p++] & 0xff;  					long ofs = c & 127;    					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ib[p++] & 0xff;  						ofs <<= 7;  						ofs += (c & 127);  					}    					return new DeltaOfsPackedObjectLoader(this' pos + p' objOffset' (int)dataSize' objOffset - ofs);    				case Constants.OBJ_REF_DELTA:  					ReadFully(pos' ib' 0' 20' curs);  					return new DeltaRefPackedObjectLoader(this' pos + ib.Length' objOffset' (int)dataSize' ObjectId.FromRaw(ib));    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core,PackFile,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackFile.cs,FindEndOffset,The following statement contains a magic number: long maxOffset = Length - 20;
Magic Number,GitSharp.Core,PackIndex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndex.cs,Open,The following statement contains a magic number: byte[] hdr = new byte[8];
Magic Number,GitSharp.Core,PackIndex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndex.cs,Open,The following statement contains a magic number: int v = NB.DecodeInt32(hdr' 4);
Magic Number,GitSharp.Core,PackIndex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndex.cs,Open,The following statement contains a magic number: switch (v)                          {                              case 2:                                  return new PackIndexV2(fs);                              default:                                  throw new IOException("Unsupported pack index version " + v);                          }
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: _idxHeader = new long[256];
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: _idxHeader[k] = NB.decodeUInt32(fanoutTable' k * 4);
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: _idxdata[k] = new byte[n * (Constants.OBJECT_ID_LENGTH + 4)];
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: ObjectCount = _idxHeader[255];
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: PackChecksum = new byte[20];
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,GetObjectId,The following statement contains a magic number: int dataIdx = ((4 + Constants.OBJECT_ID_LENGTH) * p) + 4;
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,GetObjectId,The following statement contains a magic number: int dataIdx = ((4 + Constants.OBJECT_ID_LENGTH) * p) + 4;
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,FindOffset,The following statement contains a magic number: int high = data.Length / (4 + Constants.OBJECT_ID_LENGTH);
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,FindOffset,The following statement contains a magic number: int mid = (low + high) / 2;
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,FindOffset,The following statement contains a magic number: int pos = ((4 + Constants.OBJECT_ID_LENGTH) * mid) + 4;
Magic Number,GitSharp.Core,PackIndexV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,FindOffset,The following statement contains a magic number: int pos = ((4 + Constants.OBJECT_ID_LENGTH) * mid) + 4;
Magic Number,GitSharp.Core,IndexV1Enumerator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV1.cs,InnerNext,The following statement contains a magic number: _levelTwo += Constants.OBJECT_ID_LENGTH + 4;
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: var fanoutRaw = new byte[4 * FANOUT];
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: _fanoutTable[k] = NB.DecodeUInt32(fanoutRaw' k * 4);
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: var bin = new int[intNameLen >> 2];
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: bin[i] = NB.DecodeInt32(raw' i << 2);
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: _offset32[k] = new byte[(int)(bucketCnt * 4)];
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: _crc32[k] = new byte[(int)(bucketCnt * 4)];
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: _offset64 = new byte[o64cnt * 8];
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: PackChecksum = new byte[20];
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,GetObjectId,The following statement contains a magic number: int p4 = p << 2;
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,FindOffset,The following statement contains a magic number: long p = NB.DecodeUInt32(_offset32[levelOne]' levelTwo << 2);
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,FindOffset,The following statement contains a magic number: return NB.DecodeUInt64(_offset64' (8 * (int)(p & ~IS_O64)));
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,FindCRC32,The following statement contains a magic number: return NB.DecodeUInt32(_crc32[levelOne]' levelTwo << 2);
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,BinarySearchLevelTwo,The following statement contains a magic number: var high = (int)((uint)(_offset32[levelOne].Length) >> 2);
Magic Number,GitSharp.Core,PackIndexV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,BinarySearchLevelTwo,The following statement contains a magic number: int mid4 = mid << 2;
Magic Number,GitSharp.Core,EntriesEnumeratorV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,IdBufferBuilder,The following statement contains a magic number: idBuffer.FromRaw(_index._names[_levelOne]' _levelTwo - Constants.OBJECT_ID_LENGTH / 4);
Magic Number,GitSharp.Core,EntriesEnumeratorV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,InnerNext,The following statement contains a magic number: int idx = _levelTwo / (Constants.OBJECT_ID_LENGTH / 4) * 4;
Magic Number,GitSharp.Core,EntriesEnumeratorV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,InnerNext,The following statement contains a magic number: int idx = _levelTwo / (Constants.OBJECT_ID_LENGTH / 4) * 4;
Magic Number,GitSharp.Core,EntriesEnumeratorV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,InnerNext,The following statement contains a magic number: idx = (8 * (int)(offset & ~IS_O64));
Magic Number,GitSharp.Core,EntriesEnumeratorV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexV2.cs,InnerNext,The following statement contains a magic number: _levelTwo += Constants.OBJECT_ID_LENGTH / 4;
Magic Number,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,CreateOldestPossible,The following statement contains a magic number: switch (version)                  {                      case 1:                          if (PackIndexWriterV1.CanStore(oe)) continue;                          version = 2;                  		break;                        case 2:                  		breakLoop = true;                  		break;  				}
Magic Number,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,CreateOldestPossible,The following statement contains a magic number: switch (version)                  {                      case 1:                          if (PackIndexWriterV1.CanStore(oe)) continue;                          version = 2;                  		break;                        case 2:                  		breakLoop = true;                  		break;  				}
Magic Number,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,CreateVersion,The following statement contains a magic number: switch (version)              {                  case 1:                      return new PackIndexWriterV1(dst);                  case 2:                      return new PackIndexWriterV2(dst);                  default:                      throw new ArgumentException("Unsupported pack index version " + version);              }
Magic Number,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,WriteTOC,The following statement contains a magic number: _stream.Write(tmp' 0 ' 4);
Magic Number,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,WriteFanOutTable,The following statement contains a magic number: int[] fanout = new int[256];
Magic Number,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,WriteFanOutTable,The following statement contains a magic number: i < 256
Magic Number,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,WriteFanOutTable,The following statement contains a magic number: _stream.Write(tmp' 0' 4);
Magic Number,GitSharp.Core,PackIndexWriterV1,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriterV1.cs,WriteInternal,The following statement contains a magic number: oe.copyRawTo(tmp' 4);
Magic Number,GitSharp.Core,PackIndexWriterV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriterV2.cs,WriteInternal,The following statement contains a magic number: WriteTOC(2);
Magic Number,GitSharp.Core,PackIndexWriterV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriterV2.cs,WriteCRCs,The following statement contains a magic number: _stream.BaseStream.Write(tmp' 0' 4);
Magic Number,GitSharp.Core,PackIndexWriterV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriterV2.cs,WriteOffset32,The following statement contains a magic number: _stream.BaseStream.Write(tmp' 0' 4);
Magic Number,GitSharp.Core,PackIndexWriterV2,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriterV2.cs,WriteOffset64,The following statement contains a magic number: _stream.BaseStream.Write(tmp' 0' 8);
Magic Number,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,PersonIdent,The following statement contains a magic number: int sp = str.IndexOf(' '' gt + 2);
Magic Number,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,ToExternalString,The following statement contains a magic number: r.Append(When / 1000);
Magic Number,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,appendTimezone,The following statement contains a magic number: int offsetHours = offset / 60;
Magic Number,GitSharp.Core,PersonIdent,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PersonIdent.cs,appendTimezone,The following statement contains a magic number: int offsetMins = offset % 60;
Magic Number,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,MapTree,The following statement contains a magic number: switch (((ObjectType)or.Type))              {                  case ObjectType.Tree:                      return new Tree(this' id' raw);                    case ObjectType.Commit:                      return MapTree(ObjectId.FromString(raw' 5));              }
Magic Number,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,The following statement contains a magic number: switch (revision[i])                  {                      case '^':                          if (refId == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                          }                            if (i + 1 < revision.Length)                          {                              switch (revision[i + 1])                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                        int j;                                      oref = MapObject(refId' null);                                        while (oref is Tag)                                      {                                          var tag = (Tag)oref;                                          refId = tag.Id;                                          oref = MapObject(refId' null);                                      }                                        Commit oCom = (oref as Commit);                                      if (oCom == null)                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                        for (j = i + 1; j < revision.Length; ++j)                                      {                                          if (!Char.IsDigit(revision[j])) break;                                      }                                        var parentnum = new string(revision.ToCharArray(i + 1' j - i - 1));                                        int pnum;                                        try                                      {                                          pnum = Convert.ToInt32(parentnum);                                      }                                      catch (FormatException)                                      {                                          throw new RevisionSyntaxException(revision' "Invalid commit parent number");                                      }                                      if (pnum != 0)                                      {                                          ObjectId[] parents = oCom.ParentIds;                                          if (pnum > parents.Length)                                              refId = null;                                          else                                              refId = parents[pnum - 1];                                      }                                        i = j - 1;                                      break;                                    case '{':                                      int k;                                      string item = null;                                      for (k = i + 2; k < revision.Length; ++k)                                      {                                          if (revision[k] != '}') continue;                                          item = new string(revision.ToCharArray(i + 2' k - i - 2));                                          break;                                      }                                        i = k;                                      if (item != null)                                      {                                          if (item.Equals("tree"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              Treeish oTree = (oref as Treeish);                                              if (oTree != null)                                              {                                                  refId = oTree.TreeId;                                              }                                              else                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Tree);                                              }                                          }                                          else if (item.Equals("commit"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is Commit))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (item.Equals("blob"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is byte[]))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (string.Empty.Equals(item))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                          }                                          else                                          {                                              throw new RevisionSyntaxException(revision);                                          }                                      }                                      else                                      {                                          throw new RevisionSyntaxException(revision);                                      }                                      break;                                    default:                                      oref = MapObject(refId' null);                                      Commit oComm = (oref as Commit);                                      if (oComm != null)                                      {                                          ObjectId[] parents = oComm.ParentIds;                                          refId = parents.Length == 0 ? null : parents[0];                                      }                                      else                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                      break;                              }                          }                          else                          {                              oref = MapObject(refId' null);                              while (oref is Tag)                              {                                  var tag = (Tag)oref;                                  refId = tag.Id;                                  oref = MapObject(refId' null);                              }                                Commit oCom = (oref as Commit);                              if (oCom != null)                              {                                  ObjectId[] parents = oCom.ParentIds;                                  refId = parents.Length == 0 ? null : parents[0];                              }                              else                              {                                  throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                              }                          }                          break;                        case '~':                          if (oref == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                              oref = MapObject(refId' null);                          }                            while (oref is Tag)                          {                              var tag = (Tag)oref;                              refId = tag.Id;                              oref = MapObject(refId' null);                          }                            if (!(oref is Commit))                          {                              throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                          }                            int l;                          for (l = i + 1; l < revision.Length; ++l)                          {                              if (!Char.IsDigit(revision[l]))                                  break;                          }                            var distnum = new string(revision.ToCharArray(i + 1' l - i - 1));                          int dist;                            try                          {                              dist = Convert.ToInt32(distnum);                          }                          catch (FormatException)                          {                              throw new RevisionSyntaxException("Invalid ancestry length"' revision);                          }                          while (dist > 0)                          {                                ObjectId[] parents = ((Commit)oref).ParentIds;                              if (parents.Length == 0)                              {                                  refId = null;                                  break;                              }                              refId = parents[0];                              oref = MapCommit(refId);                              --dist;                          }                          i = l - 1;                          break;                        case '@':                          int m;                          string time = null;                          for (m = i + 2; m < revision.Length; ++m)                          {                              if (revision[m] != '}') continue;                              time = new string(revision.ToCharArray(i + 2' m - i - 2));                              break;                          }                            if (time != null)                          {                              throw new RevisionSyntaxException("reflogs not yet supported by revision parser yet"' revision);                          }                          i = m - 1;                          break;                        default:                          if (refId != null)                          {                              throw new RevisionSyntaxException(revision);                          }                          break;                  }
Magic Number,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,The following statement contains a magic number: switch (revision[i])                  {                      case '^':                          if (refId == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                          }                            if (i + 1 < revision.Length)                          {                              switch (revision[i + 1])                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                        int j;                                      oref = MapObject(refId' null);                                        while (oref is Tag)                                      {                                          var tag = (Tag)oref;                                          refId = tag.Id;                                          oref = MapObject(refId' null);                                      }                                        Commit oCom = (oref as Commit);                                      if (oCom == null)                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                        for (j = i + 1; j < revision.Length; ++j)                                      {                                          if (!Char.IsDigit(revision[j])) break;                                      }                                        var parentnum = new string(revision.ToCharArray(i + 1' j - i - 1));                                        int pnum;                                        try                                      {                                          pnum = Convert.ToInt32(parentnum);                                      }                                      catch (FormatException)                                      {                                          throw new RevisionSyntaxException(revision' "Invalid commit parent number");                                      }                                      if (pnum != 0)                                      {                                          ObjectId[] parents = oCom.ParentIds;                                          if (pnum > parents.Length)                                              refId = null;                                          else                                              refId = parents[pnum - 1];                                      }                                        i = j - 1;                                      break;                                    case '{':                                      int k;                                      string item = null;                                      for (k = i + 2; k < revision.Length; ++k)                                      {                                          if (revision[k] != '}') continue;                                          item = new string(revision.ToCharArray(i + 2' k - i - 2));                                          break;                                      }                                        i = k;                                      if (item != null)                                      {                                          if (item.Equals("tree"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              Treeish oTree = (oref as Treeish);                                              if (oTree != null)                                              {                                                  refId = oTree.TreeId;                                              }                                              else                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Tree);                                              }                                          }                                          else if (item.Equals("commit"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is Commit))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (item.Equals("blob"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is byte[]))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (string.Empty.Equals(item))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                          }                                          else                                          {                                              throw new RevisionSyntaxException(revision);                                          }                                      }                                      else                                      {                                          throw new RevisionSyntaxException(revision);                                      }                                      break;                                    default:                                      oref = MapObject(refId' null);                                      Commit oComm = (oref as Commit);                                      if (oComm != null)                                      {                                          ObjectId[] parents = oComm.ParentIds;                                          refId = parents.Length == 0 ? null : parents[0];                                      }                                      else                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                      break;                              }                          }                          else                          {                              oref = MapObject(refId' null);                              while (oref is Tag)                              {                                  var tag = (Tag)oref;                                  refId = tag.Id;                                  oref = MapObject(refId' null);                              }                                Commit oCom = (oref as Commit);                              if (oCom != null)                              {                                  ObjectId[] parents = oCom.ParentIds;                                  refId = parents.Length == 0 ? null : parents[0];                              }                              else                              {                                  throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                              }                          }                          break;                        case '~':                          if (oref == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                              oref = MapObject(refId' null);                          }                            while (oref is Tag)                          {                              var tag = (Tag)oref;                              refId = tag.Id;                              oref = MapObject(refId' null);                          }                            if (!(oref is Commit))                          {                              throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                          }                            int l;                          for (l = i + 1; l < revision.Length; ++l)                          {                              if (!Char.IsDigit(revision[l]))                                  break;                          }                            var distnum = new string(revision.ToCharArray(i + 1' l - i - 1));                          int dist;                            try                          {                              dist = Convert.ToInt32(distnum);                          }                          catch (FormatException)                          {                              throw new RevisionSyntaxException("Invalid ancestry length"' revision);                          }                          while (dist > 0)                          {                                ObjectId[] parents = ((Commit)oref).ParentIds;                              if (parents.Length == 0)                              {                                  refId = null;                                  break;                              }                              refId = parents[0];                              oref = MapCommit(refId);                              --dist;                          }                          i = l - 1;                          break;                        case '@':                          int m;                          string time = null;                          for (m = i + 2; m < revision.Length; ++m)                          {                              if (revision[m] != '}') continue;                              time = new string(revision.ToCharArray(i + 2' m - i - 2));                              break;                          }                            if (time != null)                          {                              throw new RevisionSyntaxException("reflogs not yet supported by revision parser yet"' revision);                          }                          i = m - 1;                          break;                        default:                          if (refId != null)                          {                              throw new RevisionSyntaxException(revision);                          }                          break;                  }
Magic Number,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,The following statement contains a magic number: switch (revision[i])                  {                      case '^':                          if (refId == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                          }                            if (i + 1 < revision.Length)                          {                              switch (revision[i + 1])                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                        int j;                                      oref = MapObject(refId' null);                                        while (oref is Tag)                                      {                                          var tag = (Tag)oref;                                          refId = tag.Id;                                          oref = MapObject(refId' null);                                      }                                        Commit oCom = (oref as Commit);                                      if (oCom == null)                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                        for (j = i + 1; j < revision.Length; ++j)                                      {                                          if (!Char.IsDigit(revision[j])) break;                                      }                                        var parentnum = new string(revision.ToCharArray(i + 1' j - i - 1));                                        int pnum;                                        try                                      {                                          pnum = Convert.ToInt32(parentnum);                                      }                                      catch (FormatException)                                      {                                          throw new RevisionSyntaxException(revision' "Invalid commit parent number");                                      }                                      if (pnum != 0)                                      {                                          ObjectId[] parents = oCom.ParentIds;                                          if (pnum > parents.Length)                                              refId = null;                                          else                                              refId = parents[pnum - 1];                                      }                                        i = j - 1;                                      break;                                    case '{':                                      int k;                                      string item = null;                                      for (k = i + 2; k < revision.Length; ++k)                                      {                                          if (revision[k] != '}') continue;                                          item = new string(revision.ToCharArray(i + 2' k - i - 2));                                          break;                                      }                                        i = k;                                      if (item != null)                                      {                                          if (item.Equals("tree"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              Treeish oTree = (oref as Treeish);                                              if (oTree != null)                                              {                                                  refId = oTree.TreeId;                                              }                                              else                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Tree);                                              }                                          }                                          else if (item.Equals("commit"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is Commit))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (item.Equals("blob"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is byte[]))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (string.Empty.Equals(item))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                          }                                          else                                          {                                              throw new RevisionSyntaxException(revision);                                          }                                      }                                      else                                      {                                          throw new RevisionSyntaxException(revision);                                      }                                      break;                                    default:                                      oref = MapObject(refId' null);                                      Commit oComm = (oref as Commit);                                      if (oComm != null)                                      {                                          ObjectId[] parents = oComm.ParentIds;                                          refId = parents.Length == 0 ? null : parents[0];                                      }                                      else                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                      break;                              }                          }                          else                          {                              oref = MapObject(refId' null);                              while (oref is Tag)                              {                                  var tag = (Tag)oref;                                  refId = tag.Id;                                  oref = MapObject(refId' null);                              }                                Commit oCom = (oref as Commit);                              if (oCom != null)                              {                                  ObjectId[] parents = oCom.ParentIds;                                  refId = parents.Length == 0 ? null : parents[0];                              }                              else                              {                                  throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                              }                          }                          break;                        case '~':                          if (oref == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                              oref = MapObject(refId' null);                          }                            while (oref is Tag)                          {                              var tag = (Tag)oref;                              refId = tag.Id;                              oref = MapObject(refId' null);                          }                            if (!(oref is Commit))                          {                              throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                          }                            int l;                          for (l = i + 1; l < revision.Length; ++l)                          {                              if (!Char.IsDigit(revision[l]))                                  break;                          }                            var distnum = new string(revision.ToCharArray(i + 1' l - i - 1));                          int dist;                            try                          {                              dist = Convert.ToInt32(distnum);                          }                          catch (FormatException)                          {                              throw new RevisionSyntaxException("Invalid ancestry length"' revision);                          }                          while (dist > 0)                          {                                ObjectId[] parents = ((Commit)oref).ParentIds;                              if (parents.Length == 0)                              {                                  refId = null;                                  break;                              }                              refId = parents[0];                              oref = MapCommit(refId);                              --dist;                          }                          i = l - 1;                          break;                        case '@':                          int m;                          string time = null;                          for (m = i + 2; m < revision.Length; ++m)                          {                              if (revision[m] != '}') continue;                              time = new string(revision.ToCharArray(i + 2' m - i - 2));                              break;                          }                            if (time != null)                          {                              throw new RevisionSyntaxException("reflogs not yet supported by revision parser yet"' revision);                          }                          i = m - 1;                          break;                        default:                          if (refId != null)                          {                              throw new RevisionSyntaxException(revision);                          }                          break;                  }
Magic Number,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,The following statement contains a magic number: switch (revision[i])                  {                      case '^':                          if (refId == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                          }                            if (i + 1 < revision.Length)                          {                              switch (revision[i + 1])                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                        int j;                                      oref = MapObject(refId' null);                                        while (oref is Tag)                                      {                                          var tag = (Tag)oref;                                          refId = tag.Id;                                          oref = MapObject(refId' null);                                      }                                        Commit oCom = (oref as Commit);                                      if (oCom == null)                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                        for (j = i + 1; j < revision.Length; ++j)                                      {                                          if (!Char.IsDigit(revision[j])) break;                                      }                                        var parentnum = new string(revision.ToCharArray(i + 1' j - i - 1));                                        int pnum;                                        try                                      {                                          pnum = Convert.ToInt32(parentnum);                                      }                                      catch (FormatException)                                      {                                          throw new RevisionSyntaxException(revision' "Invalid commit parent number");                                      }                                      if (pnum != 0)                                      {                                          ObjectId[] parents = oCom.ParentIds;                                          if (pnum > parents.Length)                                              refId = null;                                          else                                              refId = parents[pnum - 1];                                      }                                        i = j - 1;                                      break;                                    case '{':                                      int k;                                      string item = null;                                      for (k = i + 2; k < revision.Length; ++k)                                      {                                          if (revision[k] != '}') continue;                                          item = new string(revision.ToCharArray(i + 2' k - i - 2));                                          break;                                      }                                        i = k;                                      if (item != null)                                      {                                          if (item.Equals("tree"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              Treeish oTree = (oref as Treeish);                                              if (oTree != null)                                              {                                                  refId = oTree.TreeId;                                              }                                              else                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Tree);                                              }                                          }                                          else if (item.Equals("commit"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is Commit))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (item.Equals("blob"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is byte[]))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (string.Empty.Equals(item))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                          }                                          else                                          {                                              throw new RevisionSyntaxException(revision);                                          }                                      }                                      else                                      {                                          throw new RevisionSyntaxException(revision);                                      }                                      break;                                    default:                                      oref = MapObject(refId' null);                                      Commit oComm = (oref as Commit);                                      if (oComm != null)                                      {                                          ObjectId[] parents = oComm.ParentIds;                                          refId = parents.Length == 0 ? null : parents[0];                                      }                                      else                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                      break;                              }                          }                          else                          {                              oref = MapObject(refId' null);                              while (oref is Tag)                              {                                  var tag = (Tag)oref;                                  refId = tag.Id;                                  oref = MapObject(refId' null);                              }                                Commit oCom = (oref as Commit);                              if (oCom != null)                              {                                  ObjectId[] parents = oCom.ParentIds;                                  refId = parents.Length == 0 ? null : parents[0];                              }                              else                              {                                  throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                              }                          }                          break;                        case '~':                          if (oref == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                              oref = MapObject(refId' null);                          }                            while (oref is Tag)                          {                              var tag = (Tag)oref;                              refId = tag.Id;                              oref = MapObject(refId' null);                          }                            if (!(oref is Commit))                          {                              throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                          }                            int l;                          for (l = i + 1; l < revision.Length; ++l)                          {                              if (!Char.IsDigit(revision[l]))                                  break;                          }                            var distnum = new string(revision.ToCharArray(i + 1' l - i - 1));                          int dist;                            try                          {                              dist = Convert.ToInt32(distnum);                          }                          catch (FormatException)                          {                              throw new RevisionSyntaxException("Invalid ancestry length"' revision);                          }                          while (dist > 0)                          {                                ObjectId[] parents = ((Commit)oref).ParentIds;                              if (parents.Length == 0)                              {                                  refId = null;                                  break;                              }                              refId = parents[0];                              oref = MapCommit(refId);                              --dist;                          }                          i = l - 1;                          break;                        case '@':                          int m;                          string time = null;                          for (m = i + 2; m < revision.Length; ++m)                          {                              if (revision[m] != '}') continue;                              time = new string(revision.ToCharArray(i + 2' m - i - 2));                              break;                          }                            if (time != null)                          {                              throw new RevisionSyntaxException("reflogs not yet supported by revision parser yet"' revision);                          }                          i = m - 1;                          break;                        default:                          if (refId != null)                          {                              throw new RevisionSyntaxException(revision);                          }                          break;                  }
Magic Number,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,The following statement contains a magic number: switch (revision[i])                  {                      case '^':                          if (refId == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                          }                            if (i + 1 < revision.Length)                          {                              switch (revision[i + 1])                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                        int j;                                      oref = MapObject(refId' null);                                        while (oref is Tag)                                      {                                          var tag = (Tag)oref;                                          refId = tag.Id;                                          oref = MapObject(refId' null);                                      }                                        Commit oCom = (oref as Commit);                                      if (oCom == null)                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                        for (j = i + 1; j < revision.Length; ++j)                                      {                                          if (!Char.IsDigit(revision[j])) break;                                      }                                        var parentnum = new string(revision.ToCharArray(i + 1' j - i - 1));                                        int pnum;                                        try                                      {                                          pnum = Convert.ToInt32(parentnum);                                      }                                      catch (FormatException)                                      {                                          throw new RevisionSyntaxException(revision' "Invalid commit parent number");                                      }                                      if (pnum != 0)                                      {                                          ObjectId[] parents = oCom.ParentIds;                                          if (pnum > parents.Length)                                              refId = null;                                          else                                              refId = parents[pnum - 1];                                      }                                        i = j - 1;                                      break;                                    case '{':                                      int k;                                      string item = null;                                      for (k = i + 2; k < revision.Length; ++k)                                      {                                          if (revision[k] != '}') continue;                                          item = new string(revision.ToCharArray(i + 2' k - i - 2));                                          break;                                      }                                        i = k;                                      if (item != null)                                      {                                          if (item.Equals("tree"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              Treeish oTree = (oref as Treeish);                                              if (oTree != null)                                              {                                                  refId = oTree.TreeId;                                              }                                              else                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Tree);                                              }                                          }                                          else if (item.Equals("commit"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is Commit))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (item.Equals("blob"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is byte[]))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (string.Empty.Equals(item))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                          }                                          else                                          {                                              throw new RevisionSyntaxException(revision);                                          }                                      }                                      else                                      {                                          throw new RevisionSyntaxException(revision);                                      }                                      break;                                    default:                                      oref = MapObject(refId' null);                                      Commit oComm = (oref as Commit);                                      if (oComm != null)                                      {                                          ObjectId[] parents = oComm.ParentIds;                                          refId = parents.Length == 0 ? null : parents[0];                                      }                                      else                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                      break;                              }                          }                          else                          {                              oref = MapObject(refId' null);                              while (oref is Tag)                              {                                  var tag = (Tag)oref;                                  refId = tag.Id;                                  oref = MapObject(refId' null);                              }                                Commit oCom = (oref as Commit);                              if (oCom != null)                              {                                  ObjectId[] parents = oCom.ParentIds;                                  refId = parents.Length == 0 ? null : parents[0];                              }                              else                              {                                  throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                              }                          }                          break;                        case '~':                          if (oref == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                              oref = MapObject(refId' null);                          }                            while (oref is Tag)                          {                              var tag = (Tag)oref;                              refId = tag.Id;                              oref = MapObject(refId' null);                          }                            if (!(oref is Commit))                          {                              throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                          }                            int l;                          for (l = i + 1; l < revision.Length; ++l)                          {                              if (!Char.IsDigit(revision[l]))                                  break;                          }                            var distnum = new string(revision.ToCharArray(i + 1' l - i - 1));                          int dist;                            try                          {                              dist = Convert.ToInt32(distnum);                          }                          catch (FormatException)                          {                              throw new RevisionSyntaxException("Invalid ancestry length"' revision);                          }                          while (dist > 0)                          {                                ObjectId[] parents = ((Commit)oref).ParentIds;                              if (parents.Length == 0)                              {                                  refId = null;                                  break;                              }                              refId = parents[0];                              oref = MapCommit(refId);                              --dist;                          }                          i = l - 1;                          break;                        case '@':                          int m;                          string time = null;                          for (m = i + 2; m < revision.Length; ++m)                          {                              if (revision[m] != '}') continue;                              time = new string(revision.ToCharArray(i + 2' m - i - 2));                              break;                          }                            if (time != null)                          {                              throw new RevisionSyntaxException("reflogs not yet supported by revision parser yet"' revision);                          }                          i = m - 1;                          break;                        default:                          if (refId != null)                          {                              throw new RevisionSyntaxException(revision);                          }                          break;                  }
Magic Number,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,Resolve,The following statement contains a magic number: switch (revision[i])                  {                      case '^':                          if (refId == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                          }                            if (i + 1 < revision.Length)                          {                              switch (revision[i + 1])                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                        int j;                                      oref = MapObject(refId' null);                                        while (oref is Tag)                                      {                                          var tag = (Tag)oref;                                          refId = tag.Id;                                          oref = MapObject(refId' null);                                      }                                        Commit oCom = (oref as Commit);                                      if (oCom == null)                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                        for (j = i + 1; j < revision.Length; ++j)                                      {                                          if (!Char.IsDigit(revision[j])) break;                                      }                                        var parentnum = new string(revision.ToCharArray(i + 1' j - i - 1));                                        int pnum;                                        try                                      {                                          pnum = Convert.ToInt32(parentnum);                                      }                                      catch (FormatException)                                      {                                          throw new RevisionSyntaxException(revision' "Invalid commit parent number");                                      }                                      if (pnum != 0)                                      {                                          ObjectId[] parents = oCom.ParentIds;                                          if (pnum > parents.Length)                                              refId = null;                                          else                                              refId = parents[pnum - 1];                                      }                                        i = j - 1;                                      break;                                    case '{':                                      int k;                                      string item = null;                                      for (k = i + 2; k < revision.Length; ++k)                                      {                                          if (revision[k] != '}') continue;                                          item = new string(revision.ToCharArray(i + 2' k - i - 2));                                          break;                                      }                                        i = k;                                      if (item != null)                                      {                                          if (item.Equals("tree"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              Treeish oTree = (oref as Treeish);                                              if (oTree != null)                                              {                                                  refId = oTree.TreeId;                                              }                                              else                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Tree);                                              }                                          }                                          else if (item.Equals("commit"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is Commit))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (item.Equals("blob"))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                              if (!(oref is byte[]))                                              {                                                  throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                              }                                          }                                          else if (string.Empty.Equals(item))                                          {                                              oref = MapObject(refId' null);                                              while (oref is Tag)                                              {                                                  var t = (Tag)oref;                                                  refId = t.Id;                                                  oref = MapObject(refId' null);                                              }                                          }                                          else                                          {                                              throw new RevisionSyntaxException(revision);                                          }                                      }                                      else                                      {                                          throw new RevisionSyntaxException(revision);                                      }                                      break;                                    default:                                      oref = MapObject(refId' null);                                      Commit oComm = (oref as Commit);                                      if (oComm != null)                                      {                                          ObjectId[] parents = oComm.ParentIds;                                          refId = parents.Length == 0 ? null : parents[0];                                      }                                      else                                      {                                          throw new IncorrectObjectTypeException(refId' ObjectType.Commit);                                      }                                      break;                              }                          }                          else                          {                              oref = MapObject(refId' null);                              while (oref is Tag)                              {                                  var tag = (Tag)oref;                                  refId = tag.Id;                                  oref = MapObject(refId' null);                              }                                Commit oCom = (oref as Commit);                              if (oCom != null)                              {                                  ObjectId[] parents = oCom.ParentIds;                                  refId = parents.Length == 0 ? null : parents[0];                              }                              else                              {                                  throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                              }                          }                          break;                        case '~':                          if (oref == null)                          {                              var refstr = new string(revision.ToCharArray(0' i));                              refId = ResolveSimple(refstr);                              if (refId == null) return null;                              oref = MapObject(refId' null);                          }                            while (oref is Tag)                          {                              var tag = (Tag)oref;                              refId = tag.Id;                              oref = MapObject(refId' null);                          }                            if (!(oref is Commit))                          {                              throw new IncorrectObjectTypeException(refId' Constants.TYPE_COMMIT);                          }                            int l;                          for (l = i + 1; l < revision.Length; ++l)                          {                              if (!Char.IsDigit(revision[l]))                                  break;                          }                            var distnum = new string(revision.ToCharArray(i + 1' l - i - 1));                          int dist;                            try                          {                              dist = Convert.ToInt32(distnum);                          }                          catch (FormatException)                          {                              throw new RevisionSyntaxException("Invalid ancestry length"' revision);                          }                          while (dist > 0)                          {                                ObjectId[] parents = ((Commit)oref).ParentIds;                              if (parents.Length == 0)                              {                                  refId = null;                                  break;                              }                              refId = parents[0];                              oref = MapCommit(refId);                              --dist;                          }                          i = l - 1;                          break;                        case '@':                          int m;                          string time = null;                          for (m = i + 2; m < revision.Length; ++m)                          {                              if (revision[m] != '}') continue;                              time = new string(revision.ToCharArray(i + 2' m - i - 2));                              break;                          }                            if (time != null)                          {                              throw new RevisionSyntaxException("reflogs not yet supported by revision parser yet"' revision);                          }                          i = m - 1;                          break;                        default:                          if (refId != null)                          {                              throw new RevisionSyntaxException(revision);                          }                          break;                  }
Magic Number,GitSharp.Core,Tag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tag.cs,Tag,The following statement contains a magic number: Id = ObjectId.FromString(raw' 7);
Magic Number,GitSharp.Core,Tag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tag.cs,Tag,The following statement contains a magic number: refName = refName.Substring(10);
Magic Number,GitSharp.Core,Tag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tag.cs,decode,The following statement contains a magic number: Id = ObjectId.FromString(n.Substring(7));
Magic Number,GitSharp.Core,Tag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tag.cs,decode,The following statement contains a magic number: char[] readBuf = new char[2048];
Magic Number,GitSharp.Core,TextProgressMonitor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TextProgressMonitor.cs,Update,The following statement contains a magic number: !_output && ((DateTime.Now - _taskBeganAt).TotalMilliseconds < 500)
Magic Number,GitSharp.Core,TextProgressMonitor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TextProgressMonitor.cs,Display,The following statement contains a magic number: m.Length < 25
Magic Number,GitSharp.Core,Tree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Tree.cs,ReadTree,The following statement contains a magic number: mode <<= 3;
Magic Number,GitSharp.Core,TreeVisitorWithCurrentDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeVisitorWithCurrentDirectory.cs,TreeVisitorWithCurrentDirectory,The following statement contains a magic number: stack = new Stack<DirectoryInfo>(16);
Magic Number,GitSharp.Core,UnpackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\UnpackedObjectLoader.cs,UnpackedObjectLoader,The following statement contains a magic number: var hdr = new byte[64];
Magic Number,GitSharp.Core,UnpackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\UnpackedObjectLoader.cs,UnpackedObjectLoader,The following statement contains a magic number: avail < 5
Magic Number,GitSharp.Core,UnpackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\UnpackedObjectLoader.cs,UnpackedObjectLoader,The following statement contains a magic number: fb == 0x78 && (((fb << 8) | compressed[1] & 0xff) % 31) == 0
Magic Number,GitSharp.Core,UnpackedObjectLoader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\UnpackedObjectLoader.cs,UnpackedObjectLoader,The following statement contains a magic number: fb == 0x78 && (((fb << 8) | compressed[1] & 0xff) % 31) == 0
Magic Number,GitSharp.Core,WindowCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCache.cs,Bits,The following statement contains a magic number: newSize < 4096
Magic Number,GitSharp.Core,WindowCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCache.cs,TableSize,The following statement contains a magic number: return (int) Math.Min(5*(limit/wsz)/2' 2000000000);
Magic Number,GitSharp.Core,WindowCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCache.cs,TableSize,The following statement contains a magic number: return (int) Math.Min(5*(limit/wsz)/2' 2000000000);
Magic Number,GitSharp.Core,WindowCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCache.cs,TableSize,The following statement contains a magic number: return (int) Math.Min(5*(limit/wsz)/2' 2000000000);
Magic Number,GitSharp.Core,WindowCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCache.cs,LockCount,The following statement contains a magic number: return Math.Max(cfg.PackedGitOpenFiles' 32);
Magic Number,GitSharp.Core,WindowCacheConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: PackedGitOpenFiles = 128;
Magic Number,GitSharp.Core,WindowCacheConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: PackedGitLimit = 10 * Mb;
Magic Number,GitSharp.Core,WindowCacheConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: PackedGitWindowSize = 8 * Kb;
Magic Number,GitSharp.Core,WindowCacheConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: DeltaBaseCacheLimit = 10 * Mb;
Magic Number,GitSharp.Core,PackLock,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackLock.cs,PackLock,The following statement contains a magic number: string p = packFile.DirectoryName + Path.DirectorySeparatorChar + n.Slice(0' n.Length - 5) + ".keep";
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,PackWriter,The following statement contains a magic number: _buf = new byte[16384];
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteHeader,The following statement contains a magic number: Array.Copy(Constants.PACK_SIGNATURE' 0' _buf' 0' 4);
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteHeader,The following statement contains a magic number: NB.encodeInt32(_buf' 4' PackVersionGenerated);
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteHeader,The following statement contains a magic number: NB.encodeInt32(_buf' 8' getObjectsNumber());
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteHeader,The following statement contains a magic number: _pos.Write(_buf' 0' 12);
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteDeltaObjectReuse,The following statement contains a magic number: (offsetDiff >>= 7) > 0
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteObjectHeader,The following statement contains a magic number: var nextLength = (long)(((ulong)dataLength) >> 4);
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteObjectHeader,The following statement contains a magic number: _buf[size++] = (byte)((nextLength > 0 ? (byte)0x80 : (byte)0x00) | (byte)(objectType << 4) | (byte)(dataLength & 0x0F));
Magic Number,GitSharp.Core,PackWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackWriter.cs,WriteObjectHeader,The following statement contains a magic number: nextLength = (long)(((ulong)nextLength) >> 7);
Magic Number,GitSharp.Core,CachedObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\CachedObjectDirectory.cs,CachedObjectDirectory,The following statement contains a magic number: d.Length != 2
Magic Number,GitSharp.Core,CachedObjectDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\CachedObjectDirectory.cs,CachedObjectDirectory,The following statement contains a magic number: e.Length != Constants.OBJECT_ID_STRING_LENGTH - 2
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,Linux,The following statement contains a magic number: string platformType = str.Substring(5'str.Length-13);
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,Linux,The following statement contains a magic number: string platformType = str.Substring(5'str.Length-13);
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetFedoraPlatform,The following statement contains a magic number: obj.Version = lines[0].Substring(pt+8' pt2-1).Trim();
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetMandrivaPlatform,The following statement contains a magic number: obj.Version = lines[0].Substring(pt+8' pt2-1).Trim();
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetRedHatPlatform,The following statement contains a magic number: obj.Version = lines[0].Substring(pt+8' pt2 - 1 - pt + 8).Trim();
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetRedHatPlatform,The following statement contains a magic number: obj.Version = lines[0].Substring(pt+8' pt2 - 1 - pt + 8).Trim();
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetSusePlatform,The following statement contains a magic number: obj.Version = lines[1].Substring(11' lines[1].Length - 11);
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetSusePlatform,The following statement contains a magic number: obj.Version = lines[1].Substring(11' lines[1].Length - 11);
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetUbuntuPlatform,The following statement contains a magic number: int pt1 = lines[2].IndexOf("=");
Magic Number,GitSharp.Core,Linux,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Linux.cs,GetUbuntuPlatform,The following statement contains a magic number: obj.Edition = lines[2].Substring(pt1+1).Trim();
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following statement contains a magic number: switch (os.Platform)  			{  				case PlatformID.Win32Windows:  					switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}  					  					break;  				case PlatformID.Win32NT:  					switch (os.Version.Major)  					{  						case 3:  							ClassName = "Windows.NT";  							PlatformSubType = "NT";  							Edition = "3.51";  							break;  						case 4:  							switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}  							break;  						case 5:  							switch (os.Version.Minor)  							{  								case 0:  									switch (osvi.wSuiteMask)  									{  										case SuiteVersion.DataCenter:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Data Center";  											break;  										case SuiteVersion.Enterprise:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Advanced";  											break;  										default:  											ClassName = "Windows.v2000";  											PlatformSubType = "2000";  											Edition = "Standard";  											break;  									}  									break;  								case 1:  									if (osvi.wSuiteMask == SuiteVersion.Personal)  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional";  									}  									else  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Home";  									}  									break;  								case 2:  									if ((osvi.wProductType == NTVersion.Workstation) &&  									    (sysInfo.processorArchitecture == ProcessorArchitecture.AMD64))  									{  										ClassName = "Windows.XP";  										PlatformSubType = "XP";  										Edition = "Professional x64";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         (GetSystemMetrics(SystemMetrics.ServerR2) == 0) &&  									         (osvi.wSuiteMask == SuiteVersion.Enterprise))  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 Enterprise";  									}  									else if ((osvi.wProductType == NTVersion.Server) &&  									         GetSystemMetrics(SystemMetrics.ServerR2) != 0)  									{  										ClassName = "Windows.v2003";  										PlatformSubType = "Server";  										Edition = "2003 R2";  									}  									else  									{  										switch (osvi.wSuiteMask)  										{  											case SuiteVersion.DataCenter:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Data Center";  												break;  											case SuiteVersion.Blade:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Web Edition";  												break;  											case SuiteVersion.WHServer:  												ClassName = "Windows.v2003";  												PlatformSubType = "2003";  												Edition = "Home Server";  												break;  											default:  												ClassName = "Windows.v2003";  												PlatformSubType = "Server";  												Edition = "2003 Standard";  												break;  										}  									}  									break;  							}  							break;  						case 6:  							Win32ProductInfo ospi = new Win32ProductInfo();  							ospi.dwOSProductInfoSize = Marshal.SizeOf(ospi);  							ospi.dwOSMajorVersion = os.Version.Major;  							ospi.dwOSMinorVersion = os.Version.Minor;  							ospi.dwSpMajorVersion = 0;  							ospi.dwSpMinorVersion = 0;  							  							GetProductInfo(ospi);  							Version = Version+"."+ospi.dwOSEdition;  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.wProductType == NTVersion.Workstation)  									{  										// Vista Detection  										switch (ospi.dwOSEdition)  										{  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  											case ProductType.Ultimate: //    1  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate Edition";  												break;  											case ProductType.HomeBasic: // 2  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic Edition";  												break;  											case ProductType.HomePremium: // 3  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium Edition";  												break;  											case ProductType.Enterprise: // 4  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise Edition";  												break;  											case ProductType.HomeBasicN: // 5  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Basic N Edition (EU Only)";  												break;  											case ProductType.Business: // 6  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business Edition";  												break;  											case ProductType.Starter:// B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Starter Edition";  												break;  											case ProductType.BusinessN: // 10  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Business N Edition (EU Only)";  												break;  											case ProductType.HomePremiumN: // 1A  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Home Premium N Edition (EU Only)";  												break;  											case ProductType.EnterpriseN: // 1B  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Enterprise N Edition (EU Only)";  												break;  											case ProductType.UltimateN: // 1C  												ClassName = "Windows.Vista";  												PlatformSubType = "Vista";  												Edition = "Ultimate N Edition (EU Only)";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "Vista";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "Vista";  												Edition = "is not defined!";  												break;  										}  									}  									else  									{  										switch (ospi.dwOSEdition)  										{  												//Windows 2008 Detection  												  											case ProductType.Undefined:  												ClassName = "Windows.Undefined";  												PlatformSubType = "2008";  												Edition = "is not defined!";  												break;  											case ProductType.StandardServer: // 7  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server";  												break;  											case ProductType.DataCenterServer://8  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server";  												break;  											case ProductType.SmallBusinessServer://9  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server";  												break;  											case ProductType.EnterpriseServer:// A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server";  												break;  											case ProductType.DataCenterServerCore: // C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core";  												break;  											case ProductType.StandardServerCore: // D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core";  												break;  											case ProductType.EnterpriseServerCore: // E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core";  												break;  											case ProductType.EnterpriseServerIA64: // F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server IA64";  												break;  											case ProductType.WebServer: // 11  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server";  												break;  											case ProductType.ClusterServer: // 12  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Cluster Server";  												break;  											case ProductType.HomeServer: // 13  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Server";  												break;  											case ProductType.StorageExpressServer: // 14  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server";  												break;  											case ProductType.StorageStandardServer: // 15  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server";  												break;  											case ProductType.StorageWorkgroupServer: // 16  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server";  												break;  											case ProductType.StorageEnterpriseServer: // 17  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server";  												break;  											case ProductType.ServerForSmallBusiness: // 18  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Businesses";  												break;  											case ProductType.SmallBusinessServerPremium: // 19  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Premium";  												break;  											case ProductType.WebServerCore: // 1D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Web Server Core";  												break;  											case ProductType.MediumBusinessServerManagement: // 1E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Management";  												break;  											case ProductType.MediumBusinessServerSecurity: // 1F  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Security";  												break;  											case ProductType.MediumBusinessServerMessaging: // 20  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Medium Business Server Messaging";  												break;  											case ProductType.SmallBusinessServerPrime: // 21  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Small Business Server Prime";  												break;  											case ProductType.HomePremiumServer: // 22  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Home Premium Server";  												break;  											case ProductType.ServerForSmallBusinessV: // 23  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Server for Small Business (Hyper-V)";  												break;  											case ProductType.StandardServerV: // 24  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerV: // 25  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server (Hyper-V)";  												break;  											case ProductType.EnterpriseServerV: // 26  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server (Hyper-V)";  												break;  											case ProductType.DataCenterServerCoreV: // 27  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Data Center Server Core (Hyper-V)";  												break;  											case ProductType.StandardServerCoreV: // 28  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Standard Server Core (Hyper-V)";  												break;  											case ProductType.EnterpriseServerCoreV: // 29  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Enterprise Server Core (Hyper-V)";  												break;  											case ProductType.HyperV: // 2A  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "(Hyper-V)";  												break;  											case ProductType.StorageExpressServerCore: // 2B  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Express Server Core";  												break;  											case ProductType.StorageStandardServerCore: // 2C  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Standard Server Core";  												break;  											case ProductType.StorageWorkgroupServerCore: // 2D  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Workgroup Server Core";  												break;  											case ProductType.StorageEnterpriseServerCore: // 2E  												ClassName = "Windows.v2008";  												PlatformSubType = "2008";  												Edition = "Storage Enterprise Server Core";  												break;  											case ProductType.Unlicensed: // 0xABCDABCD  												ClassName = "Windows.Unlicensed";  												PlatformSubType = "2008";  												Edition = "Unlicensed";  												break;  											default:  												ClassName = "Windows.Unknown";  												PlatformSubType = "2008";  												Edition = "is unknown!";  												break;  										}  									}  									break;  								case 1:  									switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}  									break;  							} //End os.Version.Minor  							break;  					} // End os.Version.Major  					break;  			}
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,delete,The following statement contains a magic number: int levels = levelsIn(name) - 2;
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,scanRef,The following statement contains a magic number: buf = IO.ReadFully(path' 4096);
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,scanRef,The following statement contains a magic number: n < 6
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,scanRef,The following statement contains a magic number: string target = RawParseUtils.decode(buf' 5' n);
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,isSymRef,The following statement contains a magic number: n < 6
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,isSymRef,The following statement contains a magic number: return buf[0] == 'r' //                     && buf[1] == 'e' //                     && buf[2] == 'f' //                     && buf[3] == ':' //                     && buf[4] == ' ';
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,isSymRef,The following statement contains a magic number: return buf[0] == 'r' //                     && buf[1] == 'e' //                     && buf[2] == 'f' //                     && buf[3] == ':' //                     && buf[4] == ' ';
Magic Number,GitSharp.Core,RefDirectory,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectory.cs,isSymRef,The following statement contains a magic number: return buf[0] == 'r' //                     && buf[1] == 'e' //                     && buf[2] == 'f' //                     && buf[3] == ':' //                     && buf[4] == ' ';
Magic Number,GitSharp.Core,RefDirectoryRename,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RefDirectoryRename.cs,renameLog,The following statement contains a magic number: int levels = RefDirectory.levelsIn(src.getName()) - 2;
Magic Number,GitSharp.Core.Diff,DiffFormatter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\DiffFormatter.cs,DiffFormatter,The following statement contains a magic number: setContext(3);
Magic Number,GitSharp.Core.Diff,DiffFormatter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\DiffFormatter.cs,CombineA,The following statement contains a magic number: return e[i].BeginA - e[i - 1].EndA <= 2 * _context;
Magic Number,GitSharp.Core.Diff,DiffFormatter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\DiffFormatter.cs,CombineB,The following statement contains a magic number: return e[i].BeginB - e[i - 1].EndB <= 2 * _context;
Magic Number,GitSharp.Core.Diff,RawText,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\RawText.cs,size,The following statement contains a magic number: return lines.size() - 2;
Magic Number,GitSharp.Core.Diff,RawText,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\RawText.cs,writeLine,The following statement contains a magic number: int end = lines.get(i + 2);
Magic Number,GitSharp.Core.Diff,RawText,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\RawText.cs,HashLine,The following statement contains a magic number: int hash = 5381;
Magic Number,GitSharp.Core.Diff,RawText,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\RawText.cs,HashLine,The following statement contains a magic number: hash = (hash << 5) ^ (raw[ptr] & 0xff);
Magic Number,GitSharp.Core.Diff,EditPaths,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\MyersDiff.cs,getIndex,The following statement contains a magic number: ((d + k - middleK) % 2) == 1
Magic Number,GitSharp.Core.Diff,EditPaths,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\MyersDiff.cs,getIndex,The following statement contains a magic number: return (d + k - middleK) / 2;
Magic Number,GitSharp.Core.Diff,EditPaths,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\MyersDiff.cs,newSnake,The following statement contains a magic number: long ret = ((long)x) << 32;
Magic Number,GitSharp.Core.Diff,EditPaths,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\MyersDiff.cs,snake2x,The following statement contains a magic number: return (int)((ulong)snake >> 32);
Magic Number,GitSharp.Core.Diff,ForwardEditPaths,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\MyersDiff.cs,meets,The following statement contains a magic number: ((d - 1 + k - _middleEdit.backward.middleK) % 2) == 1
Magic Number,GitSharp.Core.Diff,BackwardEditPaths,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Diff\MyersDiff.cs,meets,The following statement contains a magic number: ((d + k - _middleEdit.forward.middleK) % 2) == 1
Magic Number,GitSharp.Core.DirectoryCache,BaseDirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\BaseDirCacheEditor.cs,FastAdd,The following statement contains a magic number: var n = new DirCacheEntry[(_entryCnt + 16) * 3 / 2];
Magic Number,GitSharp.Core.DirectoryCache,BaseDirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\BaseDirCacheEditor.cs,FastAdd,The following statement contains a magic number: var n = new DirCacheEntry[(_entryCnt + 16) * 3 / 2];
Magic Number,GitSharp.Core.DirectoryCache,BaseDirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\BaseDirCacheEditor.cs,FastAdd,The following statement contains a magic number: var n = new DirCacheEntry[(_entryCnt + 16) * 3 / 2];
Magic Number,GitSharp.Core.DirectoryCache,BaseDirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\BaseDirCacheEditor.cs,FastKeep,The following statement contains a magic number: int m1 = (_entryCnt + 16) * 3 / 2;
Magic Number,GitSharp.Core.DirectoryCache,BaseDirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\BaseDirCacheEditor.cs,FastKeep,The following statement contains a magic number: int m1 = (_entryCnt + 16) * 3 / 2;
Magic Number,GitSharp.Core.DirectoryCache,BaseDirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\BaseDirCacheEditor.cs,FastKeep,The following statement contains a magic number: int m1 = (_entryCnt + 16) * 3 / 2;
Magic Number,GitSharp.Core.DirectoryCache,BaseDirCacheEditor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\BaseDirCacheEditor.cs,Replace,The following statement contains a magic number: _entryCnt < _entries.Length / 2
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,builder,The following statement contains a magic number: return new DirCacheBuilder(this' _entryCnt + 16);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,editor,The following statement contains a magic number: return new DirCacheEditor(this' _entryCnt + 16);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: var hdr = new byte[20];
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: IO.ReadFully(inStream' hdr' 0' 12);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: md.Update(hdr' 0' 12);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: int ver = NB.DecodeInt32(hdr' 4);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: ver != 2
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: _entryCnt = NB.DecodeInt32(hdr' 8);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: IO.ReadFully(inStream' hdr' 0' 20);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: md.Update(hdr' 0' 8);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: IO.skipFully(inStream' 8);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,ReadFrom,The following statement contains a magic number: long sz = NB.decodeUInt32(hdr' 4);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,skipOptionalExtension,The following statement contains a magic number: byte[] b = new byte[4096];
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,formatExtensionName,The following statement contains a magic number: return "'" + Charset.forName("ISO-8859-1").GetString(hdr' 0' 4) + "'";
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,WriteTo,The following statement contains a magic number: var tmp = new byte[128];
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.encodeInt32(tmp' 4' /* version */2);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.encodeInt32(tmp' 4' /* version */2);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.encodeInt32(tmp' 8' _entryCnt);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,WriteTo,The following statement contains a magic number: dos.Write(tmp' 0' 12);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.encodeInt32(tmp' 4' (int)bb.Length);
Magic Number,GitSharp.Core.DirectoryCache,DirCache,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCache.cs,WriteTo,The following statement contains a magic number: dos.Write(tmp' 0' 8);
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: stage < 0 || 3 < stage
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: int flags = ((stage & 0x3) << 12);
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,write,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,write,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,mightBeRacilyClean,The following statement contains a magic number: return smudge_ns <= NB.DecodeInt32(_info' @base + 4) / 1000000;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,mightBeRacilyClean,The following statement contains a magic number: return smudge_ns <= NB.DecodeInt32(_info' @base + 4) / 1000000;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,smudgeRacilyClean,The following statement contains a magic number: _info.Fill(@base' @base + 8' (byte)127);
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,smudgeRacilyClean,The following statement contains a magic number: _info.Fill(@base' @base + 8' (byte)127);
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,getStage,The following statement contains a magic number: return (int)((uint)(_info[_infoOffset + PFlags]) >> 4) & 0x3;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DecodeTimestamp,The following statement contains a magic number: int ms = NB.DecodeInt32(_info' @base + 4) / 1000000;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DecodeTimestamp,The following statement contains a magic number: int ms = NB.DecodeInt32(_info' @base + 4) / 1000000;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,DecodeTimestamp,The following statement contains a magic number: return 1000L * sec + ms;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,EncodeTimestamp,The following statement contains a magic number: NB.encodeInt32(_info' @base' (int)(when / 1000));
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,EncodeTimestamp,The following statement contains a magic number: NB.encodeInt32(_info' @base + 4' ((int)(when % 1000)) * 1000000);
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,EncodeTimestamp,The following statement contains a magic number: NB.encodeInt32(_info' @base + 4' ((int)(when % 1000)) * 1000000);
Magic Number,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,EncodeTimestamp,The following statement contains a magic number: NB.encodeInt32(_info' @base + 4' ((int)(when % 1000)) * 1000000);
Magic Number,GitSharp.Core.DirectoryCache,DirCacheTree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheTree.cs,ComputeSize,The following statement contains a magic number: size += Constants.OBJECT_ID_LENGTH + 2;
Magic Number,GitSharp.Core.DirectoryCache,DirCacheTree,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheTree.cs,ComputeSize,The following statement contains a magic number: size += Constants.OBJECT_ID_LENGTH + 2;
Magic Number,GitSharp.Core.Exceptions,ExceptionExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Exceptions\ExceptionExtensions.cs,PrintRecursive,The following statement contains a magic number: var stars = new string('*'' 80);
Magic Number,GitSharp.Core.Exceptions,ExceptionExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Exceptions\ExceptionExtensions.cs,PrintRecursive,The following statement contains a magic number: sb.AppendLine(indent + new string('-'' 80));
Magic Number,GitSharp.Core.Exceptions,ExceptionExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Exceptions\ExceptionExtensions.cs,PrintRecursive,The following statement contains a magic number: parts.Length == 2
Magic Number,GitSharp.Core.Exceptions,ExceptionExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Exceptions\ExceptionExtensions.cs,PrintRecursive,The following statement contains a magic number: parts.Length == 2
Magic Number,GitSharp.Core.FnMatch,FileNameMatcher,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FnMatch\FileNameMatcher.cs,CreateHeadsStartValues,The following statement contains a magic number: IList<IHead> nextHeadsSuggestion = new List<IHead>(2) { LastHead.Instance };
Magic Number,GitSharp.Core.FnMatch,FileNameMatcher,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FnMatch\FileNameMatcher.cs,FindGroupEnd,The following statement contains a magic number: int firstValidEndBracketIndex = indexOfStartBracket + 2;
Magic Number,GitSharp.Core.FnMatch,FileNameMatcher,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FnMatch\FileNameMatcher.cs,FindGroupEnd,The following statement contains a magic number: int classEndIndex = pattern.IndexOf(classEnd' classStartIndex + 2);
Magic Number,GitSharp.Core.FnMatch,FileNameMatcher,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FnMatch\FileNameMatcher.cs,FindGroupEnd,The following statement contains a magic number: firstValidCharClassIndex = classEndIndex + 2;
Magic Number,GitSharp.Core.FnMatch,GroupHead,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FnMatch\GroupHead.cs,GroupHead,The following statement contains a magic number: char end = characterClass[2];
Magic Number,GitSharp.Core.FnMatch,GroupHead,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FnMatch\GroupHead.cs,GroupHead,The following statement contains a magic number: characterClass.Length == 3 && characterClass[1] == '-'
Magic Number,GitSharp.Core.Merge,ThreeWayMerger,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\ThreeWayMerger.cs,Merge,The following statement contains a magic number: return tips.Length != 2 ? false : base.Merge(tips);
Magic Number,GitSharp.Core.Merge,MergeAlgorithm,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\MergeAlgorithm.cs,merge,The following statement contains a magic number: List<Sequence> sequences = new List<Sequence>(3);
Magic Number,GitSharp.Core.Merge,MergeFormatter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\MergeFormatter.cs,formatMerge,The following statement contains a magic number: bool threeWayMerge = (res.getSequences().Count == 3);
Magic Number,GitSharp.Core.Merge,MergeFormatter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Merge\MergeFormatter.cs,formatMerge,The following statement contains a magic number: var names = new List<String>(3);
Magic Number,GitSharp.Core.RevWalk,Block,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\BlockObjQueue.cs,resetToMiddle,The following statement contains a magic number: HeadIndex = TailIndex = BLOCK_SIZE / 2;
Magic Number,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,parseCanonical,The following statement contains a magic number: idBuffer.FromString(raw' 5);
Magic Number,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,parseCanonical,The following statement contains a magic number: int ptr = 46;
Magic Number,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,parseCanonical,The following statement contains a magic number: idBuffer.FromString(raw' ptr + 7);
Magic Number,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,parseCanonical,The following statement contains a magic number: ptr += 48;
Magic Number,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,GetFooterLines,The following statement contains a magic number: var r = new List<FooterLine>(4);
Magic Number,GitSharp.Core.RevWalk,RevCommit,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevCommit.cs,GetFooterLines,The following statement contains a magic number: int keyStart = ptr + 2;
Magic Number,GitSharp.Core.RevWalk,RevObjectList<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevObjectList.cs,get,The following statement contains a magic number: index >> s.Shift >= 1024
Magic Number,GitSharp.Core.RevWalk,RevTag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevTag.cs,parseCanonical,The following statement contains a magic number: var pos = new MutableInteger { value = 53 };
Magic Number,GitSharp.Core.RevWalk,RevTag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevTag.cs,parseCanonical,The following statement contains a magic number: walk.IdBuffer.FromString(rawTag' 7);
Magic Number,GitSharp.Core.RevWalk,RevTag,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevTag.cs,parseCanonical,The following statement contains a magic number: int p = pos.value += 4;
Magic Number,GitSharp.Core.RevWalk,RevWalk,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\RevWalk.cs,allocFlag,The following statement contains a magic number: throw new ArgumentException(32 - ReservedFlags + " flags already created.");
Magic Number,GitSharp.Core.Transport,OpenSshConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\OpenSshConfig.cs,parse,The following statement contains a magic number: var current = new List<Host>(4);
Magic Number,GitSharp.Core.Transport,OpenSshConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\OpenSshConfig.cs,parse,The following statement contains a magic number: string[] parts = regex.Split(line' 2);
Magic Number,GitSharp.Core.Transport,OpenSshConfig,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\OpenSshConfig.cs,toFile,The following statement contains a magic number: return PathUtil.CombineFilePath(_home' path.Substring(2));
Magic Number,GitSharp.Core.Transport,SideBandProgressMonitor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandProgressMonitor.cs,Update,The following statement contains a magic number: !_output && now - _taskBeganAt < 500
Magic Number,GitSharp.Core.Transport,SideBandProgressMonitor,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandProgressMonitor.cs,Update,The following statement contains a magic number: now - _lastOutput >= 500
Magic Number,GitSharp.Core.Transport,SshTransport,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SshTransport.cs,InitSession,The following statement contains a magic number: int tms = Timeout > 0 ? Timeout * 1000 : 0;
Magic Number,GitSharp.Core.Transport,TransportGitSsh,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportGitSsh.cs,commandFor,The following statement contains a magic number: SqMinimal(cmd' exe.Slice(0' gitspace + 3));
Magic Number,GitSharp.Core.Transport,TransportGitSsh,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportGitSsh.cs,commandFor,The following statement contains a magic number: SqMinimal(cmd' exe.Substring(gitspace + 4));
Magic Number,GitSharp.Core.Transport,TransportGitSsh,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportGitSsh.cs,checkExecFailure,The following statement contains a magic number: status == 127
Magic Number,GitSharp.Core.Transport,HttpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportHttp.cs,getPackNames,The following statement contains a magic number: packs.Add(s.Substring(2));
Magic Number,GitSharp.Core.Transport,HttpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportHttp.cs,ReadAdvertisedImpl,The following statement contains a magic number: name = name.Slice(0' name.Length - 3);
Magic Number,GitSharp.Core.Transport,SftpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportSftp.cs,SftpObjectDatabase,The following statement contains a magic number: path = path.Substring(2);
Magic Number,GitSharp.Core.Transport,SftpObjectDatabase,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\TransportSftp.cs,getPackNames,The following statement contains a magic number: string @in = IndexPack.GetIndexFileName(n.Slice(0' n.Length - 5));
Magic Number,GitSharp.Core.Transport,WalkFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,WalkFetchConnection,The following statement contains a magic number: _packLocks = new List<PackLock>(4);
Magic Number,GitSharp.Core.Transport,WalkFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,DownloadObject,The following statement contains a magic number: string subdir = idStr.Slice(0' 2);
Magic Number,GitSharp.Core.Transport,WalkFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,DownloadObject,The following statement contains a magic number: string file = idStr.Substring(2);
Magic Number,GitSharp.Core.Transport,WalkFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,RecordError,The following statement contains a magic number: errors = new List<Exception>(2);
Magic Number,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,RemotePack,The following statement contains a magic number: _idxName = IndexPack.GetIndexFileName(PackName.Slice(0' PackName.Length - 5));
Magic Number,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,RemotePack,The following statement contains a magic number: tn = tn.Substring(5);
Magic Number,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,RemotePack,The following statement contains a magic number: tn = tn.Slice(0' tn.Length - 4);
Magic Number,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: pm.BeginTask("Get " + _idxName.Slice(0' 12) + "..idx"' !s.CanSeek ? ProgressMonitor.UNKNOWN : (int)(s.Length / 1024));
Magic Number,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: pm.BeginTask("Get " + _idxName.Slice(0' 12) + "..idx"' !s.CanSeek ? ProgressMonitor.UNKNOWN : (int)(s.Length / 1024));
Magic Number,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: var buf = new byte[2048];
Magic Number,GitSharp.Core.Transport,RemotePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: pm.Update(cnt / 1024);
Magic Number,GitSharp.Core.Transport,WalkPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkPushConnection.cs,Sendpack,The following statement contains a magic number: string wt = "Put " + b.Slice(0' 12);
Magic Number,GitSharp.Core.Transport,BasePackConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackConnection.cs,readAdvertisedRefsImpl,The following statement contains a magic number: string name = line.Slice(41' line.Length);
Magic Number,GitSharp.Core.Transport,BasePackConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackConnection.cs,readAdvertisedRefsImpl,The following statement contains a magic number: ObjectId id = ObjectId.FromString(line.Slice(0' 40));
Magic Number,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,MarkReachable,The following statement contains a magic number: DateTime maxWhen = (maxTime * 1000L).MillisToUtcDateTime();
Magic Number,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,SendWants,The following statement contains a magic number: var line = new StringBuilder(46);
Magic Number,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,Negotiate,The following statement contains a magic number: (31 & havesSent) != 0
Magic Number,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,Negotiate,The following statement contains a magic number: havesSent == 32
Magic Number,GitSharp.Core.Transport,BasePackPushConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackPushConnection.cs,readStatusReport,The following statement contains a magic number: string refName = refLine.Slice(3' refNameEnd);
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,BundleFetchConnection,The following statement contains a magic number: switch (readSignature())                  {                      case 2:                          readBundleV2();                          break;                        default:                          throw new TransportException(_transport.Uri' "not a bundle");                  }
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readSignature,The following statement contains a magic number: string rev = readLine(new byte[1024]);
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readSignature,The following statement contains a magic number: return 2;
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readBundleV2,The following statement contains a magic number: byte[] hdrbuf = new byte[1024];
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readBundleV2,The following statement contains a magic number: ObjectId id = ObjectId.FromString(line.Slice(1' 41));
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readBundleV2,The following statement contains a magic number: shortDesc = line.Substring(42);
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readBundleV2,The following statement contains a magic number: line.Length > 42
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readBundleV2,The following statement contains a magic number: string name = line.Slice(41' line.Length);
Magic Number,GitSharp.Core.Transport,BundleFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BundleFetchConnection.cs,readBundleV2,The following statement contains a magic number: ObjectId id2 = ObjectId.FromString(line.Slice(0' 40));
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,index,The following statement contains a magic number: progress.Start(2 /* tasks */);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: int typecode = (c >> 4) & 7;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: int typecode = (c >> 4) & 7;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: long sz = c & 15;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: int shift = 4;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: shift += 7;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: switch (typecode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					type = typecode;  					data = InflateFromFile((int)sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromFile() & 0xff;  					while ((c & 128) != 0)  					{  						c = ReadFromFile() & 0xff;  					}  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				case Constants.OBJ_REF_DELTA:  					_crc.Update(_buffer' FillFromFile(20)' 20);  					Use(20);  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				default:  					throw new IOException("Unknown object type " + typecode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: switch (typecode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					type = typecode;  					data = InflateFromFile((int)sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromFile() & 0xff;  					while ((c & 128) != 0)  					{  						c = ReadFromFile() & 0xff;  					}  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				case Constants.OBJ_REF_DELTA:  					_crc.Update(_buffer' FillFromFile(20)' 20);  					Use(20);  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				default:  					throw new IOException("Unknown object type " + typecode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: switch (typecode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					type = typecode;  					data = InflateFromFile((int)sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromFile() & 0xff;  					while ((c & 128) != 0)  					{  						c = ReadFromFile() & 0xff;  					}  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				case Constants.OBJ_REF_DELTA:  					_crc.Update(_buffer' FillFromFile(20)' 20);  					Use(20);  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				default:  					throw new IOException("Unknown object type " + typecode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ResolveDeltas,The following statement contains a magic number: switch (typecode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					type = typecode;  					data = InflateFromFile((int)sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromFile() & 0xff;  					while ((c & 128) != 0)  					{  						c = ReadFromFile() & 0xff;  					}  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				case Constants.OBJ_REF_DELTA:  					_crc.Update(_buffer' FillFromFile(20)' 20);  					Use(20);  					data = BinaryDelta.Apply(data' InflateFromFile((int)sz));  					break;    				default:  					throw new IOException("Unknown object type " + typecode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,FixThinPack,The following statement contains a magic number: _originalEof = _packOut.Length - 20;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,FixThinPack,The following statement contains a magic number: var missing = new List<DeltaChain>(64);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,WriteWhole,The following statement contains a magic number: _buffer[hdrlen++] = (byte)((typeCode << 4) | sz & 15);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,WriteWhole,The following statement contains a magic number: _buffer[hdrlen++] = (byte)((typeCode << 4) | sz & 15);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,WriteWhole,The following statement contains a magic number: sz = (int)(((uint)sz) >> 4);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,WriteWhole,The following statement contains a magic number: sz = (int)(((uint)sz) >> 7);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,FixHeaderFooter,The following statement contains a magic number: FillFromFile(12);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,FixHeaderFooter,The following statement contains a magic number: NB.encodeInt32(_buffer' 8' _entryCount);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,FixHeaderFooter,The following statement contains a magic number: _packOut.Write(_buffer' 0' 12);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackHeader,The following statement contains a magic number: int hdrln = Constants.PACK_SIGNATURE.Length + 4 + 4;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackHeader,The following statement contains a magic number: int hdrln = Constants.PACK_SIGNATURE.Length + 4 + 4;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackHeader,The following statement contains a magic number: long vers = NB.DecodeUInt32(_buffer' p + 4);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackHeader,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackHeader,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackHeader,The following statement contains a magic number: _objectCount = NB.decodeUInt32(_buffer' p + 8);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackFooter,The following statement contains a magic number: int c = FillFromInput(20);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackFooter,The following statement contains a magic number: _packcsum = new byte[20];
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackFooter,The following statement contains a magic number: Array.Copy(_buffer' c' _packcsum' 0' 20);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,ReadPackFooter,The following statement contains a magic number: Use(20);
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: long sz = c & 15;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: int shift = 4;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: shift += 7;
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					Whole(typeCode' pos' sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromInput();  					long ofs = c & 127;  					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ReadFromInput();  						ofs <<= 7;  						ofs += (c & 127);  					}  					long pbase = pos - ofs;  					SkipInflateFromInput(sz);  					var n = new UnresolvedDelta(pos' (int)_crc.Value);  					n.Next = _baseByPos.put(pbase' n);  					_deltaCount++;  					break;    				case Constants.OBJ_REF_DELTA:  					c = FillFromInput(20);  					_crc.Update(_buffer' c' 20);  					ObjectId baseId = ObjectId.FromRaw(_buffer' c);  					Use(20);  					DeltaChain r = _baseById.Get(baseId);  					if (r == null)  					{  						r = new DeltaChain(baseId);  						_baseById.Add(r);  					}  					SkipInflateFromInput(sz);  					r.Add(new UnresolvedDelta(pos' (int)_crc.Value));  					_deltaCount++;  					break;    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					Whole(typeCode' pos' sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromInput();  					long ofs = c & 127;  					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ReadFromInput();  						ofs <<= 7;  						ofs += (c & 127);  					}  					long pbase = pos - ofs;  					SkipInflateFromInput(sz);  					var n = new UnresolvedDelta(pos' (int)_crc.Value);  					n.Next = _baseByPos.put(pbase' n);  					_deltaCount++;  					break;    				case Constants.OBJ_REF_DELTA:  					c = FillFromInput(20);  					_crc.Update(_buffer' c' 20);  					ObjectId baseId = ObjectId.FromRaw(_buffer' c);  					Use(20);  					DeltaChain r = _baseById.Get(baseId);  					if (r == null)  					{  						r = new DeltaChain(baseId);  						_baseById.Add(r);  					}  					SkipInflateFromInput(sz);  					r.Add(new UnresolvedDelta(pos' (int)_crc.Value));  					_deltaCount++;  					break;    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					Whole(typeCode' pos' sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromInput();  					long ofs = c & 127;  					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ReadFromInput();  						ofs <<= 7;  						ofs += (c & 127);  					}  					long pbase = pos - ofs;  					SkipInflateFromInput(sz);  					var n = new UnresolvedDelta(pos' (int)_crc.Value);  					n.Next = _baseByPos.put(pbase' n);  					_deltaCount++;  					break;    				case Constants.OBJ_REF_DELTA:  					c = FillFromInput(20);  					_crc.Update(_buffer' c' 20);  					ObjectId baseId = ObjectId.FromRaw(_buffer' c);  					Use(20);  					DeltaChain r = _baseById.Get(baseId);  					if (r == null)  					{  						r = new DeltaChain(baseId);  						_baseById.Add(r);  					}  					SkipInflateFromInput(sz);  					r.Add(new UnresolvedDelta(pos' (int)_crc.Value));  					_deltaCount++;  					break;    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					Whole(typeCode' pos' sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromInput();  					long ofs = c & 127;  					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ReadFromInput();  						ofs <<= 7;  						ofs += (c & 127);  					}  					long pbase = pos - ofs;  					SkipInflateFromInput(sz);  					var n = new UnresolvedDelta(pos' (int)_crc.Value);  					n.Next = _baseByPos.put(pbase' n);  					_deltaCount++;  					break;    				case Constants.OBJ_REF_DELTA:  					c = FillFromInput(20);  					_crc.Update(_buffer' c' 20);  					ObjectId baseId = ObjectId.FromRaw(_buffer' c);  					Use(20);  					DeltaChain r = _baseById.Get(baseId);  					if (r == null)  					{  						r = new DeltaChain(baseId);  						_baseById.Add(r);  					}  					SkipInflateFromInput(sz);  					r.Add(new UnresolvedDelta(pos' (int)_crc.Value));  					_deltaCount++;  					break;    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					Whole(typeCode' pos' sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromInput();  					long ofs = c & 127;  					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ReadFromInput();  						ofs <<= 7;  						ofs += (c & 127);  					}  					long pbase = pos - ofs;  					SkipInflateFromInput(sz);  					var n = new UnresolvedDelta(pos' (int)_crc.Value);  					n.Next = _baseByPos.put(pbase' n);  					_deltaCount++;  					break;    				case Constants.OBJ_REF_DELTA:  					c = FillFromInput(20);  					_crc.Update(_buffer' c' 20);  					ObjectId baseId = ObjectId.FromRaw(_buffer' c);  					Use(20);  					DeltaChain r = _baseById.Get(baseId);  					if (r == null)  					{  						r = new DeltaChain(baseId);  						_baseById.Add(r);  					}  					SkipInflateFromInput(sz);  					r.Add(new UnresolvedDelta(pos' (int)_crc.Value));  					_deltaCount++;  					break;    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					Whole(typeCode' pos' sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromInput();  					long ofs = c & 127;  					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ReadFromInput();  						ofs <<= 7;  						ofs += (c & 127);  					}  					long pbase = pos - ofs;  					SkipInflateFromInput(sz);  					var n = new UnresolvedDelta(pos' (int)_crc.Value);  					n.Next = _baseByPos.put(pbase' n);  					_deltaCount++;  					break;    				case Constants.OBJ_REF_DELTA:  					c = FillFromInput(20);  					_crc.Update(_buffer' c' 20);  					ObjectId baseId = ObjectId.FromRaw(_buffer' c);  					Use(20);  					DeltaChain r = _baseById.Get(baseId);  					if (r == null)  					{  						r = new DeltaChain(baseId);  						_baseById.Add(r);  					}  					SkipInflateFromInput(sz);  					r.Add(new UnresolvedDelta(pos' (int)_crc.Value));  					_deltaCount++;  					break;    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode)  			{  				case Constants.OBJ_COMMIT:  				case Constants.OBJ_TREE:  				case Constants.OBJ_BLOB:  				case Constants.OBJ_TAG:  					Whole(typeCode' pos' sz);  					break;    				case Constants.OBJ_OFS_DELTA:  					c = ReadFromInput();  					long ofs = c & 127;  					while ((c & 128) != 0)  					{  						ofs += 1;  						c = ReadFromInput();  						ofs <<= 7;  						ofs += (c & 127);  					}  					long pbase = pos - ofs;  					SkipInflateFromInput(sz);  					var n = new UnresolvedDelta(pos' (int)_crc.Value);  					n.Next = _baseByPos.put(pbase' n);  					_deltaCount++;  					break;    				case Constants.OBJ_REF_DELTA:  					c = FillFromInput(20);  					_crc.Update(_buffer' c' 20);  					ObjectId baseId = ObjectId.FromRaw(_buffer' c);  					Use(20);  					DeltaChain r = _baseById.Get(baseId);  					if (r == null)  					{  						r = new DeltaChain(baseId);  						_baseById.Add(r);  					}  					SkipInflateFromInput(sz);  					r.Add(new UnresolvedDelta(pos' (int)_crc.Value));  					_deltaCount++;  					break;    				default:  					throw new IOException("Unknown object type " + typeCode + ".");  			}
Magic Number,GitSharp.Core.Transport,IndexPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\IndexPack.cs,SkipInflateFromInput,The following statement contains a magic number: free < 8
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,PacketLineIn,The following statement contains a magic number: lenbuffer = new byte[4];
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,readACK,The following statement contains a magic number: returnedId.FromString(line.Slice(4' 44));
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,readACK,The following statement contains a magic number: returnedId.FromString(line.Slice(4' 44));
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,readACK,The following statement contains a magic number: line.Length == 44
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,readACK,The following statement contains a magic number: string arg = line.Substring(44);
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,ReadString,The following statement contains a magic number: len -= 4;
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,ReadStringRaw,The following statement contains a magic number: len -= 4;
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,ReadLength,The following statement contains a magic number: IO.ReadFully(ins' lenbuffer' 0' 4);
Magic Number,GitSharp.Core.Transport,PacketLineIn,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineIn.cs,ReadLength,The following statement contains a magic number: len != 0 && len < 4
Magic Number,GitSharp.Core.Transport,PacketLineOut,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineOut.cs,PacketLineOut,The following statement contains a magic number: _lenbuffer = new byte[5];
Magic Number,GitSharp.Core.Transport,PacketLineOut,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineOut.cs,WritePacket,The following statement contains a magic number: FormatLength(packet.Length + 4);
Magic Number,GitSharp.Core.Transport,PacketLineOut,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineOut.cs,WritePacket,The following statement contains a magic number: _out.Write(_lenbuffer' 0' 4);
Magic Number,GitSharp.Core.Transport,PacketLineOut,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineOut.cs,End,The following statement contains a magic number: _out.Write(_lenbuffer' 0' 4);
Magic Number,GitSharp.Core.Transport,PacketLineOut,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineOut.cs,FormatLength,The following statement contains a magic number: int o = 3;
Magic Number,GitSharp.Core.Transport,PacketLineOut,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\PacketLineOut.cs,FormatLength,The following statement contains a magic number: w = (int)(((uint)w) >> 4);
Magic Number,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,RecvCommands,The following statement contains a magic number: line.Length < 83
Magic Number,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,RecvCommands,The following statement contains a magic number: ObjectId oldId = ObjectId.FromString(line.Slice(0' 40));
Magic Number,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,RecvCommands,The following statement contains a magic number: ObjectId newId = ObjectId.FromString(line.Slice(41' 81));
Magic Number,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,RecvCommands,The following statement contains a magic number: ObjectId newId = ObjectId.FromString(line.Slice(41' 81));
Magic Number,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,RecvCommands,The following statement contains a magic number: string name = line.Substring(82);
Magic Number,GitSharp.Core.Transport,RefSpec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\RefSpec.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + Source.GetHashCode();
Magic Number,GitSharp.Core.Transport,RefSpec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\RefSpec.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + Destination.GetHashCode();
Magic Number,GitSharp.Core.Transport,SideBandInputStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandInputStream.cs,doProgressLine,The following statement contains a magic number: beginTask(int.Parse(matcher.Groups[3].Value));
Magic Number,GitSharp.Core.Transport,SideBandInputStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandInputStream.cs,doProgressLine,The following statement contains a magic number: int cnt = int.Parse(matcher.Groups[2].Value);
Magic Number,GitSharp.Core.Transport,SideBandInputStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandInputStream.cs,doProgressLine,The following statement contains a magic number: int cnt = int.Parse(matcher.Groups[2].Value);
Magic Number,GitSharp.Core.Transport,SideBandOutputStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandOutputStream.cs,SideBandOutputStream,The following statement contains a magic number: chan <= 0 || chan > 255
Magic Number,GitSharp.Core.Transport,SideBandOutputStream,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\SideBandOutputStream.cs,SideBandOutputStream,The following statement contains a magic number: _buffer[4] = (byte)chan;
Magic Number,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,Upload,The following statement contains a magic number: i.setTimeout(_timeout * 1000);
Magic Number,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,Upload,The following statement contains a magic number: o.setTimeout(_timeout * 1000);
Magic Number,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: !line.StartsWith("want ") || line.Length < 45
Magic Number,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: string opt = line.Substring(45);
Magic Number,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: line = line.Slice(0' 45);
Magic Number,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: isFirst && line.Length > 45
Magic Number,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: ObjectId id = ObjectId.FromString(line.Substring(5));
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: User = matcher.Groups[2].Value;
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: Pass = matcher.Groups[3].Value;
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: Host = matcher.Groups[4].Value;
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: Port = int.Parse(matcher.Groups[5].Value);
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: matcher.Groups[5].Success
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: Path = matcher.Groups[6].Value;
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: Path.Length >= 3 && Path[0] == '/' && Path[2] == ':' && (Path[1] >= 'A' && Path[1] <= 'Z' || Path[1] >= 'a' && Path[1] <= 'z')
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,URIish,The following statement contains a magic number: Path.Length >= 3 && Path[0] == '/' && Path[2] == ':' && (Path[1] >= 'A' && Path[1] <= 'Z' || Path[1] >= 'a' && Path[1] <= 'z')
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + Scheme.GetHashCode();
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + User.GetHashCode();
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + Pass.GetHashCode();
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + Host.GetHashCode();
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + Port;
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + Path.GetHashCode();
Magic Number,GitSharp.Core.Transport,URIish,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\URIish.cs,getHumanishName,The following statement contains a magic number: result = elements2[elements2.Length - 2];
Magic Number,GitSharp.Core.TreeWalk.Filter,AndTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\AndTreeFilter.cs,create,The following statement contains a magic number: list.Length == 2
Magic Number,GitSharp.Core.TreeWalk.Filter,AndTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\AndTreeFilter.cs,create,The following statement contains a magic number: list.Length < 2
Magic Number,GitSharp.Core.TreeWalk.Filter,AndTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\AndTreeFilter.cs,create,The following statement contains a magic number: list.Count() < 2
Magic Number,GitSharp.Core.TreeWalk.Filter,AndTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\AndTreeFilter.cs,create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,GitSharp.Core.TreeWalk.Filter,OrTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\OrTreeFilter.cs,create,The following statement contains a magic number: list.Length == 2
Magic Number,GitSharp.Core.TreeWalk.Filter,OrTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\OrTreeFilter.cs,create,The following statement contains a magic number: list.Length < 2
Magic Number,GitSharp.Core.TreeWalk.Filter,OrTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\OrTreeFilter.cs,create,The following statement contains a magic number: list.Count() < 2
Magic Number,GitSharp.Core.TreeWalk.Filter,OrTreeFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\Filter\OrTreeFilter.cs,create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,GitSharp.Core.Util,FileStreamExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Stream.cs,toArray,The following statement contains a magic number: var buf = new byte[2048];
Magic Number,GitSharp.Core.Util,FS,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\FS.cs,userHomeImpl,The following statement contains a magic number: platform == (int)PlatformID.Unix || platform  == 6 /* (int)PlatformID.MacOSX */                  || platform == (int)PlatformType.UnixMono
Magic Number,GitSharp.Core.Util,Crc32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\CRC32.cs,Update,The following statement contains a magic number: _value = CrcTable[(_value ^ value) & 0xFF] ^ (_value >> 8);
Magic Number,GitSharp.Core.Util,Crc32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\CRC32.cs,Update,The following statement contains a magic number: _value = (_value >> 8) ^ CrcTable[(_value & 0xff) ^ value];
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,Hex,The following statement contains a magic number: _hexCharToValue[i] = (byte)((i - 'a') + 10);
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,FillHexByteArray,The following statement contains a magic number: int curOffset = offset + 7;
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,FillHexCharArray,The following statement contains a magic number: int curOffset = offset + 7;
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,HexUInt32,The following statement contains a magic number: 8 <= end - p
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,HexUInt32,The following statement contains a magic number: r <<= 4;
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,HexUInt32,The following statement contains a magic number: n < 8 && p < end
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,HexUInt32,The following statement contains a magic number: return r << (8 - n) * 4;
Magic Number,GitSharp.Core.Util,Hex,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\Hex.cs,HexUInt32,The following statement contains a magic number: return r << (8 - n) * 4;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,decodeUInt16,The following statement contains a magic number: int r = (intbuf[offset] & 0xff) << 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,decodeUInt32,The following statement contains a magic number: uint low = (intbuf[offset + 1] & (uint)0xff) << 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,decodeUInt32,The following statement contains a magic number: low |= (intbuf[offset + 2] & (uint)0xff);
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,decodeUInt32,The following statement contains a magic number: low <<= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,decodeUInt32,The following statement contains a magic number: low |= (intbuf[offset + 3] & (uint)0xff);
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,decodeUInt32,The following statement contains a magic number: return ((long)(intbuf[offset] & 0xff)) << 24 | low;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,DecodeUInt64,The following statement contains a magic number: return (DecodeUInt32(intbuf' offset) << 32) | DecodeUInt32(intbuf' offset + 4);
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,DecodeUInt64,The following statement contains a magic number: return (DecodeUInt32(intbuf' offset) << 32) | DecodeUInt32(intbuf' offset + 4);
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt16,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt32,The following statement contains a magic number: intbuf[offset + 3] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt32,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt32,The following statement contains a magic number: intbuf[offset + 2] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt32,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt32,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: intbuf[offset + 7] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: intbuf[offset + 6] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: intbuf[offset + 5] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: intbuf[offset + 4] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: intbuf[offset + 3] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: intbuf[offset + 2] = (byte)v;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,encodeInt64,The following statement contains a magic number: v >>= 8;
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,ConvertUnsignedByteToSigned,The following statement contains a magic number: return Convert.ToSByte(Convert.ToString(b' 2)' 2);
Magic Number,GitSharp.Core.Util,NB,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\NB.cs,ConvertUnsignedByteToSigned,The following statement contains a magic number: return Convert.ToSByte(Convert.ToString(b' 2)' 2);
Magic Number,GitSharp.Core.Util,PathUtil,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\PathUtil.cs,Combine,The following statement contains a magic number: paths.Length < 2
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,formatBase10,The following statement contains a magic number: b[--o] = Base10Byte[value % 10];
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,formatBase10,The following statement contains a magic number: value /= 10;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseBase10,The following statement contains a magic number: r = r * 10 + (d - (byte)'0');
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseLongBase10,The following statement contains a magic number: r = (r * 10) + v;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseHexInt16,The following statement contains a magic number: string hex = Charset.forName("US-ASCII").GetString(bs' p' 4);
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseHexInt32,The following statement contains a magic number: string hex = Charset.forName("US-ASCII").GetString(bs' p' 8);
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseHexInt4,The following statement contains a magic number: result > 15
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseTimeZoneOffset,The following statement contains a magic number: int tzMins = v % 100;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseTimeZoneOffset,The following statement contains a magic number: int tzHours = v / 100;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseTimeZoneOffset,The following statement contains a magic number: return tzHours * 60 + tzMins;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,lineMap,The following statement contains a magic number: IntList map = new IntList((end - ptr) / 36);
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,author,The following statement contains a magic number: ptr += 46;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,author,The following statement contains a magic number: ptr += 48;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,committer,The following statement contains a magic number: ptr += 46;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,committer,The following statement contains a magic number: ptr += 48;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,tagger,The following statement contains a magic number: ptr += 48;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parsePersonIdent,The following statement contains a magic number: string name = decode(cs' raw' nameB' emailB - 2);
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parsePersonIdent,The following statement contains a magic number: return new PersonIdent(name' email' when * 1000' tz);
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parsePersonIdentOnly,The following statement contains a magic number: name = decode(raw' nameB' emailB - 2);
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parsePersonIdentOnly,The following statement contains a magic number: return new PersonIdent(name' email' when * 1000' tz);
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,commitMessage,The following statement contains a magic number: ptr += 46;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,commitMessage,The following statement contains a magic number: ptr += 48;
Magic Number,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,tagMessage,The following statement contains a magic number: ptr += 48;
Magic Number,GitSharp.Core.Util,IntList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\IntList.cs,grow,The following statement contains a magic number: var n = new int[(entries.Length + 16) * 3 / 2];
Magic Number,GitSharp.Core.Util,IntList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\IntList.cs,grow,The following statement contains a magic number: var n = new int[(entries.Length + 16) * 3 / 2];
Magic Number,GitSharp.Core.Util,IntList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\IntList.cs,grow,The following statement contains a magic number: var n = new int[(entries.Length + 16) * 3 / 2];
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,GitPathStyle,The following statement contains a magic number: quote_m = new int[128];
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,The following statement contains a magic number: StringBuilder r = new StringBuilder(2 + in_str.Length);
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,The following statement contains a magic number: r.Append((char) (((c >> 6) & 03) + '0'));
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,The following statement contains a magic number: r.Append((char) (((c >> 6) & 03) + '0'));
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,The following statement contains a magic number: r.Append((char) (((c >> 3) & 07) + '0'));
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,The following statement contains a magic number: r.Append((char) (((c >> 3) & 07) + '0'));
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,The following statement contains a magic number: r.Append((char) (((c >> 0) & 07) + '0'));
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,dequote,The following statement contains a magic number: 2 <= end - offset && instr[offset] == '"' && instr[end - 1] == '"'
Magic Number,GitSharp.Core.Util,GitPathStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,dq,The following statement contains a magic number: switch (instr[offset++]) {  				    case (byte)'a':  					    r[rPtr++] = 0x07 /* \a = BEL */;  					    continue;  				    case (byte)'b':  					    r[rPtr++] = (byte)'\b';  					    continue;  				    case (byte)'f':  					    r[rPtr++] = (byte)'\f';  					    continue;  				    case (byte)'n':  					    r[rPtr++] = (byte)'\n';  					    continue;  				    case (byte)'r':  					    r[rPtr++] = (byte)'\r';  					    continue;  				    case (byte)'t':  					    r[rPtr++] = (byte)'\t';  					    continue;  				    case (byte)'v':  					    r[rPtr++] = 0x0B/* \v = VT */;  					    continue;    				    case (byte)'\\':  				    case (byte)'"':  					    r[rPtr++] = instr[offset - 1];  					    continue;    				    case (byte)'0':  				    case (byte)'1':  				    case (byte)'2':  				    case (byte)'3': {  					    int cp = instr[offset - 1] - '0';  					    while (offset < end) {  						    byte c = instr[offset];  						    if ('0' <= c && c <= '7') {  							    cp <<= 3;  							    cp |= c - '0';  							    offset++;  						    } else {  							    break;  						    }  					    }  					    r[rPtr++] = (byte) cp;  					    continue;  				    }    				    default:  					    // Any other code is taken literally.  					    //  					    r[rPtr++] = (byte)'\\';  					    r[rPtr++] = instr[offset - 1];  					    continue;  				    }
Magic Number,GitSharp.Core.Util,TemporaryBuffer,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\TemporaryBuffer.cs,writeTo,The following statement contains a magic number: pm.Update(b.count / 1024);
Magic Number,GitSharp.Core.Util,LocalFileBuffer,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\TemporaryBuffer.cs,writeTo,The following statement contains a magic number: pm.Update(cnt / 1024);
Magic Number,GitSharp.Core.Util,RefList<T>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RefList.cs,copy,The following statement contains a magic number: Builder<T> r = new Builder<T>(Math.Max(16' n));
Magic Number,GitSharp.Core.Util,Builder<TRef>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RefList.cs,add,The following statement contains a magic number: var n = new Ref[_size * 2];
Magic Number,GitSharp.Core.Util,Builder<TRef>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RefList.cs,addAll,The following statement contains a magic number: var n = new Ref[Math.Max(_size * 2' _size + cnt)];
Magic Number,MiscUtil.Conversion,BigEndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\BigEndianBitConverter.cs,CopyBytesImpl,The following statement contains a magic number: value = value >> 8;
Magic Number,MiscUtil.Conversion,BigEndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\BigEndianBitConverter.cs,FromBytes,The following statement contains a magic number: ret = unchecked((ret << 8) | buffer[startIndex+i]);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToChar,The following statement contains a magic number: return unchecked((char) (CheckedFromBytes(value' startIndex' 2)));
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToInt16,The following statement contains a magic number: return unchecked((short) (CheckedFromBytes(value' startIndex' 2)));
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToInt32,The following statement contains a magic number: return unchecked((int) (CheckedFromBytes(value' startIndex' 4)));
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToInt64,The following statement contains a magic number: return CheckedFromBytes(value' startIndex' 8);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToUInt16,The following statement contains a magic number: return unchecked((ushort) (CheckedFromBytes(value' startIndex' 2)));
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint) (CheckedFromBytes(value' startIndex' 4)));
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToUInt64,The following statement contains a magic number: return unchecked((ulong) (CheckedFromBytes(value' startIndex' 8)));
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToDecimal,The following statement contains a magic number: int[] parts = new int[4];
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToDecimal,The following statement contains a magic number: parts[i] = ToInt32(value' startIndex+i*4);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,ToDecimal,The following statement contains a magic number: i < 4
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: byte[] bytes = new byte[16];
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: CopyBytesImpl(parts[i]' 4' bytes' i*4);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: CopyBytesImpl(parts[i]' 4' bytes' i*4);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: i < 4
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytesImpl(parts[i]' 4' buffer' i*4+index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytesImpl(parts[i]' 4' buffer' i*4+index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: i < 4
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 2);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(DoubleToInt64Bits(value)' 8);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 2);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 4);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 8);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(SingleToInt32Bits(value)' 4);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 2);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 4);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(unchecked((long)value)' 8);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(value' 2' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(DoubleToInt64Bits(value)' 8' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(value' 2' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(value' 4' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(value' 8' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(SingleToInt32Bits(value)' 4' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(value' 2' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(value' 4' buffer' index);
Magic Number,MiscUtil.Conversion,EndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes(unchecked((long)value)' 8' buffer' index);
Magic Number,MiscUtil.Conversion,LittleEndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\LittleEndianBitConverter.cs,CopyBytesImpl,The following statement contains a magic number: value = value >> 8;
Magic Number,MiscUtil.Conversion,LittleEndianBitConverter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\LittleEndianBitConverter.cs,FromBytes,The following statement contains a magic number: ret = unchecked((ret << 8) | buffer[startIndex+bytesToConvert-1-i]);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,EndianBinaryReader,The following statement contains a magic number: minBytesPerChar = 2;
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadInt16,The following statement contains a magic number: ReadInternal(buffer' 2);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: ReadInternal(buffer' 4);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadInt64,The following statement contains a magic number: ReadInternal(buffer' 8);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadUInt16,The following statement contains a magic number: ReadInternal(buffer' 2);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: ReadInternal(buffer' 4);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadUInt64,The following statement contains a magic number: ReadInternal(buffer' 8);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadSingle,The following statement contains a magic number: ReadInternal(buffer' 4);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadDouble,The following statement contains a magic number: ReadInternal(buffer' 8);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ReadInternal(buffer' 16);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,Read,The following statement contains a magic number: byteBuffer = new byte[4096];
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,Read7BitEncodedInt,The following statement contains a magic number: shift < 35
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadBigEndian7BitEncodedInt,The following statement contains a magic number: ret = (ret << 7) | (b&0x7f);
Magic Number,MiscUtil.IO,EndianBinaryReader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryReader.cs,ReadBigEndian7BitEncodedInt,The following statement contains a magic number: i < 5
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 2);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 4);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 8);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 2);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 4);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 8);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 4);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 8);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write,The following statement contains a magic number: WriteInternal(buffer' 16);
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write7BitEncodedInt,The following statement contains a magic number: value = value >> 7;
Magic Number,MiscUtil.IO,EndianBinaryWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\EndianBinaryWriter.cs,Write7BitEncodedInt,The following statement contains a magic number: value >= 128
Magic Number,GitSharp.Core.RevWalk.Filter,AndRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\AndRevFilter.cs,create,The following statement contains a magic number: list.Length == 2
Magic Number,GitSharp.Core.RevWalk.Filter,AndRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\AndRevFilter.cs,create,The following statement contains a magic number: list.Length < 2
Magic Number,GitSharp.Core.RevWalk.Filter,AndRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\AndRevFilter.cs,create,The following statement contains a magic number: list.Count() < 2
Magic Number,GitSharp.Core.RevWalk.Filter,AndRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\AndRevFilter.cs,create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,GitSharp.Core.RevWalk.Filter,CommitTimeRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\CommitTimeRevFilter.cs,CommitTimeRevFilter,The following statement contains a magic number: _when = (int)(ts / 1000);
Magic Number,GitSharp.Core.RevWalk.Filter,BeforeCommitTimeRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + ((long)_when * 1000).MillisToUtcDateTime() + ")";
Magic Number,GitSharp.Core.RevWalk.Filter,AfterCommitTimeRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + ((long)_when * 1000).MillisToUtcDateTime() + ")";
Magic Number,GitSharp.Core.RevWalk.Filter,BetweenCommitTimeRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\CommitTimeRevFilter.cs,BetweenCommitTimeRevFilter,The following statement contains a magic number: _until = (int)(until / 1000);
Magic Number,GitSharp.Core.RevWalk.Filter,BetweenCommitTimeRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + ((long)_when * 1000).MillisToUtcDateTime() + " - " + ((long)_until * 1000).MillisToUtcDateTime() + ")";
Magic Number,GitSharp.Core.RevWalk.Filter,BetweenCommitTimeRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + ((long)_when * 1000).MillisToUtcDateTime() + " - " + ((long)_until * 1000).MillisToUtcDateTime() + ")";
Magic Number,GitSharp.Core.RevWalk.Filter,OrRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\OrRevFilter.cs,create,The following statement contains a magic number: list.Length == 2
Magic Number,GitSharp.Core.RevWalk.Filter,OrRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\OrRevFilter.cs,create,The following statement contains a magic number: list.Length < 2
Magic Number,GitSharp.Core.RevWalk.Filter,OrRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\OrRevFilter.cs,create,The following statement contains a magic number: list.Count() < 2
Magic Number,GitSharp.Core.RevWalk.Filter,OrRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\OrRevFilter.cs,create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,GitSharp.Core.RevWalk.Filter,RevFilterNoMerges,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\RevFilter.cs,include,The following statement contains a magic number: return cmit.ParentCount < 2;
Magic Number,GitSharp.Core.Patch,FileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\FileHeader.cs,parseGitFileName,The following statement contains a magic number: Buffer[sp - 2] != '"'
Magic Number,GitSharp.Core.Patch,FileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\FileHeader.cs,ParseFileMode,The following statement contains a magic number: tmp <<= 3;
Magic Number,GitSharp.Core.Patch,FileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\FileHeader.cs,isHunkHdr,The following statement contains a magic number: (ptr - start) < 2
Magic Number,GitSharp.Core.Patch,FileHeader,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\FileHeader.cs,isHunkHdr,The following statement contains a magic number: return (ptr - 3) - start;
Magic Number,GitSharp.Core.Patch,Patch,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Patch\Patch.cs,ParseFile,The following statement contains a magic number: n - c < 6
Magic Number,GitSharp.Core.TreeWalk,CanonicalTreeParser,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\CanonicalTreeParser.cs,ParseEntry,The following statement contains a magic number: tmp <<= 3;
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: int ix = cx - LANE_WIDTH / 2;
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: drawLine(pColor' myLaneX' h / 2' ix' h / 2' LINE_WIDTH);
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: drawLine(pColor' myLaneX' h / 2' ix' h / 2' LINE_WIDTH);
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: drawLine(pColor' ix' h / 2' cx' h' LINE_WIDTH);
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: int dotX = myLaneX - dotSize / 2 - 1;
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: int dotY = (h - dotSize) / 2;
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: int textx = Math.Max(maxCenter + LANE_WIDTH / 2' dotX + dotSize) + 8;
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: int textx = Math.Max(maxCenter + LANE_WIDTH / 2' dotX + dotSize) + 8;
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: textx += drawLabel(textx + dotSize' h/2' commit.refs[i]);
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: drawText(msg' textx + dotSize + n*2' h / 2);
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,paintCommit,The following statement contains a magic number: drawText(msg' textx + dotSize + n*2' h / 2);
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,computeDotSize,The following statement contains a magic number: int d = (int) (Math.Min(h' LANE_WIDTH) * 0.50f);
Magic Number,GitSharp.Core.RevPlot,AbstractPlotRenderer<TColor>,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\AbstractPlotRenderer.cs,laneC,The following statement contains a magic number: return laneX(myLane) + LANE_WIDTH / 2;
Magic Number,GitSharp.Core.RevPlot,PlotCommitList,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevPlot\PlotCommitList.cs,enter,The following statement contains a magic number: nChildren == 1 && currCommit.children[0].ParentCount < 2
Missing Default,GitSharp.Core,ByteArrayExtensions,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\ByteArrayExtensions.cs,ReadLine,The following switch statement is missing a default case: switch (num)                  {                      case 13:                          if ((currentIndex != (source.Length - 1)) && (source[currentIndex + 1] == 10))                          {                              indexModifier = 2;                          }                          break;                        case 10:                          indexModifier = 1;                          break;                  }
Missing Default,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following switch statement is missing a default case: switch (typeString[offset])                  {                      case (byte)'b':                          if (typeString[offset + 1] != (byte)'l' ||                          typeString[offset + 2] != (byte)'o' ||                          typeString[offset + 3] != (byte)'b' ||                          typeString[offset + 4] != endMark) break;                          offset += 5;                          return ObjectType.Blob;                        case (byte)'c':                          if (typeString[offset + 1] != (byte)'o' || typeString[offset + 2] != (byte)'m' ||                          typeString[offset + 3] != (byte)'m' || typeString[offset + 4] != (byte)'i' ||                          typeString[offset + 5] != (byte)'t' || typeString[offset + 6] != endMark) break;                          offset += 7;                          return ObjectType.Commit;                        case (byte)'t':                          switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }                          break;                  }
Missing Default,GitSharp.Core,Codec,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Codec.cs,DecodeTypeString,The following switch statement is missing a default case: switch (typeString[offset + 1])                          {                              case (byte)'a':                                  if (typeString[offset + 2] != (byte)'g' || typeString[offset + 2] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 4;                                  return ObjectType.Tag;                                case (byte)'r':                                  if (typeString[offset + 2] != (byte)'e' || typeString[offset + 3] != (byte)'e' || typeString[offset + 4] != endMark)                                  {                                      throw new CorruptObjectException(id' "invalid type");                                  }                                  offset += 5;                                  return ObjectType.Tree;                            }
Missing Default,GitSharp.Core,FileMode,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\FileMode.cs,FromBits,The following switch statement is missing a default case: switch (bits & TYPE_MASK) // octal 0170000  			{  				case 0:  					if (bits == 0)  					{  						return Missing;  					}  					break;    				case TYPE_TREE: // octal 0040000  					return Tree;    				case TYPE_FILE: // octal 0100000  					return (bits & OCTAL_0111) != 0 ? ExecutableFile : RegularFile;    				case TYPE_SYMLINK: // octal 0120000  					return Symlink;    				case TYPE_GITLINK: // octal 0160000  					return GitLink;  			}
Missing Default,GitSharp.Core,PackIndexWriter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\PackIndexWriter.cs,CreateOldestPossible,The following switch statement is missing a default case: switch (version)                  {                      case 1:                          if (PackIndexWriterV1.CanStore(oe)) continue;                          version = 2;                  		break;                        case 2:                  		breakLoop = true;                  		break;  				}
Missing Default,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,MapTree,The following switch statement is missing a default case: switch (((ObjectType)or.Type))              {                  case ObjectType.Tree:                      return new Tree(this' id' raw);                    case ObjectType.Commit:                      return MapTree(ObjectId.FromString(raw' 5));              }
Missing Default,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,IsValidRefName,The following switch statement is missing a default case: switch (c)                  {                      case '.':                          switch (p)                          {                              case '\0':                              case '/':                              case '.':                                  return false;                          }                            if (i == len - 1) return false;                          break;                        case '/':                          if (i == 0 || i == len - 1) return false;                          components++;                          break;                        case '{':                          if (p == '@') return false;                          break;                        case '~':                      case '^':                      case ':':                      case '?':                      case '[':                      case '*':                      case '\\':                          return false;                  }
Missing Default,GitSharp.Core,Repository,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Repository.cs,IsValidRefName,The following switch statement is missing a default case: switch (p)                          {                              case '\0':                              case '/':                              case '.':                                  return false;                          }
Missing Default,GitSharp.Core,Config,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Config.cs,getLong,The following switch statement is missing a default case: switch (StringUtils.toLowerCase(n[n.Length - 1]))              {                  case 'g':                      mul = GiB;                      break;                    case 'm':                      mul = MiB;                      break;                    case 'k':                      mul = KiB;                      break;              }
Missing Default,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following switch statement is missing a default case: switch (os.Version.Major)  					{  						case 4:  							switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}  							break;  					}
Missing Default,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following switch statement is missing a default case: switch (os.Version.Minor)  							{  								case 0:  									if (osvi.szCSDVersion == "B" ||  									    osvi.szCSDVersion == "C")  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "OSR2";  									}  									else  									{  										ClassName = "Windows.v95";  										PlatformSubType = "95";  										Edition = "";  									}  									break;  								case 10:  									if (osvi.szCSDVersion == "A")  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "SE";  									}  									else  									{  										ClassName = "Windows.v98";  										PlatformSubType = "98";  										Edition = "";  									}  									break;  								case 90:  									ClassName = "Windows.ME";  									PlatformSubType = "ME";  									Edition = "";  									break;  							}
Missing Default,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following switch statement is missing a default case: switch (osvi.wProductType)  							{  								case 1:  									ClassName = "Windows.NT";  									PlatformSubType = "NT";  									Edition = "4.0 Workstation";  									break;  								case 3:  									if (osvi.wSuiteMask == SuiteVersion.Enterprise)  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Enterprise";  									}  									else  									{  										ClassName = "Windows.NT";  										PlatformSubType = "NT";  										Edition = "4.0 Server Standard";  									}  									break;  							}
Missing Default,GitSharp.Core,Win32,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Platform\Windows.cs,Win32,The following switch statement is missing a default case: switch (ospi.dwOSEdition)  									{  										case ProductType.Undefined:  											ClassName = "Windows.Undefined";  											PlatformSubType = "7";  											Edition = "is undefined";  											break;  										case ProductType.Ultimate: //    1  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Ultimate Edition";  											break;  										case ProductType.HomeBasic: // 2  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic Edition";  											break;  										case ProductType.HomePremium: // 3  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Premium Edition";  											break;  										case ProductType.Enterprise: // 4  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Enterprise Edition";  											break;  										case ProductType.HomeBasicN: // 5  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Home Basic N Edition (EU only)";  											break;  										case ProductType.Business: // 6  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business Edition";  											break;  										case ProductType.BusinessN: // 10  											ClassName = "Windows.v7";  											PlatformSubType = "7";  											Edition = "Business N Edition (EU only)";  											break;  									}
Missing Default,GitSharp.Core.DirectoryCache,DirCacheEntry,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\DirectoryCache\DirCacheEntry.cs,setFileMode,The following switch statement is missing a default case: switch (mode.Bits & FileMode.TYPE_MASK)              {                  case FileMode.TYPE_MISSING:                  case FileMode.TYPE_TREE:                      throw new ArgumentException("Invalid mode " + mode.Bits                          + " for path " + getPathString());              }
Missing Default,GitSharp.Core.Transport,WalkFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\WalkFetchConnection.cs,MarkLocalObjComplete,The following switch statement is missing a default case: switch (obj.Type)              {                  case Constants.OBJ_BLOB:                      obj.add(COMPLETE);                      break;                    case Constants.OBJ_COMMIT:                      PushLocalCommit((RevCommit)obj);                      break;                    case Constants.OBJ_TREE:                      MarkTreeComplete((RevTree)obj);                      break;              }
Missing Default,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,Negotiate,The following switch statement is missing a default case: switch (anr)                      {                          case PacketLineIn.AckNackResult.NAK:                              // More have lines are necessary to compute the                              // pack on the remote side. Keep doing that.                                resultsPending--;                              goto END_READ_RESULT;                            case PacketLineIn.AckNackResult.ACK:                              // The remote side is happy and knows exactly what                              // to send us. There is no further negotiation and                              // we can break out immediately.                                _multiAck = MultiAck.OFF;                              resultsPending = 0;                              receivedAck = true;                              goto END_SEND_HAVES;                            case PacketLineIn.AckNackResult.ACK_CONTINUE:                          case PacketLineIn.AckNackResult.ACK_COMMON:                          case PacketLineIn.AckNackResult.ACK_READY:                              // The server knows this commit (ackId). We don't                              // need to send any further along its ancestry' but                              // we need to continue to talk about other parts of                              // our local history.                                MarkCommon(_walk.parseAny(ackId));                              receivedAck = true;                              receivedContinue = true;                              havesSinceLastContinue = 0;                              break;                      }
Missing Default,GitSharp.Core.Transport,BasePackFetchConnection,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\BasePackFetchConnection.cs,Negotiate,The following switch statement is missing a default case: switch (anr)                  {                      case PacketLineIn.AckNackResult.NAK:                          // A NAK is a response to an end we queued earlier                          // we eat it and look for another ACK/NAK message.                          //                          break;                        case PacketLineIn.AckNackResult.ACK:                          // A solitary ACK at this point means the remote won't                          // speak anymore' but is going to send us a pack now.                          //                          goto END_READ_RESULT_2;                        case PacketLineIn.AckNackResult.ACK_CONTINUE:                      case PacketLineIn.AckNackResult.ACK_COMMON:                      case PacketLineIn.AckNackResult.ACK_READY:                          // We will expect a normal ACK to break out of the loop.                          //                          _multiAck = MultiAck.CONTINUE;                          break;                  }
Missing Default,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,Execute,The following switch statement is missing a default case: switch (cmd.getType())  				{  					case ReceiveCommand.Type.DELETE:  						if (!ObjectId.ZeroId.Equals(cmd.getOldId()))  						{  							// We can only do a CAS style delete if the client  							// didn't bork its delete request by sending the  							// wrong zero id rather than the advertised one.  							//  							ru.setExpectedOldObjectId(cmd.getOldId());  						}  						ru.setForceUpdate(true);  						Status(cmd' ru.delete(walk));  						break;    					case ReceiveCommand.Type.CREATE:  					case ReceiveCommand.Type.UPDATE:  					case ReceiveCommand.Type.UPDATE_NONFASTFORWARD:  						ru.setForceUpdate(isAllowNonFastForwards());  						ru.setExpectedOldObjectId(cmd.getOldId());  						ru.setNewObjectId(cmd.getNewId());  						ru.setRefLogMessage("push"' true);  						Status(cmd' ru.update(walk));  						break;  				}
Missing Default,GitSharp.Core.Transport,ReceivePack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\ReceivePack.cs,SendStatusReport,The following switch statement is missing a default case: switch (cmd.getResult())  				{  					case ReceiveCommand.Result.NOT_ATTEMPTED:  						r.Append("server bug; ref not processed");  						break;    					case ReceiveCommand.Result.REJECTED_NOCREATE:  						r.Append("creation prohibited");  						break;    					case ReceiveCommand.Result.REJECTED_NODELETE:  						r.Append("deletion prohibited");  						break;    					case ReceiveCommand.Result.REJECTED_NONFASTFORWARD:  						r.Append("non-fast forward");  						break;    					case ReceiveCommand.Result.REJECTED_CURRENT_BRANCH:  						r.Append("branch is currently checked out");  						break;    					case ReceiveCommand.Result.REJECTED_MISSING_OBJECT:  						if (cmd.getMessage() == null)  							r.Append("missing object(s)");  						else if (cmd.getMessage().Length == Constants.OBJECT_ID_STRING_LENGTH)  							r.Append("object " + cmd.getMessage() + " missing");  						else  							r.Append(cmd.getMessage());  						break;    					case ReceiveCommand.Result.REJECTED_OTHER_REASON:  						if (cmd.getMessage() == null)  							r.Append("unspecified reason");  						else  							r.Append(cmd.getMessage());  						break;    					case ReceiveCommand.Result.LOCK_FAILURE:  						r.Append("failed to lock");  						break;    					case ReceiveCommand.Result.OK:  						// We shouldn't have reached this case (see 'ok' case above).  						continue;  				}
Missing Default,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,Negotiate,The following switch statement is missing a default case: switch (_multiAck)                          {                              case BasePackFetchConnection.MultiAck.OFF:                                  if (_commonBase.Count == 1)                                      _pckOut.WriteString("ACK " + id.Name + "\n");                                  break;                              case BasePackFetchConnection.MultiAck.CONTINUE:                                    _pckOut.WriteString("ACK " + id.Name + " continue\n");                                  break;                              case BasePackFetchConnection.MultiAck.DETAILED:                                  _pckOut.WriteString("ACK " + id.Name + " common\n");                                  break;                          }
Missing Default,GitSharp.Core.Transport,UploadPack,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Transport\UploadPack.cs,Negotiate,The following switch statement is missing a default case: switch (_multiAck)                          {                              case BasePackFetchConnection.MultiAck.OFF:                                  break;                              case BasePackFetchConnection.MultiAck.CONTINUE:                                  _pckOut.WriteString("ACK " + id.Name + " continue\n");                                  break;                              case BasePackFetchConnection.MultiAck.DETAILED:                                  _pckOut.WriteString("ACK " + id.Name + " ready\n");                                  break;                          }
Missing Default,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseBase10,The following switch statement is missing a default case: switch (b[ptr])  				{  					case ((byte)'-'):  						sign = -1;  						ptr++;  						break;  					case ((byte)'+'):  						ptr++;  						break;  				}
Missing Default,GitSharp.Core.Util,RawParseUtils,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\RawParseUtils.cs,parseLongBase10,The following switch statement is missing a default case: switch (b[ptr])  				{  					case (byte)'-':  						sign = -1;  						ptr++;  						break;  					case (byte)'+':  						ptr++;  						break;  				}
Missing Default,GitSharp.Core.Util,BourneStyle,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\Util\QuotedString.cs,quote,The following switch statement is missing a default case: switch (instr[i]) {  				    case '\'':  				    case '!':  					    r.Append(instr' start' i - start);  					    r.Append('\'');  					    r.Append('\\');  					    r.Append(instr[i]);  					    r.Append('\'');  					    start = i + 1;  					    break;  				    }
Missing Default,GitSharp.Core.RevWalk.Filter,SubStringRevFilter,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\RevWalk\Filter\SubStringRevFilter.cs,safe,The following switch statement is missing a default case: switch (c)  				{  					case '.':  					case '?':  					case '*':  					case '+':  					case '{':  					case '}':  					case '(':  					case ')':  					case '[':  					case ']':  					case '\\':  						return false;  				}
Missing Default,GitSharp.Core.TreeWalk,WorkingTreeIterator,D:\research\architectureSmells\repos\henon_GitSharp\GitSharp.Core\TreeWalk\WorkingTreeIterator.cs,idBuffer,The following switch statement is missing a default case: switch (Mode & FileMode.TYPE_MASK)              {                  case FileMode.TYPE_FILE:                      _contentIdFromPtr = ptr;                      return _contentId = IdBufferBlob(_entries[ptr]);                    case FileMode.TYPE_SYMLINK:                      // Windows does not support symbolic links' so we should not                      // have reached this particular part of the walk code.                      //                      return ZeroId;                    case FileMode.TYPE_GITLINK:                      // TODO: Support obtaining current HEAD SHA-1 from nested repository                      //                      return ZeroId;              }
