Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitSharp.Commands,AbstractFetchCommand,C:\repos\henon_GitSharp\GitSharp\Commands\AbstractFetchCommand.cs,longTypeOf,Cyclomatic complexity of the method is 11
Complex Method,GitSharp.Commands,CheckoutCommand,C:\repos\henon_GitSharp\GitSharp\Stubs\CheckoutCommand.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Commands,CloneCommand,C:\repos\henon_GitSharp\GitSharp\Commands\CloneCommand.cs,Execute,Cyclomatic complexity of the method is 12
Complex Method,GitSharp.Commands,PushCommand,C:\repos\henon_GitSharp\GitSharp\Commands\PushCommand.cs,printPushResult,Cyclomatic complexity of the method is 9
Complex Method,GitSharp.Commands,StatusCommand,C:\repos\henon_GitSharp\GitSharp\Commands\StatusCommand.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,GitSharp.Commands,StatusResults,C:\repos\henon_GitSharp\GitSharp\Commands\StatusCommand.cs,Contains,Cyclomatic complexity of the method is 10
Complex Method,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,Blame,Cyclomatic complexity of the method is 11
Complex Method,GitSharp,IgnoreRules,C:\repos\henon_GitSharp\GitSharp\IgnoreRules.cs,BuildRules,Cyclomatic complexity of the method is 8
Complex Method,GitSharp,Repository,C:\repos\henon_GitSharp\GitSharp\Repository.cs,Commit,Cyclomatic complexity of the method is 11
Complex Method,GitSharp,Repository,C:\repos\henon_GitSharp\GitSharp\Repository.cs,IsValid,Cyclomatic complexity of the method is 13
Complex Method,GitSharp,Repository,C:\repos\henon_GitSharp\GitSharp\Repository.cs,Get,Cyclomatic complexity of the method is 9
Complex Method,GitSharp,RepositoryStatus,C:\repos\henon_GitSharp\GitSharp\RepositoryStatus.cs,UpdateDirectoryNotRecursive,Cyclomatic complexity of the method is 10
Complex Method,GitSharp,RepositoryStatus,C:\repos\henon_GitSharp\GitSharp\RepositoryStatus.cs,OnVisitEntry,Cyclomatic complexity of the method is 9
Long Parameter List,GitSharp.Commands,PushCommand,C:\repos\henon_GitSharp\GitSharp\Commands\PushCommand.cs,printUpdateLine,The method has 5 parameters. Parameters: flag' summary' srcRef' destRef' message
Long Parameter List,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,Create,The method has 6 parameters. Parameters: message' parent' tree' author' committer' time
Long Parameter List,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,Create,The method has 6 parameters. Parameters: message' parents' tree' author' committer' time
Long Parameter List,GitSharp,RepositoryStatus,C:\repos\henon_GitSharp\GitSharp\RepositoryStatus.cs,RepositoryStatus,The method has 5 parameters. Parameters: repository' options' singleFile' rootDir' recursive
Long Parameter List,GitSharp,StashCollection,C:\repos\henon_GitSharp\GitSharp\Stash.cs,WriteTree,The method has 5 parameters. Parameters: writer' headTree' index' tree' dir
Long Statement,GitSharp.Commands,CloneCommand,C:\repos\henon_GitSharp\GitSharp\Commands\CloneCommand.cs,Execute,The length of the statement  "                throw new InvalidOperationException(string.Format("destination path '{0}' already exists and is not an empty directory."' new DirectoryInfo(Directory).FullName)); " is 162.
Long Statement,GitSharp.Commands,MergeCommand,C:\repos\henon_GitSharp\GitSharp\Commands\MergeCommand.cs,FormatMergeMessage,The length of the statement  "				return "Merge commits: " + string.Join("' "' options.Commits.Select(c => c.Hash).ToArray()); // todo: replace this fallback message with something sensible. " is 156.
Long Statement,GitSharp.Commands,InitCommand,C:\repos\henon_GitSharp\GitSharp\Commands\InitCommand.cs,Execute,The length of the statement  "                    OutputStream.WriteLine(String.Format("{0} empty Git repository in {1}"' reinit ? "Reinitialized" : "Initialized"' repo.Directory.FullName)); " is 140.
Long Statement,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,Checkout,The length of the statement  "				throw new InvalidOperationException("Unable to checkout this commit. It was not initialized properly (i.e. the hash is not pointing to a commit object)."); " is 155.
Long Statement,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,CalculateCommitDiff,The length of the statement  "					else if (raw_modes.Select((m1' i) => new { Mode = m1' Index = i + 1 }).All(x => !walk.idEqual(0' x.Index))) // TODO: not sure if this condition suffices in some special cases. " is 175.
Long Statement,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,CalculateCommitDiff,The length of the statement  "					else if (raw_modes.Select((m1' i) => new { Mode = m1' Index = i + 1 }).Any(x => m0 != x.Mode && walk.idEqual(0' x.Index))) " is 122.
Long Statement,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,Create,The length of the statement  "			corecommit.Author = new Core.PersonIdent(author.Name' author.EmailAddress' time.ToMillisecondsSinceEpoch()' (int)time.Offset.TotalMinutes); " is 139.
Long Statement,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,Create,The length of the statement  "			corecommit.Committer = new Core.PersonIdent(committer.Name' committer.EmailAddress' time.ToMillisecondsSinceEpoch()' (int)time.Offset.TotalMinutes); " is 148.
Long Statement,GitSharp,Manipulating_git_objects,C:\repos\henon_GitSharp\GitSharp\Examples.cs,Commit,The length of the statement  "			Commit c1 = repo.Get<Commit>( "979829389f136bfabb5956c68d909e7bf3092a4e"); // <-- note: short hashes are not yet supported " is 122.
Long Statement,GitSharp,Using_git_commands,C:\repos\henon_GitSharp\GitSharp\Examples.cs,Clone,The length of the statement  "			Git.Clone(new CloneCommand { Source = "git://github.com/henon/GitSharp.git"' GitDirectory = "path/to/local/copy"' Quiet = false' Bare = true }); " is 144.
Long Statement,GitSharp,Index,C:\repos\henon_GitSharp\GitSharp\Index.cs,RemoveFile,The length of the statement  "			GitIndex.remove(_repo._internal_repo.WorkingDirectory' path); // Todo: change GitIndex.Remove to remove(DirectoryInfo ' FileInfo) ?? " is 132.
Long Statement,GitSharp,AbstractTreeNode,C:\repos\henon_GitSharp\GitSharp\AbstractTreeNode.cs,GetHistoryBefore,The length of the statement  "					if ((this is Leaf && change.Path == this.Path) || (this is Tree && change.Path.StartsWith(this.Path))) // <--- [henon] normally this is bad style but here I prefer it over polymorphism for sake of readability " is 208.
Long Statement,GitSharp,RepositoryStatus,C:\repos\henon_GitSharp\GitSharp\RepositoryStatus.cs,UpdateSingleFile,The length of the statement  "			FileInfo fileInfo = new FileInfo (Path.Combine (Repository.WorkingDirectory' file.Replace ('/'' Path.DirectorySeparatorChar))); " is 127.
Long Statement,GitSharp,RepositoryStatus,C:\repos\henon_GitSharp\GitSharp\RepositoryStatus.cs,OnVisitEntry,The length of the statement  "				if (wdirEntry != null) // actually' we should enforce (treeEntry == null ) here too but original git does not' may be a bug.  " is 124.
Long Statement,GitSharp,StashCollection,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Create,The length of the statement  "			var wipCommit = Commit.Create(commitMsg + "\n"' new Commit[] { parent' indexCommit }' new Tree(_repo' tree_id)' author' author' DateTimeOffset.Now); " is 148.
Complex Conditional,GitSharp.Commands,CheckoutCommand,C:\repos\henon_GitSharp\GitSharp\Stubs\CheckoutCommand.cs,Execute,The conditional expression  "Patch && (Track || BranchCreate.Length > 0 || RefLog || Merge || Force)"  is complex.
Complex Conditional,GitSharp,Index,C:\repos\henon_GitSharp\GitSharp\Index.cs,CommitChanges,The conditional expression  "(parent == null && GitIndex.Members.Count == 0) || (parent != null && parent.Tree._id == tree_id)"  is complex.
Complex Conditional,GitSharp,AbstractTreeNode,C:\repos\henon_GitSharp\GitSharp\AbstractTreeNode.cs,GetHistoryBefore,The conditional expression  "(this is Leaf && change.Path == this.Path) || (this is Tree && change.Path.StartsWith(this.Path))"  is complex.
Magic Number,GitSharp.Commands,MergeOptions,C:\repos\henon_GitSharp\GitSharp\Commands\MergeCommand.cs,Validate,The following statement contains a magic number: if (Commits.Count() < 2)  				throw new ArgumentException("Need at least two commits to merge");
Magic Number,GitSharp,Commit,C:\repos\henon_GitSharp\GitSharp\Commit.cs,CalculateCommitDiff,The following statement contains a magic number: while (walk.next())  			{  				int m0 = walk.getRawMode(0);  				if (walk.getTreeCount() == 2)  				{  					int m1 = walk.getRawMode(1);  					var change = new Change  					{  						ReferenceCommit = commits[0]'  						ComparedCommit = commits[1]'  						ReferencePermissions = walk.getFileMode(0).Bits'  						ComparedPermissions = walk.getFileMode(1).Bits'  						Name = walk.getNameString()'  						Path = walk.getPathString()'  					};  					if (m0 != 0 && m1 == 0)  					{  						change.ChangeType = ChangeType.Added;  						change.ComparedObject = Wrap(repo' walk.getObjectId(0));  					}  					else if (m0 == 0 && m1 != 0)  					{  						change.ChangeType = ChangeType.Deleted;  						change.ReferenceObject = Wrap(repo' walk.getObjectId(0));  					}  					else if (m0 != m1 && walk.idEqual(0' 1))  					{  						change.ChangeType = ChangeType.TypeChanged;  						change.ReferenceObject = Wrap(repo' walk.getObjectId(0));  						change.ComparedObject = Wrap(repo' walk.getObjectId(1));  					}  					else  					{  						change.ChangeType = ChangeType.Modified;  						change.ReferenceObject = Wrap(repo' walk.getObjectId(0));  						change.ComparedObject = Wrap(repo' walk.getObjectId(1));  					}  					yield return change;  				}  				else  				{  					var raw_modes = new int[walk.getTreeCount()-1];  					for(int i = 0;i<walk.getTreeCount()-1; i++)  						raw_modes[i] = walk.getRawMode(i+1);  					var change = new Change  					{  						ReferenceCommit = commits[0]'  						//ComparedCommit = compared'  						Name = walk.getNameString()'  						Path = walk.getPathString()'  					};  					if (m0 != 0 && raw_modes.All(m1 => m1 == 0))  					{  						change.ChangeType = ChangeType.Added;  						change.ComparedObject = Wrap(repo' walk.getObjectId(0));  						yield return change;  					}  					else if (m0 == 0 && raw_modes.Any(m1 => m1 != 0))  					{  						change.ChangeType = ChangeType.Deleted;  						yield return change;  					}  					else if (raw_modes.Select((m1' i) => new { Mode = m1' Index = i + 1 }).All(x => !walk.idEqual(0' x.Index))) // TODO: not sure if this condition suffices in some special cases.  					{  						change.ChangeType = ChangeType.Modified;  						change.ReferenceObject = Wrap(repo' walk.getObjectId(0));  						yield return change;  					}  					else if (raw_modes.Select((m1' i) => new { Mode = m1' Index = i + 1 }).Any(x => m0 != x.Mode && walk.idEqual(0' x.Index)))  					{  						change.ChangeType = ChangeType.TypeChanged;  						change.ReferenceObject = Wrap(repo' walk.getObjectId(0));  						yield return change;  					}  				}  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Stash,The following statement contains a magic number: int secs = (int) (this.DateTime - new DateTimeOffset (1970' 1' 1' 0' 0' 0' TimeSpan.Zero)).TotalSeconds;
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Stash,The following statement contains a magic number: sb.Append (prevStashCommitId ?? new string ('0'' 40)).Append (' ');
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: s.PrevStashCommitId = line.Substring (0' 40);
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: s.CommitId = line.Substring (41' 40);
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: s.CommitId = line.Substring (41' 40);
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Magic Number,GitSharp,Stash,C:\repos\henon_GitSharp\GitSharp\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  				s.Author.Name = line.Substring (82' i - 82 - 1);  				i++;  				int i2 = line.IndexOf ('>'' i);  				if (i2 != -1)  					s.Author.EmailAddress = line.Substring (i' i2 - i);  				  				i2 += 2;  				i = line.IndexOf (' '' i2);  				int secs = int.Parse (line.Substring (i2' i - i2));    				string stUtcOffset = line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  				if (stUtcOffset[0] == '+') stUtcOffset = stUtcOffset.Remove(0' 1);  				TimeSpan utcOffset = TimeSpan.Parse(stUtcOffset);    				DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs) + utcOffset;  				s.DateTime = new DateTimeOffset(t' utcOffset);    				s.Comment = line.Substring (i + 7);  			}
Missing Default,GitSharp.Commands,MergeCommand,C:\repos\henon_GitSharp\GitSharp\Commands\MergeCommand.cs,SelectMerger,The following switch statement is missing a default case: switch (options.MergeStrategy)  			{  				case MergeStrategy.Ours:  					return Core.Merge.MergeStrategy.Ours.NewMerger(options.Repository);  				case MergeStrategy.Theirs:  					return Core.Merge.MergeStrategy.Theirs.NewMerger(options.Repository);  				case MergeStrategy.Recursive:  					return Core.Merge.MergeStrategy.SimpleTwoWayInCore.NewMerger(options.Repository);  			}
Missing Default,GitSharp.Commands,PushCommand,C:\repos\henon_GitSharp\GitSharp\Commands\PushCommand.cs,printRefUpdateResult,The following switch statement is missing a default case: switch (rru.Status)              {                  case RemoteRefUpdate.UpdateStatus.OK:                      {                          if (rru.IsDelete)                              printUpdateLine('-'' "[deleted]"' null' remoteName' null);                          else                          {                              GitSharp.Core.Ref oldRef = result.GetAdvertisedRef(remoteName);                              if (oldRef == null)                              {                                  string summary = remoteName.StartsWith(Constants.R_TAGS) ? "[new tag]" : "[new branch]";                                  printUpdateLine('*'' summary' srcRef' remoteName' null);                              }                              else                              {                                  bool fastForward = rru.FastForward;                                  char flag = fastForward ? ' ' : '+';                                  string summary = oldRef.ObjectId.Abbreviate(Repository._internal_repo).name() +                                                   (fastForward ? ".." : "...") +                                                   rru.NewObjectId.Abbreviate(Repository._internal_repo).name();                                  string message = fastForward ? null : "forced update";                                  printUpdateLine(flag' summary' srcRef' remoteName' message);                              }                          }                          break;                      }                    case RemoteRefUpdate.UpdateStatus.NON_EXISTING:                      printUpdateLine('X'' "[no match]"' null' remoteName' null);                      break;                    case RemoteRefUpdate.UpdateStatus.REJECTED_NODELETE:                      printUpdateLine('!'' "[rejected]"' null' remoteName' "remote side does not support deleting refs");                      break;                    case RemoteRefUpdate.UpdateStatus.REJECTED_NONFASTFORWARD:                      printUpdateLine('!'' "[rejected]"' srcRef' remoteName' "non-fast forward");                      break;                    case RemoteRefUpdate.UpdateStatus.REJECTED_REMOTE_CHANGED:                      {                          string message = "remote ref object changed - is not expected one " +                                           rru.ExpectedOldObjectId.Abbreviate(Repository._internal_repo).name();                          printUpdateLine('!'' "[rejected]"' srcRef' remoteName' message);                          break;                      }                    case RemoteRefUpdate.UpdateStatus.REJECTED_OTHER_REASON:                      printUpdateLine('!'' "[rejected]"' srcRef' remoteName' rru.Message);                      break;                    case RemoteRefUpdate.UpdateStatus.UP_TO_DATE:                      if (Verbose)                          printUpdateLine('='' "[up to date]"' srcRef' remoteName' null);                      break;                    case RemoteRefUpdate.UpdateStatus.NOT_ATTEMPTED:                  case RemoteRefUpdate.UpdateStatus.AWAITING_REPORT:                      printUpdateLine('?'' "[unexpected push-process behavior]"' srcRef' remoteName' rru.Message);                      break;              }
