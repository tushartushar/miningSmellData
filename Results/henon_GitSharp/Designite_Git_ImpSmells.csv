Implementation smell,Namespace,Class,File,Method,Description
Long Method,GitSharp.CLI,Am,F:\newReposMay17\henon_GitSharp\Git\Stubs\Am.cs,Run,The method has 126 lines of code.
Long Method,GitSharp.CLI,Annotate,F:\newReposMay17\henon_GitSharp\Git\Stubs\Annotate.cs,Run,The method has 100 lines of code.
Long Method,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The method has 130 lines of code.
Long Method,GitSharp.CLI,Blame,F:\newReposMay17\henon_GitSharp\Git\Stubs\Blame.cs,Run,The method has 130 lines of code.
Long Method,GitSharp.CLI,Branch,F:\newReposMay17\henon_GitSharp\Git\Stubs\Branch.cs,Run,The method has 110 lines of code.
Long Method,GitSharp.CLI,Clone,F:\newReposMay17\henon_GitSharp\Git\Commands\Clone.cs,Run,The method has 102 lines of code.
Long Method,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The method has 276 lines of code.
Long Method,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The method has 306 lines of code.
Long Method,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The method has 286 lines of code.
Long Method,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The method has 356 lines of code.
Long Method,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The method has 389 lines of code.
Long Method,GitSharp.CLI,Grep,F:\newReposMay17\henon_GitSharp\Git\Stubs\Grep.cs,Run,The method has 173 lines of code.
Long Method,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The method has 307 lines of code.
Long Method,GitSharp.CLI,LsFiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\LsFiles.cs,Run,The method has 125 lines of code.
Long Method,GitSharp.CLI,PackObjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\PackObjects.cs,Run,The method has 140 lines of code.
Long Method,GitSharp.CLI,RevParse,F:\newReposMay17\henon_GitSharp\Git\Stubs\RevParse.cs,Run,The method has 178 lines of code.
Long Method,GitSharp.CLI,ShowBranch,F:\newReposMay17\henon_GitSharp\Git\Stubs\ShowBranch.cs,Run,The method has 100 lines of code.
Long Method,GitSharp.CLI,Rebase,F:\newReposMay17\henon_GitSharp\Git\Stubs\Rebase.cs,Run,The method has 111 lines of code.
Long Method,GitSharp.CLI,UpdateIndex,F:\newReposMay17\henon_GitSharp\Git\Stubs\UpdateIndex.cs,Run,The method has 125 lines of code.
Complex Method,GitSharp.CLI,CmdParserOptionSet,F:\newReposMay17\henon_GitSharp\Git\CmdParserOptionSet.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,Cyclomatic complexity of the method is 13
Complex Method,GitSharp.CLI,Status,F:\newReposMay17\henon_GitSharp\Git\Commands\Status.cs,displayStatusList,Cyclomatic complexity of the method is 17
Complex Method,NDesk.Options,Option,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,Option,F:\newReposMay17\henon_GitSharp\Git\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Long Parameter List,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,GetOptionParts,The method has 5 parameters.
Long Statement,GitSharp.CLI,Am,F:\newReposMay17\henon_GitSharp\Git\Stubs\Am.cs,Run,The length of the statement  "			"When the patch does not apply cleanly' fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally"' " is 178.
Long Statement,GitSharp.CLI,Am,F:\newReposMay17\henon_GitSharp\Git\Stubs\Am.cs,Run,The length of the statement  "			"By default the command records the date from the e-mail message as the commit author date' and uses the time of commit creation as the committer date"' " is 152.
Long Statement,GitSharp.CLI,Am,F:\newReposMay17\henon_GitSharp\Git\Stubs\Am.cs,Run,The length of the statement  "			"By default the command records the date from the e-mail message as the commit author date' and uses the time of commit creation as the committer date"' " is 152.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"Similar to `--stat`' but shows the number of added and deleted lines in decimal notation and the pathname without abbreviation' to make it more machine friendly"' " is 163.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"Instead of applying the patch' output a condensed summary of information obtained from git diff extended headers' such as creations' renames and mode changes"' " is 160.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"Instead of applying the patch' see if the patch is applicable to the current working tree and/or the index file and detects errors"' " is 133.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"When `--check` is in effect' or when applying the patch (which is the default when none of the options that disables it is in effect)' make sure the patch is applicable to what the current index file records"' " is 210.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"Newer 'git-diff' output has embedded 'index information' for each blob to help identify the original version that the patch applies to"' " is 137.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"For atomicity' 'git-apply' by default fails the whole patch and does not touch the working tree when some of the hunks do not apply"' " is 134.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"If you use any of the options marked \"Turns off 'apply'\" above' 'git-apply' reads and outputs the requested information without actually applying the patch"' " is 160.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"Historically we did not allow binary patch applied without an explicit permission from the user' and this flag was the way to do so"' " is 134.
Long Statement,GitSharp.CLI,Apply,F:\newReposMay17\henon_GitSharp\Git\Stubs\Apply.cs,Run,The length of the statement  "			"Historically we did not allow binary patch applied without an explicit permission from the user' and this flag was the way to do so"' " is 134.
Long Statement,GitSharp.CLI,Blame,F:\newReposMay17\henon_GitSharp\Git\Stubs\Blame.cs,Run,The length of the statement  "			"Include debugging information related to the movement of lines between files (see `-C`) and lines moved within a file (see `-M`)"' " is 131.
Long Statement,GitSharp.CLI,Checkout,F:\newReposMay17\henon_GitSharp\Git\Commands\Checkout.cs,Run,The length of the statement  "               //{ "f|force"' "When switching branches' proceed even if the index or the working tree differs from HEAD"' v => cmd.Force = true }'" is 131.
Long Statement,GitSharp.CLI,Checkout,F:\newReposMay17\henon_GitSharp\Git\Commands\Checkout.cs,Run,The length of the statement  "               //{ "ours"' "When checking out paths from the index' check out stage 2 ('ours') or 3 ('theirs') for unmerged paths"' v => cmd.Ours = true }'" is 140.
Long Statement,GitSharp.CLI,Checkout,F:\newReposMay17\henon_GitSharp\Git\Commands\Checkout.cs,Run,The length of the statement  "               //{ "theirs"' "When checking out paths from the index' check out stage 2 ('ours') or 3 ('theirs') for unmerged paths"' v => cmd.Theirs = true }'" is 144.
Long Statement,GitSharp.CLI,Checkout,F:\newReposMay17\henon_GitSharp\Git\Commands\Checkout.cs,Run,The length of the statement  "               //{ "b="' "Create a new branch named <new_branch> and start it at <start_point>; see linkgit:git-branch[1] for details"' v => cmd.B = v }'" is 138.
Long Statement,GitSharp.CLI,Checkout,F:\newReposMay17\henon_GitSharp\Git\Commands\Checkout.cs,Run,The length of the statement  "               //{ "m|merge"' "When switching branches' if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching' the command refuses to switch branches in order to preserve your modifications in context"' v => cmd.Merge = true }'" is 299.
Long Statement,GitSharp.CLI,Checkout,F:\newReposMay17\henon_GitSharp\Git\Commands\Checkout.cs,Run,The length of the statement  "               //{ "conflict="' "The same as --merge option above' but changes the way the conflicting hunks are presented' overriding the merge"' v => cmd.Conflict = v }'" is 156.
Long Statement,GitSharp.CLI,Checkout,F:\newReposMay17\henon_GitSharp\Git\Commands\Checkout.cs,Run,The length of the statement  "               //{ "p|patch"' "Interactively select hunks in the difference between the <tree-ish> (or the index' if unspecified) and the working tree"' v => cmd.Patch = true }'" is 162.
Long Statement,GitSharp.CLI,Cherrypick,F:\newReposMay17\henon_GitSharp\Git\Stubs\CherryPick.cs,Run,The length of the statement  "			"When recording the commit' append to the original commit message a note that indicates which commit this change was cherry-picked from"' " is 137.
Long Statement,GitSharp.CLI,Cherrypick,F:\newReposMay17\henon_GitSharp\Git\Stubs\CherryPick.cs,Run,The length of the statement  "			"Usually you cannot cherry-pick a merge because you do not know which side of the merge should be considered the mainline"' " is 123.
Long Statement,GitSharp.CLI,Clone,F:\newReposMay17\henon_GitSharp\Git\Commands\Clone.cs,Run,The length of the statement  "		// was: die("--local is the default behavior. This option is no-op.").  [henon] I think we should silently ignore that switch instead of exiting. " is 145.
Long Statement,GitSharp.CLI,CmdParserOptionSet,F:\newReposMay17\henon_GitSharp\Git\CmdParserOptionSet.cs,Parse,The length of the statement  "			throw new OptionException (string.Format ("Found option `{0}' as value for option `{1}'."' option' c.OptionName)' c.OptionName); " is 128.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  "                { "u|untracked-files="' "Show untracked files' optional {MODE}s: all' normal' no."' (string v) => untrackedFileMode = v }'" is 122.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "h|help"' "Display this help information. To see online help' use: git help <command>"' v=>OfflineHelp()}'" is 124.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "a|all"' "Tell the command to automatically stage files that have been modified and deleted' but new files you have not told git about are not affected"' v => cmd.All = true }'" is 194.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "C|reuse-message="' "Take an existing commit object' and reuse the log message and the authorship information (including the timestamp) when creating the commit"' v => cmd.ReuseMessage = v }'" is 209.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "c|reedit-message="' "Like '-C'' but with '-c' the editor is invoked' so that the user can further edit the commit message"' v => cmd.ReeditMessage = v }'" is 172.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "reset-author"' "When used with -C/-c/--amend options' declare that the authorship of the resulting commit now belongs of the committer"' v => cmd.ResetAuthor = true }'" is 186.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "t|template="' "Use the contents of the given file as the initial version of the commit message"' v => cmd.Template = v }'" is 140.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "s|signoff"' "Add Signed-off-by line by the committer at the end of the commit log message"' v => cmd.Signoff = true }'" is 137.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "n|no-verify"' "This option bypasses the pre-commit and commit-msg hooks"' v => cmd.NoVerify = true }'" is 120.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "allow-empty"' "Usually recording a commit that has the exact same tree as its sole parent commit is a mistake' and the command prevents you from making such a commit"' v => cmd.AllowEmpty = true }'" is 216.
Long Statement,GitSharp.CLI,Commit,F:\newReposMay17\henon_GitSharp\Git\Commands\Commit.cs,Run,The length of the statement  " //              { "e|edit"' "The message taken from file with `-F`' command line with `-m`' and from file with `-C` are usually used as the commit log message unmodified"' v => cmd.Edit = true }'" is 195.
Long Statement,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The length of the statement  "		/*                { "replace-all"' "Replaces all lines matching the key (and optionally the value_regex)."' v => cmd.ReplaceAll = true}'" is 136.
Long Statement,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The length of the statement  "                { "bool-or-int"' "Ensure that the output matches the format of either --bool or --int' as described above"' v => cmd.BoolOrInt = true }'" is 136.
Long Statement,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The length of the statement  "                { "e|edit"' "Opens an editor to modify the specified config file as --global' --system' or repository (default)"' v => cmd.Edit = true }'*/}; " is 141.
Long Statement,GitSharp.CLI,Countobjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\CountObjects.cs,Run,The length of the statement  "			"In addition to the number of loose objects and disk space consumed' it reports the number of in-pack objects' number of packs' disk space consumed by those packs' and number of objects that can be removed by running `git prune-packed`"' " is 237.
Long Statement,GitSharp.CLI,Describe,F:\newReposMay17\henon_GitSharp\Git\Stubs\Describe.cs,Run,The length of the statement  "			"Instead of using the default 7 hexadecimal digits as the abbreviated object name' use <n> digits' or as many digits as needed to form a unique object name"' " is 157.
Long Statement,GitSharp.CLI,Describe,F:\newReposMay17\henon_GitSharp\Git\Stubs\Describe.cs,Run,The length of the statement  "			"Instead of considering only the 10 most recent tags as candidates to describe the input committish consider up to <n> candidates"' " is 131.
Long Statement,GitSharp.CLI,Describe,F:\newReposMay17\henon_GitSharp\Git\Stubs\Describe.cs,Run,The length of the statement  "			"Always output the long format (the tag' the number of commits and the abbreviated commit name) even when it matches a tag"' " is 124.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"Similar to `--stat`' but shows number of added and deleted lines in decimal notation and pathname without abbreviation' to make it more machine friendly"' " is 155.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"Output only the last line of the `--stat` format containing total number of modified files' as well as number of added and deleted lines"' " is 139.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"Instead of the first handful of characters' show the full pre- and post-image blob object names on the \"index\" line when generating patch format output"' " is 156.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines' show only a partial prefix"' " is 143.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"ifndef::git-format-patch[] Select only files that are Added (`A`)' Copied (`C`)' Deleted (`D`)' Modified (`M`)' Renamed (`R`)' have their type (i"' " is 148.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"For performance reasons' by default' `-C` option finds copies only if the original file of the copy was modified in the same changeset"' " is 137.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"When `-S` finds a change' show all the changes in that changeset' not just the files that contain the change in <string>"' " is 123.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"When run from a subdirectory of the project' it can be told to exclude changes outside the directory and show pathnames relative to it with this option"' " is 154.
Long Statement,GitSharp.CLI,Diff,F:\newReposMay17\henon_GitSharp\Git\Stubs\Diff.cs,Run,The length of the statement  "			"Show the context between diff hunks' up to the specified number of lines' thereby fusing hunks that are close to each other"' " is 126.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"This compares stage 2 (our branch)' stage 3 (their branch) and the working tree file and outputs a combined diff' similar to the way 'diff-tree' shows a merge commit with these flags"' " is 185.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"Similar to `--stat`' but shows number of added and deleted lines in decimal notation and pathname without abbreviation' to make it more machine friendly"' " is 155.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"Output only the last line of the `--stat` format containing total number of modified files' as well as number of added and deleted lines"' " is 139.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"Instead of the first handful of characters' show the full pre- and post-image blob object names on the \"index\" line when generating patch format output"' " is 156.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines' show only a partial prefix"' " is 143.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"ifndef::git-format-patch[] Select only files that are Added (`A`)' Copied (`C`)' Deleted (`D`)' Modified (`M`)' Renamed (`R`)' have their type (i"' " is 148.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"For performance reasons' by default' `-C` option finds copies only if the original file of the copy was modified in the same changeset"' " is 137.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"When `-S` finds a change' show all the changes in that changeset' not just the files that contain the change in <string>"' " is 123.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"When run from a subdirectory of the project' it can be told to exclude changes outside the directory and show pathnames relative to it with this option"' " is 154.
Long Statement,GitSharp.CLI,Difffiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffFiles.cs,Run,The length of the statement  "			"Show the context between diff hunks' up to the specified number of lines' thereby fusing hunks that are close to each other"' " is 126.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"Similar to `--stat`' but shows number of added and deleted lines in decimal notation and pathname without abbreviation' to make it more machine friendly"' " is 155.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"Output only the last line of the `--stat` format containing total number of modified files' as well as number of added and deleted lines"' " is 139.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"Instead of the first handful of characters' show the full pre- and post-image blob object names on the \"index\" line when generating patch format output"' " is 156.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines' show only a partial prefix"' " is 143.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"ifndef::git-format-patch[] Select only files that are Added (`A`)' Copied (`C`)' Deleted (`D`)' Modified (`M`)' Renamed (`R`)' have their type (i"' " is 148.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"For performance reasons' by default' `-C` option finds copies only if the original file of the copy was modified in the same changeset"' " is 137.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"When `-S` finds a change' show all the changes in that changeset' not just the files that contain the change in <string>"' " is 123.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"When run from a subdirectory of the project' it can be told to exclude changes outside the directory and show pathnames relative to it with this option"' " is 154.
Long Statement,GitSharp.CLI,Diffindex,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffIndex.cs,Run,The length of the statement  "			"Show the context between diff hunks' up to the specified number of lines' thereby fusing hunks that are close to each other"' " is 126.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"By default' 'git-diff-tree --stdin' shows differences' either in machine-readable form (without '-p') or in patch form (with '-p')"' " is 133.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one <tree-ish>' or '--stdin')"' " is 143.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"Similar to `--stat`' but shows number of added and deleted lines in decimal notation and pathname without abbreviation' to make it more machine friendly"' " is 155.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"Output only the last line of the `--stat` format containing total number of modified files' as well as number of added and deleted lines"' " is 139.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"Instead of the first handful of characters' show the full pre- and post-image blob object names on the \"index\" line when generating patch format output"' " is 156.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines' show only a partial prefix"' " is 143.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"ifndef::git-format-patch[] Select only files that are Added (`A`)' Copied (`C`)' Deleted (`D`)' Modified (`M`)' Renamed (`R`)' have their type (i"' " is 148.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"For performance reasons' by default' `-C` option finds copies only if the original file of the copy was modified in the same changeset"' " is 137.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"When `-S` finds a change' show all the changes in that changeset' not just the files that contain the change in <string>"' " is 123.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"When run from a subdirectory of the project' it can be told to exclude changes outside the directory and show pathnames relative to it with this option"' " is 154.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"Show the context between diff hunks' up to the specified number of lines' thereby fusing hunks that are close to each other"' " is 126.
Long Statement,GitSharp.CLI,Difftree,F:\newReposMay17\henon_GitSharp\Git\Stubs\DiffTree.cs,Run,The length of the statement  "			"The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user"' " is 208.
Long Statement,GitSharp.CLI,Fastexport,F:\newReposMay17\henon_GitSharp\Git\Stubs\FastExport.cs,Run,The length of the statement  "			"Perform move and/or copy detection' as described in the linkgit:git-diff[1] manual page' and use it to generate rename and copy commands in the output dump"' " is 158.
Long Statement,GitSharp.CLI,Fastexport,F:\newReposMay17\henon_GitSharp\Git\Stubs\FastExport.cs,Run,The length of the statement  "			"Perform move and/or copy detection' as described in the linkgit:git-diff[1] manual page' and use it to generate rename and copy commands in the output dump"' " is 158.
Long Statement,GitSharp.CLI,Fastimport,F:\newReposMay17\henon_GitSharp\Git\Stubs\FastImport.cs,Run,The length of the statement  "			"Force updating modified existing branches' even if doing so would cause commits to be lost (as the new commit does not contain the old commit)"' " is 145.
Long Statement,GitSharp.CLI,Fastimport,F:\newReposMay17\henon_GitSharp\Git\Stubs\FastImport.cs,Run,The length of the statement  "			"After creating a packfile' print a line of data to <file> listing the filename of the packfile and the last commit on each branch that was written to that packfile"' " is 166.
Long Statement,GitSharp.CLI,Fastimport,F:\newReposMay17\henon_GitSharp\Git\Stubs\FastImport.cs,Run,The length of the statement  "			"Display some basic statistics about the objects fast-import has created' the packfiles they were stored into' and the memory used by fast-import during this run"' " is 163.
Long Statement,GitSharp.CLI,Fetchpack,F:\newReposMay17\henon_GitSharp\Git\Stubs\FetchPack.cs,Run,The length of the statement  "			"Do not invoke 'git-unpack-objects' on received data' but create a single packfile out of it instead' and store it in the object database"' " is 139.
Long Statement,GitSharp.CLI,Fetchpack,F:\newReposMay17\henon_GitSharp\Git\Stubs\FetchPack.cs,Run,The length of the statement  "			"If the remote side supports it' annotated tags objects will be downloaded on the same connection as the other objects if the object the tag references is downloaded"' " is 167.
Long Statement,GitSharp.CLI,Filterbranch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FilterBranch.cs,Run,The length of the statement  "			"'git-filter-branch' refuses to start with an existing temporary directory or when there are already refs starting with 'refs/original/'' unless forced"' " is 153.
Long Statement,GitSharp.CLI,Fmtmergemsg,F:\newReposMay17\henon_GitSharp\Git\Stubs\FmtMergeMsg.cs,Run,The length of the statement  "			"In addition to branch names' populate the log message with one-line descriptions from the actual commits that are being merged"' " is 129.
Long Statement,GitSharp.CLI,Fmtmergemsg,F:\newReposMay17\henon_GitSharp\Git\Stubs\FmtMergeMsg.cs,Run,The length of the statement  "		//{ "summary"' "Synonyms to --log and --no-log; these are deprecated and will be removed in the future"' v => cmd.Summary = true }' " is 131.
Long Statement,GitSharp.CLI,Fmtmergemsg,F:\newReposMay17\henon_GitSharp\Git\Stubs\FmtMergeMsg.cs,Run,The length of the statement  "		//{ "no-summary"' "Synonyms to --log and --no-log; these are deprecated and will be removed in the future"' v => cmd.NoSummary = true }' " is 136.
Long Statement,GitSharp.CLI,Foreachref,F:\newReposMay17\henon_GitSharp\Git\Stubs\ForEachRef.cs,Run,The length of the statement  "			"If given' strings that substitute `%(fieldname)` placeholders are quoted as string literals suitable for the specified host language"' " is 135.
Long Statement,GitSharp.CLI,Foreachref,F:\newReposMay17\henon_GitSharp\Git\Stubs\ForEachRef.cs,Run,The length of the statement  "			"If given' strings that substitute `%(fieldname)` placeholders are quoted as string literals suitable for the specified host language"' " is 135.
Long Statement,GitSharp.CLI,Foreachref,F:\newReposMay17\henon_GitSharp\Git\Stubs\ForEachRef.cs,Run,The length of the statement  "			"If given' strings that substitute `%(fieldname)` placeholders are quoted as string literals suitable for the specified host language"' " is 135.
Long Statement,GitSharp.CLI,Foreachref,F:\newReposMay17\henon_GitSharp\Git\Stubs\ForEachRef.cs,Run,The length of the statement  "			"If given' strings that substitute `%(fieldname)` placeholders are quoted as string literals suitable for the specified host language"' " is 135.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Create multipart/mixed attachment' the first part of which is the commit message and the patch itself in the second part' with `Content-Disposition: attachment`"' " is 163.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Create multipart/mixed attachment' the first part of which is the commit message and the patch itself in the second part' with `Content-Disposition: inline`"' " is 159.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Controls addition of `In-Reply-To` and `References` headers to make the second and subsequent mails appear as replies to the first"' " is 133.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Controls addition of `In-Reply-To` and `References` headers to make the second and subsequent mails appear as replies to the first"' " is 133.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Make the first mail (or all the mails with `--no-thread`) appear as a reply to the given Message-Id' which avoids breaking threads to provide a new patch series"' " is 163.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Treat the revision argument as a <revision range>' even if it is just a single commit (that would normally be treated as a <since>)"' " is 134.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Similar to `--stat`' but shows number of added and deleted lines in decimal notation and pathname without abbreviation' to make it more machine friendly"' " is 155.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Output only the last line of the `--stat` format containing total number of modified files' as well as number of added and deleted lines"' " is 139.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Instead of the first handful of characters' show the full pre- and post-image blob object names on the \"index\" line when generating patch format output"' " is 156.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines' show only a partial prefix"' " is 143.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"ifndef::git-format-patch[] Select only files that are Added (`A`)' Copied (`C`)' Deleted (`D`)' Modified (`M`)' Renamed (`R`)' have their type (i"' " is 148.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"For performance reasons' by default' `-C` option finds copies only if the original file of the copy was modified in the same changeset"' " is 137.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"When `-S` finds a change' show all the changes in that changeset' not just the files that contain the change in <string>"' " is 123.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"When run from a subdirectory of the project' it can be told to exclude changes outside the directory and show pathnames relative to it with this option"' " is 154.
Long Statement,GitSharp.CLI,Formatpatch,F:\newReposMay17\henon_GitSharp\Git\Stubs\FormatPatch.cs,Run,The length of the statement  "			"Show the context between diff hunks' up to the specified number of lines' thereby fusing hunks that are close to each other"' " is 126.
Long Statement,GitSharp.CLI,Fsck,F:\newReposMay17\henon_GitSharp\Git\Stubs\Fsck.cs,Run,The length of the statement  "			"Check not just objects in GIT_OBJECT_DIRECTORY ($GIT_DIR/objects)' but also the ones found in alternate object pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES or $GIT_DIR/objects/info/alternates' and in packed git archives found in $GIT_DIR/objects/pack and corresponding pack subdirectories in alternate object pools"' " is 321.
Long Statement,GitSharp.CLI,Fsck,F:\newReposMay17\henon_GitSharp\Git\Stubs\Fsck.cs,Run,The length of the statement  "			"Enable more strict checking' namely to catch a file mode recorded with g+w bit set' which was created by older versions of git"' " is 129.
Long Statement,GitSharp.CLI,Grep,F:\newReposMay17\henon_GitSharp\Git\Stubs\Grep.cs,Run,The length of the statement  "			"Match the pattern only at word boundary (either begin at the beginning of a line' or preceded by a non-word character; end at the end of a line or followed by a non-word character)"' " is 183.
Long Statement,GitSharp.CLI,Grep,F:\newReposMay17\henon_GitSharp\Git\Stubs\Grep.cs,Run,The length of the statement  "			"Show `context` trailing (`A` -- after)' or leading (`B` -- before)' or both (`C` -- context) lines' and place a line containing `--` between contiguous groups of matches"' " is 172.
Long Statement,GitSharp.CLI,Grep,F:\newReposMay17\henon_GitSharp\Git\Stubs\Grep.cs,Run,The length of the statement  "			"Show `context` trailing (`A` -- after)' or leading (`B` -- before)' or both (`C` -- context) lines' and place a line containing `--` between contiguous groups of matches"' " is 172.
Long Statement,GitSharp.CLI,Grep,F:\newReposMay17\henon_GitSharp\Git\Stubs\Grep.cs,Run,The length of the statement  "			"Show `context` trailing (`A` -- after)' or leading (`B` -- before)' or both (`C` -- context) lines' and place a line containing `--` between contiguous groups of matches"' " is 172.
Long Statement,GitSharp.CLI,Grep,F:\newReposMay17\henon_GitSharp\Git\Stubs\Grep.cs,Run,The length of the statement  "			"Show the preceding line that contains the function name of the match' unless the matching line is a function name itself"' " is 123.
Long Statement,GitSharp.CLI,Grep,F:\newReposMay17\henon_GitSharp\Git\Stubs\Grep.cs,Run,The length of the statement  "			"When giving multiple pattern expressions combined with `--or`' this flag is specified to limit the match to files that have lines to match all of them"' " is 153.
Long Statement,GitSharp.CLI,Hashobject,F:\newReposMay17\henon_GitSharp\Git\Stubs\HashObject.cs,Run,The length of the statement  "			"Hash the contents as is' ignoring any input filter that would have been chosen by the attributes mechanism' including crlf conversion"' " is 136.
Long Statement,GitSharp.CLI,Indexpack,F:\newReposMay17\henon_GitSharp\Git\Stubs\IndexPack.cs,Run,The length of the statement  "			"It is possible for 'git-pack-objects' to build \"thin\" pack' which records objects in deltified form based on objects not included in the pack to reduce network traffic"' " is 172.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"Similar to `--stat`' but shows number of added and deleted lines in decimal notation and pathname without abbreviation' to make it more machine friendly"' " is 155.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"Output only the last line of the `--stat` format containing total number of modified files' as well as number of added and deleted lines"' " is 139.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"Instead of the first handful of characters' show the full pre- and post-image blob object names on the \"index\" line when generating patch format output"' " is 156.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines' show only a partial prefix"' " is 143.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"ifndef::git-format-patch[] Select only files that are Added (`A`)' Copied (`C`)' Deleted (`D`)' Modified (`M`)' Renamed (`R`)' have their type (i"' " is 148.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"For performance reasons' by default' `-C` option finds copies only if the original file of the copy was modified in the same changeset"' " is 137.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"When `-S` finds a change' show all the changes in that changeset' not just the files that contain the change in <string>"' " is 123.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"When run from a subdirectory of the project' it can be told to exclude changes outside the directory and show pathnames relative to it with this option"' " is 154.
Long Statement,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The length of the statement  "			"Show the context between diff hunks' up to the specified number of lines' thereby fusing hunks that are close to each other"' " is 126.
Long Statement,GitSharp.CLI,LsFiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\LsFiles.cs,Run,The length of the statement  "			"If a whole directory is classified as \"other\"' show just its name (with a trailing slash) and not its whole contents"' " is 121.
Long Statement,GitSharp.CLI,LsFiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\LsFiles.cs,Run,The length of the statement  "			"Identify the file status with the following tags (followed by a space) at the start of each line: H::cached M::unmerged R::removed/deleted C::modified/changed K::to be killed ?::other"' " is 186.
Long Statement,GitSharp.CLI,LsFiles,F:\newReposMay17\henon_GitSharp\Git\Stubs\LsFiles.cs,Run,The length of the statement  "			"Similar to `-t`' but use lowercase letters for files that are marked as 'assume unchanged' (see linkgit:git-update-index[1])"' " is 127.
Long Statement,GitSharp.CLI,Mailinfo,F:\newReposMay17\henon_GitSharp\Git\Stubs\Mailinfo.cs,Run,The length of the statement  "			"Usually the program 'cleans up' the Subject: header line to extract the title line for the commit log message' among which (1) remove 'Re:' or 're:'' (2) leading whitespaces' (3) '[' up to ']'' typically '[PATCH]'' and then prepends \"[PATCH] \""' " is 248.
Long Statement,GitSharp.CLI,Mailinfo,F:\newReposMay17\henon_GitSharp\Git\Stubs\Mailinfo.cs,Run,The length of the statement  "			"The commit log message' author name and author email are taken from the e-mail' and after minimally decoding MIME transfer encoding' re-coded in UTF-8 by transliterating them"' " is 177.
Long Statement,GitSharp.CLI,MergeFile,F:\newReposMay17\henon_GitSharp\Git\Stubs\MergeFile.cs,Run,The length of the statement  "			"This option may be given up to three times' and specifies labels to be used in place of the corresponding file names in conflict reports"' " is 139.
Long Statement,GitSharp.CLI,MergeIndex,F:\newReposMay17\henon_GitSharp\Git\Stubs\MergeIndex.cs,Run,The length of the statement  "			"Instead of stopping at the first failed merge' do all of them in one shot - continue with merging even when previous merges returned errors' and only return the error code after all the merges"' " is 195.
Long Statement,GitSharp.CLI,Mv,F:\newReposMay17\henon_GitSharp\Git\Stubs\Mv.cs,Run,The length of the statement  "			"Force renaming or moving of a file even if the target exists         Skip move or rename actions which would lead to an error condition"' " is 138.
Long Statement,GitSharp.CLI,Mv,F:\newReposMay17\henon_GitSharp\Git\Stubs\Mv.cs,Run,The length of the statement  "			"Force renaming or moving of a file even if the target exists         Skip move or rename actions which would lead to an error condition"' " is 138.
Long Statement,GitSharp.CLI,Mv,F:\newReposMay17\henon_GitSharp\Git\Stubs\Mv.cs,Run,The length of the statement  "			"Force renaming or moving of a file even if the target exists         Skip move or rename actions which would lead to an error condition"' " is 138.
Long Statement,GitSharp.CLI,PackObjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\PackObjects.cs,Run,The length of the statement  "			"This option provides an additional limit on top of `--window`; the window size will dynamically scale down so as to not take up more than N bytes in memory"' " is 158.
Long Statement,GitSharp.CLI,PackObjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\PackObjects.cs,Run,The length of the statement  "			"This flag is similar to `--incremental`; instead of ignoring all packed objects' it only ignores objects that are packed and/or not in the local object store (i"' " is 163.
Long Statement,GitSharp.CLI,PackObjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\PackObjects.cs,Run,The length of the statement  "			"Progress status is reported on the standard error stream by default when it is attached to a terminal' unless -q is specified"' " is 128.
Long Statement,GitSharp.CLI,PackObjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\PackObjects.cs,Run,The length of the statement  "			"When --stdout is specified then progress report is displayed during the object count and compression phases but inhibited during the write-out phase"' " is 151.
Long Statement,GitSharp.CLI,PackObjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\PackObjects.cs,Run,The length of the statement  "			"This flag tells the command not to reuse existing object data at all' including non deltified object' forcing recompression of everything"' " is 140.
Long Statement,GitSharp.CLI,PackObjects,F:\newReposMay17\henon_GitSharp\Git\Stubs\PackObjects.cs,Run,The length of the statement  "			"A packed archive can express base object of a delta as either 20-byte object name or as an offset in the stream' but older version of git does not understand the latter"' " is 171.
Long Statement,GitSharp.CLI,ReadTree,F:\newReposMay17\henon_GitSharp\Git\Stubs\ReadTree.cs,Run,The length of the statement  "			"Usually a merge requires the index file as well as the files in the working tree are up to date with the current head commit' in order not to lose local changes"' " is 163.
Long Statement,GitSharp.CLI,ReadTree,F:\newReposMay17\henon_GitSharp\Git\Stubs\ReadTree.cs,Run,The length of the statement  "			"Restrict three-way merge by 'git-read-tree' to happen only if there is no file-level merging required' instead of resolving merge for trivial cases and leaving conflicting files unresolved in the index"' " is 204.
Long Statement,GitSharp.CLI,ReadTree,F:\newReposMay17\henon_GitSharp\Git\Stubs\ReadTree.cs,Run,The length of the statement  "			"Usually a three-way merge by 'git-read-tree' resolves the merge for really trivial cases and leaves other cases unresolved in the index' so that Porcelains can implement different merge policies"' " is 197.
Long Statement,GitSharp.CLI,ReadTree,F:\newReposMay17\henon_GitSharp\Git\Stubs\ReadTree.cs,Run,The length of the statement  "			"When running the command with `-u` and `-m` options' the merge result may need to overwrite paths that are not tracked in the current branch"' " is 143.
Long Statement,GitSharp.CLI,Reflog,F:\newReposMay17\henon_GitSharp\Git\Stubs\Reflog.cs,Run,The length of the statement  "			"This revamps the logic -- the definition of \"broken commit\" becomes: a commit that is not reachable from any of the refs and there is a missing object among the commit' tree' or blob objects reachable from it that is not reachable from any of the refs"' " is 256.
Long Statement,GitSharp.CLI,Reflog,F:\newReposMay17\henon_GitSharp\Git\Stubs\Reflog.cs,Run,The length of the statement  "			"While expiring or deleting' adjust each reflog entry to ensure that the `old` sha1 field points to the `new` sha1 field of the previous entry"' " is 144.
Long Statement,GitSharp.CLI,Repack,F:\newReposMay17\henon_GitSharp\Git\Stubs\Repack.cs,Run,The length of the statement  "			"This option provides an additional limit on top of `--window`; the window size will dynamically scale down so as to not take up more than N bytes in memory"' " is 158.
Long Statement,GitSharp.CLI,Reset,F:\newReposMay17\henon_GitSharp\Git\Stubs\Reset.cs,Run,The length of the statement  "			"Resets the index to match the tree recorded by the named commit' and updates the files that are different between the named commit and the current commit in the working tree"' " is 176.
Long Statement,GitSharp.CLI,RevParse,F:\newReposMay17\henon_GitSharp\Git\Stubs\RevParse.cs,Run,The length of the statement  "			"When showing object names' prefix them with '{caret}' and strip '{caret}' prefix from the object names that already have one"' " is 127.
Long Statement,GitSharp.CLI,RevParse,F:\newReposMay17\henon_GitSharp\Git\Stubs\RevParse.cs,Run,The length of the statement  "			"Usually the object names are output in SHA1 form (with possible '{caret}' prefix); this option makes them output in a form as close to the original input as possible"' " is 168.
Long Statement,GitSharp.CLI,RevParse,F:\newReposMay17\henon_GitSharp\Git\Stubs\RevParse.cs,Run,The length of the statement  "			"When the command is invoked from a subdirectory' show the path of the current directory relative to the top-level directory"' " is 126.
Long Statement,GitSharp.CLI,RevParse,F:\newReposMay17\henon_GitSharp\Git\Stubs\RevParse.cs,Run,The length of the statement  "			"When the command is invoked from a subdirectory' show the path of the top-level directory relative to the current directory (typically a sequence of \""' " is 154.
Long Statement,GitSharp.CLI,RevParse,F:\newReposMay17\henon_GitSharp\Git\Stubs\RevParse.cs,Run,The length of the statement  "		//{ "short"' "Instead of outputting the full SHA1 values of object names try to abbreviate them to a shorter unique name"' v => cmd.Short = true }' " is 147.
Long Statement,GitSharp.CLI,Show,F:\newReposMay17\henon_GitSharp\Git\Stubs\Show.cs,Run,The length of the statement  "	                { "pretty|format"' "Pretty print the contents of the commit logs in a specified {format}"' (string v) => prettyFormat = v}'" is 123.
Long Statement,GitSharp.CLI,ShowBranch,F:\newReposMay17\henon_GitSharp\Git\Stubs\ShowBranch.cs,Run,The length of the statement  "			"With this option' the command includes the current branch to the list of revs to be shown when it is not given on the command line"' " is 133.
Long Statement,GitSharp.CLI,ShowBranch,F:\newReposMay17\henon_GitSharp\Git\Stubs\ShowBranch.cs,Run,The length of the statement  "			"This option is similar to '--topo-order' in the sense that no parent comes before all of its children' but otherwise commits are ordered according to their commit date"' " is 170.
Long Statement,GitSharp.CLI,Status,F:\newReposMay17\henon_GitSharp\Git\Commands\Status.cs,Run,The length of the statement  "                { "u|untracked-files="' "Show untracked files' optional {MODE}s: all' normal' no."' (string v) => untrackedFileMode = v }'" is 122.
Long Statement,GitSharp.CLI,SymbolicRef,F:\newReposMay17\henon_GitSharp\Git\Stubs\SymbolicRef.cs,Run,The length of the statement  "			"Do not issue an error message if the <name> is not a symbolic ref but a detached HEAD; instead exit with non-zero status silently"' " is 132.
Long Statement,GitSharp.CLI,UpdateIndex,F:\newReposMay17\henon_GitSharp\Git\Stubs\UpdateIndex.cs,Run,The length of the statement  "			"Do not create objects in the object database for all <file> arguments that follow this flag; just insert their object IDs into the index"' " is 139.
Long Statement,GitSharp.CLI,Whatchanged,F:\newReposMay17\henon_GitSharp\Git\Stubs\Whatchanged.cs,Run,The length of the statement  "			"Show textual diffs' instead of the git internal diff output format that is useful only to tell the changed paths and their nature of changes"' " is 143.
Long Statement,GitSharp.CLI,Whatchanged,F:\newReposMay17\henon_GitSharp\Git\Stubs\Whatchanged.cs,Run,The length of the statement  "			"The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user"' " is 208.
Long Statement,NDesk.Options,OptionValueCollection,F:\newReposMay17\henon_GitSharp\Git\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,NDesk.Options,Option,F:\newReposMay17\henon_GitSharp\Git\Options.cs,Parse,The length of the statement  "	bool nullable = tt.IsValueType && tt.IsGenericType && !tt.IsGenericTypeDefinition && tt.GetGenericTypeDefinition () == typeof(Nullable<>); " is 138.
Long Statement,NDesk.Options,Option,F:\newReposMay17\henon_GitSharp\Git\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' targetType.Name' c.OptionName)' c.OptionName' e); " is 193.
Long Statement,NDesk.Options,Option,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,NDesk.Options,Option,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,Parse,The length of the statement  "	where ++c.OptionIndex >= 0 && (process || def != null) ? process ? argument == "--" ? (process = false) : !Parse (argument' c) ? def != null ? Unprocessed (null' def' c' argument) : true : false : def != null ? Unprocessed (null' def' c' argument) : true : true " is 261.
Long Statement,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' StringSplitOptions.None) : new string[] { " is 137.
Long Statement,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Complex Conditional,NDesk.Options,Option,F:\newReposMay17\henon_GitSharp\Git\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Empty Catch Block,GitSharp.CLI,Fmtmergemsg,F:\newReposMay17\henon_GitSharp\Git\Stubs\FmtMergeMsg.cs,Run,The method has an empty catch block.
Empty Catch Block,GitSharp.CLI,Log,F:\newReposMay17\henon_GitSharp\Git\Commands\Log.cs,Run,The method has an empty catch block.
Empty Catch Block,GitSharp.CLI,TextBuiltin,F:\newReposMay17\henon_GitSharp\Git\TextBuiltin.cs,Execute,The method has an empty catch block.
Magic Number,GitSharp.CLI,Clone,F:\newReposMay17\henon_GitSharp\Git\Commands\Clone.cs,Run,The following statement contains a magic number: try {  	List<String> arguments = ParseOptions (args);  	if (arguments.Count != 1 && arguments.Count != 2) {  		OfflineHelp ();  		return;  	}  	cmd.Source = arguments [0];  	if (arguments.Count == 2)// <directory> parameter is optional  	 {  		cmd.Directory = arguments [1];  	}  	cmd.Execute ();  } catch (Exception e) {  	cmd.OutputStream.WriteLine (e.Message);  }  
Magic Number,GitSharp.CLI,Clone,F:\newReposMay17\henon_GitSharp\Git\Commands\Clone.cs,Run,The following statement contains a magic number: try {  	List<String> arguments = ParseOptions (args);  	if (arguments.Count != 1 && arguments.Count != 2) {  		OfflineHelp ();  		return;  	}  	cmd.Source = arguments [0];  	if (arguments.Count == 2)// <directory> parameter is optional  	 {  		cmd.Directory = arguments [1];  	}  	cmd.Execute ();  } catch (Exception e) {  	cmd.OutputStream.WriteLine (e.Message);  }  
Magic Number,GitSharp.CLI,Clone,F:\newReposMay17\henon_GitSharp\Git\Commands\Clone.cs,Run,The following statement contains a magic number: if (arguments.Count != 1 && arguments.Count != 2) {  	OfflineHelp ();  	return;  }  
Magic Number,GitSharp.CLI,Clone,F:\newReposMay17\henon_GitSharp\Git\Commands\Clone.cs,Run,The following statement contains a magic number: if (arguments.Count == 2)// <directory> parameter is optional   {  	cmd.Directory = arguments [1];  }  
Magic Number,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The following statement contains a magic number: try {  	List<String> arguments = ParseOptions (args);  	if (arguments.Count > 0) {  		cmd.Arg1 = arguments [0];  		if (arguments.Count > 1)  			cmd.Arg2 = arguments [1];  		else  			cmd.Arg2 = "";  		if (arguments.Count > 2)  			cmd.Arg3 = arguments [2];  		else  			cmd.Arg3 = "";  		cmd.Execute ();  	} else if (cmd.List) {  		cmd.Execute ();  	} else {  		OfflineHelp ();  	}  } catch (Exception e) {  	cmd.OutputStream.WriteLine (e.Message);  }  
Magic Number,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The following statement contains a magic number: try {  	List<String> arguments = ParseOptions (args);  	if (arguments.Count > 0) {  		cmd.Arg1 = arguments [0];  		if (arguments.Count > 1)  			cmd.Arg2 = arguments [1];  		else  			cmd.Arg2 = "";  		if (arguments.Count > 2)  			cmd.Arg3 = arguments [2];  		else  			cmd.Arg3 = "";  		cmd.Execute ();  	} else if (cmd.List) {  		cmd.Execute ();  	} else {  		OfflineHelp ();  	}  } catch (Exception e) {  	cmd.OutputStream.WriteLine (e.Message);  }  
Magic Number,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The following statement contains a magic number: if (arguments.Count > 0) {  	cmd.Arg1 = arguments [0];  	if (arguments.Count > 1)  		cmd.Arg2 = arguments [1];  	else  		cmd.Arg2 = "";  	if (arguments.Count > 2)  		cmd.Arg3 = arguments [2];  	else  		cmd.Arg3 = "";  	cmd.Execute ();  } else if (cmd.List) {  	cmd.Execute ();  } else {  	OfflineHelp ();  }  
Magic Number,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The following statement contains a magic number: if (arguments.Count > 0) {  	cmd.Arg1 = arguments [0];  	if (arguments.Count > 1)  		cmd.Arg2 = arguments [1];  	else  		cmd.Arg2 = "";  	if (arguments.Count > 2)  		cmd.Arg3 = arguments [2];  	else  		cmd.Arg3 = "";  	cmd.Execute ();  } else if (cmd.List) {  	cmd.Execute ();  } else {  	OfflineHelp ();  }  
Magic Number,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The following statement contains a magic number: if (arguments.Count > 2)  	cmd.Arg3 = arguments [2];  else  	cmd.Arg3 = "";  
Magic Number,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The following statement contains a magic number: if (arguments.Count > 2)  	cmd.Arg3 = arguments [2];  else  	cmd.Arg3 = "";  
Magic Number,GitSharp.CLI,Config,F:\newReposMay17\henon_GitSharp\Git\Commands\Config.cs,Run,The following statement contains a magic number: cmd.Arg3 = arguments [2];  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,Main,The following statement contains a magic number: try {  	#if ported  	                //AwtAuthenticator.install();                 //HttpSupport.configureHttpProxy(); #endif  	execute (args);  } catch (Die err) {  	Console.Error.WriteLine ("fatal: " + err.Message);  	if (showStackTrace)  		err.printStackTrace ();  	Exit (128);  } catch (Exception err) {  	if (!showStackTrace && err.InnerException != null && err is TransportException)  		Console.Error.WriteLine ("fatal: " + err.InnerException.Message);  	if (err.GetType ().Name.StartsWith ("GitSharp.Exceptions.")) {  		Console.Error.WriteLine ("fatal: " + err.Message);  		if (showStackTrace)  			err.printStackTrace ();  		Exit (128);  	}  	err.printStackTrace ();  	Exit (1);  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,Main,The following statement contains a magic number: try {  	#if ported  	                //AwtAuthenticator.install();                 //HttpSupport.configureHttpProxy(); #endif  	execute (args);  } catch (Die err) {  	Console.Error.WriteLine ("fatal: " + err.Message);  	if (showStackTrace)  		err.printStackTrace ();  	Exit (128);  } catch (Exception err) {  	if (!showStackTrace && err.InnerException != null && err is TransportException)  		Console.Error.WriteLine ("fatal: " + err.InnerException.Message);  	if (err.GetType ().Name.StartsWith ("GitSharp.Exceptions.")) {  		Console.Error.WriteLine ("fatal: " + err.Message);  		if (showStackTrace)  			err.printStackTrace ();  		Exit (128);  	}  	err.printStackTrace ();  	Exit (1);  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,Main,The following statement contains a magic number: Exit (128);  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,Main,The following statement contains a magic number: if (err.GetType ().Name.StartsWith ("GitSharp.Exceptions.")) {  	Console.Error.WriteLine ("fatal: " + err.Message);  	if (showStackTrace)  		err.printStackTrace ();  	Exit (128);  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,Main,The following statement contains a magic number: Exit (128);  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (argv.Count () == 0) {  	ShowHelp ();  } else if (!argv [0].StartsWith ("--") && !argv [0].StartsWith ("-")) {  	CommandCatalog catalog = new CommandCatalog ();  	CommandRef subcommand = catalog.Get (argv [0]);  	string gitdir = null;  	if (subcommand != null) {  		TextBuiltin cmd = subcommand.Create ();  		List<String> args = argv.ToList ();  		GitSharp.Repository repo = null;  		try {  			for (int x = 0; x < args.Count; x++) {  				if (args [x].IndexOf ("--git-dir=") > -1) {  					if (args [x].Length > 10) {  						gitdir = args [x].Substring (10);  						args.RemoveAt (x);  						break;  					}  				}  			}  		} catch (ArgumentException) {  			if (Git.DefaultOutputStream != null) {  				Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  				Git.DefaultOutputStream.Flush ();  			}  			Exit (1);  		}  		if (cmd.RequiresRepository) {  			if (gitdir == null) {  				gitdir = Commands.AbstractCommand.FindGitDirectory (null' true' false);  				if (gitdir == null) {  					Console.Error.WriteLine ("fatal: Not a git repository (or any of the parent directories): .git");  					Exit (0);  				}  			}  			repo = new GitSharp.Repository (gitdir);  			cmd.Init (repo' gitdir);  		} else  			cmd.Init (null' gitdir);  		try {  			// Remove the subcommand from the command line  			args.RemoveAt (0);  			cmd.Execute (args.ToArray ());  		} finally {  			if (Git.DefaultOutputStream != null)  				Git.DefaultOutputStream.Flush ();  			if (repo != null)  				repo.Close ();  		}  	} else {  		// List all available commands starting with argv[0] if the command  		// specified does not exist.  		// If no commands exist starting with argv[0]' show the help screen.  		if (!ShowCommandMatches (argv [0]))  			ShowHelp ();  	}  } else {  	// If the first argument in the command line is an option (denoted by starting with - or --)'   	// no subcommand has been specified in the command line.  	try {  		options.Parse (argv' out arguments);  	} catch (OptionException err) {  		if (arguments.Count > 0) {  			Console.Error.WriteLine ("fatal: " + err.Message);  			Exit (1);  		}  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (argv.Count () == 0) {  	ShowHelp ();  } else if (!argv [0].StartsWith ("--") && !argv [0].StartsWith ("-")) {  	CommandCatalog catalog = new CommandCatalog ();  	CommandRef subcommand = catalog.Get (argv [0]);  	string gitdir = null;  	if (subcommand != null) {  		TextBuiltin cmd = subcommand.Create ();  		List<String> args = argv.ToList ();  		GitSharp.Repository repo = null;  		try {  			for (int x = 0; x < args.Count; x++) {  				if (args [x].IndexOf ("--git-dir=") > -1) {  					if (args [x].Length > 10) {  						gitdir = args [x].Substring (10);  						args.RemoveAt (x);  						break;  					}  				}  			}  		} catch (ArgumentException) {  			if (Git.DefaultOutputStream != null) {  				Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  				Git.DefaultOutputStream.Flush ();  			}  			Exit (1);  		}  		if (cmd.RequiresRepository) {  			if (gitdir == null) {  				gitdir = Commands.AbstractCommand.FindGitDirectory (null' true' false);  				if (gitdir == null) {  					Console.Error.WriteLine ("fatal: Not a git repository (or any of the parent directories): .git");  					Exit (0);  				}  			}  			repo = new GitSharp.Repository (gitdir);  			cmd.Init (repo' gitdir);  		} else  			cmd.Init (null' gitdir);  		try {  			// Remove the subcommand from the command line  			args.RemoveAt (0);  			cmd.Execute (args.ToArray ());  		} finally {  			if (Git.DefaultOutputStream != null)  				Git.DefaultOutputStream.Flush ();  			if (repo != null)  				repo.Close ();  		}  	} else {  		// List all available commands starting with argv[0] if the command  		// specified does not exist.  		// If no commands exist starting with argv[0]' show the help screen.  		if (!ShowCommandMatches (argv [0]))  			ShowHelp ();  	}  } else {  	// If the first argument in the command line is an option (denoted by starting with - or --)'   	// no subcommand has been specified in the command line.  	try {  		options.Parse (argv' out arguments);  	} catch (OptionException err) {  		if (arguments.Count > 0) {  			Console.Error.WriteLine ("fatal: " + err.Message);  			Exit (1);  		}  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (!argv [0].StartsWith ("--") && !argv [0].StartsWith ("-")) {  	CommandCatalog catalog = new CommandCatalog ();  	CommandRef subcommand = catalog.Get (argv [0]);  	string gitdir = null;  	if (subcommand != null) {  		TextBuiltin cmd = subcommand.Create ();  		List<String> args = argv.ToList ();  		GitSharp.Repository repo = null;  		try {  			for (int x = 0; x < args.Count; x++) {  				if (args [x].IndexOf ("--git-dir=") > -1) {  					if (args [x].Length > 10) {  						gitdir = args [x].Substring (10);  						args.RemoveAt (x);  						break;  					}  				}  			}  		} catch (ArgumentException) {  			if (Git.DefaultOutputStream != null) {  				Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  				Git.DefaultOutputStream.Flush ();  			}  			Exit (1);  		}  		if (cmd.RequiresRepository) {  			if (gitdir == null) {  				gitdir = Commands.AbstractCommand.FindGitDirectory (null' true' false);  				if (gitdir == null) {  					Console.Error.WriteLine ("fatal: Not a git repository (or any of the parent directories): .git");  					Exit (0);  				}  			}  			repo = new GitSharp.Repository (gitdir);  			cmd.Init (repo' gitdir);  		} else  			cmd.Init (null' gitdir);  		try {  			// Remove the subcommand from the command line  			args.RemoveAt (0);  			cmd.Execute (args.ToArray ());  		} finally {  			if (Git.DefaultOutputStream != null)  				Git.DefaultOutputStream.Flush ();  			if (repo != null)  				repo.Close ();  		}  	} else {  		// List all available commands starting with argv[0] if the command  		// specified does not exist.  		// If no commands exist starting with argv[0]' show the help screen.  		if (!ShowCommandMatches (argv [0]))  			ShowHelp ();  	}  } else {  	// If the first argument in the command line is an option (denoted by starting with - or --)'   	// no subcommand has been specified in the command line.  	try {  		options.Parse (argv' out arguments);  	} catch (OptionException err) {  		if (arguments.Count > 0) {  			Console.Error.WriteLine ("fatal: " + err.Message);  			Exit (1);  		}  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (!argv [0].StartsWith ("--") && !argv [0].StartsWith ("-")) {  	CommandCatalog catalog = new CommandCatalog ();  	CommandRef subcommand = catalog.Get (argv [0]);  	string gitdir = null;  	if (subcommand != null) {  		TextBuiltin cmd = subcommand.Create ();  		List<String> args = argv.ToList ();  		GitSharp.Repository repo = null;  		try {  			for (int x = 0; x < args.Count; x++) {  				if (args [x].IndexOf ("--git-dir=") > -1) {  					if (args [x].Length > 10) {  						gitdir = args [x].Substring (10);  						args.RemoveAt (x);  						break;  					}  				}  			}  		} catch (ArgumentException) {  			if (Git.DefaultOutputStream != null) {  				Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  				Git.DefaultOutputStream.Flush ();  			}  			Exit (1);  		}  		if (cmd.RequiresRepository) {  			if (gitdir == null) {  				gitdir = Commands.AbstractCommand.FindGitDirectory (null' true' false);  				if (gitdir == null) {  					Console.Error.WriteLine ("fatal: Not a git repository (or any of the parent directories): .git");  					Exit (0);  				}  			}  			repo = new GitSharp.Repository (gitdir);  			cmd.Init (repo' gitdir);  		} else  			cmd.Init (null' gitdir);  		try {  			// Remove the subcommand from the command line  			args.RemoveAt (0);  			cmd.Execute (args.ToArray ());  		} finally {  			if (Git.DefaultOutputStream != null)  				Git.DefaultOutputStream.Flush ();  			if (repo != null)  				repo.Close ();  		}  	} else {  		// List all available commands starting with argv[0] if the command  		// specified does not exist.  		// If no commands exist starting with argv[0]' show the help screen.  		if (!ShowCommandMatches (argv [0]))  			ShowHelp ();  	}  } else {  	// If the first argument in the command line is an option (denoted by starting with - or --)'   	// no subcommand has been specified in the command line.  	try {  		options.Parse (argv' out arguments);  	} catch (OptionException err) {  		if (arguments.Count > 0) {  			Console.Error.WriteLine ("fatal: " + err.Message);  			Exit (1);  		}  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (subcommand != null) {  	TextBuiltin cmd = subcommand.Create ();  	List<String> args = argv.ToList ();  	GitSharp.Repository repo = null;  	try {  		for (int x = 0; x < args.Count; x++) {  			if (args [x].IndexOf ("--git-dir=") > -1) {  				if (args [x].Length > 10) {  					gitdir = args [x].Substring (10);  					args.RemoveAt (x);  					break;  				}  			}  		}  	} catch (ArgumentException) {  		if (Git.DefaultOutputStream != null) {  			Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  			Git.DefaultOutputStream.Flush ();  		}  		Exit (1);  	}  	if (cmd.RequiresRepository) {  		if (gitdir == null) {  			gitdir = Commands.AbstractCommand.FindGitDirectory (null' true' false);  			if (gitdir == null) {  				Console.Error.WriteLine ("fatal: Not a git repository (or any of the parent directories): .git");  				Exit (0);  			}  		}  		repo = new GitSharp.Repository (gitdir);  		cmd.Init (repo' gitdir);  	} else  		cmd.Init (null' gitdir);  	try {  		// Remove the subcommand from the command line  		args.RemoveAt (0);  		cmd.Execute (args.ToArray ());  	} finally {  		if (Git.DefaultOutputStream != null)  			Git.DefaultOutputStream.Flush ();  		if (repo != null)  			repo.Close ();  	}  } else {  	// List all available commands starting with argv[0] if the command  	// specified does not exist.  	// If no commands exist starting with argv[0]' show the help screen.  	if (!ShowCommandMatches (argv [0]))  		ShowHelp ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (subcommand != null) {  	TextBuiltin cmd = subcommand.Create ();  	List<String> args = argv.ToList ();  	GitSharp.Repository repo = null;  	try {  		for (int x = 0; x < args.Count; x++) {  			if (args [x].IndexOf ("--git-dir=") > -1) {  				if (args [x].Length > 10) {  					gitdir = args [x].Substring (10);  					args.RemoveAt (x);  					break;  				}  			}  		}  	} catch (ArgumentException) {  		if (Git.DefaultOutputStream != null) {  			Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  			Git.DefaultOutputStream.Flush ();  		}  		Exit (1);  	}  	if (cmd.RequiresRepository) {  		if (gitdir == null) {  			gitdir = Commands.AbstractCommand.FindGitDirectory (null' true' false);  			if (gitdir == null) {  				Console.Error.WriteLine ("fatal: Not a git repository (or any of the parent directories): .git");  				Exit (0);  			}  		}  		repo = new GitSharp.Repository (gitdir);  		cmd.Init (repo' gitdir);  	} else  		cmd.Init (null' gitdir);  	try {  		// Remove the subcommand from the command line  		args.RemoveAt (0);  		cmd.Execute (args.ToArray ());  	} finally {  		if (Git.DefaultOutputStream != null)  			Git.DefaultOutputStream.Flush ();  		if (repo != null)  			repo.Close ();  	}  } else {  	// List all available commands starting with argv[0] if the command  	// specified does not exist.  	// If no commands exist starting with argv[0]' show the help screen.  	if (!ShowCommandMatches (argv [0]))  		ShowHelp ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: try {  	for (int x = 0; x < args.Count; x++) {  		if (args [x].IndexOf ("--git-dir=") > -1) {  			if (args [x].Length > 10) {  				gitdir = args [x].Substring (10);  				args.RemoveAt (x);  				break;  			}  		}  	}  } catch (ArgumentException) {  	if (Git.DefaultOutputStream != null) {  		Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  		Git.DefaultOutputStream.Flush ();  	}  	Exit (1);  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: try {  	for (int x = 0; x < args.Count; x++) {  		if (args [x].IndexOf ("--git-dir=") > -1) {  			if (args [x].Length > 10) {  				gitdir = args [x].Substring (10);  				args.RemoveAt (x);  				break;  			}  		}  	}  } catch (ArgumentException) {  	if (Git.DefaultOutputStream != null) {  		Git.DefaultOutputStream.WriteLine ("error: can't find git directory");  		Git.DefaultOutputStream.Flush ();  	}  	Exit (1);  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: for (int x = 0; x < args.Count; x++) {  	if (args [x].IndexOf ("--git-dir=") > -1) {  		if (args [x].Length > 10) {  			gitdir = args [x].Substring (10);  			args.RemoveAt (x);  			break;  		}  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: for (int x = 0; x < args.Count; x++) {  	if (args [x].IndexOf ("--git-dir=") > -1) {  		if (args [x].Length > 10) {  			gitdir = args [x].Substring (10);  			args.RemoveAt (x);  			break;  		}  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (args [x].IndexOf ("--git-dir=") > -1) {  	if (args [x].Length > 10) {  		gitdir = args [x].Substring (10);  		args.RemoveAt (x);  		break;  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (args [x].IndexOf ("--git-dir=") > -1) {  	if (args [x].Length > 10) {  		gitdir = args [x].Substring (10);  		args.RemoveAt (x);  		break;  	}  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (args [x].Length > 10) {  	gitdir = args [x].Substring (10);  	args.RemoveAt (x);  	break;  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: if (args [x].Length > 10) {  	gitdir = args [x].Substring (10);  	args.RemoveAt (x);  	break;  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,execute,The following statement contains a magic number: gitdir = args [x].Substring (10);  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowHelp,The following statement contains a magic number: foreach (CommandRef c in catalog.Common ()) {  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowHelp,The following statement contains a magic number: foreach (CommandRef c in catalog.Common ()) {  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowHelp,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowHelp,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowIncomplete,The following statement contains a magic number: foreach (CommandRef c in catalog.Incomplete ()) {  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowIncomplete,The following statement contains a magic number: foreach (CommandRef c in catalog.Incomplete ()) {  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowIncomplete,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowIncomplete,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowComplete,The following statement contains a magic number: foreach (CommandRef c in catalog.Complete ()) {  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowComplete,The following statement contains a magic number: foreach (CommandRef c in catalog.Complete ()) {  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowComplete,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowComplete,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowCommandMatches,The following statement contains a magic number: if (matches.Count > 0) {  	foreach (CommandRef c in matches) {  		Console.WriteLine ("git: '" + s + "' is not a git command. See 'git --help'.");  		Console.WriteLine ();  		Console.WriteLine ("Did you mean this?");  		Console.Write ("      ");  		Console.Write (c.getName ());  		for (int i = c.getName ().Length + 8; i < 31; i++)  			Console.Write (" ");  		Console.Write (c.getUsage ());  		Console.WriteLine ();  	}  	return true;  } else {  	return false;  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowCommandMatches,The following statement contains a magic number: if (matches.Count > 0) {  	foreach (CommandRef c in matches) {  		Console.WriteLine ("git: '" + s + "' is not a git command. See 'git --help'.");  		Console.WriteLine ();  		Console.WriteLine ("Did you mean this?");  		Console.Write ("      ");  		Console.Write (c.getName ());  		for (int i = c.getName ().Length + 8; i < 31; i++)  			Console.Write (" ");  		Console.Write (c.getUsage ());  		Console.WriteLine ();  	}  	return true;  } else {  	return false;  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowCommandMatches,The following statement contains a magic number: foreach (CommandRef c in matches) {  	Console.WriteLine ("git: '" + s + "' is not a git command. See 'git --help'.");  	Console.WriteLine ();  	Console.WriteLine ("Did you mean this?");  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowCommandMatches,The following statement contains a magic number: foreach (CommandRef c in matches) {  	Console.WriteLine ("git: '" + s + "' is not a git command. See 'git --help'.");  	Console.WriteLine ();  	Console.WriteLine ("Did you mean this?");  	Console.Write ("      ");  	Console.Write (c.getName ());  	for (int i = c.getName ().Length + 8; i < 31; i++)  		Console.Write (" ");  	Console.Write (c.getUsage ());  	Console.WriteLine ();  }  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowCommandMatches,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Program,F:\newReposMay17\henon_GitSharp\Git\Program.cs,ShowCommandMatches,The following statement contains a magic number: for (int i = c.getName ().Length + 8; i < 31; i++)  	Console.Write (" ");  
Magic Number,GitSharp.CLI,Status,F:\newReposMay17\henon_GitSharp\Git\Commands\Status.cs,doDisplayMergeConflict,The following statement contains a magic number: foreach (KeyValuePair<string' int> hash in cmd.Results.ModifiedList) {  	if (hash.Value == 5)  		OutputStream.WriteLine (hash + ": needs merge");  }  
Magic Number,GitSharp.CLI,Status,F:\newReposMay17\henon_GitSharp\Git\Commands\Status.cs,doDisplayMergeConflict,The following statement contains a magic number: if (hash.Value == 5)  	OutputStream.WriteLine (hash + ": needs merge");  
Magic Number,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	bool indent = false;  	string prefix = new string (' '' OptionWidth + 2);  	foreach (string line in GetLines (localizer (GetDescription (p.Description)))) {  		if (indent)  			o.Write (prefix);  		o.WriteLine (line);  		indent = true;  	}  }  
Magic Number,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,GetLines,The following statement contains a magic number: do {  	end = GetLineEnd (start' length' description);  	char c = description [end - 1];  	if (char.IsWhiteSpace (c))  		--end;  	bool writeContinuation = end != description.Length && !IsEolChar (c);  	string line = description.Substring (start' end - start) + (writeContinuation ? "-" : "");  	yield return line;  	start = end;  	if (char.IsWhiteSpace (c))  		++start;  	length = 80 - OptionWidth - 2 - 1;  } while (end < description.Length);  
Magic Number,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,GetLines,The following statement contains a magic number: do {  	end = GetLineEnd (start' length' description);  	char c = description [end - 1];  	if (char.IsWhiteSpace (c))  		--end;  	bool writeContinuation = end != description.Length && !IsEolChar (c);  	string line = description.Substring (start' end - start) + (writeContinuation ? "-" : "");  	yield return line;  	start = end;  	if (char.IsWhiteSpace (c))  		++start;  	length = 80 - OptionWidth - 2 - 1;  } while (end < description.Length);  
Magic Number,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;  
Magic Number,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;  
Missing Default,GitSharp.CLI,Status,F:\newReposMay17\henon_GitSharp\Git\Commands\Status.cs,displayStatusList,The following switch statement is missing a default case: switch (pair.Value) {  case StatusType.Missing:  	OutputStream.WriteLine ("#     missing: " + pair.Key);  	break;  case StatusType.Removed:  	OutputStream.WriteLine ("#     deleted: " + pair.Key);  	break;  case StatusType.Modified:  case StatusType.ModifiedStaged:  	OutputStream.WriteLine ("#     modified: " + pair.Key);  	break;  case StatusType.Added:  	OutputStream.WriteLine ("#     new file: " + pair.Key);  	break;  case StatusType.MergeConflict:  	OutputStream.WriteLine ("#     unmerged: " + pair.Key);  	break;  }  
Missing Default,NDesk.Options,OptionSet,F:\newReposMay17\henon_GitSharp\Git\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
