Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,EvolveQuest.WinPhone.Converters,BooleanToVisibilityConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,EvolveQuest.WinPhone.Converters,BooleanToVisibilityConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,EvolveQuest.WinPhone.Converters,PrizeImageConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,EvolveQuest.WinPhone.Converters,PrizeImageConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,EvolveQuest.WinPhone.Converters,BeaconImageConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,EvolveQuest.WinPhone.Converters,BeaconImageConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,EvolveQuest.WinPhone.Converters,BoolToValueConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,EvolveQuest.WinPhone.Converters,BoolToValueConverter,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Converters\BooleanToVisibilityConverter.cs,ConvertBack,The method has 4 parameters.
Long Statement,EvolveQuest.WinPhone.Pages,WelcomePage,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Pages\WelcomePage.xaml.cs,HandlePropertyChanged,The length of the statement  "				ServiceContainer.Resolve<IMessageDialog> ().SendMessage ("Evolve Quest"' "Your quest begins on October 6th' 2014. Check back soon."); " is 133.
Long Statement,EvolveQuest.WinPhone.Helpers,Messages,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Helpers\Messages.cs,ShowAbout,The length of the statement  "			AuthorName = "Technology Use\nZXigng.NET\nCross Platform QR Code Scanning\nCoding4Fun\nXam.PCL Settings\nJson.NET\nWindows Phone Toolkit" " is 137.
Magic Number,EvolveQuest.WinPhone.Helpers,Messages,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Helpers\Messages.cs,SendToast,The following statement contains a magic number: Deployment.Current.Dispatcher.BeginInvoke (() => {  	var toastPrompt = new ToastPrompt {  		Title = "Evolve Quest"'  		Message = toast'  		ImageSource = new BitmapImage (new Uri ("Assets/SmallLogo30.png"' UriKind.RelativeOrAbsolute))'  		MillisecondsUntilHidden = 3000  	};  	toastPrompt.Show ();  });  
Magic Number,EvolveQuest.WinPhone.Helpers,Messages,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Helpers\Messages.cs,AskQuestions,The following statement contains a magic number: Deployment.Current.Dispatcher.BeginInvoke (() => {  	var messagePrompt = new MessagePrompt {  		Title = title'  		IsCancelVisible = true'  		IsAppBarVisible = false  	};  	var listBox = new ListBox () {  		MaxWidth = 400'  		MaxHeight = 320  	};  	listBox.ItemsSource = question.Answers.Select (q => q.Text).ToArray ();  	listBox.ItemTemplate = Application.Current.Resources ["AnswerItemTemplate"] as DataTemplate;  	listBox.SelectionMode = SelectionMode.Single;  	messagePrompt.Body = listBox;  	messagePrompt.Completed += (sender' e) => {  		if (e.PopUpResult != PopUpResult.Ok || listBox.SelectedIndex < 0)  			return;  		if (completed != null)  			completed (listBox.SelectedIndex);  	};  	messagePrompt.Show ();  });  
Magic Number,EvolveQuest.WinPhone.Helpers,Messages,D:\newReposJune17\xamarin_evolve-quest\EvolveQuest.WinPhone\Helpers\Messages.cs,AskQuestions,The following statement contains a magic number: Deployment.Current.Dispatcher.BeginInvoke (() => {  	var messagePrompt = new MessagePrompt {  		Title = title'  		IsCancelVisible = true'  		IsAppBarVisible = false  	};  	var listBox = new ListBox () {  		MaxWidth = 400'  		MaxHeight = 320  	};  	listBox.ItemsSource = question.Answers.Select (q => q.Text).ToArray ();  	listBox.ItemTemplate = Application.Current.Resources ["AnswerItemTemplate"] as DataTemplate;  	listBox.SelectionMode = SelectionMode.Single;  	messagePrompt.Body = listBox;  	messagePrompt.Completed += (sender' e) => {  		if (e.PopUpResult != PopUpResult.Ok || listBox.SelectedIndex < 0)  			return;  		if (completed != null)  			completed (listBox.SelectedIndex);  	};  	messagePrompt.Show ();  });  
