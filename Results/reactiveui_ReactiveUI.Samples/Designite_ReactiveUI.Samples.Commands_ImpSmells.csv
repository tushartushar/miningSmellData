Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ReactiveUI.Samples.Commands,App,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\App.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ReactiveUI.Samples.Commands;component/app.xaml"' System.UriKind.Relative); " is 120.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,ReactiveUI.Samples.Commands.CaliburnMicro,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\CaliburnMicro\MainViewModel.cs,StartAsyncWork,The following statement contains a magic number: while (Progress <= 100)              {                   Progress += 10;                  yield return new BackgroundWork(() => Thread.Sleep(100));                               }
Magic Number,ReactiveUI.Samples.Commands.CaliburnMicro,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\CaliburnMicro\MainViewModel.cs,StartAsyncWork,The following statement contains a magic number: while (Progress <= 100)              {                   Progress += 10;                  yield return new BackgroundWork(() => Thread.Sleep(100));                               }
Magic Number,ReactiveUI.Samples.Commands.CaliburnMicro,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\CaliburnMicro\MainViewModel.cs,StartAsyncWork,The following statement contains a magic number: while (Progress <= 100)              {                   Progress += 10;                  yield return new BackgroundWork(() => Thread.Sleep(100));                               }
Magic Number,ReactiveUI.Samples.Commands.MVVMLight,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\MVVMLight\MainViewModel.cs,DoSomeWorK,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (Progress <= 100)                  {                                            Application.Current.Dispatcher.BeginInvoke(new Action(() =>                      {                          Progress+=10;                          }));                      Thread.Sleep(100);                                        }              });
Magic Number,ReactiveUI.Samples.Commands.MVVMLight,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\MVVMLight\MainViewModel.cs,DoSomeWorK,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (Progress <= 100)                  {                                            Application.Current.Dispatcher.BeginInvoke(new Action(() =>                      {                          Progress+=10;                          }));                      Thread.Sleep(100);                                        }              });
Magic Number,ReactiveUI.Samples.Commands.MVVMLight,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\MVVMLight\MainViewModel.cs,DoSomeWorK,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (Progress <= 100)                  {                                            Application.Current.Dispatcher.BeginInvoke(new Action(() =>                      {                          Progress+=10;                          }));                      Thread.Sleep(100);                                        }              });
Magic Number,ReactiveUI.Samples.Commands.RxUI,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\RxUI\MainViewModel.cs,MainViewModel,The following statement contains a magic number: StartAsyncCommand = ReactiveCommand.CreateAsyncTask<AsyncVoid>(_ =>              {                  return Task.Run(() =>                  {                      Progress = 0;                      while (Progress <= 100)                      {                          Progress += 10;                          Thread.Sleep(100);                      }                        return AsyncVoid.Default;                  });              });
Magic Number,ReactiveUI.Samples.Commands.RxUI,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\RxUI\MainViewModel.cs,MainViewModel,The following statement contains a magic number: StartAsyncCommand = ReactiveCommand.CreateAsyncTask<AsyncVoid>(_ =>              {                  return Task.Run(() =>                  {                      Progress = 0;                      while (Progress <= 100)                      {                          Progress += 10;                          Thread.Sleep(100);                      }                        return AsyncVoid.Default;                  });              });
Magic Number,ReactiveUI.Samples.Commands.RxUI,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Commands\RxUI\MainViewModel.cs,MainViewModel,The following statement contains a magic number: StartAsyncCommand = ReactiveCommand.CreateAsyncTask<AsyncVoid>(_ =>              {                  return Task.Run(() =>                  {                      Progress = 0;                      while (Progress <= 100)                      {                          Progress += 10;                          Thread.Sleep(100);                      }                        return AsyncVoid.Default;                  });              });
