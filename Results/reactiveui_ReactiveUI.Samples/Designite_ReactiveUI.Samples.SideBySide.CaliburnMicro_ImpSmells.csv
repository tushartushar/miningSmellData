Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ReactiveUI.Samples.SideBySide.CaliburnMicro,App,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\App.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ReactiveUI.Samples.SideBySide.CaliburnMicro;component/app.xaml"' System.UriKind.Relative); " is 136.
Long Statement,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,CalculatorView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\CalculatorView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ReactiveUI.Samples.SideBySide.CaliburnMicro;component/views/calculatorview.xaml"' System.UriKind.Relative); " is 153.
Long Statement,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,MainView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\MainView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ReactiveUI.Samples.SideBySide.CaliburnMicro;component/views/mainview.xaml"' System.UriKind.Relative); " is 147.
Long Statement,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,PersonView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\PersonView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ReactiveUI.Samples.SideBySide.CaliburnMicro;component/views/personview.xaml"' System.UriKind.Relative); " is 149.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: _cache = new MemoizingMRUCache<int' int>((x' ctx) =>              {                  Thread.Sleep(1000);                  // Pretend this calculation isn’t cheap                  return x*10;              }' 5);
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: _cache = new MemoizingMRUCache<int' int>((x' ctx) =>              {                  Thread.Sleep(1000);                  // Pretend this calculation isn’t cheap                  return x*10;              }' 5);
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: _cache = new MemoizingMRUCache<int' int>((x' ctx) =>              {                  Thread.Sleep(1000);                  // Pretend this calculation isn’t cheap                  return x*10;              }' 5);
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: CalculateCommand =                   ReactiveCommand.CreateAsyncTask<object>(                      this.WhenAnyValue(x => x.Number' x => x > 0)'                      o =>                      {                          return Task<object>.Factory.StartNew(() =>                          {                              int top;                              bool cached = _cache.TryGet(    Number' out top);                              if (cached)                              {                                  Result = 0;                                  Thread.Sleep(1000);                                  Result = top;                              }                              else                              {                                  top = _cache.Get(Number);                                  for (int i = 0; i <= top; i++)                                  {                                      Result = i;                                      Thread.Sleep(100);                                  }                              }                                return null;                          });                      }'                      RxApp.MainThreadScheduler);
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: CalculateCommand =                   ReactiveCommand.CreateAsyncTask<object>(                      this.WhenAnyValue(x => x.Number' x => x > 0)'                      o =>                      {                          return Task<object>.Factory.StartNew(() =>                          {                              int top;                              bool cached = _cache.TryGet(    Number' out top);                              if (cached)                              {                                  Result = 0;                                  Thread.Sleep(1000);                                  Result = top;                              }                              else                              {                                  top = _cache.Get(Number);                                  for (int i = 0; i <= top; i++)                                  {                                      Result = i;                                      Thread.Sleep(100);                                  }                              }                                return null;                          });                      }'                      RxApp.MainThreadScheduler);
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.ViewModels,PersonModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\ViewModels\PersonViewModel.cs,IsAgeValid,The following statement contains a magic number: return ((age >= 0) && (age <= 120));
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,MainView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\MainView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Progress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 2:              this.SlowProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 3:              this.SlowProgress2 = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.Person = ((System.Windows.Controls.ContentControl)(target));              return;              case 5:              this.Calculator = ((System.Windows.Controls.ContentControl)(target));              return;              }
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,MainView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\MainView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Progress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 2:              this.SlowProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 3:              this.SlowProgress2 = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.Person = ((System.Windows.Controls.ContentControl)(target));              return;              case 5:              this.Calculator = ((System.Windows.Controls.ContentControl)(target));              return;              }
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,MainView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\MainView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Progress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 2:              this.SlowProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 3:              this.SlowProgress2 = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.Person = ((System.Windows.Controls.ContentControl)(target));              return;              case 5:              this.Calculator = ((System.Windows.Controls.ContentControl)(target));              return;              }
Magic Number,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,MainView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\MainView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Progress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 2:              this.SlowProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 3:              this.SlowProgress2 = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.Person = ((System.Windows.Controls.ContentControl)(target));              return;              case 5:              this.Calculator = ((System.Windows.Controls.ContentControl)(target));              return;              }
Missing Default,ReactiveUI.Samples.SideBySide.CaliburnMicro.Views,MainView,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.SideBySide.Caliburn\Views\MainView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Progress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 2:              this.SlowProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 3:              this.SlowProgress2 = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.Person = ((System.Windows.Controls.ContentControl)(target));              return;              case 5:              this.Calculator = ((System.Windows.Controls.ContentControl)(target));              return;              }
