Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ReactiveUI.Samples.Basics,MainWindow,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ReactiveUI.Samples.Basics;component/mainwindow.xaml"' System.UriKind.Relative); " is 125.
Magic Number,ReactiveUI.Samples.Basics.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: _cache = new MemoizingMRUCache<int' int>((x' ctx) =>              {                  Thread.Sleep(1000);                  // Pretend this calculation isn’t cheap                  return x*10;              }' 5);
Magic Number,ReactiveUI.Samples.Basics.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: _cache = new MemoizingMRUCache<int' int>((x' ctx) =>              {                  Thread.Sleep(1000);                  // Pretend this calculation isn’t cheap                  return x*10;              }' 5);
Magic Number,ReactiveUI.Samples.Basics.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: _cache = new MemoizingMRUCache<int' int>((x' ctx) =>              {                  Thread.Sleep(1000);                  // Pretend this calculation isn’t cheap                  return x*10;              }' 5);
Magic Number,ReactiveUI.Samples.Basics.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: CalculateCommand = ReactiveCommand.CreateAsyncTask(o => {                  return Task.Factory.StartNew(() =>                  {                      int top;                      bool cached = _cache.TryGet(    Number' out top);                      if (cached)                      {                          Result = 0;                          Thread.Sleep(1000);                          Result = top;                      }                      else                      {                          top = _cache.Get(Number);                          for (int i = 0; i <= top; i++)                          {                              Result = i;                              Thread.Sleep(100);                          }                        }                      });              });
Magic Number,ReactiveUI.Samples.Basics.ViewModels,CalculatorViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\CalculatorViewModel.cs,CalculatorViewModel,The following statement contains a magic number: CalculateCommand = ReactiveCommand.CreateAsyncTask(o => {                  return Task.Factory.StartNew(() =>                  {                      int top;                      bool cached = _cache.TryGet(    Number' out top);                      if (cached)                      {                          Result = 0;                          Thread.Sleep(1000);                          Result = top;                      }                      else                      {                          top = _cache.Get(Number);                          for (int i = 0; i <= top; i++)                          {                              Result = i;                              Thread.Sleep(100);                          }                        }                      });              });
Magic Number,ReactiveUI.Samples.Basics.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.Basics.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.Basics.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.Basics.ViewModels,MainViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  while (true)                  {                      if (Progress == 100)                      {                          Progress = 0;                        }                      Progress++;                      Thread.Sleep(Progress%10 == 0 ? 2000 : 400);                  }                });
Magic Number,ReactiveUI.Samples.Basics.ViewModels,PersonViewModel,C:\repos\reactiveui_ReactiveUI.Samples\ReactiveUI.Samples.Basics\ViewModels\PersonViewModel.cs,IsAgeValid,The following statement contains a magic number: return ((age >= 0) && (age <= 120));
