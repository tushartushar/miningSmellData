Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ReactiveAvalonia.HelloWorld,MainViewModel,C:\research\architectureSmells\repos\reactiveui_ReactiveUI.Samples\reactive-avalonia\HelloWorld\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.WhenActivated(                 disposables => {                      // Just log the ViewModel's activation                     // https://github.com/kentcb/YouIandReactiveUI/blob/master/ViewModels/Samples/Chapter%2018/Sample%2004/ChildViewModel.cs                     Console.WriteLine(                         $"[vm {Thread.CurrentThread.ManagedThreadId}]: " +                         "ViewModel activated");                      // Asynchronously generate a new greeting message every second                     // https://reactiveui.net/docs/guidelines/framework/ui-thread-and-schedulers                     Observable                         .Timer(                             TimeSpan.FromMilliseconds(100)' // give the view time to activate                             TimeSpan.FromMilliseconds(1000)'                             RxApp.MainThreadScheduler)                         .Take(Traits.Length)                         .Do(                             t => {                                 var newGreeting = $"Hello' {Traits[t % Traits.Length]} world !";                                 Console.WriteLine(                                     $"[vm {Thread.CurrentThread.ManagedThreadId}]: " +                                     $"Timer Observable -> " +                                     $"Setting greeting to: \"{newGreeting}\"");                                 Greeting = newGreeting;                             }'                             () =>                                  Console.WriteLine(                                     "Those are all the greetings' folks! " +                                     "Feel free to close the window now...\n"))                         .Subscribe()                         .DisposeWith(disposables);                      // Just log the ViewModel's deactivation                     // https://github.com/kentcb/YouIandReactiveUI/blob/master/ViewModels/Samples/Chapter%2018/Sample%2004/ChildViewModel.cs                     Disposable                         .Create(                             () =>                                 Console.WriteLine(                                     $"[vm {Thread.CurrentThread.ManagedThreadId}]: " +                                     "ViewModel deactivated"))                         .DisposeWith(disposables);                 });
Magic Number,ReactiveAvalonia.HelloWorld,MainViewModel,C:\research\architectureSmells\repos\reactiveui_ReactiveUI.Samples\reactive-avalonia\HelloWorld\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.WhenActivated(                 disposables => {                      // Just log the ViewModel's activation                     // https://github.com/kentcb/YouIandReactiveUI/blob/master/ViewModels/Samples/Chapter%2018/Sample%2004/ChildViewModel.cs                     Console.WriteLine(                         $"[vm {Thread.CurrentThread.ManagedThreadId}]: " +                         "ViewModel activated");                      // Asynchronously generate a new greeting message every second                     // https://reactiveui.net/docs/guidelines/framework/ui-thread-and-schedulers                     Observable                         .Timer(                             TimeSpan.FromMilliseconds(100)' // give the view time to activate                             TimeSpan.FromMilliseconds(1000)'                             RxApp.MainThreadScheduler)                         .Take(Traits.Length)                         .Do(                             t => {                                 var newGreeting = $"Hello' {Traits[t % Traits.Length]} world !";                                 Console.WriteLine(                                     $"[vm {Thread.CurrentThread.ManagedThreadId}]: " +                                     $"Timer Observable -> " +                                     $"Setting greeting to: \"{newGreeting}\"");                                 Greeting = newGreeting;                             }'                             () =>                                  Console.WriteLine(                                     "Those are all the greetings' folks! " +                                     "Feel free to close the window now...\n"))                         .Subscribe()                         .DisposeWith(disposables);                      // Just log the ViewModel's deactivation                     // https://github.com/kentcb/YouIandReactiveUI/blob/master/ViewModels/Samples/Chapter%2018/Sample%2004/ChildViewModel.cs                     Disposable                         .Create(                             () =>                                 Console.WriteLine(                                     $"[vm {Thread.CurrentThread.ManagedThreadId}]: " +                                     "ViewModel deactivated"))                         .DisposeWith(disposables);                 });
