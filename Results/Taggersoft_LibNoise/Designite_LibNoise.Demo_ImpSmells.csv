Implementation smell,Namespace,Class,File,Method,Description
Long Method,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The method has 329 lines of code.
Complex Method,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,BitmapAdaptater,Cyclomatic complexity of the method is 8
Complex Method,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,Cyclomatic complexity of the method is 23
Complex Method,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,AllocateBuffer,Cyclomatic complexity of the method is 16
Complex Method,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,Cyclomatic complexity of the method is 111
Long Statement,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The length of the statement  "			_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue)); " is 132.
Long Statement,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The length of the statement  "		MessageBox.Show (String.Format ("Unknown quality '{0}'"' _cbxQuality.Text)' "Libnoise Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 138.
Long Statement,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The length of the statement  "		MessageBox.Show (String.Format ("Unknown primitive '{0}'"' _cbxPrimitive.Text)' "Libnoise Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 142.
Long Statement,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The length of the statement  "		MessageBox.Show (String.Format ("Unknown filter '{0}'"' _cbxFilter.Text)' "Libnoise Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 136.
Long Statement,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The length of the statement  "	_lblLog.Text += String.Format ("{0:00}:{1:00} {2:00}'{3:0000}\n"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds * 10); " is 122.
Long Statement,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The length of the statement  "	_lblLog.Text += String.Format ("{0:00}:{1:00} {2:00}'{3:0000}\n"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds * 10); " is 122.
Long Statement,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The length of the statement  "	_lblLog.Text += String.Format ("Duration : {0:00}:{1:00} {2:00}'{3:0000}\n"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds * 10); " is 133.
Complex Conditional,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The conditional expression  "_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)"  is complex.
Complex Conditional,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The conditional expression  "_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)"  is complex.
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  		case PixelFormat.Format24bppRgb:  		// RGB  		case PixelFormat.Format32bppRgb:  			// RGB_  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  		return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  		case PixelFormat.Format24bppRgb:  		// RGB  		case PixelFormat.Format32bppRgb:  			// RGB_  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  		return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  		case PixelFormat.Format24bppRgb:  		// RGB  		case PixelFormat.Format32bppRgb:  			// RGB_  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  		return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  		case PixelFormat.Format24bppRgb:  		// RGB  		case PixelFormat.Format32bppRgb:  			// RGB_  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  		return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  		case PixelFormat.Format24bppRgb:  		// RGB  		case PixelFormat.Format32bppRgb:  			// RGB_  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  		return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  	case PixelFormat.Format24bppRgb:  	// RGB  	case PixelFormat.Format32bppRgb:  		// RGB_  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  	return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  	case PixelFormat.Format24bppRgb:  	// RGB  	case PixelFormat.Format32bppRgb:  		// RGB_  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  	return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  	case PixelFormat.Format24bppRgb:  	// RGB  	case PixelFormat.Format32bppRgb:  		// RGB_  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  	return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  	case PixelFormat.Format24bppRgb:  	// RGB  	case PixelFormat.Format32bppRgb:  		// RGB_  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  	return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  	case PixelFormat.Format24bppRgb:  	// RGB  	case PixelFormat.Format32bppRgb:  		// RGB_  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	System.Drawing.Color sysColor = _adaptatee.GetPixel (x' _height - 1 - y);  	return new Color (sysColor.R' sysColor.G' sysColor.B' sysColor.A);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  case PixelFormat.Format24bppRgb:  // RGB  case PixelFormat.Format32bppRgb:  	// RGB_  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  case PixelFormat.Format24bppRgb:  // RGB  case PixelFormat.Format32bppRgb:  	// RGB_  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  case PixelFormat.Format24bppRgb:  // RGB  case PixelFormat.Format32bppRgb:  	// RGB_  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  case PixelFormat.Format24bppRgb:  // RGB  case PixelFormat.Format32bppRgb:  	// RGB_  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  case PixelFormat.Format24bppRgb:  // RGB  case PixelFormat.Format32bppRgb:  	// RGB_  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following statement contains a magic number: return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			_data [indexBase] = value.Red;  			break;  		case PixelFormat.Format24bppRgb:  			// RGB  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			break;  		case PixelFormat.Format32bppRgb:  			// RGB_  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = 255;  			break;  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = value.Alpha;  			break;  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			_data [indexBase] = value.Red;  			break;  		case PixelFormat.Format24bppRgb:  			// RGB  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			break;  		case PixelFormat.Format32bppRgb:  			// RGB_  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = 255;  			break;  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = value.Alpha;  			break;  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			_data [indexBase] = value.Red;  			break;  		case PixelFormat.Format24bppRgb:  			// RGB  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			break;  		case PixelFormat.Format32bppRgb:  			// RGB_  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = 255;  			break;  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = value.Alpha;  			break;  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			_data [indexBase] = value.Red;  			break;  		case PixelFormat.Format24bppRgb:  			// RGB  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			break;  		case PixelFormat.Format32bppRgb:  			// RGB_  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = 255;  			break;  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = value.Alpha;  			break;  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			_data [indexBase] = value.Red;  			break;  		case PixelFormat.Format24bppRgb:  			// RGB  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			break;  		case PixelFormat.Format32bppRgb:  			// RGB_  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = 255;  			break;  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = value.Alpha;  			break;  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_adaptatee != null && (x >= 0 && x < _width) && (y >= 0 && y < _height)) {  	if (_bitsLocked) {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  		switch (_bmData.PixelFormat) {  		case PixelFormat.Format8bppIndexed:  			//R  			_data [indexBase] = value.Red;  			break;  		case PixelFormat.Format24bppRgb:  			// RGB  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			break;  		case PixelFormat.Format32bppRgb:  			// RGB_  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = 255;  			break;  		case PixelFormat.Canonical:  		//RGBA  		case PixelFormat.Format32bppArgb:  			//RGBA  			_data [indexBase] = value.Blue;  			_data [indexBase + 1] = value.Green;  			_data [indexBase + 2] = value.Red;  			_data [indexBase + 3] = value.Alpha;  			break;  		}  	}  	else {  		// Noise.Image start to bottom left  		// Drawing.Bitmap start to top left  		_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  	}  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		_data [indexBase] = value.Red;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		break;  	case PixelFormat.Format32bppRgb:  		// RGB_  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = 255;  		break;  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = value.Alpha;  		break;  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		_data [indexBase] = value.Red;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		break;  	case PixelFormat.Format32bppRgb:  		// RGB_  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = 255;  		break;  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = value.Alpha;  		break;  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		_data [indexBase] = value.Red;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		break;  	case PixelFormat.Format32bppRgb:  		// RGB_  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = 255;  		break;  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = value.Alpha;  		break;  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		_data [indexBase] = value.Red;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		break;  	case PixelFormat.Format32bppRgb:  		// RGB_  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = 255;  		break;  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = value.Alpha;  		break;  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		_data [indexBase] = value.Red;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		break;  	case PixelFormat.Format32bppRgb:  		// RGB_  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = 255;  		break;  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = value.Alpha;  		break;  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: if (_bitsLocked) {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	int indexBase = _bmData.Stride * (_height - 1 - y) + x * _structSize;  	switch (_bmData.PixelFormat) {  	case PixelFormat.Format8bppIndexed:  		//R  		_data [indexBase] = value.Red;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		break;  	case PixelFormat.Format32bppRgb:  		// RGB_  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = 255;  		break;  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppArgb:  		//RGBA  		_data [indexBase] = value.Blue;  		_data [indexBase + 1] = value.Green;  		_data [indexBase + 2] = value.Red;  		_data [indexBase + 3] = value.Alpha;  		break;  	}  }  else {  	// Noise.Image start to bottom left  	// Drawing.Bitmap start to top left  	_adaptatee.SetPixel (x' _adaptatee.Height - 1 - y' System.Drawing.Color.FromArgb (value.Alpha' value.Red' value.Green' value.Blue));  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	_data [indexBase] = value.Red;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	break;  case PixelFormat.Format32bppRgb:  	// RGB_  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = 255;  	break;  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = value.Alpha;  	break;  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	_data [indexBase] = value.Red;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	break;  case PixelFormat.Format32bppRgb:  	// RGB_  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = 255;  	break;  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = value.Alpha;  	break;  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	_data [indexBase] = value.Red;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	break;  case PixelFormat.Format32bppRgb:  	// RGB_  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = 255;  	break;  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = value.Alpha;  	break;  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	_data [indexBase] = value.Red;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	break;  case PixelFormat.Format32bppRgb:  	// RGB_  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = 255;  	break;  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = value.Alpha;  	break;  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	_data [indexBase] = value.Red;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	break;  case PixelFormat.Format32bppRgb:  	// RGB_  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = 255;  	break;  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = value.Alpha;  	break;  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	_data [indexBase] = value.Red;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	break;  case PixelFormat.Format32bppRgb:  	// RGB_  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = 255;  	break;  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = value.Alpha;  	break;  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: _data [indexBase + 2] = value.Red;  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: _data [indexBase + 2] = value.Red;  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: _data [indexBase + 3] = 255;  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: _data [indexBase + 3] = 255;  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: _data [indexBase + 2] = value.Red;  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following statement contains a magic number: _data [indexBase + 3] = value.Alpha;  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,AllocateBuffer,The following statement contains a magic number: try {  	switch (_adaptatee.PixelFormat) {  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppRgb:  	// RGB_  	case PixelFormat.Format32bppArgb:  		//RGBA  		_structSize = 4;  		break;  	case PixelFormat.Format8bppIndexed:  		//R  		_structSize = 1;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_structSize = 3;  		break;  	default:  		throw new ArgumentException ("Unsupported image format : " + _adaptatee.PixelFormat.ToString ());  	}  	// Lock memory region  	var region = new Rectangle (0' 0' _width' _height);  	_bmData = _adaptatee.LockBits (region' ImageLockMode.ReadWrite' _adaptatee.PixelFormat);  	// BitmapData.Stride could be a negative number  	int size = Math.Abs (_bmData.Stride) * _height;  	// Create buffer  	if (_data == null)  		_data = new byte[size];  	else  		Array.Resize (ref _data' size);  	// Memcopy  	Marshal.Copy (_bmData.Scan0' _data' 0' size);  	_bitsLocked = true;  }  catch (Exception e) {  	throw new Exception ("Unable to lock bitmap memory"' e);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,AllocateBuffer,The following statement contains a magic number: try {  	switch (_adaptatee.PixelFormat) {  	case PixelFormat.Canonical:  	//RGBA  	case PixelFormat.Format32bppRgb:  	// RGB_  	case PixelFormat.Format32bppArgb:  		//RGBA  		_structSize = 4;  		break;  	case PixelFormat.Format8bppIndexed:  		//R  		_structSize = 1;  		break;  	case PixelFormat.Format24bppRgb:  		// RGB  		_structSize = 3;  		break;  	default:  		throw new ArgumentException ("Unsupported image format : " + _adaptatee.PixelFormat.ToString ());  	}  	// Lock memory region  	var region = new Rectangle (0' 0' _width' _height);  	_bmData = _adaptatee.LockBits (region' ImageLockMode.ReadWrite' _adaptatee.PixelFormat);  	// BitmapData.Stride could be a negative number  	int size = Math.Abs (_bmData.Stride) * _height;  	// Create buffer  	if (_data == null)  		_data = new byte[size];  	else  		Array.Resize (ref _data' size);  	// Memcopy  	Marshal.Copy (_bmData.Scan0' _data' 0' size);  	_bitsLocked = true;  }  catch (Exception e) {  	throw new Exception ("Unable to lock bitmap memory"' e);  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,AllocateBuffer,The following statement contains a magic number: switch (_adaptatee.PixelFormat) {  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppRgb:  // RGB_  case PixelFormat.Format32bppArgb:  	//RGBA  	_structSize = 4;  	break;  case PixelFormat.Format8bppIndexed:  	//R  	_structSize = 1;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_structSize = 3;  	break;  default:  	throw new ArgumentException ("Unsupported image format : " + _adaptatee.PixelFormat.ToString ());  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,AllocateBuffer,The following statement contains a magic number: switch (_adaptatee.PixelFormat) {  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppRgb:  // RGB_  case PixelFormat.Format32bppArgb:  	//RGBA  	_structSize = 4;  	break;  case PixelFormat.Format8bppIndexed:  	//R  	_structSize = 1;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_structSize = 3;  	break;  default:  	throw new ArgumentException ("Unsupported image format : " + _adaptatee.PixelFormat.ToString ());  }  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,AllocateBuffer,The following statement contains a magic number: _structSize = 4;  
Magic Number,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,AllocateBuffer,The following statement contains a magic number: _structSize = 3;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxProjection.Text) {  case "Spherical":  	projection = new NoiseMapBuilderSphere ();  	((NoiseMapBuilderSphere)projection).SetBounds (-90f' 90f' -180f' 180f);  	// degrees  	break;  case "Cylindrical":  	projection = new NoiseMapBuilderCylinder ();  	((NoiseMapBuilderCylinder)projection).SetBounds (-180f' 180f' -10f' 10f);  	break;  case "Planar":  default:  	float bound = 2f;  	projection = new NoiseMapBuilderPlane (bound' bound * 2' bound' bound * 2' seamless);  	//projection = new NoiseMapBuilderPlane(-bound' bound' -bound' bound' seamless);  	//projection = new NoiseMapBuilderPlane(0' bound' 0' bound' seamless);  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxProjection.Text) {  case "Spherical":  	projection = new NoiseMapBuilderSphere ();  	((NoiseMapBuilderSphere)projection).SetBounds (-90f' 90f' -180f' 180f);  	// degrees  	break;  case "Cylindrical":  	projection = new NoiseMapBuilderCylinder ();  	((NoiseMapBuilderCylinder)projection).SetBounds (-180f' 180f' -10f' 10f);  	break;  case "Planar":  default:  	float bound = 2f;  	projection = new NoiseMapBuilderPlane (bound' bound * 2' bound' bound * 2' seamless);  	//projection = new NoiseMapBuilderPlane(-bound' bound' -bound' bound' seamless);  	//projection = new NoiseMapBuilderPlane(0' bound' 0' bound' seamless);  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: projection = new NoiseMapBuilderPlane (bound' bound * 2' bound' bound * 2' seamless);  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: projection = new NoiseMapBuilderPlane (bound' bound * 2' bound' bound * 2' seamless);  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: switch (_cbxSize.Text) {  case "256 x 256":  	width = 256;  	height = 256;  	break;  case "512 x 512":  	width = 512;  	height = 512;  	break;  case "1024 x 1024":  	width = 1024;  	height = 1024;  	break;  case "256 x 128":  	width = 256;  	height = 128;  	break;  case "512 x 256":  	width = 512;  	height = 256;  	break;  case "1024 x 512":  	width = 1024;  	height = 512;  	break;  case "2048 x 1024":  	width = 2048;  	height = 1024;  	break;  default:  case "128 x 128":  	width = 128;  	height = 128;  	break;  }  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 256;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 256;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 512;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 512;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 1024;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 1024;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 256;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 128;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 512;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 256;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 1024;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 512;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 2048;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 1024;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: width = 128;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: height = 128;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: projection.CallBack = delegate (int line) {  	line++;  	watchDog.Stop ();  	//Process message  	Application.DoEvents ();  	_prbarRenderProgression.Value = (line * 100 / height);  	_lblProgressPercent.Text = String.Format ("{0} % - {1} line(s)"' _prbarRenderProgression.Value' line);  	watchDog.Start ();  };  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: _prbarRenderProgression.Value = (line * 100 / height);  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: _lblLog.Text += String.Format ("{0:00}:{1:00} {2:00}'{3:0000}\n"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds * 10);  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: renderer.LightBrightness = 2;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: renderer.LightContrast = 8;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: renderer.CallBack = delegate (int line) {  	line++;  	watchDog.Stop ();  	//Process message  	Application.DoEvents ();  	_prbarRenderProgression.Value = (line * 100 / height);  	_lblProgressPercent.Text = String.Format ("{0} % - {1} line(s)"' _prbarRenderProgression.Value' line);  	watchDog.Start ();  };  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: _prbarRenderProgression.Value = (line * 100 / height);  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: _lblLog.Text += String.Format ("{0:00}:{1:00} {2:00}'{3:0000}\n"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds * 10);  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: if (_imageRendered.Width > _panImageViewport.Width)  	_imageRendered.Left = 0;  else  	_imageRendered.Left = (_panImageViewport.Width - _imageRendered.Width) / 2;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: _imageRendered.Left = (_panImageViewport.Width - _imageRendered.Width) / 2;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: if (_imageRendered.Height > _panImageViewport.Height)  	_imageRendered.Top = 0;  else  	_imageRendered.Top = (_panImageViewport.Height - _imageRendered.Height) / 2;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: _imageRendered.Top = (_panImageViewport.Height - _imageRendered.Height) / 2;  
Magic Number,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following statement contains a magic number: _lblLog.Text += String.Format ("Duration : {0:00}:{1:00} {2:00}'{3:0000}\n"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds * 10);  
Missing Default,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,GetValue,The following switch statement is missing a default case: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	return new Color (_data [indexBase]' _data [indexBase]' _data [indexBase]' 255);  case PixelFormat.Format24bppRgb:  // RGB  case PixelFormat.Format32bppRgb:  	// RGB_  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' 255);  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	return new Color (_data [indexBase + 2]' _data [indexBase + 1]' _data [indexBase]' _data [indexBase + 3]);  }  
Missing Default,LibNoise.Demo.Ext.Dotnet,BitmapAdaptater,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\Ext\Dotnet\BitmapAdaptater.cs,SetValue,The following switch statement is missing a default case: switch (_bmData.PixelFormat) {  case PixelFormat.Format8bppIndexed:  	//R  	_data [indexBase] = value.Red;  	break;  case PixelFormat.Format24bppRgb:  	// RGB  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	break;  case PixelFormat.Format32bppRgb:  	// RGB_  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = 255;  	break;  case PixelFormat.Canonical:  //RGBA  case PixelFormat.Format32bppArgb:  	//RGBA  	_data [indexBase] = value.Blue;  	_data [indexBase + 1] = value.Green;  	_data [indexBase + 2] = value.Red;  	_data [indexBase + 3] = value.Alpha;  	break;  }  
Missing Default,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following switch statement is missing a default case: switch (_cbxGradient.Text) {  case "Grayscale":  	gradient = GradientColors.Grayscale;  	break;  case "Terrain":  	gradient = GradientColors.Terrain;  	break;  }  
Missing Default,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following switch statement is missing a default case: switch (primitive) {  case NoisePrimitive.Constant:  	pModule = new Constant (offset);  	break;  case NoisePrimitive.Cylinders:  	pModule = new Cylinders (offset);  	seamless = false;  	break;  case NoisePrimitive.Spheres:  	pModule = new Spheres (offset);  	seamless = false;  	break;  case NoisePrimitive.BevinsGradient:  	pModule = new BevinsGradient ();  	break;  case NoisePrimitive.BevinsValue:  	pModule = new BevinsValue ();  	break;  case NoisePrimitive.ImprovedPerlin:  	pModule = new ImprovedPerlin ();  	break;  case NoisePrimitive.SimplexPerlin:  	pModule = new SimplexPerlin ();  	break;  }  
Missing Default,LibNoise.Demo,FrmMain,C:\repos\Taggersoft_LibNoise\src\LibNoise.Demo\FrmMain.cs,GenerateNoise,The following switch statement is missing a default case: switch (filter) {  case NoiseFilter.Pipe:  	fModule = new Pipe ();  	break;  case NoiseFilter.SumFractal:  	fModule = new SumFractal ();  	break;  case NoiseFilter.SinFractal:  	fModule = new SinFractal ();  	break;  case NoiseFilter.MultiFractal:  	fModule = new MultiFractal ();  	// Used to show the difference with our gradient color (-1 + 1)  	scale = new ScaleBias (fModule' 1f' -0.8f);  	break;  case NoiseFilter.Billow:  	fModule = new Billow ();  	((Billow)fModule).Bias = -0.2f;  	((Billow)fModule).Scale = 2f;  	break;  case NoiseFilter.HeterogeneousMultiFractal:  	fModule = new HeterogeneousMultiFractal ();  	// Used to show the difference with our gradient color (-1 + 1)  	scale = new ScaleBias (fModule' -1f' 2f);  	break;  case NoiseFilter.HybridMultiFractal:  	fModule = new HybridMultiFractal ();  	// Used to show the difference with our gradient color (-1 + 1)  	scale = new ScaleBias (fModule' 0.7f' -2f);  	break;  case NoiseFilter.RidgedMultiFractal:  	fModule = new RidgedMultiFractal ();  	// Used to show the difference with our gradient color (-1 + 1)  	scale = new ScaleBias (fModule' 0.9f' -1.25f);  	break;  case NoiseFilter.Voronoi:  	fModule = new Voronoi ();  	break;  }  
