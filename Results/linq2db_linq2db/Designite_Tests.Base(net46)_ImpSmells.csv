Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,TestBase,The method has 140 lines of code.
Complex Method,Tests,ActiveIssueAttribute,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\ActiveIssueAttribute.cs,ApplyToTest,Cyclomatic complexity of the method is 12
Complex Method,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,TestBase,Cyclomatic complexity of the method is 9
Complex Method,Tests.DataProvider,DataProviderTestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\DataProvider\DataProviderTestBase.cs,TestType,Cyclomatic complexity of the method is 9
Long Parameter List,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,AreEqual,The method has 5 parameters. Parameters: fixSelector' expected' result' comparer' allowEmpty
Long Parameter List,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,AreEqual,The method has 6 parameters. Parameters: fixSelector' expected' result' comparer' sort' allowEmpty
Long Parameter List,Tests.DataProvider,DataProviderTestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\DataProvider\DataProviderTestBase.cs,TestType,The method has 13 parameters. Parameters: conn' fieldName' dataType' tableName' skipPass' skipNull' skipDefinedNull' skipDefaultNull' skipUndefinedNull' skipNotNull' skipDefined' skipDefault' skipUndefined
Long Statement,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,AreEqual,The length of the statement  "					Debug.  WriteLine   ("{0} {1} --- {2}"' comparer.Equals(expectedList[i]' resultList[i]) ? " " : "-"' expectedList[i]' resultList[i]); " is 133.
Long Statement,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,AreEqual,The length of the statement  "					message.AppendFormat("{0} {1} --- {2}"' comparer.Equals(expectedList[i]' resultList[i]) ? " " : "-"' expectedList[i]' resultList[i]); " is 133.
Empty Catch Block,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,TestBase,The method has an empty catch block.
Magic Number,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,TestBase,The following statement contains a magic number: DataConnection.WriteTraceLine = (s1's2) =>  			{  				if (traceCount < 10000)  				{  					Console.WriteLine("{0}: {1}"' s2' s1);  					Debug.WriteLine(s1' s2);  				}    				if (traceCount++ > 10000)  					DataConnection.TurnTraceSwitchOn(TraceLevel.Error);  			};
Magic Number,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,TestBase,The following statement contains a magic number: DataConnection.WriteTraceLine = (s1's2) =>  			{  				if (traceCount < 10000)  				{  					Console.WriteLine("{0}: {1}"' s2' s1);  					Debug.WriteLine(s1' s2);  				}    				if (traceCount++ > 10000)  					DataConnection.TurnTraceSwitchOn(TraceLevel.Error);  			};
Magic Number,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,OpenHost,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,OpenHost,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,OpenHost,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,OpenHost,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Tests,TestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestBase.cs,OpenHost,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Tests,TestUtils,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestUtils.cs,ProviderNeedsTimeFix,The following statement contains a magic number: return (versionParts[0] * 10000 + versionParts[1] * 100 + versionParts[2] < 50604);
Magic Number,Tests,TestUtils,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestUtils.cs,ProviderNeedsTimeFix,The following statement contains a magic number: return (versionParts[0] * 10000 + versionParts[1] * 100 + versionParts[2] < 50604);
Magic Number,Tests,TestUtils,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestUtils.cs,ProviderNeedsTimeFix,The following statement contains a magic number: return (versionParts[0] * 10000 + versionParts[1] * 100 + versionParts[2] < 50604);
Magic Number,Tests,TestUtils,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestUtils.cs,ProviderNeedsTimeFix,The following statement contains a magic number: return (versionParts[0] * 10000 + versionParts[1] * 100 + versionParts[2] < 50604);
Magic Number,Tests.DataProvider,DataProviderTestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\DataProvider\DataProviderTestBase.cs,TestType,The following statement contains a magic number: Assert.That(id' Is.EqualTo(2));
Magic Number,Tests.DataProvider,DataProviderTestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\DataProvider\DataProviderTestBase.cs,TestType,The following statement contains a magic number: Assert.That(id' Is.EqualTo(2));
Magic Number,Tests.DataProvider,DataProviderTestBase,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\DataProvider\DataProviderTestBase.cs,TestType,The following statement contains a magic number: Assert.That(id' Is.EqualTo(2));
Magic Number,SqlServerTypes,Utilities,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\SqlServerTypes\Loader.cs,LoadNativeAssemblies,The following statement contains a magic number: var nativeBinaryPath = IntPtr.Size > 4  				? Path.Combine(rootApplicationPath' @"SqlServerTypes\x64\")  				: Path.Combine(rootApplicationPath' @"SqlServerTypes\x86\");
Missing Default,Tests,TestUtils,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestUtils.cs,GetSchemaName,The following switch statement is missing a default case: switch (GetContextName(db))  			{  				case ProviderName.SapHana:  				case ProviderName.Informix:  				case ProviderName.Oracle:  				case ProviderName.OracleNative:  				case ProviderName.OracleManaged:  				case ProviderName.PostgreSQL:  				case ProviderName.PostgreSQL92:  				case ProviderName.PostgreSQL93:  				case ProviderName.PostgreSQL95:  				case TestProvName.PostgreSQL10:  				case TestProvName.PostgreSQL11:  				case TestProvName.PostgreSQLLatest:  				case ProviderName.DB2:  				case ProviderName.Sybase:  				case ProviderName.SybaseManaged:  				case ProviderName.SqlServer2000:  				case ProviderName.SqlServer2005:  				case ProviderName.SqlServer2008:  				case ProviderName.SqlServer2012:  				case ProviderName.SqlServer2014:  				case ProviderName.SqlServer2017:  				case TestProvName.SqlAzure:  					return db.GetTable<LinqDataTypes>().Select(_ => SchemaName()).First();  			}
Missing Default,Tests,TestUtils,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Base\TestUtils.cs,GetDatabaseName,The following switch statement is missing a default case: switch (GetContextName(db))  			{  				case ProviderName.SQLiteClassic:  				case ProviderName.SQLiteMS:  					return "main";  				case ProviderName.Access:  					return "Database\\TestData";  				case ProviderName.SapHana:  				case ProviderName.MySql:  				case ProviderName.MySqlConnector:  				case TestProvName.MariaDB:  				case TestProvName.MySql57:  				case ProviderName.PostgreSQL:  				case ProviderName.PostgreSQL92:  				case ProviderName.PostgreSQL93:  				case ProviderName.PostgreSQL95:  				case TestProvName.PostgreSQL10:  				case TestProvName.PostgreSQL11:  				case TestProvName.PostgreSQLLatest:  				case ProviderName.DB2:  				case ProviderName.Sybase:  				case ProviderName.SybaseManaged:  				case ProviderName.SqlServer2000:  				case ProviderName.SqlServer2005:  				case ProviderName.SqlServer2008:  				case ProviderName.SqlServer2012:  				case ProviderName.SqlServer2014:  				case ProviderName.SqlServer2017:  				case TestProvName.SqlAzure:  					return db.GetTable<LinqDataTypes>().Select(_ => DbName()).First();  				case ProviderName.Informix:  					return db.GetTable<LinqDataTypes>().Select(_ => DbInfo("dbname")).First();  			}
