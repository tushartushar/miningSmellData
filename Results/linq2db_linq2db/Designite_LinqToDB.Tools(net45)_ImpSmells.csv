Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LinqToDB.Tools.EntityServices,KeyComparer<TK>,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\EntityServices\EntityMap.cs,CreateMapper,Cyclomatic complexity of the method is 8
Complex Method,LinqToDB.Tools,EnumerableExtensions,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\EnumerableExtensions.cs,ToDiagnosticString,Cyclomatic complexity of the method is 16
Complex Method,LinqToDB.Tools.Mapper,ExpressionBuilder,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\ExpressionBuilder.cs,GetExpressionImpl,Cyclomatic complexity of the method is 17
Complex Method,LinqToDB.Tools.Mapper,MappingImpl,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\ExpressionBuilder.cs,GetObjectExpression,Cyclomatic complexity of the method is 11
Complex Method,LinqToDB.Tools.Mapper,MapperBuilder<TFrom;TTo>,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\MapperBuilder.cs,GetMembers,Cyclomatic complexity of the method is 13
Long Parameter List,LinqToDB.Tools.Mapper,MappingImpl,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\ExpressionBuilder.cs,BuildAssignment,The method has 5 parameters. Parameters: getter' setter' fromMemberType' toExpression' toMember
Long Statement,LinqToDB.Tools.EntityServices,KeyComparer<TK>,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\EntityServices\EntityMap.cs,CreateMapper,The length of the statement  "					_mapper = Map.GetMapper<TK'T>(m => m.SetToMemberFilter(ma => _keyColumns.Count == 0 || _keyColumns.Contains(ma))).GetMapper(); " is 126.
Long Statement,LinqToDB.Tools.Mapper,ExpressionBuilder,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\ExpressionBuilder.cs,GetExpression,The length of the statement  "				expr = new MappingImpl(this' pFrom' Constant(_mapperBuilder.MappingSchema.GetDefaultValue(_toType)' _toType)).GetExpression(); " is 126.
Long Statement,LinqToDB.Tools.Mapper,ExpressionBuilder,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\ExpressionBuilder.cs,GetExpressionImpl,The length of the statement  "				if (_mapperBuilder.MappingSchema.IsScalarType(fromMember.Type) || _mapperBuilder.MappingSchema.IsScalarType(toMember.Type)) " is 123.
Long Statement,LinqToDB.Tools.Mapper,ExpressionBuilder,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\ExpressionBuilder.cs,Select,The length of the statement  "			var getBuilderInfo = MemberHelper.MethodOf(() => GetBuilder<int'int>(null)).               GetGenericMethodDefinition(); " is 120.
Long Statement,LinqToDB.Tools.Mapper,ExpressionBuilder,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Mapper\ExpressionBuilder.cs,Select,The length of the statement  "			var selectInfo     = MemberHelper.MethodOf(() => Enumerable.Select<int'int>(null' _ => _)).GetGenericMethodDefinition(); " is 120.
Magic Number,LinqToDB.Tools.Comparers,ComparerBuilder,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Comparers\ComparerBuilder.cs,CreateEqualsFunc,The following statement contains a magic number: var expressions = membersToCompare.Select(me =>  			{  				var arg0 = RemoveCastToObject(me.GetBody(x));  				var arg1 = RemoveCastToObject(me.GetBody(y));  				var eq   = GetEqualityComparer(arg1.Type);  				var pi   = eq.GetPropertyEx("Default");  				var mi   = eq.GetMethodsEx().Single(m => m.IsPublic && m.Name == "Equals" && m.GetParameters().Length == 2);    				Debug.Assert(pi != null' "pi != null");  				Expression expr = Expression.Call(Expression.Property(null' pi)' mi' arg0' arg1);    				return expr;  			});
Magic Number,LinqToDB.Tools.Comparers,ComparerBuilder,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\Comparers\ComparerBuilder.cs,CreateGetHashCodeFunc,The following statement contains a magic number: var expression = membersToCompare.Aggregate(  				(Expression)Expression.Constant(_randomSeed)'  				(e' me) =>  				{  					var ma = RemoveCastToObject(me.GetBody(parameter));  					var eq = GetEqualityComparer(ma.Type);  					var pi = eq.GetPropertyEx("Default");  					var mi = eq.GetMethodsEx().Single(m => m.IsPublic && m.Name == "GetHashCode" && m.GetParameters().Length == 1);    					Debug.Assert(pi != null' "pi != null");  					return Expression.Add(  						Expression.Multiply(e' Expression.Constant(-1521134295))'  						Expression.Call(Expression.Property(null' pi)' mi' ma));  				});
Missing Default,LinqToDB.Tools,EnumerableExtensions,D:\research\architectureSmells\repos\linq2db_linq2db\Source\LinqToDB.Tools\EnumerableExtensions.cs,ToDiagnosticString,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))  					{  						case TypeCode.Byte:  						case TypeCode.DateTime:  						case TypeCode.Decimal:  						case TypeCode.Double:  						case TypeCode.Int16:  						case TypeCode.Int32:  						case TypeCode.Int64:  						case TypeCode.SByte:  						case TypeCode.Single:  						case TypeCode.UInt16:  						case TypeCode.UInt32:  						case TypeCode.UInt64:  							right = true;  							break;  					}
