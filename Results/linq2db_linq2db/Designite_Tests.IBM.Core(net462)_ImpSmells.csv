Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The length of the statement  "				Assert.That(conn.Execute<int>   ("SELECT @p FROM SYSIBM.SYSDUMMY1"'        new { p =  new DataParameter { Value = 1   } })' Is.EqualTo(1)); " is 139.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p1 FROM SYSIBM.SYSDUMMY1"'       new { p1 = new DataParameter { Value = "1" } })' Is.EqualTo("1")); " is 141.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DB2Int64?>    (conn' "bigintDataType"'    DataType.Int64)'     Is.EqualTo(new DB2Int64(1000000L))); " is 120.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<byte[]>       (conn' "binaryDataType"'    DataType.Binary)'    Is.EqualTo(new byte[] { 49' 50' 51' 32' 32 })); " is 131.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<byte[]>       (conn' "varbinaryDataType"' DataType.VarBinary)' Is.EqualTo(new byte[] { 49' 50' 51' 52 })); " is 127.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.Blob'      skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 })); " is 207.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.VarBinary' skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 })); " is 207.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DateTime?>    (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DateTime(2012' 12' 12))); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DB2Date?>     (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DB2Date(new DateTime(2012' 12' 12)))); " is 137.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<TimeSpan?>    (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new TimeSpan(12' 12' 12))); " is 122.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DB2Time?>     (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new DB2Time(new TimeSpan(12' 12' 12)))); " is 135.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12))); " is 140.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12)))); " is 158.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<string>       (conn' "xmlDataType"'       DataType.Xml' skipPass:true)' Is.EqualTo("<root><element strattr=\"strvalue\" intattr=\"12345\"/></root>")); " is 171.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DB2Decimal?>     (conn' "decimalDataType"'   DataType.Decimal).  ToString()' Is.EqualTo(new DB2Decimal(9999999m).ToString())); " is 147.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DB2Binary>       (conn' "varbinaryDataType"' DataType.VarBinary).ToString()' Is.EqualTo(new DB2Binary(new byte[] { 49' 50' 51' 52 }).ToString())); " is 167.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The length of the statement  "				Assert.That(TestType<DB2DecimalFloat?>(conn' "decfloatDataType"'  DataType.Decimal).  ToString()' Is.EqualTo(new DB2DecimalFloat(8888888m).ToString())); " is 152.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TestNumeric,The length of the statement  "				var sql = string.Format(CultureInfo.InvariantCulture' "SELECT Cast({0} as {1}) FROM SYSIBM.SYSDUMMY1"' sqlValue ?? "NULL"' sqlType); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TestNumeric,The length of the statement  "			Assert.That(conn.Execute<T>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter { Name = "p"' DataType = dataType' Value = expectedValue })' Is.EqualTo(expectedValue)); " is 169.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TestNumeric,The length of the statement  "			Assert.That(conn.Execute<T>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter { Name = "p"' Value = expectedValue })' Is.EqualTo(expectedValue)); " is 148.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTest,The length of the statement  "				Assert.That(conn.Execute<DateTime> ("SELECT Cast('2012-12-12' as date) FROM SYSIBM.SYSDUMMY1")'                          Is.EqualTo(dateTime)); " is 143.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTest,The length of the statement  "				Assert.That(conn.Execute<DateTime?>("SELECT Cast('2012-12-12' as date) FROM SYSIBM.SYSDUMMY1")'                          Is.EqualTo(dateTime)); " is 143.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTest,The length of the statement  "				Assert.That(conn.Execute<DateTime> ("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Date("p"' dateTime))'               Is.EqualTo(dateTime)); " is 143.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTest,The length of the statement  "				Assert.That(conn.Execute<DateTime?>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter("p"' dateTime' DataType.Date))' Is.EqualTo(dateTime)); " is 143.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The length of the statement  "				Assert.That(conn.Execute<DateTime> ("SELECT Cast('2012-12-12 12:12:12' as timestamp) FROM SYSIBM.SYSDUMMY1")'                 Is.EqualTo(dateTime)); " is 148.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The length of the statement  "				Assert.That(conn.Execute<DateTime?>("SELECT Cast('2012-12-12 12:12:12' as timestamp) FROM SYSIBM.SYSDUMMY1")'                 Is.EqualTo(dateTime)); " is 148.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The length of the statement  "				Assert.That(conn.Execute<DateTime> ("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.DateTime("p"' dateTime))'               Is.EqualTo(dateTime)); " is 147.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The length of the statement  "				Assert.That(conn.Execute<DateTime?>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter("p"' dateTime))'                    Is.EqualTo(dateTime)); " is 147.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The length of the statement  "				Assert.That(conn.Execute<DateTime?>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter("p"' dateTime' DataType.DateTime))' Is.EqualTo(dateTime)); " is 147.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TimeSpanTest,The length of the statement  "				Assert.That(conn.Execute<TimeSpan> ("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Time  ("p"' time))'              Is.EqualTo(time)); " is 136.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TimeSpanTest,The length of the statement  "				Assert.That(conn.Execute<TimeSpan> ("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Create("p"' time))'              Is.EqualTo(time)); " is 136.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TimeSpanTest,The length of the statement  "				Assert.That(conn.Execute<TimeSpan?>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter("p"'  time' DataType.Time))' Is.EqualTo(time)); " is 136.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TimeSpanTest,The length of the statement  "				Assert.That(conn.Execute<TimeSpan?>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter("p"'  time))'                Is.EqualTo(time)); " is 136.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char> ("SELECT @p FROM SYSIBM.SYSDUMMY1"'                  DataParameter.Char("p"' '1'))' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char?>("SELECT @p FROM SYSIBM.SYSDUMMY1"'                  DataParameter.Char("p"' '1'))' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char> ("SELECT Cast(@p as char) FROM SYSIBM.SYSDUMMY1"'    DataParameter.Char("p"' '1'))' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char?>("SELECT Cast(@p as char) FROM SYSIBM.SYSDUMMY1"'    DataParameter.Char("p"' '1'))' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char> ("SELECT Cast(@p as char(1)) FROM SYSIBM.SYSDUMMY1"' DataParameter.Char("p"' '1'))' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char?>("SELECT Cast(@p as char(1)) FROM SYSIBM.SYSDUMMY1"' DataParameter.Char("p"' '1'))' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char> ("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter { Name = "p"' Value = '1' })' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,CharTest,The length of the statement  "				Assert.That(conn.Execute<char?>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter { Name = "p"' Value = '1' })' Is.EqualTo('1')); " is 132.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Char    ("p"' "123"))' Is.EqualTo("123")); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.VarChar ("p"' "123"))' Is.EqualTo("123")); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Text    ("p"' "123"))' Is.EqualTo("123")); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.NChar   ("p"' "123"))' Is.EqualTo("123")); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.NVarChar("p"' "123"))' Is.EqualTo("123")); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.NText   ("p"' "123"))' Is.EqualTo("123")); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Create  ("p"' "123"))' Is.EqualTo("123")); " is 124.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Create("p"' (string)null))' Is.EqualTo(null)); " is 128.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,StringTest,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter { Name = "p"' Value = "1" })' Is.EqualTo("1")); " is 133.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The length of the statement  "				Assert.That(conn.Execute<byte[]>("SELECT Cast('12' as char(2) for bit data) FROM SYSIBM.SYSDUMMY1")'      Is.EqualTo(           arr1)); " is 135.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The length of the statement  "				Assert.That(conn.Execute<Binary>("SELECT Cast('1234' as char(4) for bit data) FROM SYSIBM.SYSDUMMY1")'    Is.EqualTo(new Binary(arr2))); " is 136.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The length of the statement  "				Assert.That(conn.Execute<byte[]>("SELECT Cast('12' as varchar(2) for bit data) FROM SYSIBM.SYSDUMMY1")'   Is.EqualTo(           arr1)); " is 135.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The length of the statement  "				Assert.That(conn.Execute<Binary>("SELECT Cast('1234' as varchar(4) for bit data) FROM SYSIBM.SYSDUMMY1")' Is.EqualTo(new Binary(arr2))); " is 136.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,GuidTest,The length of the statement  "				Assert.That(conn.Execute<Guid>("SELECT Cast(@p as char(16) for bit data) FROM SYSIBM.SYSDUMMY1"' DataParameter.Create("p"' guid))'                Is.EqualTo(guid)); " is 164.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,GuidTest,The length of the statement  "				Assert.That(conn.Execute<Guid>("SELECT Cast(@p as char(16) for bit data) FROM SYSIBM.SYSDUMMY1"' new DataParameter { Name = "p"' Value = guid })' Is.EqualTo(guid)); " is 164.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,XmlTest,The length of the statement  "				Assert.That(conn.Execute<string>     ("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Xml("p"' "<xml/>"))'        Is.EqualTo("<xml/>")); " is 137.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,XmlTest,The length of the statement  "				Assert.That(conn.Execute<XDocument>  ("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Xml("p"' xdoc)).ToString()' Is.EqualTo("<xml />")); " is 138.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,XmlTest,The length of the statement  "				Assert.That(conn.Execute<XmlDocument>("SELECT @p FROM SYSIBM.SYSDUMMY1"' DataParameter.Xml("p"' xml)). InnerXml'   Is.EqualTo("<xml />")); " is 138.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,XmlTest,The length of the statement  "				Assert.That(conn.Execute<XDocument>  ("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter("p"' xdoc)).ToString()' Is.EqualTo("<xml />")); " is 138.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,XmlTest,The length of the statement  "				Assert.That(conn.Execute<XDocument>  ("SELECT @p FROM SYSIBM.SYSDUMMY1"' new DataParameter("p"' xml)). ToString()' Is.EqualTo("<xml />")); " is 138.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,EnumTest2,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new { p = (TestEnum?)TestEnum.BB })' Is.EqualTo("B")); " is 122.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,EnumTest2,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new { p = ConvertTo<string>.From((TestEnum?)TestEnum.AA) })' Is.EqualTo("A")); " is 146.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,EnumTest2,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new { p = ConvertTo<string>.From(TestEnum.AA) })' Is.EqualTo("A")); " is 135.
Long Statement,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,EnumTest2,The length of the statement  "				Assert.That(conn.Execute<string>("SELECT @p FROM SYSIBM.SYSDUMMY1"' new { p = conn.MappingSchema.GetConverter<TestEnum?'string>()(TestEnum.AA) })' Is.EqualTo("A")); " is 164.
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The following statement contains a magic number: Assert.That(conn.Execute<int>   ("SELECT @p1 + @p2 FROM SYSIBM.SYSDUMMY1"' new { p1 = 2' p2 = 3 })' Is.EqualTo(5));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The following statement contains a magic number: Assert.That(conn.Execute<int>   ("SELECT @p1 + @p2 FROM SYSIBM.SYSDUMMY1"' new { p1 = 2' p2 = 3 })' Is.EqualTo(5));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The following statement contains a magic number: Assert.That(conn.Execute<int>   ("SELECT @p1 + @p2 FROM SYSIBM.SYSDUMMY1"' new { p1 = 2' p2 = 3 })' Is.EqualTo(5));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The following statement contains a magic number: Assert.That(conn.Execute<int>   ("SELECT @p2 + @p1 FROM SYSIBM.SYSDUMMY1"' new { p2 = 2' p1 = 3 })' Is.EqualTo(5));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The following statement contains a magic number: Assert.That(conn.Execute<int>   ("SELECT @p2 + @p1 FROM SYSIBM.SYSDUMMY1"' new { p2 = 2' p1 = 3 })' Is.EqualTo(5));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ParameterTest,The following statement contains a magic number: Assert.That(conn.Execute<int>   ("SELECT @p2 + @p1 FROM SYSIBM.SYSDUMMY1"' new { p2 = 2' p1 = 3 })' Is.EqualTo(5));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<long?>        (conn' "bigintDataType"'    DataType.Int64)'     Is.EqualTo(1000000L));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Int64?>    (conn' "bigintDataType"'    DataType.Int64)'     Is.EqualTo(new DB2Int64(1000000L)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<int?>         (conn' "intDataType"'       DataType.Int32)'     Is.EqualTo(7777777));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Int32?>    (conn' "intDataType"'       DataType.Int32)'     Is.EqualTo(new DB2Int32(7777777)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<short?>       (conn' "smallintDataType"'  DataType.Int16)'     Is.EqualTo(100));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Int16?>    (conn' "smallintDataType"'  DataType.Int16)'     Is.EqualTo(new DB2Int16(100)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<decimal?>     (conn' "decimalDataType"'   DataType.Decimal)'   Is.EqualTo(9999999m));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<decimal?>     (conn' "decfloatDataType"'  DataType.Decimal)'   Is.EqualTo(8888888m));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<float?>       (conn' "realDataType"'      DataType.Single)'    Is.EqualTo(20.31f));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Real?>     (conn' "realDataType"'      DataType.Single)'    Is.EqualTo(new DB2Real(20.31f)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<double?>      (conn' "doubleDataType"'    DataType.Double)'    Is.EqualTo(16.2d));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Double?>   (conn' "doubleDataType"'    DataType.Double)'    Is.EqualTo(new DB2Double(16.2d)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "binaryDataType"'    DataType.Binary)'    Is.EqualTo(new byte[] { 49' 50' 51' 32' 32 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "binaryDataType"'    DataType.Binary)'    Is.EqualTo(new byte[] { 49' 50' 51' 32' 32 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "binaryDataType"'    DataType.Binary)'    Is.EqualTo(new byte[] { 49' 50' 51' 32' 32 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "binaryDataType"'    DataType.Binary)'    Is.EqualTo(new byte[] { 49' 50' 51' 32' 32 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "binaryDataType"'    DataType.Binary)'    Is.EqualTo(new byte[] { 49' 50' 51' 32' 32 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "varbinaryDataType"' DataType.VarBinary)' Is.EqualTo(new byte[] { 49' 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "varbinaryDataType"' DataType.VarBinary)' Is.EqualTo(new byte[] { 49' 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "varbinaryDataType"' DataType.VarBinary)' Is.EqualTo(new byte[] { 49' 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "varbinaryDataType"' DataType.VarBinary)' Is.EqualTo(new byte[] { 49' 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.Blob'      skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.Blob'      skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.Blob'      skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.VarBinary' skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.VarBinary' skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<byte[]>       (conn' "blobDataType"'      DataType.VarBinary' skipDefaultNull:true' skipUndefinedNull:true' skipDefault:true' skipUndefined:true)' Is.EqualTo(new byte[] { 50' 51' 52 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DateTime(2012' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DateTime(2012' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DateTime(2012' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Date?>     (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DB2Date(new DateTime(2012' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Date?>     (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DB2Date(new DateTime(2012' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Date?>     (conn' "dateDataType"'      DataType.Date)'      Is.EqualTo(new DB2Date(new DateTime(2012' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<TimeSpan?>    (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new TimeSpan(12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<TimeSpan?>    (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new TimeSpan(12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<TimeSpan?>    (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new TimeSpan(12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Time?>     (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new DB2Time(new TimeSpan(12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Time?>     (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new DB2Time(new TimeSpan(12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Time?>     (conn' "timeDataType"'      DataType.Time)'      Is.EqualTo(new DB2Time(new TimeSpan(12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DateTime?>    (conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DateTime(2012' 12' 12' 12' 12' 12' 12)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2TimeStamp?>(conn' "timestampDataType"' DataType.DateTime2)' Is.EqualTo(new DB2TimeStamp(new DateTime(2012' 12' 12' 12' 12' 12' 12))));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Decimal?>     (conn' "decimalDataType"'   DataType.Decimal).  ToString()' Is.EqualTo(new DB2Decimal(9999999m).ToString()));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Binary>       (conn' "varbinaryDataType"' DataType.VarBinary).ToString()' Is.EqualTo(new DB2Binary(new byte[] { 49' 50' 51' 52 }).ToString()));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Binary>       (conn' "varbinaryDataType"' DataType.VarBinary).ToString()' Is.EqualTo(new DB2Binary(new byte[] { 49' 50' 51' 52 }).ToString()));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Binary>       (conn' "varbinaryDataType"' DataType.VarBinary).ToString()' Is.EqualTo(new DB2Binary(new byte[] { 49' 50' 51' 52 }).ToString()));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2Binary>       (conn' "varbinaryDataType"' DataType.VarBinary).ToString()' Is.EqualTo(new DB2Binary(new byte[] { 49' 50' 51' 52 }).ToString()));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DataTypeTest,The following statement contains a magic number: Assert.That(TestType<DB2DecimalFloat?>(conn' "decfloatDataType"'  DataType.Decimal).  ToString()' Is.EqualTo(new DB2DecimalFloat(8888888m).ToString()));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn' -3.40282306E+38f'  DataType.Single'     "bigint int smallint decimal(31) decfloat");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn' 3.40282306E+38f'   DataType.Single'     "bigint int smallint decimal(31) decfloat");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn' -1.79E+308d'       DataType.Double'     "bigint int smallint decimal(31) decfloat real");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn'  1.79E+308d'       DataType.Double'     "bigint int smallint decimal(31) decfloat real");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn' -922337203685477m' DataType.Money'      "int smallint real");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn' +922337203685477m' DataType.Money'      "int smallint real");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn' -214748m'          DataType.SmallMoney' "smallint");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,NumericTest,The following statement contains a magic number: TestNumeric(conn' +214748m'          DataType.SmallMoney' "smallint");
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,DateTimeTest,The following statement contains a magic number: var dateTime = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TimeSpanTest,The following statement contains a magic number: var time = new TimeSpan(12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TimeSpanTest,The following statement contains a magic number: var time = new TimeSpan(12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TimeSpanTest,The following statement contains a magic number: var time = new TimeSpan(12' 12' 12);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The following statement contains a magic number: var arr1 = new byte[] {         49' 50 };
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The following statement contains a magic number: var arr1 = new byte[] {         49' 50 };
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The following statement contains a magic number: var arr2 = new byte[] { 49' 50' 51' 52 };
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The following statement contains a magic number: var arr2 = new byte[] { 49' 50' 51' 52 };
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The following statement contains a magic number: var arr2 = new byte[] { 49' 50' 51' 52 };
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinaryTest,The following statement contains a magic number: var arr2 = new byte[] { 49' 50' 51' 52 };
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.BulkCopy(  					new BulkCopyOptions  					{  						MaxBatchSize       = maxSize'  						BulkCopyType       = bulkCopyType'  						NotifyAfter        = 10000'  						RowsCopiedCallback = copied => Debug.WriteLine(copied.RowsCopied)  					}'  					Enumerable.Range(0' batchSize).Select(n =>  						new ALLTYPE  						{  							ID                = 2000 + n'  							BIGINTDATATYPE    = 3000 + n'  							INTDATATYPE       = 4000 + n'  							SMALLINTDATATYPE  = (short)(5000 + n)'  							DECIMALDATATYPE   = 6000 + n'  							DECFLOATDATATYPE  = 7000 + n'  							REALDATATYPE      = 8000 + n'  							DOUBLEDATATYPE    = 9000 + n'  							CHARDATATYPE      = 'A''  							VARCHARDATATYPE   = ""'  							CLOBDATATYPE      = null'  							DBCLOBDATATYPE    = null'  							BINARYDATATYPE    = null'  							VARBINARYDATATYPE = null'  							BLOBDATATYPE      = new byte[] { 1' 2' 3 }'  							GRAPHICDATATYPE   = null'  							DATEDATATYPE      = DateTime.Now'  							TIMEDATATYPE      = null'  							TIMESTAMPDATATYPE = null'  							XMLDATATYPE       = null'  						}));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyTest,The following statement contains a magic number: conn.GetTable<ALLTYPE>().Delete(p => p.SMALLINTDATATYPE >= 5000);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyMultipleRows,The following statement contains a magic number: BulkCopyTest(context' BulkCopyType.MultipleRows' 5000' 10001);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyMultipleRows,The following statement contains a magic number: BulkCopyTest(context' BulkCopyType.MultipleRows' 5000' 10001);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyProviderSpecific,The following statement contains a magic number: BulkCopyTest(context' BulkCopyType.ProviderSpecific' 50000' 100001);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyProviderSpecific,The following statement contains a magic number: BulkCopyTest(context' BulkCopyType.ProviderSpecific' 50000' 100001);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.BulkCopy(  						new BulkCopyOptions { BulkCopyType = bulkCopyType' }'  						Enumerable.Range(0' 10).Select(n =>  							new LinqDataTypes  							{  								ID            = 4000 + n'  								MoneyValue    = 1000m + n'  								DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)'  								BoolValue     = true'  								GuidValue     = Guid.NewGuid()'  								SmallIntValue = (short)n  							}  						));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BulkCopyLinqTypes,The following statement contains a magic number: db.GetTable<LinqDataTypes>().Delete(p => p.ID >= 4000);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinarySizeTest,The following statement contains a magic number: var data = new byte[500000];
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinarySizeTest,The following statement contains a magic number: conn.GetTable<ALLTYPE>().Insert(() => new ALLTYPE  					{  						INTDATATYPE  = 2000'  						BLOBDATATYPE = data'  					});
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,BinarySizeTest,The following statement contains a magic number: var blob = conn.GetTable<ALLTYPE>().First(t => t.INTDATATYPE == 2000).BLOBDATATYPE;
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ClobSizeTest,The following statement contains a magic number: sb.Append(((char)((i % byte.MaxValue) + 32)).ToString());
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ClobSizeTest,The following statement contains a magic number: i < 100000
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ClobSizeTest,The following statement contains a magic number: conn.GetTable<ALLTYPE>().Insert(() => new ALLTYPE  					{  						INTDATATYPE  = 2000'  						CLOBDATATYPE = data'  					});
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,ClobSizeTest,The following statement contains a magic number: var blob = conn.GetTable<ALLTYPE>()  						.Where (t => t.INTDATATYPE == 2000)  						.Select(t => t.CLOBDATATYPE)  						.First();
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: DB2Tools.AfterInitialized(() =>  			{  				int64Value = DB2Types.DB2Int64.CreateInstance(1);  				int32Value = DB2Types.DB2Int32.CreateInstance(2);  				int16Value = DB2Types.DB2Int16.CreateInstance(3);  			});
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: DB2Tools.AfterInitialized(() =>  			{  				int64Value = DB2Types.DB2Int64.CreateInstance(1);  				int32Value = DB2Types.DB2Int32.CreateInstance(2);  				int16Value = DB2Types.DB2Int16.CreateInstance(3);  			});
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(int32Value.Value' Is.TypeOf<int>     ().And.EqualTo(2));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(int16Value.Value' Is.TypeOf<short>   ().And.EqualTo(3));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var decimalValue          = DB2Types.DB2Decimal.     CreateInstance(4);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var decimalValueAsDecimal = DB2Types.DB2DecimalFloat.CreateInstance(5m);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var decimalValueAsDouble  = DB2Types.DB2DecimalFloat.CreateInstance(6.0);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var decimalValueAsLong    = DB2Types.DB2DecimalFloat.CreateInstance(7);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var realValue             = DB2Types.DB2Real.        CreateInstance(8);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var real370Value          = DB2Types.DB2Real370.     CreateInstance(9);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var blobValue             = DB2Types.DB2Blob.        CreateInstance(new byte[] { 2 });
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var dateValue             = DB2Types.DB2Date.        CreateInstance(new DateTime(2000' 1' 1));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var dateTimeValue1 = DB2Types.DB2DateTime.CreateInstance(new DateTime(2000' 1' 2));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var dateTimeValue1 = DB2Types.DB2DateTime.CreateInstance(new DateTime(2000' 1' 2));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var dateTimeValue2 = DB2Types.DB2DateTime.CreateInstance(new DateTime(2000' 1' 3).Ticks);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var dateTimeValue2 = DB2Types.DB2DateTime.CreateInstance(new DateTime(2000' 1' 3).Ticks);
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var timeStampValue = DB2Types.DB2DateTime.CreateInstance(new DateTime(2000' 1' 4));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: var timeStampValue = DB2Types.DB2DateTime.CreateInstance(new DateTime(2000' 1' 4));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(dateTimeValue1.Value' Is.TypeOf<DateTime>().And.EqualTo(new DateTime(2000' 1' 2)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(dateTimeValue1.Value' Is.TypeOf<DateTime>().And.EqualTo(new DateTime(2000' 1' 2)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(dateTimeValue2.Value' Is.TypeOf<DateTime>().And.EqualTo(new DateTime(2000' 1' 3)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(dateTimeValue2.Value' Is.TypeOf<DateTime>().And.EqualTo(new DateTime(2000' 1' 3)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(timeStampValue.Value' Is.TypeOf<DateTime>().And.EqualTo(new DateTime(2000' 1' 4)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(timeStampValue.Value' Is.TypeOf<DateTime>().And.EqualTo(new DateTime(2000' 1' 4)));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(decimalValue.         Value' Is.TypeOf<decimal> ().And.EqualTo(4));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(decimalValueAsDecimal.Value' Is.TypeOf<decimal> ().And.EqualTo(5));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(decimalValueAsDouble. Value' Is.TypeOf<decimal> ().And.EqualTo(6));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(decimalValueAsLong.   Value' Is.TypeOf<decimal> ().And.EqualTo(7));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(realValue.            Value' Is.TypeOf<float>   ().And.EqualTo(8));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(real370Value.         Value' Is.TypeOf<double>  ().And.EqualTo(9));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(blobValue.            Value' Is.TypeOf<byte[]>  ().And.EqualTo(new byte[] { 2 }));
Magic Number,Tests.DataProvider,DB2Tests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\IBM.Core\DB2Tests.cs,TypesTest,The following statement contains a magic number: Assert.That(dateValue.            Value' Is.TypeOf<DateTime>().And.EqualTo(new DateTime(2000' 1' 1)));
