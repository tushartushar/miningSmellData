Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst1,The method has 218 lines of code.
Long Method,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst2,The method has 216 lines of code.
Complex Method,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst1,Cyclomatic complexity of the method is 27
Complex Method,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst2,Cyclomatic complexity of the method is 26
Long Statement,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst1,The length of the statement  "									case MemberBindingType.Assignment    : queue.Enqueue(((MemberAssignment)b).Expression);                                       break; " is 132.
Long Statement,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst1,The length of the statement  "									case MemberBindingType.ListBinding   : EnqueueItems(((MemberListBinding)b).Initializers.SelectMany(i => i.Arguments)' queue); break; " is 132.
Long Statement,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst1,The length of the statement  "									case MemberBindingType.MemberBinding : enqueueLocal(((MemberMemberBinding)b).Bindings);                                       break; " is 132.
Long Statement,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst2,The length of the statement  "									case MemberBindingType.Assignment    : EnqueueItem(((MemberAssignment)b).Expression' queue);                                       break; " is 137.
Long Statement,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst2,The length of the statement  "									case MemberBindingType.ListBinding   : EnqueueItems(((MemberListBinding)b).Initializers.SelectMany(i => i.Arguments)' queue); break; " is 132.
Long Statement,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst2,The length of the statement  "									case MemberBindingType.MemberBinding : enqueueLocal(((MemberMemberBinding)b).Bindings);                                       break; " is 132.
Magic Number,Tests.Benchmark,NortwindExtensions,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\NortwindExtensions.cs,VwOrdersSubtotals,The following statement contains a magic number: var result =  				from od in db.OrderDetails  				group od by new  				{  					od.OrderID  				}  				into g  				select new OrderSubtotal  				{  					OrderID = g.Key.OrderID'  					Subtotal = g.Sum(  						p => Convert.ToDecimal(p.UnitPrice * p.Quantity * (1 - (decimal) p.Discount) / 100) * 100)  				};
Magic Number,Tests.Benchmark,NortwindExtensions,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\NortwindExtensions.cs,VwOrdersSubtotals,The following statement contains a magic number: var result =  				from od in db.OrderDetails  				group od by new  				{  					od.OrderID  				}  				into g  				select new OrderSubtotal  				{  					OrderID = g.Key.OrderID'  					Subtotal = g.Sum(  						p => Convert.ToDecimal(p.UnitPrice * p.Quantity * (1 - (decimal) p.Discount) / 100) * 100)  				};
Magic Number,Tests.Benchmark,NortwindExtensions,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\NortwindExtensions.cs,VwOrdersDetailsExtended,The following statement contains a magic number: var result =  			(from y in db.OrderDetails  				orderby  				y.OrderID  				select new OrderDetailsExtended  				{  					OrderID = y.OrderID'  					ProductID = y.ProductID'  					ProductName = y.OrderDetailsProduct.ProductName'  					UnitPrice = y.UnitPrice'  					Quantity = y.Quantity'  					Discount = y.Discount'  					ExtendedPrice = Math.Round(y.UnitPrice * y.Quantity * (1m - (decimal) y.Discount)' 2'  						MidpointRounding.AwayFromZero)  				}).Distinct();
Magic Number,Tests.Benchmark,NortwindExtensions,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\NortwindExtensions.cs,TenMostExpensiveProducts,The following statement contains a magic number: var result =  				(from a in (from p in db.Products  						orderby  						p.UnitPrice descending  						select new {p.ProductName' p.UnitPrice}).Distinct()  					select new ProductAndPrice {ProductName = a.ProductName' UnitPrice = a.UnitPrice})  				.Take(10);
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,GenerateBigWhere,The following statement contains a magic number: var array = Enumerable.Range(0' 1000).ToArray();
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllRecursive,The following statement contains a magic number: EmulateVisit(db.VwCategorySalesByYear(1977)         );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllRecursive,The following statement contains a magic number: EmulateVisit(db.VwProductSalesByYear(1977)          );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllRecursive,The following statement contains a magic number: EmulateVisit(db.VwQuarterlyOrders(1977)             );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllRecursive,The following statement contains a magic number: EmulateVisit(db.VwSalesByCategory(1977)             );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllRecursive,The following statement contains a magic number: EmulateVisit(db.VwSalesTotalsByAmount(1977' 2000)   );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllRecursive,The following statement contains a magic number: EmulateVisit(db.VwSalesTotalsByAmount(1977' 2000)   );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllRecursive,The following statement contains a magic number: EmulateVisit(db.VwGetSummaryOfSalesByYear(1977)     );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllNonRecursive,The following statement contains a magic number: EmulateVisitNonRecursive(db.VwCategorySalesByYear(1977)         );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllNonRecursive,The following statement contains a magic number: EmulateVisitNonRecursive(db.VwProductSalesByYear(1977)          );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllNonRecursive,The following statement contains a magic number: EmulateVisitNonRecursive(db.VwQuarterlyOrders(1977)             );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllNonRecursive,The following statement contains a magic number: EmulateVisitNonRecursive(db.VwSalesByCategory(1977)             );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllNonRecursive,The following statement contains a magic number: EmulateVisitNonRecursive(db.VwSalesTotalsByAmount(1977' 2000)   );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllNonRecursive,The following statement contains a magic number: EmulateVisitNonRecursive(db.VwSalesTotalsByAmount(1977' 2000)   );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,VisitAllNonRecursive,The following statement contains a magic number: EmulateVisitNonRecursive(db.VwGetSummaryOfSalesByYear(1977)     );
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,QueryGenerator,The following statement contains a magic number: db.VwCategorySalesByYear(1977)      .ToString();
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,QueryGenerator,The following statement contains a magic number: db.VwProductSalesByYear(1977)       .ToString();
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,QueryGenerator,The following statement contains a magic number: db.VwQuarterlyOrders(1977)          .ToString();
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,QueryGenerator,The following statement contains a magic number: db.VwSalesByCategory(1977)          .ToString();
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,QueryGenerator,The following statement contains a magic number: db.VwSalesTotalsByAmount(1977' 2000).ToString();
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,QueryGenerator,The following statement contains a magic number: db.VwSalesTotalsByAmount(1977' 2000).ToString();
Magic Number,Tests.Benchmark,QueryTests,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\Benchmarks\QueryTests.cs,QueryGenerator,The following statement contains a magic number: db.VwGetSummaryOfSalesByYear(1977)  .ToString();
Missing Default,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst1,The following switch statement is missing a default case: switch (expr.NodeType)  				{  					case ExpressionType.Add:  					case ExpressionType.AddChecked:  					case ExpressionType.And:  					case ExpressionType.AndAlso:  					case ExpressionType.ArrayIndex:  					case ExpressionType.Assign:  					case ExpressionType.Coalesce:  					case ExpressionType.Divide:  					case ExpressionType.Equal:  					case ExpressionType.ExclusiveOr:  					case ExpressionType.GreaterThan:  					case ExpressionType.GreaterThanOrEqual:  					case ExpressionType.LeftShift:  					case ExpressionType.LessThan:  					case ExpressionType.LessThanOrEqual:  					case ExpressionType.Modulo:  					case ExpressionType.Multiply:  					case ExpressionType.MultiplyChecked:  					case ExpressionType.NotEqual:  					case ExpressionType.Or:  					case ExpressionType.OrElse:  					case ExpressionType.Power:  					case ExpressionType.RightShift:  					case ExpressionType.Subtract:  					case ExpressionType.SubtractChecked:  					case ExpressionType.AddAssign:  					case ExpressionType.AndAssign:  					case ExpressionType.DivideAssign:  					case ExpressionType.ExclusiveOrAssign:  					case ExpressionType.LeftShiftAssign:  					case ExpressionType.ModuloAssign:  					case ExpressionType.MultiplyAssign:  					case ExpressionType.OrAssign:  					case ExpressionType.PowerAssign:  					case ExpressionType.RightShiftAssign:  					case ExpressionType.SubtractAssign:  					case ExpressionType.AddAssignChecked:  					case ExpressionType.MultiplyAssignChecked:  					case ExpressionType.SubtractAssignChecked:  					{  						var e = (BinaryExpression)expr;    						queue.Enqueue(e.Left);  						queue.Enqueue(e.Conversion);  						queue.Enqueue(e.Right);    						break;  					}    					case ExpressionType.ArrayLength:  					case ExpressionType.Convert:  					case ExpressionType.ConvertChecked:  					case ExpressionType.Negate:  					case ExpressionType.NegateChecked:  					case ExpressionType.Not:  					case ExpressionType.Quote:  					case ExpressionType.TypeAs:  					case ExpressionType.UnaryPlus:  					case ExpressionType.Decrement:  					case ExpressionType.Increment:  					case ExpressionType.IsFalse:  					case ExpressionType.IsTrue:  					case ExpressionType.Throw:  					case ExpressionType.Unbox:  					case ExpressionType.PreIncrementAssign:  					case ExpressionType.PreDecrementAssign:  					case ExpressionType.PostIncrementAssign:  					case ExpressionType.PostDecrementAssign:  					case ExpressionType.OnesComplement:  						queue.Enqueue(((UnaryExpression)expr).Operand);  						break;    					case ExpressionType.Call:  					{  						var e = (MethodCallExpression)expr;    						EnqueueItems(e.Arguments' queue);  						queue.Enqueue(e.Object);    						break;  					}    					case ExpressionType.Conditional:  					{  						var e = (ConditionalExpression)expr;    						queue.Enqueue(e.Test);  						queue.Enqueue(e.IfTrue);  						queue.Enqueue(e.IfFalse);    						break;  					}    					case ExpressionType.Invoke:  					{  						var e = (InvocationExpression)expr;    						queue.Enqueue(e.Expression);  						EnqueueItems(e.Arguments' queue);    						break;  					}    					case ExpressionType.Lambda:  					{  						var e = (LambdaExpression)expr;    						queue.Enqueue(e.Body);  						EnqueueItems(e.Parameters' queue);    						break;  					}    					case ExpressionType.ListInit:  					{  						var e = (ListInitExpression)expr;    						queue.Enqueue(e.NewExpression);  						EnqueueItems(e.Initializers.SelectMany(i => i.Arguments)' queue);    						break;  					}    					case ExpressionType.MemberAccess:   						queue.Enqueue(((MemberExpression)expr).Expression);   						break;    					case ExpressionType.MemberInit:  					{  						Action<IEnumerable<MemberBinding>> enqueueLocal = null; enqueueLocal = bindings =>  						{  							foreach (var b in bindings)  							{  								switch (b.BindingType)  								{  									case MemberBindingType.Assignment    : queue.Enqueue(((MemberAssignment)b).Expression);                                       break;  									case MemberBindingType.ListBinding   : EnqueueItems(((MemberListBinding)b).Initializers.SelectMany(i => i.Arguments)' queue); break;  									case MemberBindingType.MemberBinding : enqueueLocal(((MemberMemberBinding)b).Bindings);                                       break;  								}  							}  						};    						var e = (MemberInitExpression)expr;    						queue.Enqueue(e.NewExpression);  						enqueueLocal(e.Bindings);    						break;  					}    					case ExpressionType.New            : EnqueueItems(((NewExpression)       expr).Arguments'   queue); break;  					case ExpressionType.NewArrayBounds : EnqueueItems(((NewArrayExpression)  expr).Expressions' queue); break;  					case ExpressionType.NewArrayInit   : EnqueueItems(((NewArrayExpression)  expr).Expressions' queue); break;  					case ExpressionType.TypeEqual      :  					case ExpressionType.TypeIs         : queue.Enqueue(((TypeBinaryExpression)expr).Expression);        break;    					case ExpressionType.Block:  					{  						var e = (BlockExpression)expr;    						EnqueueItems(e.Expressions' queue);  						EnqueueItems(e.Variables'   queue);    						break;  					}    //					case ChangeTypeExpression.ChangeTypeType :  //						queue.Enqueue(((ChangeTypeExpression)expr).Expression); break;    					case ExpressionType.Dynamic:  					{  						var e = (DynamicExpression)expr;    						EnqueueItems(e.Arguments' queue);    						break;  					}    					case ExpressionType.Goto:  					{  						var e = (GotoExpression)expr;    						queue.Enqueue(e.Value);    						break;  					}    					case ExpressionType.Index:  					{  						var e = (IndexExpression)expr;    						queue.Enqueue(e.Object);  						EnqueueItems(e.Arguments' queue);    						break;  					}    					case ExpressionType.Label:  					{  						var e = (LabelExpression)expr;    						queue.Enqueue(e.DefaultValue);    						break;  					}    					case ExpressionType.RuntimeVariables:  					{  						var e = (RuntimeVariablesExpression)expr;    						EnqueueItems(e.Variables' queue);    						break;  					}    					case ExpressionType.Loop:  					{  						var e = (LoopExpression)expr;    						queue.Enqueue(e.Body);    						break;  					}    					case ExpressionType.Switch:  					{  						var e = (SwitchExpression)expr;    						queue.Enqueue(e.SwitchValue);  						EnqueueItems(e.Cases.SelectMany(cs => cs.TestValues.Concat(new[] {cs.Body}))' queue);  						queue.Enqueue(e.DefaultBody);    						break;  					}    					case ExpressionType.Try:  					{  						var e = (TryExpression)expr;    						EnqueueItems(e.Handlers.SelectMany(h => new [] {h.Body' h.Filter' h.Variable})' queue);  						queue.Enqueue(e.Body);  						queue.Enqueue(e.Fault);  						queue.Enqueue(e.Finally);    						break;  					}    					case ExpressionType.Extension:  					{  						if (expr.CanReduce)  							queue.Enqueue(expr.Reduce());    						break;  					}    				}
Missing Default,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst1,The following switch statement is missing a default case: switch (b.BindingType)  								{  									case MemberBindingType.Assignment    : queue.Enqueue(((MemberAssignment)b).Expression);                                       break;  									case MemberBindingType.ListBinding   : EnqueueItems(((MemberListBinding)b).Initializers.SelectMany(i => i.Arguments)' queue); break;  									case MemberBindingType.MemberBinding : enqueueLocal(((MemberMemberBinding)b).Bindings);                                       break;  								}
Missing Default,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst2,The following switch statement is missing a default case: switch (expr.NodeType)  				{  					case ExpressionType.Add:  					case ExpressionType.AddChecked:  					case ExpressionType.And:  					case ExpressionType.AndAlso:  					case ExpressionType.ArrayIndex:  					case ExpressionType.Assign:  					case ExpressionType.Coalesce:  					case ExpressionType.Divide:  					case ExpressionType.Equal:  					case ExpressionType.ExclusiveOr:  					case ExpressionType.GreaterThan:  					case ExpressionType.GreaterThanOrEqual:  					case ExpressionType.LeftShift:  					case ExpressionType.LessThan:  					case ExpressionType.LessThanOrEqual:  					case ExpressionType.Modulo:  					case ExpressionType.Multiply:  					case ExpressionType.MultiplyChecked:  					case ExpressionType.NotEqual:  					case ExpressionType.Or:  					case ExpressionType.OrElse:  					case ExpressionType.Power:  					case ExpressionType.RightShift:  					case ExpressionType.Subtract:  					case ExpressionType.SubtractChecked:  					case ExpressionType.AddAssign:  					case ExpressionType.AndAssign:  					case ExpressionType.DivideAssign:  					case ExpressionType.ExclusiveOrAssign:  					case ExpressionType.LeftShiftAssign:  					case ExpressionType.ModuloAssign:  					case ExpressionType.MultiplyAssign:  					case ExpressionType.OrAssign:  					case ExpressionType.PowerAssign:  					case ExpressionType.RightShiftAssign:  					case ExpressionType.SubtractAssign:  					case ExpressionType.AddAssignChecked:  					case ExpressionType.MultiplyAssignChecked:  					case ExpressionType.SubtractAssignChecked:  					{  						var e = (BinaryExpression)expr;    						EnqueueItem(e.Left' queue);  						EnqueueItem(e.Conversion' queue);  						EnqueueItem(e.Right' queue);    						break;  					}    					case ExpressionType.ArrayLength:  					case ExpressionType.Convert:  					case ExpressionType.ConvertChecked:  					case ExpressionType.Negate:  					case ExpressionType.NegateChecked:  					case ExpressionType.Not:  					case ExpressionType.Quote:  					case ExpressionType.TypeAs:  					case ExpressionType.UnaryPlus:  					case ExpressionType.Decrement:  					case ExpressionType.Increment:  					case ExpressionType.IsFalse:  					case ExpressionType.IsTrue:  					case ExpressionType.Throw:  					case ExpressionType.Unbox:  					case ExpressionType.PreIncrementAssign:  					case ExpressionType.PreDecrementAssign:  					case ExpressionType.PostIncrementAssign:  					case ExpressionType.PostDecrementAssign:  					case ExpressionType.OnesComplement:  						EnqueueItem(((UnaryExpression)expr).Operand' queue);  						break;    					case ExpressionType.Call:  					{  						var e = (MethodCallExpression)expr;    						EnqueueItems(e.Arguments' queue);  						EnqueueItem(e.Object' queue);    						break;  					}    					case ExpressionType.Conditional:  					{  						var e = (ConditionalExpression)expr;    						EnqueueItem(e.Test' queue);  						EnqueueItem(e.IfTrue' queue);  						EnqueueItem(e.IfFalse' queue);    						break;  					}    					case ExpressionType.Invoke:  					{  						var e = (InvocationExpression)expr;    						EnqueueItem(e.Expression' queue);  						EnqueueItems(e.Arguments' queue);    						break;  					}    					case ExpressionType.Lambda:  					{  						var e = (LambdaExpression)expr;    						EnqueueItem(e.Body' queue);  						EnqueueItems(e.Parameters' queue);    						break;  					}    					case ExpressionType.ListInit:  					{  						var e = (ListInitExpression)expr;    						EnqueueItem(e.NewExpression' queue);  						EnqueueItems(e.Initializers.SelectMany(i => i.Arguments)' queue);    						break;  					}    					case ExpressionType.MemberAccess:   						EnqueueItem(((MemberExpression)expr).Expression' queue);   						break;    					case ExpressionType.MemberInit:  					{  						Action<IEnumerable<MemberBinding>> enqueueLocal = null; enqueueLocal = bindings =>  						{  							foreach (var b in bindings)  							{  								switch (b.BindingType)  								{  									case MemberBindingType.Assignment    : EnqueueItem(((MemberAssignment)b).Expression' queue);                                       break;  									case MemberBindingType.ListBinding   : EnqueueItems(((MemberListBinding)b).Initializers.SelectMany(i => i.Arguments)' queue); break;  									case MemberBindingType.MemberBinding : enqueueLocal(((MemberMemberBinding)b).Bindings);                                       break;  								}  							}  						};    						var e = (MemberInitExpression)expr;    						EnqueueItem(e.NewExpression' queue);  						enqueueLocal(e.Bindings);    						break;  					}    					case ExpressionType.New            : EnqueueItems(((NewExpression)       expr).Arguments'   queue); break;  					case ExpressionType.NewArrayBounds : EnqueueItems(((NewArrayExpression)  expr).Expressions' queue); break;  					case ExpressionType.NewArrayInit   : EnqueueItems(((NewArrayExpression)  expr).Expressions' queue); break;  					case ExpressionType.TypeEqual      :  					case ExpressionType.TypeIs         : EnqueueItem(((TypeBinaryExpression)expr).Expression' queue);        break;    					case ExpressionType.Block:  					{  						var e = (BlockExpression)expr;    						EnqueueItems(e.Expressions' queue);  						EnqueueItems(e.Variables'   queue);    						break;  					}    //					case ChangeTypeExpression.ChangeTypeType :  //						EnqueueItem(((ChangeTypeExpression)expr).Expression); break;    					case ExpressionType.Dynamic:  					{  						var e = (DynamicExpression)expr;    						EnqueueItems(e.Arguments' queue);    						break;  					}    					case ExpressionType.Goto:  					{  						var e = (GotoExpression)expr;    						EnqueueItem(e.Value' queue);    						break;  					}    					case ExpressionType.Index:  					{  						var e = (IndexExpression)expr;    						EnqueueItem(e.Object' queue);  						EnqueueItems(e.Arguments' queue);    						break;  					}    					case ExpressionType.Label:  					{  						var e = (LabelExpression)expr;    						EnqueueItem(e.DefaultValue' queue);    						break;  					}    					case ExpressionType.RuntimeVariables:  					{  						var e = (RuntimeVariablesExpression)expr;    						EnqueueItems(e.Variables' queue);    						break;  					}    					case ExpressionType.Loop:  					{  						var e = (LoopExpression)expr;    						EnqueueItem(e.Body' queue);    						break;  					}    					case ExpressionType.Switch:  					{  						var e = (SwitchExpression)expr;    						EnqueueItem(e.SwitchValue' queue);  						EnqueueItems(e.Cases.SelectMany(cs => cs.TestValues.Concat(new[] {cs.Body}))' queue);  						EnqueueItem(e.DefaultBody' queue);    						break;  					}    					case ExpressionType.Try:  					{  						var e = (TryExpression)expr;    						EnqueueItems(e.Handlers.SelectMany(h => new [] {h.Body' h.Filter' h.Variable})' queue);  						EnqueueItem(e.Body' queue);  						EnqueueItem(e.Fault' queue);  						EnqueueItem(e.Finally' queue);    						break;  					}    					case ExpressionType.Extension:  					{  						if (expr.CanReduce)  							EnqueueItem(expr.Reduce()' queue);    						break;  					}    				}
Missing Default,Tests.Benchmark,ExpressionVisitorExtension,D:\research\architectureSmells\repos\linq2db_linq2db\Tests\Tests.Benchmark\ExpressionVisitorExtension.cs,EnumerateParentFirst2,The following switch statement is missing a default case: switch (b.BindingType)  								{  									case MemberBindingType.Assignment    : EnqueueItem(((MemberAssignment)b).Expression' queue);                                       break;  									case MemberBindingType.ListBinding   : EnqueueItems(((MemberListBinding)b).Initializers.SelectMany(i => i.Arguments)' queue); break;  									case MemberBindingType.MemberBinding : enqueueLocal(((MemberMemberBinding)b).Bindings);                                       break;  								}
