Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,AddExceptionInformation,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.HockeyApp.Services,HttpClientTransmission,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\HttpClientTransmission.cs,PostAsync,The method has 5 parameters. Parameters: address' content' contentType' contentEncoding' timeout
Long Identifier,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,,The length of the parameter AsyncRetryIntervalInMilliseconds is 32.
Long Identifier,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,Parse,The length of the parameter optionalHeaderDirectoryEntriesOffset is 36.
Long Identifier,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,ReadDebugDirectoryEntry,The length of the parameter optionalHeaderDirectoryEntriesOffset is 36.
Long Identifier,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,,The length of the parameter SizeofOptionalHeaderStandardFields32 is 36.
Long Identifier,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,,The length of the parameter SizeofOptionalHeaderStandardFields64 is 36.
Long Identifier,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,,The length of the parameter SizeofOptionalHeaderNTAdditionalFields32 is 40.
Long Identifier,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,,The length of the parameter SizeofOptionalHeaderNTAdditionalFields64 is 40.
Long Identifier,Microsoft.HockeyApp.Extensibility.Windows,PageViewTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\PageViewTelemetryModule.cs,,The length of the parameter HookNavigationEventsRetryIntervalInMilliseconds is 47.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceType,The length of the statement  "            var rootContainer = await PnpObject.CreateFromIdAsync(PnpObjectType.DeviceContainer' RootContainer' new[] { DisplayPrimaryCategoryKey }); " is 137.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The length of the statement  "                // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out  " is 123.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetOperatingSystemVersionAsync,The length of the statement  "            // Getting OS Version for WinRT application is tricky. The Silverlight API using <see href="System.Environment.OSVersion" /> " is 124.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetOperatingSystemVersionAsync,The length of the statement  "            // has been removed' but the new one <see href="AnalyticsInfo.VersionInfo.DeviceFamilyVersion" /> has been introduced only in a next  " is 132.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetOperatingSystemVersionAsync,The length of the statement  "            // For Windows Phone' try to get the version using reflection on top of AnalyticsInfo.VersionInfo.DeviceFamilyVersion' if that fails'  " is 133.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetOperatingSystemVersionAsync,The length of the statement  "            // For Windows 8.1 just use PnpObject which does its job. You can't use PnpObject for Windows Phone' it does not return correct value. " is 134.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetOperatingSystemVersionAsync,The length of the statement  "            return HockeyPlatformHelper81.Name == "HockeySDKWP81" ? GetOsVersionUsingAnalyticsInfo() : await GetOsVersionUsingPnpObject(); " is 126.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetOsVersionUsingPnpObject,The length of the statement  "            PnpObjectCollection pnpObjects = await PnpObject.FindAllAsync(PnpObjectType.Device' requestedProperties' RootContainerQuery); " is 125.
Long Statement,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetOemName,The length of the statement  "            var rootContainer = await PnpObject.CreateFromIdAsync(PnpObjectType.DeviceContainer' RootContainer' new[] { ManufacturerKey }); " is 127.
Long Statement,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,ReadDebugDirectoryEntry,The length of the statement  "            entry.RelativeVirtualAddress = this.ReadDwordAtFileOffset(optionalHeaderDirectoryEntriesOffset + PEImageReader.DebugTableDirectoryOffset); " is 138.
Long Statement,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,ReadDebugDirectoryEntry,The length of the statement  "            entry.Size = this.ReadDwordAtFileOffset(optionalHeaderDirectoryEntriesOffset + PEImageReader.DebugTableDirectoryOffset + 4); " is 124.
Long Statement,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,ReadDebugDirectories,The length of the statement  "            BinaryReader reader = this.ReadAtRelativeVirtualAddress(debugDirectoryEntry.RelativeVirtualAddress' debugDirectoryEntry.Size); " is 126.
Long Statement,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,GetCodeViewDebugData,The length of the statement  "                BinaryReader reader = this.ReadAtRelativeVirtualAddress((int)debugDirectory.AddressOfRawData' (int)debugDirectory.SizeOfData); " is 126.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,FrameHandler,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\PageViewTelemetryModule.cs,TrackCurrentFrameContent,The length of the statement  "                                string msg = string.Format(CultureInfo.InvariantCulture' "FrameHandler: Unhandled exception calling while tracking a page view. {0}"' task.Exception); " is 150.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,TaskScheduler_UnobservedTaskException,The length of the statement  "                CoreEventSource.Log.LogError("An exeption occured in UnhandledExceptionTelemetryModule.TaskScheduler_UnobservedTaskException: " + ex); " is 134.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,CreateCrashTelemetry,The length of the statement  "            bool hasNativeFrames = result.Threads != null && result.Threads.Count > 0 && result.Threads[0].Frames != null && result.Threads[0].Frames.Count > 0; " is 148.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,CreateCrashTelemetry,The length of the statement  "                    CoreEventSource.Log.LogError("An exception occured in TelemetryConfiguration.Active.DescriptionLoader callback : " + ex); " is 121.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,AddExceptionInformation,The length of the statement  "            exceptionMessages.AppendLine(string.Format(CultureInfo.CurrentCulture' "{0}: {1}"' exception.GetType().FullName' exception.Message)); " is 133.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,AddExceptionInformation,The length of the statement  "            // HasNativeImage() method invoke on first frame is required to understand whether an application is compiled in native tool chain " is 130.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,GetStrackTrace,The length of the statement  "                // we need to switch to invariant culture' because stack trace localized and we cannot parse it efficiently on the server side. " is 127.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,CoreApplication_UnhandledErrorDetected,The length of the statement  "            CoreEventSource.Log.LogVerbose("UnhandledExceptionTelemetryModule.CoreApplication_UnhandledErrorDetected started successfully"); " is 128.
Long Statement,Microsoft.HockeyApp.Extensibility.Windows,UnhandledExceptionTelemetryModule,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\UnhandledExceptionTelemetryModule.cs,CoreApplication_UnhandledErrorDetected,The length of the statement  "                    CoreEventSource.Log.LogError("An exeption occured in UnhandledExceptionTelemetryModule.CoreApplication_UnhandledErrorDetected: " + ex); " is 135.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Init,The length of the statement  "                        string msg = string.Format(CultureInfo.InvariantCulture' "Storage: Unhandled exception in DeleteObsoleteFiles: {0}"' task.Exception); " is 133.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Peek,The length of the statement  "                            StorageTransmission storageTransmissionItem = LoadTransmissionFromFileAsync(file).ConfigureAwait(false).GetAwaiter().GetResult(); " is 129.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Peek,The length of the statement  "                        string msg = string.Format(CultureInfo.InvariantCulture' "Failed to load an item from the storage. file: {0} Exception: {1}"' file' e); " is 135.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Delete,The length of the statement  "                IStorageFile file = this.StorageFolder.GetFileAsync(item.FileName).AsTask().ConfigureAwait(false).GetAwaiter().GetResult(); " is 123.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Delete,The length of the statement  "                string msg = string.Format(CultureInfo.InvariantCulture' "Failed to delete a file. file: {0} Exception: {1}"' item == null ? "null" : item.FullFilePath' e); " is 156.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,EnqueueAsync,The length of the statement  "                // Writes content to a temporaty file and only then rename to avoid the Peek from reading the file before it is being written. " is 126.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,EnqueueAsync,The length of the statement  "                IStorageFile temporaryFile = await this.StorageFolder.CreateFileAsync(tempFileName + ".tmp").AsTask().ConfigureAwait(false); " is 124.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,SaveTransmissionToFileAsync,The length of the statement  "                string message = string.Format("Failed to save transmission to file. UnauthorizedAccessException. File path: {0}' FileName: {1}"' file.Path' file.Name); " is 152.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,LoadTransmissionFromFileAsync,The length of the statement  "                    StorageTransmission storageTransmissionItem = await StorageTransmission.CreateFromStreamAsync(stream' file.Path).ConfigureAwait(false); " is 135.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,LoadTransmissionFromFileAsync,The length of the statement  "                string message = string.Format("Failed to load transmission from file. File path: {0}' FileName: {1}' Exception: {2}"' file.Path' file.Name' e); " is 144.
Long Statement,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,GetFiles,The length of the statement  "                    return files.Where((file) => Path.GetExtension(file.Name).Equals(filterByExtension' StringComparison.OrdinalIgnoreCase)); " is 121.
Complex Conditional,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The conditional expression  "(hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0"  is complex.
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,GetDeviceUniqueId,The following statement contains a magic number: try              {                  // Per documentation here http://msdn.microsoft.com/en-us/library/windows/apps/jj553431.aspx we are selectively pulling out                   // specific items from the hardware ID.                  StringBuilder builder = new StringBuilder();                  HardwareToken token = HardwareIdentification.GetPackageSpecificToken(null);                  using (DataReader dataReader = DataReader.FromBuffer(token.Id))                  {                      int offset = 0;                      while (offset < token.Id.Length)                      {                          // The first two bytes contain the type of the component and the next two bytes contain the value.                          byte[] hardwareEntry = new byte[4];                          dataReader.ReadBytes(hardwareEntry);                            if ((hardwareEntry[0] == 1 || // CPU ID of the processor                               hardwareEntry[0] == 2 || // Size of the memory                               hardwareEntry[0] == 3 || // Serial number of the disk device                               hardwareEntry[0] == 7 || // Mobile broadband ID                               hardwareEntry[0] == 9) && // BIOS                              hardwareEntry[1] == 0)                          {                              if (builder.Length > 0)                              {                                  builder.Append(''');                              }                                builder.Append(hardwareEntry[2]);                              builder.Append('_');                              builder.Append(hardwareEntry[3]);                          }                            offset += 4;                      }                  }                    // create a buffer containing the cleartext device ID                  IBuffer clearBuffer = CryptographicBuffer.ConvertStringToBinary(builder.ToString()' BinaryStringEncoding.Utf8);                    // get a provider for the SHA256 algorithm                  HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm("SHA256");                    // hash the input buffer                  IBuffer hashedBuffer = hashAlgorithmProvider.HashData(clearBuffer);                    deviceId = CryptographicBuffer.EncodeToBase64String(hashedBuffer);              }              catch (Exception)              {                  // For IoT sceanrios we will alwasy set the device id to IoT                  // Becuase HardwareIdentification API will always throw                  deviceId = "IoT";              }
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,ConvertIntToVersion,The following statement contains a magic number: ulong v1 = (v & 0xFFFF000000000000L) >> 48;
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,ConvertIntToVersion,The following statement contains a magic number: ulong v2 = (v & 0x0000FFFF00000000L) >> 32;
Magic Number,Microsoft.HockeyApp.Services.Device,DeviceService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\Device\DeviceService.cs,ConvertIntToVersion,The following statement contains a magic number: ulong v3 = (v & 0x00000000FFFF0000L) >> 16;
Magic Number,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,Parse,The following statement contains a magic number: int peOptionalHeaderOffset = peHeaderOffset + 4 + PEImageReader.SizeofCOFFFileHeader;
Magic Number,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,Parse,The following statement contains a magic number: int sizeOfImage = ReadDwordAtFileOffset(peOptionalHeaderOffset + 56);
Magic Number,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,ReadWordAtFileOffset,The following statement contains a magic number: byte[] word = new byte[2];
Magic Number,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,ReadDwordAtFileOffset,The following statement contains a magic number: byte[] dword = new byte[4];
Magic Number,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,ReadDebugDirectoryEntry,The following statement contains a magic number: entry.Size = this.ReadDwordAtFileOffset(optionalHeaderDirectoryEntriesOffset + PEImageReader.DebugTableDirectoryOffset + 4);
Magic Number,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,GetCodeViewDebugData,The following statement contains a magic number: foreach (DebugDirectory debugDirectory in debugDirectories)              {                  if (debugDirectory.Type != ImageDebugType.CodeView)                  {                      continue;                  }                    if (debugDirectory.SizeOfData > 1000)                  {                      return null;                  }                    BinaryReader reader = this.ReadAtRelativeVirtualAddress((int)debugDirectory.AddressOfRawData' (int)debugDirectory.SizeOfData);                  int signature = reader.ReadInt32();                  if (signature != PEImageReader.CodeViewSignature)                  {                      return null;                  }                    CodeViewDebugData codeView = new CodeViewDebugData(                                          new Guid(reader.ReadBytes(16))'                                          (int)reader.ReadUInt32()'                                          this.ReadNullTerminatedUTF8String(reader)'                                          endAddress);                  return codeView;              }
Magic Number,Microsoft.HockeyApp.Extensibility.Implementation,PEImageReader,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Extensibility\PEImageReader.cs,GetCodeViewDebugData,The following statement contains a magic number: foreach (DebugDirectory debugDirectory in debugDirectories)              {                  if (debugDirectory.Type != ImageDebugType.CodeView)                  {                      continue;                  }                    if (debugDirectory.SizeOfData > 1000)                  {                      return null;                  }                    BinaryReader reader = this.ReadAtRelativeVirtualAddress((int)debugDirectory.AddressOfRawData' (int)debugDirectory.SizeOfData);                  int signature = reader.ReadInt32();                  if (signature != PEImageReader.CodeViewSignature)                  {                      return null;                  }                    CodeViewDebugData codeView = new CodeViewDebugData(                                          new Guid(reader.ReadBytes(16))'                                          (int)reader.ReadUInt32()'                                          this.ReadNullTerminatedUTF8String(reader)'                                          endAddress);                  return codeView;              }
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Init,The following statement contains a magic number: this.deletedFilesQueue = new FixedSizeQueue<string>(10);
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Init,The following statement contains a magic number: this.CapacityInBytes = 10 * 1024 * 1024;
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Init,The following statement contains a magic number: this.CapacityInBytes = 10 * 1024 * 1024;
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Init,The following statement contains a magic number: this.CapacityInBytes = 10 * 1024 * 1024;
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Init,The following statement contains a magic number: this.MaxFiles = 100;
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,Peek,The following statement contains a magic number: IEnumerable<StorageFile> files = this.GetFiles(CommonFileQuery.OrderByName' ".trn"' top: 50);
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,EnqueueAsync,The following statement contains a magic number: try              {                     if (transmission == null || this.StorageFolder == null)                  {                      return;                  }                    // Initial storage size calculation.                   await this.EnsureSizeIsCalculatedAsync().ConfigureAwait(false);                    if ((ulong)this.storageSize >= this.CapacityInBytes || this.storageCountFiles >= this.MaxFiles)                  {                      // if max storage capacity has reached' drop the transmission (but log every 100 lost transmissions).                       if (this.transmissionsDropped++ % 100 == 0)                      {                          CoreEventSource.Log.LogVerbose("Total transmissions dropped: " + this.transmissionsDropped);                      }                        return;                  }                    // Writes content to a temporaty file and only then rename to avoid the Peek from reading the file before it is being written.                  // Creates the temp file name                  string tempFileName = Guid.NewGuid().ToString("N");                                    // Creates the temp file (doesn't save any content. Just creates the file)                  IStorageFile temporaryFile = await this.StorageFolder.CreateFileAsync(tempFileName + ".tmp").AsTask().ConfigureAwait(false);                    // Now that the file got created we can increase the files count                  Interlocked.Increment(ref this.storageCountFiles);                    // Saves transmission to the temp file                  await SaveTransmissionToFileAsync(transmission' temporaryFile).ConfigureAwait(false);                    // Now that the file is written increase storage size.                   long temporaryFileSize = await this.GetSizeAsync(temporaryFile).ConfigureAwait(false);                  Interlocked.Add(ref this.storageSize' temporaryFileSize);                    // Creates a new file name                  string now = DateTime.UtcNow.ToString("yyyyMMddHHmmss");                  string newFileName = string.Format(CultureInfo.InvariantCulture' "{0}_{1}.trn"' now' tempFileName);                    // Renames the file                  await temporaryFile.RenameAsync(newFileName' NameCollisionOption.FailIfExists).AsTask().ConfigureAwait(false);              }              catch (Exception e)              {                  CoreEventSource.Log.LogVerbose(string.Format(CultureInfo.InvariantCulture' "EnqueueAsync: Exception: {0}"' e));              }
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,DeleteObsoleteFiles,The following statement contains a magic number: try              {                  IEnumerable<StorageFile> files = this.GetFiles(CommonFileQuery.DefaultQuery' ".tmp"' 50);                  foreach (StorageFile file in files)                  {                      // if the file is older then a minute - delete it.                      if (DateTime.UtcNow - file.DateCreated.UtcDateTime >= TimeSpan.FromMinutes(5))                      {                          file.DeleteAsync().AsTask().ConfigureAwait(false).GetAwaiter().GetResult();                      }                  }              }              catch (Exception e)              {                  CoreEventSource.Log.LogVerbose("Failed to delete tmp files. Exception: " + e);              }
Magic Number,Microsoft.HockeyApp.Services,StorageService,C:\repos\bitstadium_HockeySDK-Windows\Src\Kit.UWP\Services\StorageService.cs,DeleteObsoleteFiles,The following statement contains a magic number: try              {                  IEnumerable<StorageFile> files = this.GetFiles(CommonFileQuery.DefaultQuery' ".tmp"' 50);                  foreach (StorageFile file in files)                  {                      // if the file is older then a minute - delete it.                      if (DateTime.UtcNow - file.DateCreated.UtcDateTime >= TimeSpan.FromMinutes(5))                      {                          file.DeleteAsync().AsTask().ConfigureAwait(false).GetAwaiter().GetResult();                      }                  }              }              catch (Exception e)              {                  CoreEventSource.Log.LogVerbose("Failed to delete tmp files. Exception: " + e);              }
