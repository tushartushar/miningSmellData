Implementation smell,Namespace,Class,File,Method,Description
Complex Method,gk.Puzzles.DailyProgrammer,Puzzle158H,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\Puzzle158H.cs,processRectangles,Cyclomatic complexity of the method is 12
Complex Method,gk.Puzzles.DailyProgrammer,REListFilter,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\REListFilter.cs,Run,Cyclomatic complexity of the method is 9
Long Parameter List,gk.Puzzles.DailyProgrammer,REListFilter,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\REListFilter.cs,calculateScore,The method has 6 parameters.
Long Parameter List,gk.Puzzles.DailyProgrammer,REListFilter,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\REListFilter.cs,calculateWeightedScore,The method has 7 parameters.
Long Parameter List,gk.Puzzles.DailyProgrammer,REListFilter,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\REListFilter.cs,CalculateWeightedScoreForWords,The method has 5 parameters.
Long Parameter List,gk.Puzzles.DailyProgrammer,REListFilter,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\REListFilter.cs,CalculateWeightedScoreForRegexs,The method has 6 parameters.
Long Statement,gk.Puzzles.DailyProgrammer,Puzzle158H,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\Puzzle158H.cs,Run,The length of the statement  "	decimal[] arr = parameters [0].ToString ().Replace ("\r\n"' " ").Split (' ').Select (x => Decimal.Parse (x)).ToArray (); " is 120.
Long Statement,gk.Puzzles.DailyProgrammer,REListFilter,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\REListFilter.cs,Run,The length of the statement  "	//scores = calculateScore(scores' SetA' SetB); // rank the generated regexs by most successful SetA matches which have 0 SetB matches. " is 134.
Complex Conditional,gk.Puzzles.DailyProgrammer,Puzzle158H,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\Puzzle158H.cs,processRectangles,The conditional expression  "x > Math.Floor (x1) && y > Math.Floor (y1) && x < Math.Floor (x2) && y < Math.Floor (y2)"  is complex.
Magic Number,gk.Puzzles.DailyProgrammer,Puzzle158H,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\Puzzle158H.cs,processRectangles,The following statement contains a magic number: for (int i = 1; i < parameters.Length; i += 4) {  	// right down  	decimal x1 = Decimal.Parse (parameters [i].ToString ());  	decimal y1 = Decimal.Parse (parameters [i + 1].ToString ());  	decimal x2 = Decimal.Parse (parameters [i + 2].ToString ());  	decimal y2 = Decimal.Parse (parameters [i + 3].ToString ());  	decimal leftOffset = x1 - Math.Floor (x1);  	decimal topOffset = y1 - Math.Floor (y1);  	decimal rightOffset = x2 - Math.Floor (x2);  	decimal bottomOffset = y2 - Math.Floor (y2);  	for (decimal x = Math.Floor (x1); x < Math.Ceiling (x2); x++) {  		for (decimal y = Math.Floor (y1); y < Math.Ceiling (y2); y++) {  			decimal d = 0M;  			if (x.Equals (Math.Floor (x1)))  				d += leftOffset;  			if (x.Equals (Math.Floor (x2)))  				d += rightOffset;  			if (y.Equals (Math.Floor (y1)))  				d += topOffset;  			if (y.Equals (Math.Floor (y2)))  				d += bottomOffset;  			if (x > Math.Floor (x1) && y > Math.Floor (y1) && x < Math.Floor (x2) && y < Math.Floor (y2))  				d = 1M;  			int xp = Convert.ToInt32 (x);  			int yp = Convert.ToInt32 (y);  			try {  				if (map [xp' yp] - d < 0M)  					map [xp' yp] = 0M;  				else  					map [xp' yp] -= d;  			}  			catch (Exception) {  				Console.WriteLine ("xp=" + xp.ToString () + " yp=" + yp);  			}  		}  	}  	writeMap (map);  	Console.WriteLine ();  }  
Magic Number,gk.Puzzles.DailyProgrammer,Puzzle158H,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\Puzzle158H.cs,processRectangles,The following statement contains a magic number: for (int i = 1; i < parameters.Length; i += 4) {  	// right down  	decimal x1 = Decimal.Parse (parameters [i].ToString ());  	decimal y1 = Decimal.Parse (parameters [i + 1].ToString ());  	decimal x2 = Decimal.Parse (parameters [i + 2].ToString ());  	decimal y2 = Decimal.Parse (parameters [i + 3].ToString ());  	decimal leftOffset = x1 - Math.Floor (x1);  	decimal topOffset = y1 - Math.Floor (y1);  	decimal rightOffset = x2 - Math.Floor (x2);  	decimal bottomOffset = y2 - Math.Floor (y2);  	for (decimal x = Math.Floor (x1); x < Math.Ceiling (x2); x++) {  		for (decimal y = Math.Floor (y1); y < Math.Ceiling (y2); y++) {  			decimal d = 0M;  			if (x.Equals (Math.Floor (x1)))  				d += leftOffset;  			if (x.Equals (Math.Floor (x2)))  				d += rightOffset;  			if (y.Equals (Math.Floor (y1)))  				d += topOffset;  			if (y.Equals (Math.Floor (y2)))  				d += bottomOffset;  			if (x > Math.Floor (x1) && y > Math.Floor (y1) && x < Math.Floor (x2) && y < Math.Floor (y2))  				d = 1M;  			int xp = Convert.ToInt32 (x);  			int yp = Convert.ToInt32 (y);  			try {  				if (map [xp' yp] - d < 0M)  					map [xp' yp] = 0M;  				else  					map [xp' yp] -= d;  			}  			catch (Exception) {  				Console.WriteLine ("xp=" + xp.ToString () + " yp=" + yp);  			}  		}  	}  	writeMap (map);  	Console.WriteLine ();  }  
Magic Number,gk.Puzzles.DailyProgrammer,Puzzle158H,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\Puzzle158H.cs,processRectangles,The following statement contains a magic number: for (int i = 1; i < parameters.Length; i += 4) {  	// right down  	decimal x1 = Decimal.Parse (parameters [i].ToString ());  	decimal y1 = Decimal.Parse (parameters [i + 1].ToString ());  	decimal x2 = Decimal.Parse (parameters [i + 2].ToString ());  	decimal y2 = Decimal.Parse (parameters [i + 3].ToString ());  	decimal leftOffset = x1 - Math.Floor (x1);  	decimal topOffset = y1 - Math.Floor (y1);  	decimal rightOffset = x2 - Math.Floor (x2);  	decimal bottomOffset = y2 - Math.Floor (y2);  	for (decimal x = Math.Floor (x1); x < Math.Ceiling (x2); x++) {  		for (decimal y = Math.Floor (y1); y < Math.Ceiling (y2); y++) {  			decimal d = 0M;  			if (x.Equals (Math.Floor (x1)))  				d += leftOffset;  			if (x.Equals (Math.Floor (x2)))  				d += rightOffset;  			if (y.Equals (Math.Floor (y1)))  				d += topOffset;  			if (y.Equals (Math.Floor (y2)))  				d += bottomOffset;  			if (x > Math.Floor (x1) && y > Math.Floor (y1) && x < Math.Floor (x2) && y < Math.Floor (y2))  				d = 1M;  			int xp = Convert.ToInt32 (x);  			int yp = Convert.ToInt32 (y);  			try {  				if (map [xp' yp] - d < 0M)  					map [xp' yp] = 0M;  				else  					map [xp' yp] -= d;  			}  			catch (Exception) {  				Console.WriteLine ("xp=" + xp.ToString () + " yp=" + yp);  			}  		}  	}  	writeMap (map);  	Console.WriteLine ();  }  
Magic Number,gk.Puzzles.DailyProgrammer,Puzzle158H,C:\repos\SecretDeveloper_gk.Puzzles.DailyProgrammer\gk.Puzzles.DailyProgrammer\Puzzle158H.cs,processRectangles,The following statement contains a magic number: i += 4
