Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LyricShow,SearchSongsForm,C:\repos\lytedev_LyricShow\Forms\SearchSongsForm.cs,textBox1_PreviewKeyDown,Cyclomatic complexity of the method is 10
Complex Method,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,Cyclomatic complexity of the method is 15
Complex Method,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,Cyclomatic complexity of the method is 15
Long Statement,LyricShow,myLabel,C:\repos\lytedev_LyricShow\Forms\ScreenForm.Designer.cs,OnPaint,The length of the statement  "		path.AddString (_SongText' LSFont.FontFamily' (int)FontStyle.Bold' LSFont.SizeInPoints' new Rectangle (0' 0' fx' fy)' sf); " is 122.
Magic Number,LyricShow,GUITest,C:\repos\lytedev_LyricShow\Forms\GUITest.cs,Form1_Load,The following statement contains a magic number: cs.Top = 50;  
Magic Number,LyricShow,GUITest,C:\repos\lytedev_LyricShow\Forms\GUITest.cs,Form1_Load,The following statement contains a magic number: cs.Height = 200;  
Magic Number,LyricShow,GUITest,C:\repos\lytedev_LyricShow\Forms\GUITest.cs,Form1_Load,The following statement contains a magic number: cs.Width = 350;  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: l.MinimumSize = new System.Drawing.Size (150' 20);  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: l.MinimumSize = new System.Drawing.Size (150' 20);  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: l.Top = 5;  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: t.Top = l.Top + l.Height + 5;  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: b.Size = new System.Drawing.Size (50' 24);  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: b.Size = new System.Drawing.Size (50' 24);  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: b.Left = f.Width / 2 - (b.Width / 2);  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: b.Left = f.Width / 2 - (b.Width / 2);  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: b.Top = t.Top + t.Height + 5;  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: f.Size = new System.Drawing.Size (40' 40);  
Magic Number,LyricShow,InputBox,C:\repos\lytedev_LyricShow\GenericClasses.cs,Show,The following statement contains a magic number: f.Size = new System.Drawing.Size (40' 40);  
Magic Number,LyricShow,MainForm,C:\repos\lytedev_LyricShow\Forms\MainForm.cs,addDisplayOutputX,The following statement contains a magic number: dss.ScreenLoc = new Point (Screen.PrimaryScreen.WorkingArea.Width - 800' 0);  
Magic Number,LyricShow,MainForm,C:\repos\lytedev_LyricShow\Forms\MainForm.cs,addDisplayOutputX,The following statement contains a magic number: dss.ScreenSize = new Size (800' 600);  
Magic Number,LyricShow,MainForm,C:\repos\lytedev_LyricShow\Forms\MainForm.cs,addDisplayOutputX,The following statement contains a magic number: dss.ScreenSize = new Size (800' 600);  
Magic Number,LyricShow,MainForm,C:\repos\lytedev_LyricShow\Forms\MainForm.cs,lstSong_SelectedIndexChanged,The following statement contains a magic number: if (lstSong.SelectedItem.ToString () == "<-Previous Song->") {  	lstPlaylist.SelectedIndex = lstPlaylist.SelectedIndex - 1;  	changeVerseList ((Song)lstPlaylist.SelectedItem);  	lstSong.SelectedIndex = lstSong.Items.Count - 2;  }  
Magic Number,LyricShow,MainForm,C:\repos\lytedev_LyricShow\Forms\MainForm.cs,lstSong_SelectedIndexChanged,The following statement contains a magic number: lstSong.SelectedIndex = lstSong.Items.Count - 2;  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: switch (e.KeyCode) {  case Keys.Escape:  	this.Close ();  	break;  case Keys.OemMinus:  case Keys.Subtract:  	this.Width = Convert.ToInt32 (this.Width * .95);  	this.Height = Convert.ToInt32 (this.Height * .95);  	AdjustLabels ();  	break;  case Keys.Oemplus:  case Keys.Add:  	this.Width = Convert.ToInt32 (this.Width * 1.05);  	this.Height = Convert.ToInt32 (this.Height * 1.05);  	AdjustLabels ();  	break;  }  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: switch (e.KeyCode) {  case Keys.Escape:  	this.Close ();  	break;  case Keys.OemMinus:  case Keys.Subtract:  	this.Width = Convert.ToInt32 (this.Width * .95);  	this.Height = Convert.ToInt32 (this.Height * .95);  	AdjustLabels ();  	break;  case Keys.Oemplus:  case Keys.Add:  	this.Width = Convert.ToInt32 (this.Width * 1.05);  	this.Height = Convert.ToInt32 (this.Height * 1.05);  	AdjustLabels ();  	break;  }  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: switch (e.KeyCode) {  case Keys.Escape:  	this.Close ();  	break;  case Keys.OemMinus:  case Keys.Subtract:  	this.Width = Convert.ToInt32 (this.Width * .95);  	this.Height = Convert.ToInt32 (this.Height * .95);  	AdjustLabels ();  	break;  case Keys.Oemplus:  case Keys.Add:  	this.Width = Convert.ToInt32 (this.Width * 1.05);  	this.Height = Convert.ToInt32 (this.Height * 1.05);  	AdjustLabels ();  	break;  }  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: switch (e.KeyCode) {  case Keys.Escape:  	this.Close ();  	break;  case Keys.OemMinus:  case Keys.Subtract:  	this.Width = Convert.ToInt32 (this.Width * .95);  	this.Height = Convert.ToInt32 (this.Height * .95);  	AdjustLabels ();  	break;  case Keys.Oemplus:  case Keys.Add:  	this.Width = Convert.ToInt32 (this.Width * 1.05);  	this.Height = Convert.ToInt32 (this.Height * 1.05);  	AdjustLabels ();  	break;  }  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: this.Width = Convert.ToInt32 (this.Width * .95);  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: this.Height = Convert.ToInt32 (this.Height * .95);  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: this.Width = Convert.ToInt32 (this.Width * 1.05);  
Magic Number,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following statement contains a magic number: this.Height = Convert.ToInt32 (this.Height * 1.05);  
Magic Number,LyricShow,myLabel,C:\repos\lytedev_LyricShow\Forms\ScreenForm.Designer.cs,OnPaint,The following statement contains a magic number: if (parent.EnableBackground == false) {  	Text = _SongText;  }  else {  	GraphicsPath path = new GraphicsPath ();  	StringFormat sf = new StringFormat ();  	sf.Alignment = StringAlignment.Center;  	sf.LineAlignment = StringAlignment.Center;  	Graphics g = e.Graphics;  	Brush br = new SolidBrush (Color.White);  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBilinear;  	g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAliasGridFit;  	int fx = this.Width;  	int fy = this.Height;  	path.AddString (_SongText' LSFont.FontFamily' (int)FontStyle.Bold' LSFont.SizeInPoints' new Rectangle (0' 0' fx' fy)' sf);  	Pen pen = new Pen (Color.Black' 3);  	g.DrawPath (pen' path);  	g.FillPath (br' path);  	pen.Dispose ();  	br.Dispose ();  	path.Dispose ();  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: try {  	FileStream fs = new FileStream (songFile' FileMode.Open' FileAccess.Read);  	StreamReader sr = new StreamReader (fs);  	string songTextFile = sr.ReadToEnd ();  	string[] songVerses = songTextFile.Split (new string[] {  		"\r\n\r\n"'  		"\n\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	if (songVerses.Length > 1) {  		// Handle Song Header  		string[] verseLines = songVerses [0].Split (new string[] {  			"\r\n"'  			"\n"  		}' 1024' StringSplitOptions.RemoveEmptyEntries);  		FileName = songFile;  		//mike added this  		Name = verseLines [0].Replace ("ï¿½"' "");  		foreach (String vl in verseLines) {  			if (vl.ToUpper ().Contains ("BACKGROUND=")) {  				BackgroundPath = vl.Replace ("background="' "").Replace ("\""' "");  			}  		}  		AddVerse ("_NAME"' Name);  		for (int i = 1; i < songVerses.Length; i++) {  			verseLines = songVerses [i].Split (new string[] {  				"\r\n"  			}' 1024' StringSplitOptions.RemoveEmptyEntries);  			if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  				string verseContent = "";  				for (int k = 1; k < verseLines.Length; k++) {  					verseContent += verseLines [k].Trim () + "\r\n";  				}  				try {  					AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  				}  				catch {  					string x = "I have an error";  					x = x + "";  				}  			}  			else {  				string verseContent = "";  				if (verseLines.Length == 1) {  					String mapRef = verseLines [0].Trim ();  					if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  						if (mapRef.ToUpper ().Contains ("REPEAT")) {  							AddVerse (Verses [i - 1]' Verses [i - 1]);  						}  						else {  							string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  							int foundIndex = VerseKeys.FindIndex (delegate (String s) {  								return s.ToUpper ().Contains (findTxt.ToUpper ());  							});  							if (foundIndex != -1) {  								AddVerse (findTxt' Verses [foundIndex]);  							}  							else {  								AddVerse (findTxt' "");  							}  						}  					}  				}  				else {  					for (int k = 0; k < verseLines.Length; k++) {  						verseContent += verseLines [k].Trim () + "\n";  					}  					if (verseContent.Trim ().Substring (0' 1) == "(") {  						string tKey = verseContent.Substring (1' verseContent.Length - 3);  						verseContent = Verses [VerseKeys.IndexOf (tKey)];  						AddVerse (tKey' verseContent);  					}  					else {  						AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  					}  				}  			}  		}  	}  }  catch (Exception e) {  	string x = "I have an error";  	x = x + e.ToString ();  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: try {  	FileStream fs = new FileStream (songFile' FileMode.Open' FileAccess.Read);  	StreamReader sr = new StreamReader (fs);  	string songTextFile = sr.ReadToEnd ();  	string[] songVerses = songTextFile.Split (new string[] {  		"\r\n\r\n"'  		"\n\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	if (songVerses.Length > 1) {  		// Handle Song Header  		string[] verseLines = songVerses [0].Split (new string[] {  			"\r\n"'  			"\n"  		}' 1024' StringSplitOptions.RemoveEmptyEntries);  		FileName = songFile;  		//mike added this  		Name = verseLines [0].Replace ("ï¿½"' "");  		foreach (String vl in verseLines) {  			if (vl.ToUpper ().Contains ("BACKGROUND=")) {  				BackgroundPath = vl.Replace ("background="' "").Replace ("\""' "");  			}  		}  		AddVerse ("_NAME"' Name);  		for (int i = 1; i < songVerses.Length; i++) {  			verseLines = songVerses [i].Split (new string[] {  				"\r\n"  			}' 1024' StringSplitOptions.RemoveEmptyEntries);  			if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  				string verseContent = "";  				for (int k = 1; k < verseLines.Length; k++) {  					verseContent += verseLines [k].Trim () + "\r\n";  				}  				try {  					AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  				}  				catch {  					string x = "I have an error";  					x = x + "";  				}  			}  			else {  				string verseContent = "";  				if (verseLines.Length == 1) {  					String mapRef = verseLines [0].Trim ();  					if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  						if (mapRef.ToUpper ().Contains ("REPEAT")) {  							AddVerse (Verses [i - 1]' Verses [i - 1]);  						}  						else {  							string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  							int foundIndex = VerseKeys.FindIndex (delegate (String s) {  								return s.ToUpper ().Contains (findTxt.ToUpper ());  							});  							if (foundIndex != -1) {  								AddVerse (findTxt' Verses [foundIndex]);  							}  							else {  								AddVerse (findTxt' "");  							}  						}  					}  				}  				else {  					for (int k = 0; k < verseLines.Length; k++) {  						verseContent += verseLines [k].Trim () + "\n";  					}  					if (verseContent.Trim ().Substring (0' 1) == "(") {  						string tKey = verseContent.Substring (1' verseContent.Length - 3);  						verseContent = Verses [VerseKeys.IndexOf (tKey)];  						AddVerse (tKey' verseContent);  					}  					else {  						AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  					}  				}  			}  		}  	}  }  catch (Exception e) {  	string x = "I have an error";  	x = x + e.ToString ();  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: try {  	FileStream fs = new FileStream (songFile' FileMode.Open' FileAccess.Read);  	StreamReader sr = new StreamReader (fs);  	string songTextFile = sr.ReadToEnd ();  	string[] songVerses = songTextFile.Split (new string[] {  		"\r\n\r\n"'  		"\n\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	if (songVerses.Length > 1) {  		// Handle Song Header  		string[] verseLines = songVerses [0].Split (new string[] {  			"\r\n"'  			"\n"  		}' 1024' StringSplitOptions.RemoveEmptyEntries);  		FileName = songFile;  		//mike added this  		Name = verseLines [0].Replace ("ï¿½"' "");  		foreach (String vl in verseLines) {  			if (vl.ToUpper ().Contains ("BACKGROUND=")) {  				BackgroundPath = vl.Replace ("background="' "").Replace ("\""' "");  			}  		}  		AddVerse ("_NAME"' Name);  		for (int i = 1; i < songVerses.Length; i++) {  			verseLines = songVerses [i].Split (new string[] {  				"\r\n"  			}' 1024' StringSplitOptions.RemoveEmptyEntries);  			if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  				string verseContent = "";  				for (int k = 1; k < verseLines.Length; k++) {  					verseContent += verseLines [k].Trim () + "\r\n";  				}  				try {  					AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  				}  				catch {  					string x = "I have an error";  					x = x + "";  				}  			}  			else {  				string verseContent = "";  				if (verseLines.Length == 1) {  					String mapRef = verseLines [0].Trim ();  					if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  						if (mapRef.ToUpper ().Contains ("REPEAT")) {  							AddVerse (Verses [i - 1]' Verses [i - 1]);  						}  						else {  							string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  							int foundIndex = VerseKeys.FindIndex (delegate (String s) {  								return s.ToUpper ().Contains (findTxt.ToUpper ());  							});  							if (foundIndex != -1) {  								AddVerse (findTxt' Verses [foundIndex]);  							}  							else {  								AddVerse (findTxt' "");  							}  						}  					}  				}  				else {  					for (int k = 0; k < verseLines.Length; k++) {  						verseContent += verseLines [k].Trim () + "\n";  					}  					if (verseContent.Trim ().Substring (0' 1) == "(") {  						string tKey = verseContent.Substring (1' verseContent.Length - 3);  						verseContent = Verses [VerseKeys.IndexOf (tKey)];  						AddVerse (tKey' verseContent);  					}  					else {  						AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  					}  				}  			}  		}  	}  }  catch (Exception e) {  	string x = "I have an error";  	x = x + e.ToString ();  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: try {  	FileStream fs = new FileStream (songFile' FileMode.Open' FileAccess.Read);  	StreamReader sr = new StreamReader (fs);  	string songTextFile = sr.ReadToEnd ();  	string[] songVerses = songTextFile.Split (new string[] {  		"\r\n\r\n"'  		"\n\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	if (songVerses.Length > 1) {  		// Handle Song Header  		string[] verseLines = songVerses [0].Split (new string[] {  			"\r\n"'  			"\n"  		}' 1024' StringSplitOptions.RemoveEmptyEntries);  		FileName = songFile;  		//mike added this  		Name = verseLines [0].Replace ("ï¿½"' "");  		foreach (String vl in verseLines) {  			if (vl.ToUpper ().Contains ("BACKGROUND=")) {  				BackgroundPath = vl.Replace ("background="' "").Replace ("\""' "");  			}  		}  		AddVerse ("_NAME"' Name);  		for (int i = 1; i < songVerses.Length; i++) {  			verseLines = songVerses [i].Split (new string[] {  				"\r\n"  			}' 1024' StringSplitOptions.RemoveEmptyEntries);  			if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  				string verseContent = "";  				for (int k = 1; k < verseLines.Length; k++) {  					verseContent += verseLines [k].Trim () + "\r\n";  				}  				try {  					AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  				}  				catch {  					string x = "I have an error";  					x = x + "";  				}  			}  			else {  				string verseContent = "";  				if (verseLines.Length == 1) {  					String mapRef = verseLines [0].Trim ();  					if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  						if (mapRef.ToUpper ().Contains ("REPEAT")) {  							AddVerse (Verses [i - 1]' Verses [i - 1]);  						}  						else {  							string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  							int foundIndex = VerseKeys.FindIndex (delegate (String s) {  								return s.ToUpper ().Contains (findTxt.ToUpper ());  							});  							if (foundIndex != -1) {  								AddVerse (findTxt' Verses [foundIndex]);  							}  							else {  								AddVerse (findTxt' "");  							}  						}  					}  				}  				else {  					for (int k = 0; k < verseLines.Length; k++) {  						verseContent += verseLines [k].Trim () + "\n";  					}  					if (verseContent.Trim ().Substring (0' 1) == "(") {  						string tKey = verseContent.Substring (1' verseContent.Length - 3);  						verseContent = Verses [VerseKeys.IndexOf (tKey)];  						AddVerse (tKey' verseContent);  					}  					else {  						AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  					}  				}  			}  		}  	}  }  catch (Exception e) {  	string x = "I have an error";  	x = x + e.ToString ();  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: if (songVerses.Length > 1) {  	// Handle Song Header  	string[] verseLines = songVerses [0].Split (new string[] {  		"\r\n"'  		"\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	FileName = songFile;  	//mike added this  	Name = verseLines [0].Replace ("ï¿½"' "");  	foreach (String vl in verseLines) {  		if (vl.ToUpper ().Contains ("BACKGROUND=")) {  			BackgroundPath = vl.Replace ("background="' "").Replace ("\""' "");  		}  	}  	AddVerse ("_NAME"' Name);  	for (int i = 1; i < songVerses.Length; i++) {  		verseLines = songVerses [i].Split (new string[] {  			"\r\n"  		}' 1024' StringSplitOptions.RemoveEmptyEntries);  		if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  			string verseContent = "";  			for (int k = 1; k < verseLines.Length; k++) {  				verseContent += verseLines [k].Trim () + "\r\n";  			}  			try {  				AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  			}  			catch {  				string x = "I have an error";  				x = x + "";  			}  		}  		else {  			string verseContent = "";  			if (verseLines.Length == 1) {  				String mapRef = verseLines [0].Trim ();  				if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  					if (mapRef.ToUpper ().Contains ("REPEAT")) {  						AddVerse (Verses [i - 1]' Verses [i - 1]);  					}  					else {  						string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  						int foundIndex = VerseKeys.FindIndex (delegate (String s) {  							return s.ToUpper ().Contains (findTxt.ToUpper ());  						});  						if (foundIndex != -1) {  							AddVerse (findTxt' Verses [foundIndex]);  						}  						else {  							AddVerse (findTxt' "");  						}  					}  				}  			}  			else {  				for (int k = 0; k < verseLines.Length; k++) {  					verseContent += verseLines [k].Trim () + "\n";  				}  				if (verseContent.Trim ().Substring (0' 1) == "(") {  					string tKey = verseContent.Substring (1' verseContent.Length - 3);  					verseContent = Verses [VerseKeys.IndexOf (tKey)];  					AddVerse (tKey' verseContent);  				}  				else {  					AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  				}  			}  		}  	}  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: if (songVerses.Length > 1) {  	// Handle Song Header  	string[] verseLines = songVerses [0].Split (new string[] {  		"\r\n"'  		"\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	FileName = songFile;  	//mike added this  	Name = verseLines [0].Replace ("ï¿½"' "");  	foreach (String vl in verseLines) {  		if (vl.ToUpper ().Contains ("BACKGROUND=")) {  			BackgroundPath = vl.Replace ("background="' "").Replace ("\""' "");  		}  	}  	AddVerse ("_NAME"' Name);  	for (int i = 1; i < songVerses.Length; i++) {  		verseLines = songVerses [i].Split (new string[] {  			"\r\n"  		}' 1024' StringSplitOptions.RemoveEmptyEntries);  		if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  			string verseContent = "";  			for (int k = 1; k < verseLines.Length; k++) {  				verseContent += verseLines [k].Trim () + "\r\n";  			}  			try {  				AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  			}  			catch {  				string x = "I have an error";  				x = x + "";  			}  		}  		else {  			string verseContent = "";  			if (verseLines.Length == 1) {  				String mapRef = verseLines [0].Trim ();  				if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  					if (mapRef.ToUpper ().Contains ("REPEAT")) {  						AddVerse (Verses [i - 1]' Verses [i - 1]);  					}  					else {  						string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  						int foundIndex = VerseKeys.FindIndex (delegate (String s) {  							return s.ToUpper ().Contains (findTxt.ToUpper ());  						});  						if (foundIndex != -1) {  							AddVerse (findTxt' Verses [foundIndex]);  						}  						else {  							AddVerse (findTxt' "");  						}  					}  				}  			}  			else {  				for (int k = 0; k < verseLines.Length; k++) {  					verseContent += verseLines [k].Trim () + "\n";  				}  				if (verseContent.Trim ().Substring (0' 1) == "(") {  					string tKey = verseContent.Substring (1' verseContent.Length - 3);  					verseContent = Verses [VerseKeys.IndexOf (tKey)];  					AddVerse (tKey' verseContent);  				}  				else {  					AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  				}  			}  		}  	}  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: if (songVerses.Length > 1) {  	// Handle Song Header  	string[] verseLines = songVerses [0].Split (new string[] {  		"\r\n"'  		"\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	FileName = songFile;  	//mike added this  	Name = verseLines [0].Replace ("ï¿½"' "");  	foreach (String vl in verseLines) {  		if (vl.ToUpper ().Contains ("BACKGROUND=")) {  			BackgroundPath = vl.Replace ("background="' "").Replace ("\""' "");  		}  	}  	AddVerse ("_NAME"' Name);  	for (int i = 1; i < songVerses.Length; i++) {  		verseLines = songVerses [i].Split (new string[] {  			"\r\n"  		}' 1024' StringSplitOptions.RemoveEmptyEntries);  		if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  			string verseContent = "";  			for (int k = 1; k < verseLines.Length; k++) {  				verseContent += verseLines [k].Trim () + "\r\n";  			}  			try {  				AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  			}  			catch {  				string x = "I have an error";  				x = x + "";  			}  		}  		else {  			string verseContent = "";  			if (verseLines.Length == 1) {  				String mapRef = verseLines [0].Trim ();  				if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  					if (mapRef.ToUpper ().Contains ("REPEAT")) {  						AddVerse (Verses [i - 1]' Verses [i - 1]);  					}  					else {  						string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  						int foundIndex = VerseKeys.FindIndex (delegate (String s) {  							return s.ToUpper ().Contains (findTxt.ToUpper ());  						});  						if (foundIndex != -1) {  							AddVerse (findTxt' Verses [foundIndex]);  						}  						else {  							AddVerse (findTxt' "");  						}  					}  				}  			}  			else {  				for (int k = 0; k < verseLines.Length; k++) {  					verseContent += verseLines [k].Trim () + "\n";  				}  				if (verseContent.Trim ().Substring (0' 1) == "(") {  					string tKey = verseContent.Substring (1' verseContent.Length - 3);  					verseContent = Verses [VerseKeys.IndexOf (tKey)];  					AddVerse (tKey' verseContent);  				}  				else {  					AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  				}  			}  		}  	}  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: for (int i = 1; i < songVerses.Length; i++) {  	verseLines = songVerses [i].Split (new string[] {  		"\r\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  		string verseContent = "";  		for (int k = 1; k < verseLines.Length; k++) {  			verseContent += verseLines [k].Trim () + "\r\n";  		}  		try {  			AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  		}  		catch {  			string x = "I have an error";  			x = x + "";  		}  	}  	else {  		string verseContent = "";  		if (verseLines.Length == 1) {  			String mapRef = verseLines [0].Trim ();  			if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  				if (mapRef.ToUpper ().Contains ("REPEAT")) {  					AddVerse (Verses [i - 1]' Verses [i - 1]);  				}  				else {  					string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  					int foundIndex = VerseKeys.FindIndex (delegate (String s) {  						return s.ToUpper ().Contains (findTxt.ToUpper ());  					});  					if (foundIndex != -1) {  						AddVerse (findTxt' Verses [foundIndex]);  					}  					else {  						AddVerse (findTxt' "");  					}  				}  			}  		}  		else {  			for (int k = 0; k < verseLines.Length; k++) {  				verseContent += verseLines [k].Trim () + "\n";  			}  			if (verseContent.Trim ().Substring (0' 1) == "(") {  				string tKey = verseContent.Substring (1' verseContent.Length - 3);  				verseContent = Verses [VerseKeys.IndexOf (tKey)];  				AddVerse (tKey' verseContent);  			}  			else {  				AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  			}  		}  	}  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: for (int i = 1; i < songVerses.Length; i++) {  	verseLines = songVerses [i].Split (new string[] {  		"\r\n"  	}' 1024' StringSplitOptions.RemoveEmptyEntries);  	if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  		string verseContent = "";  		for (int k = 1; k < verseLines.Length; k++) {  			verseContent += verseLines [k].Trim () + "\r\n";  		}  		try {  			AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  		}  		catch {  			string x = "I have an error";  			x = x + "";  		}  	}  	else {  		string verseContent = "";  		if (verseLines.Length == 1) {  			String mapRef = verseLines [0].Trim ();  			if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  				if (mapRef.ToUpper ().Contains ("REPEAT")) {  					AddVerse (Verses [i - 1]' Verses [i - 1]);  				}  				else {  					string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  					int foundIndex = VerseKeys.FindIndex (delegate (String s) {  						return s.ToUpper ().Contains (findTxt.ToUpper ());  					});  					if (foundIndex != -1) {  						AddVerse (findTxt' Verses [foundIndex]);  					}  					else {  						AddVerse (findTxt' "");  					}  				}  			}  		}  		else {  			for (int k = 0; k < verseLines.Length; k++) {  				verseContent += verseLines [k].Trim () + "\n";  			}  			if (verseContent.Trim ().Substring (0' 1) == "(") {  				string tKey = verseContent.Substring (1' verseContent.Length - 3);  				verseContent = Verses [VerseKeys.IndexOf (tKey)];  				AddVerse (tKey' verseContent);  			}  			else {  				AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  			}  		}  	}  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: verseLines = songVerses [i].Split (new string[] {  	"\r\n"  }' 1024' StringSplitOptions.RemoveEmptyEntries);  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: if (verseLines [0].Trim ().Substring (verseLines [0].Trim ().Length - 1) == ":") {  	string verseContent = "";  	for (int k = 1; k < verseLines.Length; k++) {  		verseContent += verseLines [k].Trim () + "\r\n";  	}  	try {  		AddVerse (verseLines [0].Trim ().Substring (0' verseLines [0].Length - 1)' verseContent);  	}  	catch {  		string x = "I have an error";  		x = x + "";  	}  }  else {  	string verseContent = "";  	if (verseLines.Length == 1) {  		String mapRef = verseLines [0].Trim ();  		if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  			if (mapRef.ToUpper ().Contains ("REPEAT")) {  				AddVerse (Verses [i - 1]' Verses [i - 1]);  			}  			else {  				string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  				int foundIndex = VerseKeys.FindIndex (delegate (String s) {  					return s.ToUpper ().Contains (findTxt.ToUpper ());  				});  				if (foundIndex != -1) {  					AddVerse (findTxt' Verses [foundIndex]);  				}  				else {  					AddVerse (findTxt' "");  				}  			}  		}  	}  	else {  		for (int k = 0; k < verseLines.Length; k++) {  			verseContent += verseLines [k].Trim () + "\n";  		}  		if (verseContent.Trim ().Substring (0' 1) == "(") {  			string tKey = verseContent.Substring (1' verseContent.Length - 3);  			verseContent = Verses [VerseKeys.IndexOf (tKey)];  			AddVerse (tKey' verseContent);  		}  		else {  			AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  		}  	}  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: if (verseLines.Length == 1) {  	String mapRef = verseLines [0].Trim ();  	if (mapRef.Substring (0' 1) == "(" && mapRef.Substring (mapRef.Length - 1' 1) == ")") {  		if (mapRef.ToUpper ().Contains ("REPEAT")) {  			AddVerse (Verses [i - 1]' Verses [i - 1]);  		}  		else {  			string findTxt = mapRef.Trim ().Replace ("("' "").Replace (")"' "");  			int foundIndex = VerseKeys.FindIndex (delegate (String s) {  				return s.ToUpper ().Contains (findTxt.ToUpper ());  			});  			if (foundIndex != -1) {  				AddVerse (findTxt' Verses [foundIndex]);  			}  			else {  				AddVerse (findTxt' "");  			}  		}  	}  }  else {  	for (int k = 0; k < verseLines.Length; k++) {  		verseContent += verseLines [k].Trim () + "\n";  	}  	if (verseContent.Trim ().Substring (0' 1) == "(") {  		string tKey = verseContent.Substring (1' verseContent.Length - 3);  		verseContent = Verses [VerseKeys.IndexOf (tKey)];  		AddVerse (tKey' verseContent);  	}  	else {  		AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  	}  }  
Magic Number,LyricShow,Song,C:\repos\lytedev_LyricShow\Song.cs,Open,The following statement contains a magic number: if (verseContent.Trim ().Substring (0' 1) == "(") {  	string tKey = verseContent.Substring (1' verseContent.Length - 3);  	verseContent = Verses [VerseKeys.IndexOf (tKey)];  	AddVerse (tKey' verseContent);  }  else {  	AddVerse ("~Verse " + i' verseContent.Substring (0' verseContent.Length - 1));  }  
Missing Default,LyricShow,SearchSongsForm,C:\repos\lytedev_LyricShow\Forms\SearchSongsForm.cs,lstSongSearchResults_PreviewKeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Escape:  	_SelectedSongFile = "";  	this.Hide ();  	break;  case Keys.Return:  	lstSongSearchResults_DoubleClick (sender' null);  	break;  }  
Missing Default,LyricShow,SearchSongsForm,C:\repos\lytedev_LyricShow\Forms\SearchSongsForm.cs,textBox1_PreviewKeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Down:  case Keys.Right:  	if (lstSongSearchResults.SelectedIndex < lstSongSearchResults.Items.Count - 1) {  		lstSongSearchResults.SelectedIndex = (lstSongSearchResults.SelectedIndex + 1);  		lstSongSearchResults.Select ();  	}  	break;  case Keys.Up:  case Keys.Left:  	if (lstSongSearchResults.SelectedIndex > 0) {  		lstSongSearchResults.SelectedIndex = (lstSongSearchResults.SelectedIndex - 1);  		lstSongSearchResults.Select ();  	}  	break;  }  
Missing Default,LyricShow,ScreenForm,C:\repos\lytedev_LyricShow\Forms\ScreenForm.cs,ScreenForm_PreviewKeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Escape:  	this.Close ();  	break;  case Keys.OemMinus:  case Keys.Subtract:  	this.Width = Convert.ToInt32 (this.Width * .95);  	this.Height = Convert.ToInt32 (this.Height * .95);  	AdjustLabels ();  	break;  case Keys.Oemplus:  case Keys.Add:  	this.Width = Convert.ToInt32 (this.Width * 1.05);  	this.Height = Convert.ToInt32 (this.Height * 1.05);  	AdjustLabels ();  	break;  }  
