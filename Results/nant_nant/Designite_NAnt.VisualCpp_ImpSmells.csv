Implementation smell,Namespace,Class,File,Method,Description
Long Method,NAnt.VisualCpp.Tasks,ClTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\ClTask.cs,ExecuteTask,The method has 125 lines of code.
Long Method,NAnt.VisualCpp.Tasks,LinkTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\LinkTask.cs,ExecuteTask,The method has 114 lines of code.
Complex Method,NAnt.VisualCpp.Tasks,ClTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\ClTask.cs,ExecuteTask,Cyclomatic complexity of the method is 22
Complex Method,NAnt.VisualCpp.Tasks,ClTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\ClTask.cs,IsPchfileUpToDate,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VisualCpp.Tasks,LibTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\LibTask.cs,ExecuteTask,Cyclomatic complexity of the method is 13
Complex Method,NAnt.VisualCpp.Tasks,LinkTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\LinkTask.cs,ExecuteTask,Cyclomatic complexity of the method is 20
Complex Method,NAnt.VisualCpp.Tasks,LinkTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\LinkTask.cs,NeedsLinking,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VisualCpp.Tasks,MidlTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\MidlTask.cs,WriteResponseFile,Cyclomatic complexity of the method is 22
Long Statement,NAnt.VisualCpp.Tasks,RcTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\RcTask.cs,NeedsCompiling,The length of the statement  "            Regex regBitmap = new Regex("IDB_(?<name>\\w+)\\s+BITMAP\\s+\\\"(?<file>[^\\\"]+)\\\""' RegexOptions.Singleline | RegexOptions.IgnoreCase);" is 139.
Long Statement,NAnt.VisualCpp.Tasks,RcTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\RcTask.cs,NeedsCompiling,The length of the statement  "            Regex regIcon = new Regex("IDI_(?<name>\\w+)\\s+ICON\\s+\\\"(?<file>[^\\\"]+)\\\""' RegexOptions.Singleline | RegexOptions.IgnoreCase);" is 135.
Long Statement,NAnt.VisualCpp.Tasks,RcTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\RcTask.cs,NeedsCompiling,The length of the statement  "            Regex regBinary = new Regex("IDR_(?<name>\\w+)\\s+(?<Number>\\w+)\\s+\\\"(?<file>[^\\\"]+)\\\""' RegexOptions.Singleline | RegexOptions.IgnoreCase);" is 148.
Magic Number,NAnt.VisualCpp.Tasks,ClTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\ClTask.cs,FindUpdatedInclude,The following statement contains a magic number: using (StreamReader sr = new StreamReader(srcFileName' true)) {                  while ((line = sr.ReadLine()) != null) {                      Match match = _includeRegex.Match(line);                      if (match.Groups.Count != 2) {                          continue;                      }                        string includeFile = match.Groups["includefile"].Value;                        Log(Level.Debug' "Checking include \"{0}\"..."' includeFile);                        string resolvedInclude = _resolvedIncludes[includeFile] as string;                      if (resolvedInclude == null) {                          foreach (string includeDir in IncludeDirs.DirectoryNames) {                              string foundIncludeFile = FileUtils.CombinePaths(includeDir' includeFile);                              if (File.Exists(foundIncludeFile)) {                                  Log(Level.Debug' "Found include \"{0}\" in"                                      + " includedirs."' includeFile);                                  resolvedInclude = foundIncludeFile;                                  break;                              }                          }                            // if we could not locate include in include dirs and                          // source dir' then try to locate include in INCLUDE                           // env var                          if (resolvedInclude == null) {                              PathScanner pathScanner = new PathScanner();                              pathScanner.Add(includeFile);                              StringCollection includes = pathScanner.Scan("INCLUDE");                              if (includes.Count > 0) {                                  Log(Level.Debug' "Found include \"{0}\" in"                                      + " INCLUDE."' includeFile);                                  resolvedInclude = includes[0];                              }                          }                            // if we could not locate include in include dirs                          // and INCLUDE env var then check for include in base                          // directory (which is used as working dir)                          if (resolvedInclude == null) {                              string foundIncludeFile = FileUtils.CombinePaths(                                  BaseDirectory.FullName' includeFile);                              if (File.Exists(foundIncludeFile)) {                                  Log(Level.Debug' "Found include \"{0}\" in"                                      + " working directory."' includeFile);                                  resolvedInclude = foundIncludeFile;                              }                          }                            if (resolvedInclude != null) {                              _resolvedIncludes.Add(includeFile' resolvedInclude);                          }                      }                        if (resolvedInclude != null) {                          if (File.GetLastWriteTime(resolvedInclude) > objLastWriteTime) {                              return resolvedInclude;                          }                      } else {                          // TODO: what do we do if the include cannot be located ?                          //                          // for now we'll consider the obj file to be up-to-date                          Log(Level.Debug' "Include \"{0}\" could not be located."'                               includeFile);                      }                  }              }
Magic Number,NAnt.VisualCpp.Util,ArgumentUtils,C:\repos\nant_nant\src\NAnt.VisualCpp\Util\ArgumentUtils.cs,DuplicateTrailingBackslash,The following statement contains a magic number: bool isQuoted = value.Length > 2 && value.StartsWith("\"") && value.EndsWith("\"");
Magic Number,NAnt.VisualCpp.Util,ArgumentUtils,C:\repos\nant_nant\src\NAnt.VisualCpp\Util\ArgumentUtils.cs,DuplicateTrailingBackslash,The following statement contains a magic number: int lastIndex = (isQuoted ? value.Length - 2 : value.Length - 1);
Magic Number,NAnt.VisualCpp.Util,ArgumentUtils,C:\repos\nant_nant\src\NAnt.VisualCpp\Util\ArgumentUtils.cs,FixTrailingBackslash,The following statement contains a magic number: if (value.EndsWith(@"\\")) {                  return value.Remove(value.Length - 2' 2) + @"\";              } else if (value.EndsWith(@"\")) {                  return value.Remove(value.Length - 1' 1);              } else {                  return value;              }
Magic Number,NAnt.VisualCpp.Util,ArgumentUtils,C:\repos\nant_nant\src\NAnt.VisualCpp\Util\ArgumentUtils.cs,FixTrailingBackslash,The following statement contains a magic number: if (value.EndsWith(@"\\")) {                  return value.Remove(value.Length - 2' 2) + @"\";              } else if (value.EndsWith(@"\")) {                  return value.Remove(value.Length - 1' 1);              } else {                  return value;              }
Missing Default,NAnt.VisualCpp.Tasks,ClTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\ClTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (PchMode) {                              case PrecompiledHeaderMode.Use:                                  writer.Write("/Yu");                                  break;                              case PrecompiledHeaderMode.Create:                                  writer.Write("/Yc");                                  break;                              case PrecompiledHeaderMode.AutoCreate:                                  writer.Write("/YX");                                  break;                          }
Missing Default,NAnt.VisualCpp.Tasks,ClTask,C:\repos\nant_nant\src\NAnt.VisualCpp\Tasks\ClTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (CharacterSet) {                          case CharacterSet.Unicode:                              writer.WriteLine("/D \"_UNICODE\"");                              writer.WriteLine("/D \"UNICODE\"");                              break;                          case CharacterSet.MultiByte:                              writer.WriteLine("/D \"_MBCS\"");                              break;                      }
