Implementation smell,Namespace,Class,File,Method,Description
Long Method,NAnt.DotNet.Tasks,AssemblyLinkerTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\AssemblyLinkerTask.cs,ExecuteTask,The method has 193 lines of code.
Long Method,NAnt.DotNet.Tasks,AssemblyLinkerTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\AssemblyLinkerTask.cs,NeedsCompiling,The method has 126 lines of code.
Long Method,NAnt.DotNet.Tasks,CompilerBase,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\CompilerBase.cs,ExecuteTask,The method has 208 lines of code.
Long Method,NAnt.DotNet.Tasks,CompilerBase,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\CompilerBase.cs,GetManifestResourceName,The method has 106 lines of code.
Long Method,NAnt.DotNet.Tasks,LicenseTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\LicenseTask.cs,ExecuteTask,The method has 103 lines of code.
Long Method,NAnt.DotNet.Tasks,LicenseGatherer,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\LicenseTask.cs,CreateLicenseFile,The method has 157 lines of code.
Long Method,NAnt.DotNet.Tasks,NDocTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\NDocTask.cs,ExecuteTask,The method has 139 lines of code.
Long Method,NAnt.DotNet.Tasks,ScriptTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\ScriptTask.cs,ExecuteTask,The method has 110 lines of code.
Complex Method,NAnt.DotNet.Tasks,TypedValueGatherer,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\AssemblyInfoTask.cs,FindType,Cyclomatic complexity of the method is 10
Complex Method,NAnt.DotNet.Tasks,AssemblyLinkerTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\AssemblyLinkerTask.cs,ExecuteTask,Cyclomatic complexity of the method is 30
Complex Method,NAnt.DotNet.Tasks,AssemblyLinkerTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\AssemblyLinkerTask.cs,NeedsCompiling,Cyclomatic complexity of the method is 23
Complex Method,NAnt.DotNet.Tasks,CompilerBase,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\CompilerBase.cs,ExecuteTask,Cyclomatic complexity of the method is 29
Complex Method,NAnt.DotNet.Tasks,CompilerBase,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\CompilerBase.cs,WriteWarningsAsError,Cyclomatic complexity of the method is 11
Complex Method,NAnt.DotNet.Tasks,CompilerBase,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\CompilerBase.cs,NeedsCompiling,Cyclomatic complexity of the method is 19
Complex Method,NAnt.DotNet.Tasks,CscTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\CscTask.cs,WriteOptions,Cyclomatic complexity of the method is 20
Complex Method,NAnt.DotNet.Tasks,IlasmTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\IlasmTask.cs,WriteOptions,Cyclomatic complexity of the method is 16
Complex Method,NAnt.DotNet.Tasks,IlasmTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\IlasmTask.cs,NeedsCompiling,Cyclomatic complexity of the method is 8
Complex Method,NAnt.DotNet.Tasks,JscTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\JscTask.cs,WriteOptions,Cyclomatic complexity of the method is 9
Complex Method,NAnt.DotNet.Tasks,LicenseTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\LicenseTask.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.DotNet.Tasks,NDocTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\NDocTask.cs,ExecuteTask,Cyclomatic complexity of the method is 18
Complex Method,NAnt.DotNet.Tasks,RegsvcsTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\RegSvcsTask.cs,ExecuteTask,Cyclomatic complexity of the method is 10
Complex Method,NAnt.DotNet.Tasks,ResGenTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\ResGenTask.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.DotNet.Tasks,ResGenTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\ResGenTask.cs,WriteCommandLineOptions,Cyclomatic complexity of the method is 9
Complex Method,NAnt.DotNet.Tasks,ScriptTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\ScriptTask.cs,ExecuteTask,Cyclomatic complexity of the method is 15
Complex Method,NAnt.DotNet.Tasks,VbcTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\VbcTask.cs,WriteOptions,Cyclomatic complexity of the method is 18
Complex Method,NAnt.DotNet.Tasks,VjcTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\VjcTask.cs,WriteOptions,Cyclomatic complexity of the method is 10
Complex Method,NAnt.DotNet.Types,AssemblyFileSet,C:\repos\nant_nant\src\NAnt.DotNet\Types\AssemblyFileSet.cs,ResolveReferences,Cyclomatic complexity of the method is 8
Complex Method,NAnt.DotNet.Types,ResourceFileSet,C:\repos\nant_nant\src\NAnt.DotNet\Types\ResourceFileSet.cs,GetManifestResourceName,Cyclomatic complexity of the method is 10
Long Identifier,NAnt.DotNet.Tasks,ResGenTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\ResGenTask.cs,,The length of the parameter _supportsExternalFileReferences is 31.
Long Statement,NAnt.DotNet.Tasks,ResGenTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\ResGenTask.cs,ReferencesThirdPartyAssemblies,The length of the statement  "                    int count = xpathDoc.CreateNavigator().Select("/root/data[@mimetype or (@type and not(starts-with(@type' 'System.') and contains(@type''PublicKeyToken=')))]").Count; " is 165.
Long Statement,NAnt.DotNet.Tasks,ResGenTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\ResGenTask.cs,GetExternalFileReferences,The length of the statement  "                XPathNodeIterator xfileIterator = xpathNavigator.Select("/root/data[@type = 'System.Resources.ResXFileRef' System.Windows.Forms']/value"); " is 138.
Long Statement,NAnt.DotNet.Types,ResourceFileSet,C:\repos\nant_nant\src\NAnt.DotNet\Types\ResourceFileSet.cs,GetManifestResourceName,The length of the statement  "                string relativePrefix = filePathRelativeToBaseDir.Replace(Path.DirectorySeparatorChar' '.').Replace(Path.AltDirectorySeparatorChar' '.'); " is 137.
Complex Conditional,NAnt.DotNet.Tasks,DelaySignTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\DelaySignTask.cs,ExecuteTask,The conditional expression  "(keyAvail && containerAvail) || (! keyAvail && ! containerAvail)"  is complex.
Empty Catch Block,NAnt.DotNet.Tasks,LicenseGatherer,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\LicenseTask.cs,CreateLicenseFile,The method has an empty catch block.
Magic Number,NAnt.DotNet.Tasks,AssemblyLinkerTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\AssemblyLinkerTask.cs,NeedsCompiling,The following statement contains a magic number: foreach (Argument argument in Arguments) {                 if (argument.IfDefined && !argument.UnlessDefined) {                     string argumentValue = argument.Value;                     // check whether argument specifies resource file to embed                     if (argumentValue != null && (argumentValue.StartsWith("/embed:") || argumentValue.StartsWith("/embedresource:"))) {                         // determine path to resource file                         string path = argumentValue.Substring(argumentValue.IndexOf(':') + 1);                         int indexOfComma = path.IndexOf(''');                         if (indexOfComma != -1) {                             path = path.Substring(0' indexOfComma);                         }                          bool isQuoted = path.Length > 2 && path.StartsWith("\"") && path.EndsWith("\"");                         if (isQuoted) {                             path = path.Substring(1' path.Length - 2);                         }                          // resolve path to full path (relative to project base dir)                         path = Project.GetFullPath(path);                         // add path to collection of resource files                         embeddedResourceFiles.Add(path);                     }                 }             }
Magic Number,NAnt.DotNet.Tasks,AssemblyLinkerTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\AssemblyLinkerTask.cs,NeedsCompiling,The following statement contains a magic number: foreach (Argument argument in Arguments) {                 if (argument.IfDefined && !argument.UnlessDefined) {                     string argumentValue = argument.Value;                     // check whether argument specifies resource file to embed                     if (argumentValue != null && (argumentValue.StartsWith("/embed:") || argumentValue.StartsWith("/embedresource:"))) {                         // determine path to resource file                         string path = argumentValue.Substring(argumentValue.IndexOf(':') + 1);                         int indexOfComma = path.IndexOf(''');                         if (indexOfComma != -1) {                             path = path.Substring(0' indexOfComma);                         }                          bool isQuoted = path.Length > 2 && path.StartsWith("\"") && path.EndsWith("\"");                         if (isQuoted) {                             path = path.Substring(1' path.Length - 2);                         }                          // resolve path to full path (relative to project base dir)                         path = Project.GetFullPath(path);                         // add path to collection of resource files                         embeddedResourceFiles.Add(path);                     }                 }             }
Magic Number,NAnt.DotNet.Tasks,DelaySignTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\DelaySignTask.cs,ExecuteTask,The following statement contains a magic number: foreach (string filename in Targets.FileNames) {                 // Try to guess the buffer length                 // Add 12 for "-R"' maybe 'c' and "-q"' and spaces/quotes.                 _argumentBuilder = new StringBuilder(9 + filename.Length + keyname.Length);                  if (!Verbose) {                     _argumentBuilder.Append("-q ");                 }                  // indicate that we want to resign a previously signed or delay-signed assembly                 _argumentBuilder.Append("-R");                  if (containerAvail) {                     _argumentBuilder.Append('c');                 }                  _argumentBuilder.Append(" \"").Append(filename).Append("\" \"");                 _argumentBuilder.Append(keyname).Append('\"');                  // call base class to do perform the actual call                 base.ExecuteTask();             }
Magic Number,NAnt.DotNet.Tasks,NDocTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\NDocTask.cs,OnDocBuildingStep,The following statement contains a magic number: if (e.Progress == 25 && null != _hhcexe) {                 // right before progress step 25 HtmlHelp object will be created in MSDN Documentor                 // so we can set path to hhc.exe per reflection                 // determined with ILSpy                 SetHtmlHelpCompiler(sender' _hhcexe);             }
Missing Default,NAnt.DotNet.Tasks,RegsvcsTask,C:\repos\nant_nant\src\NAnt.DotNet\Tasks\RegSvcsTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (Action) {                 case ActionType.Create:                     _argumentBuilder.Append("/c ");                     Log(Level.Info' ResourceUtils.GetString("String_CreatingCOM+Application")'                         AssemblyFile.FullName);                     break;                 case ActionType.FindOrCreate:                     _argumentBuilder.Append("/fc ");                     Log(Level.Info' ResourceUtils.GetString("String_FindingCOM+Application")'                         AssemblyFile.FullName);                     break;                 case ActionType.Uninstall:                     _argumentBuilder.Append("/u ");                     Log(Level.Info' ResourceUtils.GetString("String_UninstallingCOM+Application")'                         AssemblyFile.FullName);                     break;             }
