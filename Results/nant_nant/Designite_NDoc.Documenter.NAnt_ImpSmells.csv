Implementation smell,Namespace,Class,File,Method,Description
Long Method,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The method has 112 lines of code.
Long Method,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,DocumentType,The method has 109 lines of code.
Complex Method,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,DocumentType,Cyclomatic complexity of the method is 15
Complex Method,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,DocumentFunction,Cyclomatic complexity of the method is 8
Complex Method,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementDocType,Cyclomatic complexity of the method is 10
Complex Method,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForType,Cyclomatic complexity of the method is 10
Long Statement,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The length of the statement  "            XmlNodeList typeNodes = _xmlDocumentation.SelectNodes("//class[starts-with(substring(@id' 3' string-length(@id) - 2)' '" + NamespaceFilter + "')]");" is 148.
Long Statement,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The length of the statement  "            XmlNodeList functionNodes = _xmlDocumentation.SelectNodes("//method[attribute/@name = 'NAnt.Core.Attributes.FunctionAttribute' and ancestor::class[starts-with(substring(@id' 3' string-length(@id) - 2)' '" + NamespaceFilter + "')]]");" is 233.
Long Statement,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,DocumentType,The length of the statement  "                    XmlNode nestedElementNode = propertyNode.SelectSingleNode("attribute[@name='" + typeof(BuildElementArrayAttribute).FullName + "']");" is 132.
Long Statement,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,DocumentType,The length of the statement  "                        nestedElementNode = propertyNode.SelectSingleNode("attribute[@name='" + typeof(BuildElementCollectionAttribute).FullName + "']");" is 129.
Long Statement,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,DocumentType,The length of the statement  "                        XmlAttribute elementTypeAttribute = _xmlDocumentation.SelectSingleNode("//class[@id='" + elementType + "']/method[@name='Add']/parameter/@type") as XmlAttribute;" is 161.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The length of the statement  "            if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {" is 126.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The length of the statement  "                if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {" is 126.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementDocType,The length of the statement  "            if (typeNode.SelectSingleNode("attribute[@name='" + typeof(FunctionSetAttribute).FullName + "']/property[@name='Prefix']/@value") != null) {" is 140.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForProperty,The length of the statement  "            XmlAttribute taskAttributeNode = propertyNode.SelectSingleNode("attribute[@name='" + typeof(TaskAttributeAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 179.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForProperty,The length of the statement  "            XmlAttribute elementArrayNode = propertyNode.SelectSingleNode("attribute[@name='" + typeof(BuildElementArrayAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 182.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForProperty,The length of the statement  "            XmlAttribute elementCollectionNode = propertyNode.SelectSingleNode("attribute[@name='" + typeof(BuildElementCollectionAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 192.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForProperty,The length of the statement  "            XmlAttribute buildElementNode = propertyNode.SelectSingleNode("attribute[@name='" + typeof(BuildElementAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 177.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForProperty,The length of the statement  "            XmlAttribute frameworkConfigAttributeNode = propertyNode.SelectSingleNode("attribute[@name='" + typeof(FrameworkConfigurableAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 198.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForFunction,The length of the statement  "            XmlNode n = functionNode.SelectSingleNode("../attribute[@name='NAnt.Core.Attributes.FunctionSetAttribute']/property[@name='Prefix']/@value");" is 141.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForFunction,The length of the statement  "            n = functionNode.SelectSingleNode("attribute[@name='NAnt.Core.Attributes.FunctionAttribute']/property[@name='Name']/@value");" is 125.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForType,The length of the statement  "                XmlAttribute elementNameAttribute = typeNode.SelectSingleNode("attribute[@name='" + typeof(ElementNameAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 176.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForType,The length of the statement  "                XmlAttribute elementNameAttribute = typeNode.SelectSingleNode("attribute[@name='" + typeof(ElementNameAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 176.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForType,The length of the statement  "            XmlAttribute elementNameAttribute = typeNode.SelectSingleNode("attribute[@name='" + typeof(ElementNameAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 176.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForType,The length of the statement  "            XmlAttribute categoryNameAttribute = typeNode.SelectSingleNode("attribute[@name='" + typeof(FunctionSetAttribute).FullName + "']/property[@name='Category']/@value") as XmlAttribute;" is 181.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetTaskNameForType,The length of the statement  "                XmlAttribute taskNameAttribute = typeNode.SelectSingleNode("attribute[@name='" + typeof(TaskNameAttribute).FullName + "']/property[@name='Name']/@value") as XmlAttribute;" is 170.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForMethod,The length of the statement  "            XmlNode functionNameAttribute = methodNode.SelectSingleNode("attribute[@name='" + typeof(FunctionAttribute).FullName + "']/property[@name='Name']/@value");" is 155.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetElementNameForMethod,The length of the statement  "            XmlNode prefixAttribute = methodNode.SelectSingleNode("../attribute[@name='" + typeof(FunctionSetAttribute).FullName + "']/property[@name='Prefix']/@value");" is 157.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRefForFunctionSet,The length of the statement  "            XmlAttribute categoryValueAttribute = functionNode.SelectSingleNode("attribute[@name='NAnt.Core.Attributes.FunctionSetAttribute']/property[@name='Category']/@value") as XmlAttribute;" is 182.
Long Statement,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,CreateInstance,The length of the statement  "                    if (util.Document == doc && util.Config.SdkDocVersion.Equals(config.SdkDocVersion) && util.Config.SdkLinksOnWeb == config.SdkLinksOnWeb) {" is 138.
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The following statement contains a magic number: buildStepProgress += 10;
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The following statement contains a magic number: buildStepProgress += 15;
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The following statement contains a magic number: buildStepProgress += 15;
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The following statement contains a magic number: buildStepProgress += 10;
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The following statement contains a magic number: buildStepProgress += 10;
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The following statement contains a magic number: buildStepProgress += 10;
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,Build,The following statement contains a magic number: OnDocBuildingStep(100' "Complete");
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,DocumentType,The following statement contains a magic number: if (!classID.Substring(2).StartsWith(NamespaceFilter)) {                 // we don't need to types in this namespace                 return;             }
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,MakeTransforms,The following statement contains a magic number: OnDocBuildingProgress(20);
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,MakeTransforms,The following statement contains a magic number: OnDocBuildingProgress(40);
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,MakeTransforms,The following statement contains a magic number: OnDocBuildingProgress(50);
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,MakeTransforms,The following statement contains a magic number: OnDocBuildingProgress(60);
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,MakeTransforms,The following statement contains a magic number: OnDocBuildingProgress(80);
Magic Number,NDoc.Documenter.NAnt,NAntDocumenter,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntDocumenter.cs,MakeTransforms,The following statement contains a magic number: OnDocBuildingProgress(100);
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if ((cref.Length < 2) || (cref[1] != ':')) {                 return string.Empty;             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following statement contains a magic number: if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                 // not a system one.                  // will hold the filename to link to                 string fileName = null;                  switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }                  if (fileName == null) {                     return string.Empty;                 } else {                     if (cref.Substring(2).StartsWith("NAnt.") && !cref.Substring(2).StartsWith("NAnt.Contrib")) {                         return Config.NAntBaseUri + fileName;                     } else {                         return "../" + fileName;                     }                 }             } else {                 // a system cref                 switch (cref.Substring(0' 2)) {                     case "N:":  // Namespace                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + SdkDocExt;                     case "T:":  // Type: class' interface' struct' enum' delegate                         return SdkDocBaseUrl + cref.Substring(2).Replace("."' "") + "ClassTopic" + SdkDocExt;                     case "F:":  // Field                         // do not generate href for fields' as the .NET SDK does                          // not have separate pages for enum fields' and we have no                         // way of knowing whether it's a reference to an enum field                          // or class field.                         return string.Empty;                     case "P:":  // Property                     case "M:":  // Method                     case "E:":  // Event                         return this.GetFilenameForSystemMember(cref);                     default:                         return string.Empty;                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref.Length < 2) {                 return cref;             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetName,The following statement contains a magic number: if (cref[1] == ':') {                 if (cref.Length < 9 || (!cref.Substring(2).StartsWith(SystemPrefix) && !cref.Substring(2).StartsWith(MicrosoftWin32Prefix))) {                     //what name should be found?                     string name = _elementNames[cref];                     if (name != null) {                         return name;                     }                 }                  int index;                 if ((index = cref.IndexOf(".#c")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else if ((index = cref.IndexOf("(")) >= 0) {                     cref = cref.Substring(2' index - 2);                 } else {                     cref = cref.Substring(2);                 }             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForType,The following statement contains a magic number: if (typeNode.LocalName == "enumeration") {                 string enumFile = typeNode.Attributes["id"].Value.Substring(2);                 return "enums/" + (urlEncode ? UrlEncode(enumFile) : enumFile) + ".html";             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForType,The following statement contains a magic number: if (typeNode.SelectSingleNode("descendant::base[@id='T:" + typeof(Element).FullName + "']") != null) {                 string elementFile = typeNode.Attributes["id"].Value.Substring(2);                 return "elements/" + (urlEncode ? UrlEncode(elementFile) : elementFile) + ".html";             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFileNameForType,The following statement contains a magic number: string sdkFile = typeNode.Attributes["id"].Value.Substring(2);
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFilenameForSystemMember,The following statement contains a magic number: if ((index = cref.IndexOf(".#c")) >= 0) {                 crefName = cref.Substring(2' index - 2) + ".ctor";             } else if ((index = cref.IndexOf("(")) >= 0) {                 crefName = cref.Substring(2' index - 2);             } else {                 crefName = cref.Substring(2);             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFilenameForSystemMember,The following statement contains a magic number: if ((index = cref.IndexOf(".#c")) >= 0) {                 crefName = cref.Substring(2' index - 2) + ".ctor";             } else if ((index = cref.IndexOf("(")) >= 0) {                 crefName = cref.Substring(2' index - 2);             } else {                 crefName = cref.Substring(2);             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFilenameForSystemMember,The following statement contains a magic number: if ((index = cref.IndexOf(".#c")) >= 0) {                 crefName = cref.Substring(2' index - 2) + ".ctor";             } else if ((index = cref.IndexOf("(")) >= 0) {                 crefName = cref.Substring(2' index - 2);             } else {                 crefName = cref.Substring(2);             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFilenameForSystemMember,The following statement contains a magic number: if ((index = cref.IndexOf(".#c")) >= 0) {                 crefName = cref.Substring(2' index - 2) + ".ctor";             } else if ((index = cref.IndexOf("(")) >= 0) {                 crefName = cref.Substring(2' index - 2);             } else {                 crefName = cref.Substring(2);             }
Magic Number,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetFilenameForSystemMember,The following statement contains a magic number: if ((index = cref.IndexOf(".#c")) >= 0) {                 crefName = cref.Substring(2' index - 2) + ".ctor";             } else if ((index = cref.IndexOf("(")) >= 0) {                 crefName = cref.Substring(2' index - 2);             } else {                 crefName = cref.Substring(2);             }
Missing Default,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,NAntXsltUtilities,The following switch statement is missing a default case: switch (config.SdkDocVersion) {                     case SdkVersion.SDK_v1_0:                         _sdkDocBaseUrl = SdkDoc10BaseUrl;                         _sdkDocExt = SdkDocPageExt;                         break;                     case SdkVersion.SDK_v1_1:                         _sdkDocBaseUrl = SdkDoc11BaseUrl;                         _sdkDocExt = SdkDocPageExt;                         break;                 }
Missing Default,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,NAntXsltUtilities,The following switch statement is missing a default case: switch (memberNode.Name) {                         case "constructor":                             _elementNames[id] = _elementNames[typeId];                             break;                         case "field":                             _elementNames[id] = memberNode.Attributes["name"].Value;                             break;                         case "property":                             _elementNames[id] = GetElementNameForProperty(memberNode);                             break;                         case "method":                             _elementNames[id] = GetElementNameForMethod(memberNode);                             break;                         case "operator":                             _elementNames[id] = memberNode.Attributes["name"].Value;                             break;                         case "event":                             _elementNames[id] = memberNode.Attributes["name"].Value;                             break;                     }
Missing Default,NDoc.Documenter.NAnt,NAntXsltUtilities,C:\repos\nant_nant\src\NDoc.Documenter.NAnt\NAntXsltUtilities.cs,GetHRef,The following switch statement is missing a default case: switch (cref.Substring(0' 2)) {                     case "T:":                         fileName = GetFileNameForType(cref' true);                         break;                     case "M:":                         fileName = GetFileNameForFunction(cref' true);                         break;                 }
