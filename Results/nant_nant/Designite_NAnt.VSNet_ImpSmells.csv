Implementation smell,Namespace,Class,File,Method,Description
Long Method,NAnt.VSNet,ConfigurationSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ConfigurationSettings.cs,ConfigurationSettings,The method has 126 lines of code.
Long Method,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,ManagedProjectBase,The method has 105 lines of code.
Long Method,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,Build,The method has 236 lines of code.
Long Method,NAnt.VSNet,ProjectSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectSettings.cs,ProjectSettings,The method has 119 lines of code.
Long Method,NAnt.VSNet,SolutionBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\SolutionBase.cs,Compile,The method has 105 lines of code.
Long Method,NAnt.VSNet,SolutionBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\SolutionBase.cs,FixProjectReferences,The method has 126 lines of code.
Long Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The method has 333 lines of code.
Long Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildIDLFiles,The method has 188 lines of code.
Long Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLibrarian,The method has 100 lines of code.
Long Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLinker,The method has 281 lines of code.
Long Method,NAnt.VSNet,VcProjectConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectConfiguration.cs,Initialize,The method has 102 lines of code.
Complex Method,NAnt.VSNet,ConfigurationBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ConfigurationBase.cs,ExpandMacro,Cyclomatic complexity of the method is 10
Complex Method,NAnt.VSNet,ConfigurationSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ConfigurationSettings.cs,ConfigurationSettings,Cyclomatic complexity of the method is 15
Complex Method,NAnt.VSNet,ManagedAssemblyReference,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedAssemblyReference.cs,GetComponentAssemblyFolder,Cyclomatic complexity of the method is 10
Complex Method,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,ManagedProjectBase,Cyclomatic complexity of the method is 18
Complex Method,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,Build,Cyclomatic complexity of the method is 21
Complex Method,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,CompileResXFiles,Cyclomatic complexity of the method is 9
Complex Method,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,CheckUpToDate,Cyclomatic complexity of the method is 13
Complex Method,NAnt.VSNet,ProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectBase.cs,GetOutputFiles,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VSNet,ProjectSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectSettings.cs,ProjectSettings,Cyclomatic complexity of the method is 20
Complex Method,NAnt.VSNet,SolutionBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\SolutionBase.cs,RecursiveLoadTemplateProject,Cyclomatic complexity of the method is 9
Complex Method,NAnt.VSNet,SolutionBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\SolutionBase.cs,Compile,Cyclomatic complexity of the method is 17
Complex Method,NAnt.VSNet,SolutionBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\SolutionBase.cs,LoadProjects,Cyclomatic complexity of the method is 13
Complex Method,NAnt.VSNet,SolutionBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\SolutionBase.cs,GetDependenciesFromProjects,Cyclomatic complexity of the method is 16
Complex Method,NAnt.VSNet,SolutionBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\SolutionBase.cs,FixProjectReferences,Cyclomatic complexity of the method is 16
Complex Method,NAnt.VSNet,VcConfigurationBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcConfigurationBase.cs,ExpandMacro,Cyclomatic complexity of the method is 9
Complex Method,NAnt.VSNet,VcFileConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcFileConfiguration.cs,ExpandMacro,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,VcProject,Cyclomatic complexity of the method is 13
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,Build,Cyclomatic complexity of the method is 16
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,ExpandMacro,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,Cyclomatic complexity of the method is 48
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildResourceFiles,Cyclomatic complexity of the method is 13
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildIDLFiles,Cyclomatic complexity of the method is 29
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunCustomBuildStep,Cyclomatic complexity of the method is 16
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLibrarian,Cyclomatic complexity of the method is 15
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLinker,Cyclomatic complexity of the method is 44
Complex Method,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,MergeToolSetting,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VSNet,VcProjectConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectConfiguration.cs,VcProjectConfiguration,Cyclomatic complexity of the method is 12
Complex Method,NAnt.VSNet,VcProjectConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectConfiguration.cs,Initialize,Cyclomatic complexity of the method is 15
Complex Method,NAnt.VSNet,VcProjectConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectConfiguration.cs,GetLinkerOutputFile,Cyclomatic complexity of the method is 9
Complex Method,NAnt.VSNet.Everett,Solution,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Everett\Solution.cs,Solution,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VSNet.Rainier,Solution,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Rainier\Solution.cs,Solution,Cyclomatic complexity of the method is 8
Complex Method,NAnt.VSNet.Tasks,SolutionTask,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Tasks\SolutionTask.cs,ExecuteTask,Cyclomatic complexity of the method is 9
Complex Method,NAnt.VSNet.Tasks,SolutionTask,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Tasks\SolutionTask.cs,ExpandMacro,Cyclomatic complexity of the method is 11
Long Parameter List,NAnt.VSNet,CSharpProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\CSharpProject.cs,CSharpProject,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,CSharpProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\CSharpProjectProvider.cs,GetInstance,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,JSharpProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\JSharpProject.cs,JSharpProject,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,JSharpProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\JSharpProjectProvider.cs,GetInstance,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,ManagedProjectBase,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,ManagedProjectReference,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectReference.cs,ManagedProjectReference,The method has 7 parameters. Parameters: xmlDefinition' referencesResolver' parent' solution' tfc' gacCache' outputDir
Long Parameter List,NAnt.VSNet,ManagedWrapperReference,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedWrapperReference.cs,ManagedWrapperReference,The method has 5 parameters. Parameters: xmlDefinition' referencesResolver' parent' gacCache' projectSettings
Long Parameter List,NAnt.VSNet,ProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectBase.cs,ProjectBase,The method has 6 parameters. Parameters: xmlDefinition' solutionTask' temporaryFiles' gacCache' referencesResolver' outputDir
Long Parameter List,NAnt.VSNet,ProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectBase.cs,ExecuteBuildEvent,The method has 5 parameters. Parameters: buildEvent' buildCommandLine' batchFile' workingDirectory' config
Long Parameter List,NAnt.VSNet,ProjectFactory,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectFactory.cs,LoadProject,The method has 7 parameters. Parameters: solution' solutionTask' tfc' gacCache' referencesResolver' outputDir' path
Long Parameter List,NAnt.VSNet,ProjectFactory,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectFactory.cs,CreateProject,The method has 7 parameters. Parameters: solution' solutionTask' tfc' gacCache' referencesResolver' outputDir' projectPath
Long Parameter List,NAnt.VSNet,ProjectReferenceBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectReferenceBase.cs,LoadProject,The method has 5 parameters. Parameters: solution' tfc' gacCache' outputDir' projectFile
Long Parameter List,NAnt.VSNet,Resource,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Resource.cs,Resource,The method has 6 parameters. Parameters: project' resourceSourceFile' resourceSourceFileRelativePath' dependentFile' solutionTask' gacCache
Long Parameter List,NAnt.VSNet,VBProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VBProject.cs,VBProject,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,VBProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VBProjectProvider.cs,GetInstance,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,VcFileConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcFileConfiguration.cs,VcFileConfiguration,The method has 5 parameters. Parameters: relativePath' parentName' elem' parentConfig' outputDir
Long Parameter List,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,VcProject,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,VCProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VCProjectProvider.cs,GetInstance,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet,VcProjectReference,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectReference.cs,VcProjectReference,The method has 7 parameters. Parameters: xmlDefinition' referencesResolver' parent' solution' tfc' gacCache' outputDir
Long Parameter List,NAnt.VSNet.Everett,Solution,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Everett\Solution.cs,Solution,The method has 5 parameters. Parameters: solutionContent' solutionTask' tfc' gacCache' refResolver
Long Parameter List,NAnt.VSNet.Everett,SolutionProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Everett\SolutionProvider.cs,GetInstance,The method has 5 parameters. Parameters: solutionContent' solutionTask' tfc' gacCache' refResolver
Long Parameter List,NAnt.VSNet.Extensibility,IProjectBuildProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Extensibility\IProjectBuildProvider.cs,GetInstance,The method has 8 parameters. Parameters: solution' projectPath' xmlDefinition' solutionTask' tfc' gacCache' refResolver' outputDir
Long Parameter List,NAnt.VSNet.Extensibility,ISolutionBuildProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Extensibility\ISolutionBuildProvider.cs,GetInstance,The method has 5 parameters. Parameters: solutionContent' solutionTask' tfc' gacCache' refResolver
Long Parameter List,NAnt.VSNet.Rainier,Solution,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Rainier\Solution.cs,Solution,The method has 5 parameters. Parameters: solutionContent' solutionTask' tfc' gacCache' refResolver
Long Parameter List,NAnt.VSNet.Rainier,SolutionProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Rainier\SolutionProvider.cs,GetInstance,The method has 5 parameters. Parameters: solutionContent' solutionTask' tfc' gacCache' refResolver
Long Identifier,NAnt.VSNet,Resource,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Resource.cs,Resource,The length of the parameter resourceSourceFileRelativePath is 30.
Long Identifier,NAnt.VSNet,Resource,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Resource.cs,,The length of the parameter _resourceSourceFileRelativePath is 31.
Long Statement,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,RegisterEmbeddedResource,The length of the statement  "                string dependentOn = (elemFile.Attributes["DependentUpon"] != null) ? FileUtils.CombinePaths(fi.DirectoryName' elemFile.Attributes["DependentUpon"].Value) : null;" is 162.
Long Statement,NAnt.VSNet,ProjectFactory,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectFactory.cs,IsUrl,The length of the statement  "            if (fileName.StartsWith(Uri.UriSchemeFile) || fileName.StartsWith(Uri.UriSchemeHttp) || fileName.StartsWith(Uri.UriSchemeHttps)) {" is 130.
Long Statement,NAnt.VSNet,ReferenceBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ReferenceBase.cs,GetRelatedFiles,The length of the statement  "                if (string.Compare(Path.GetFileNameWithoutExtension(relatedFile)' Path.GetFileNameWithoutExtension(file)' true' CultureInfo.InvariantCulture) != 0) {" is 149.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The length of the statement  "            if (fileConfig.UsePrecompiledHeader != UsePrecompiledHeader.No && fileConfig.UsePrecompiledHeader != UsePrecompiledHeader.Unspecified) {" is 136.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildResourceFiles,The length of the statement  "            string ignoreStandardIncludePath = fileConfig.GetToolSetting(VcConfigurationBase.ResourceCompilerTool' "IgnoreStandardIncludePath");" is 132.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildResourceFiles,The length of the statement  "            if (ignoreStandardIncludePath != null && string.Compare(ignoreStandardIncludePath' "true"' true' CultureInfo.InvariantCulture) == 0) {" is 134.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildResourceFiles,The length of the statement  "            string preprocessorDefs = fileConfig.GetToolSetting(VcConfigurationBase.ResourceCompilerTool' "PreprocessorDefinitions");" is 121.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildResourceFiles,The length of the statement  "            string addIncludeDirs = MergeToolSetting(projectConfig' fileConfig' VcConfigurationBase.ResourceCompilerTool' "AdditionalIncludeDirectories");" is 142.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildIDLFiles,The length of the statement  "            string interfaceIdentifierFileName = fileConfig.GetToolSetting(VcConfigurationBase.MIDLTool' "InterfaceIdentifierFileName");" is 124.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLibrarian,The length of the statement  "            string ignoreAllDefaultLibraries = projectConfig.GetToolSetting(VcConfigurationBase.LibTool' "IgnoreAllDefaultLibraries");" is 122.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLinker,The length of the statement  "            linkTask.Debug = bool.Parse(projectConfig.GetToolSetting(VcConfigurationBase.LinkerTool' "GenerateDebugInformation"' "FALSE"));" is 127.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLinker,The length of the statement  "            bool generateMapFile = bool.Parse(projectConfig.GetToolSetting(VcConfigurationBase.LinkerTool' "GenerateMapFile"' "FALSE"));" is 124.
Long Statement,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,MergeToolSetting,The length of the statement  "                    settingValue = settingValue.Remove(settingValue.ToLower(CultureInfo.InvariantCulture).IndexOf(noinherit)' noinherit.Length);" is 124.
Long Statement,NAnt.VSNet.Everett,SolutionProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Everett\SolutionProvider.cs,IsSupported,The length of the statement  "            Regex reSolutionFormat = new Regex(@"^\s*Microsoft Visual Studio Solution File' Format Version\s+(?<formatVersion>[0-9]+\.[0-9]+)"' RegexOptions.Singleline);" is 157.
Long Statement,NAnt.VSNet.Rainier,SolutionProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Rainier\SolutionProvider.cs,IsSupported,The length of the statement  "            Regex reSolutionFormat = new Regex(@"^\s*Microsoft Visual Studio Solution File' Format Version\s+(?<formatVersion>[0-9]+\.[0-9]+)"' RegexOptions.Singleline);" is 157.
Complex Conditional,NAnt.VSNet,ReferenceBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ReferenceBase.cs,GetRelatedFiles,The conditional expression  "fileExtension != ".dll" && fileExtension != ".xml" && fileExtension != ".pdb" && fileExtension != ".mdb""  is complex.
Virtual Method Call from Constructor,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,ManagedProjectBase,The constructor "ManagedProjectBase" calls a virtual method "DetermineProjectLocation".
Virtual Method Call from Constructor,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,ManagedProjectBase,The constructor "ManagedProjectBase" calls a virtual method "CreateReference".
Virtual Method Call from Constructor,NAnt.VSNet,ProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectBase.cs,ProjectBase,The constructor "ProjectBase" calls a virtual method "VerifyProjectXml".
Virtual Method Call from Constructor,NAnt.VSNet,ProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectBase.cs,ProjectBase,The constructor "ProjectBase" calls a virtual method "DetermineProductVersion".
Virtual Method Call from Constructor,NAnt.VSNet,ProjectSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectSettings.cs,ProjectSettings,The constructor "ProjectSettings" calls a virtual method "GetOutputType".
Virtual Method Call from Constructor,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,VcProject,The constructor "VcProject" calls a virtual method "CreateReference".
Magic Number,NAnt.VSNet,CSharpProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\CSharpProjectProvider.cs,IsSupported,The following statement contains a magic number: return 5;
Magic Number,NAnt.VSNet,CSharpProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\CSharpProjectProvider.cs,IsSupported,The following statement contains a magic number: return 10;
Magic Number,NAnt.VSNet,JSharpProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\JSharpProjectProvider.cs,IsSupported,The following statement contains a magic number: return 5;
Magic Number,NAnt.VSNet,JSharpProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\JSharpProjectProvider.cs,IsSupported,The following statement contains a magic number: return 10;
Magic Number,NAnt.VSNet,ManagedAssemblyReference,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedAssemblyReference.cs,GetComponentAssemblyFolder,The following statement contains a magic number: assemblyFolderKeyParts.Length < 2 || assemblyFolderKeyParts.Length > 3
Magic Number,NAnt.VSNet,ManagedAssemblyReference,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedAssemblyReference.cs,GetComponentAssemblyFolder,The following statement contains a magic number: assemblyFolderKeyParts.Length < 2 || assemblyFolderKeyParts.Length > 3
Magic Number,NAnt.VSNet,ManagedAssemblyReference,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedAssemblyReference.cs,GetComponentAssemblyFolder,The following statement contains a magic number: assemblyFolderKeyParts.Length == 3
Magic Number,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,GetProductVersion,The following statement contains a magic number: switch (productVersion.Minor) {                     case 0:                         return ProductVersion.Rainier;                     case 10:                         return ProductVersion.Everett;                 }
Magic Number,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,GetProductVersion,The following statement contains a magic number: productVersion.Major == 7
Magic Number,NAnt.VSNet,VBProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VBProjectProvider.cs,IsSupported,The following statement contains a magic number: return 5;
Magic Number,NAnt.VSNet,VBProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VBProjectProvider.cs,IsSupported,The following statement contains a magic number: return 10;
Magic Number,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The following statement contains a magic number: optimizationLevel == 1 || optimizationLevel == 2
Magic Number,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,GetProductVersion,The following statement contains a magic number: switch(productVersion.Major) {                 case 7:                     switch (productVersion.Minor) {                         case 0:                             return ProductVersion.Rainier;                         case 10:                             return ProductVersion.Everett;                     }                     break;                 case 8:                     return ProductVersion.Whidbey;                 case 9:                     return ProductVersion.Orcas;             }
Magic Number,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,GetProductVersion,The following statement contains a magic number: switch(productVersion.Major) {                 case 7:                     switch (productVersion.Minor) {                         case 0:                             return ProductVersion.Rainier;                         case 10:                             return ProductVersion.Everett;                     }                     break;                 case 8:                     return ProductVersion.Whidbey;                 case 9:                     return ProductVersion.Orcas;             }
Magic Number,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,GetProductVersion,The following statement contains a magic number: switch(productVersion.Major) {                 case 7:                     switch (productVersion.Minor) {                         case 0:                             return ProductVersion.Rainier;                         case 10:                             return ProductVersion.Everett;                     }                     break;                 case 8:                     return ProductVersion.Whidbey;                 case 9:                     return ProductVersion.Orcas;             }
Magic Number,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,GetProductVersion,The following statement contains a magic number: switch(productVersion.Major) {                 case 7:                     switch (productVersion.Minor) {                         case 0:                             return ProductVersion.Rainier;                         case 10:                             return ProductVersion.Everett;                     }                     break;                 case 8:                     return ProductVersion.Whidbey;                 case 9:                     return ProductVersion.Orcas;             }
Magic Number,NAnt.VSNet,VCProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VCProjectProvider.cs,IsSupported,The following statement contains a magic number: return 5;
Magic Number,NAnt.VSNet,VCProjectProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VCProjectProvider.cs,IsSupported,The following statement contains a magic number: return 10;
Magic Number,NAnt.VSNet,WebDavClient,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\WebDavClient.cs,UploadFile,The following statement contains a magic number: int bufferSize = 100 * 1024;
Magic Number,NAnt.VSNet,WebDavClient,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\WebDavClient.cs,UploadFile,The following statement contains a magic number: int bufferSize = 100 * 1024;
Magic Number,NAnt.VSNet,WebDavClient,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\WebDavClient.cs,DownloadFile,The following statement contains a magic number: int bufferSize = 100 * 1024;
Magic Number,NAnt.VSNet,WebDavClient,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\WebDavClient.cs,DownloadFile,The following statement contains a magic number: int bufferSize = 100 * 1024;
Magic Number,NAnt.VSNet.Everett,SolutionProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Everett\SolutionProvider.cs,IsSupported,The following statement contains a magic number: return 10;
Magic Number,NAnt.VSNet.Rainier,SolutionProvider,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Rainier\SolutionProvider.cs,IsSupported,The following statement contains a magic number: return 10;
Magic Number,NAnt.VSNet.Tasks,SolutionTask,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Tasks\SolutionTask.cs,BuildAssemblyFolders,The following statement contains a magic number: BuildVisualStudioAssemblyFolders(folderList' Registry.CurrentUser'                   visualStudioVersion.ToString(2));
Magic Number,NAnt.VSNet.Tasks,SolutionTask,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\Tasks\SolutionTask.cs,BuildAssemblyFolders,The following statement contains a magic number: BuildVisualStudioAssemblyFolders(folderList' Registry.LocalMachine'                   visualStudioVersion.ToString(2));
Missing Default,NAnt.VSNet,ConfigurationBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ConfigurationBase.cs,ExpandMacro,The following switch statement is missing a default case: switch (macro.ToLower(CultureInfo.InvariantCulture)) {                 case "outdir": // E.g. bin\Debug\                     return RelativeOutputDir;                 case "configurationname": // E.g. Debug                     return Name;                 case "targetname": // E.g. WindowsApplication1                     return Path.GetFileNameWithoutExtension(Path.GetFileName(                         OutputPath));                 case "targetpath": // E.g. C:\Doc...\Visual Studio Projects\WindowsApplications1\bin\Debug\WindowsApplications1.exe                     return OutputPath;                 case "targetext": // E.g. .exe                     return Path.GetExtension(OutputPath);                 case "targetfilename": // E.g. WindowsApplications1.exe                     return Path.GetFileName(OutputPath);                 case "targetdir": // Absolute path to OutDir                     return OutputDir.FullName + (OutputDir.FullName.EndsWith(                         Path.DirectorySeparatorChar.ToString(CultureInfo.InvariantCulture))                          ? string.Empty : Path.DirectorySeparatorChar.ToString(CultureInfo.InvariantCulture));                 case "platformname": // .NET' does this value ever change?                     return PlatformName;             }
Missing Default,NAnt.VSNet,ConfigurationSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ConfigurationSettings.cs,ConfigurationSettings,The following switch statement is missing a default case: switch (project.Type) {                 case ProjectType.CSharp:                     htStringSettings["WarningLevel"] = "/warn:{0}";                     htStringSettings["NoWarn"] = "/nowarn:{0}";                     htBooleanSettings["IncrementalBuild"] = "/incremental";                     htBooleanSettings["AllowUnsafeBlocks"] = "/unsafe";                     htBooleanSettings["CheckForOverflowUnderflow"] = "/checked";                     break;                 case ProjectType.JSharp:                     htStringSettings["WarningLevel"] = "/warn:{0}";                     htStringSettings["NoWarn"] = "/nowarn:{0}";                     htBooleanSettings["IncrementalBuild"] = "/incremental";                     break;                 case ProjectType.VB:                     htStringSettings["DefineDebug"] = "/d:DEBUG={0}";                     htStringSettings["DefineTrace"] = "/d:TRACE={0}";                     htBooleanSettings["RemoveIntegerChecks"] = "/removeintchecks";                     break;             }
Missing Default,NAnt.VSNet,ConfigurationSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ConfigurationSettings.cs,ConfigurationSettings,The following switch statement is missing a default case: switch (name) {                         case "BaseAddress":                             // vbc and vjs expect the base address to be specified                             // as a hexadecimal number' csc supports decimal'                              // hexadecimal' or octal number                             //                             // so use hexadecimal as all compiler support this                             uint intvalue = Convert.ToUInt32(value' CultureInfo.InvariantCulture);                             value = "0x" + intvalue.ToString("x"' CultureInfo.InvariantCulture);                             break;                         case "DefineConstants":                             // vbc fails when the symbol contains spaces                             value = value.Replace(" "' string.Empty);                             break;                     }
Missing Default,NAnt.VSNet,ConfigurationSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ConfigurationSettings.cs,ConfigurationSettings,The following switch statement is missing a default case: switch (name) {                     case "IncrementalBuild":                         // ignore if not supported                         if (!IncrementalBuildSupported) {                             continue;                         }                         break;                 }
Missing Default,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,ManagedProjectBase,The following switch statement is missing a default case: switch (buildAction) {                         case "Compile":                             _sourceFiles[sourceFile] = null;                             break;                         case "EmbeddedResource":                             RegisterEmbeddedResource(sourceFile' elemFile);                             break;                         case null:                             if (string.Compare(Path.GetExtension(sourceFile)' FileExtension' true' CultureInfo.InvariantCulture) == 0) {                                 _sourceFiles[sourceFile] = null;                             }                             break;                     }
Missing Default,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,ManagedProjectBase,The following switch statement is missing a default case: switch (buildAction) {                         case "Compile":                             _sourceFiles[sourceFile] = null;                             break;                         case "EmbeddedResource":                             RegisterEmbeddedResource(sourceFile' elemFile);                             break;                         case null:                             if (string.Compare(Path.GetExtension(sourceFile)' FileExtension' true' CultureInfo.InvariantCulture) == 0) {                                 _sourceFiles[sourceFile] = null;                             }                             break;                     }
Missing Default,NAnt.VSNet,ManagedProjectBase,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ManagedProjectBase.cs,GetProductVersion,The following switch statement is missing a default case: switch (productVersion.Minor) {                     case 0:                         return ProductVersion.Rainier;                     case 10:                         return ProductVersion.Everett;                 }
Missing Default,NAnt.VSNet,ProjectSettings,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\ProjectSettings.cs,ProjectSettings,The following switch statement is missing a default case: switch (_outputType) {                 case ManagedOutputType.Library:                     _settings.Add("/target:library");                     break;                 case ManagedOutputType.Executable:                     _settings.Add("/target:exe");                     // startup object only makes sense for executable assemblies                     htStringSettings["StartupObject"] = @"/main:""{0}""";                     break;                 case ManagedOutputType.WindowsExecutable:                     _settings.Add("/target:winexe");                     // startup object only makes sense for executable assemblies                     htStringSettings["StartupObject"] = @"/main:""{0}""";                     break;             }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,VcProject,The following switch statement is missing a default case: switch (ext) {                     case ".idl":                     case ".odl":                     case ".rc":                         // ensure there's a file configuration for each project                          // configuration                         foreach (VcProjectConfiguration projectConfig in ProjectConfigurations.Values) {                             // if file configuration for project config existed                              // in project file' then skip this project config                             if (htFileConfigurations != null && htFileConfigurations.ContainsKey(projectConfig.Name)) {                                 continue;                             }                              // lazy initialize hashtable                             if (htFileConfigurations == null) {                                 htFileConfigurations = CollectionsUtil.CreateCaseInsensitiveHashtable();                             }                              // create the file configuration                             htFileConfigurations[projectConfig.Name] = new                                  VcFileConfiguration(relPath' parentName' projectConfig' outputDir);                         }                         break;                 }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,Build,The following switch statement is missing a default case: switch (projectConfig.Type) {                 case VcProjectConfiguration.ConfigurationType.StaticLibrary:                     RunLibrarian(projectConfig);                     break;                 case VcProjectConfiguration.ConfigurationType.Application:                 case VcProjectConfiguration.ConfigurationType.DynamicLibrary:                     // perform pre-link actions                     if (!PreLink(projectConfig)) {                         return BuildResult.Failed;                     }                     RunLinker(solutionConfiguration);                     break;             }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The following switch statement is missing a default case: switch (fileConfig.UsePrecompiledHeader) {                     case UsePrecompiledHeader.Use:                         clTask.PchMode = ClTask.PrecompiledHeaderMode.Use;                         break;                     case UsePrecompiledHeader.AutoCreate:                         clTask.PchMode = ClTask.PrecompiledHeaderMode.AutoCreate;                         break;                     case UsePrecompiledHeader.Create:                         clTask.PchMode = ClTask.PrecompiledHeaderMode.Create;                         break;                 }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The following switch statement is missing a default case: switch(exceptionHandling) {                 case "0":                 case "false":                     break;                 case "1":                 case "true":                     clTask.Arguments.Add(new Argument("/EHsc"));                     break;                 case "2":                     clTask.Arguments.Add(new Argument("/EHa"));                     break;             }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The following switch statement is missing a default case: switch (browseInformation) {                         case "1": // Include All Browse Information                             clTask.Arguments.Add(new Argument("/FR\""                                  + browseInformationFile + "\""));                             break;                         case "2": // No Local Symbols                             clTask.Arguments.Add(new Argument("/Fr\""                                  + browseInformationFile + "\""));                             break;                     }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The following switch statement is missing a default case: switch (browseInformation) {                         case "1": // Include All Browse Information                             clTask.Arguments.Add(new Argument("/FR"));                             break;                         case "2": // No Local Symbols                             clTask.Arguments.Add(new Argument("/Fr"));                             break;                     }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,BuildCPPFiles,The following switch statement is missing a default case: switch (projectConfig.UseOfATL) {                 case UseOfATL.Shared:                     clTask.Arguments.Add(new Argument("/D"));                     clTask.Arguments.Add(new Argument("_ATL_DLL"));                     break;                 case UseOfATL.Static:                     clTask.Arguments.Add(new Argument("/D"));                     clTask.Arguments.Add(new Argument("_ATL_STATIC_REGISTRY"));                     break;             }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,RunLinker,The following switch statement is missing a default case: switch (vcProjectConfig.Type) {                     case VcProjectConfiguration.ConfigurationType.Application:                     case VcProjectConfiguration.ConfigurationType.DynamicLibrary:                         FileInfo dependencyImportLibrary = vcProjectConfig.LinkerConfiguration.ImportLibrary;                         if (dependencyImportLibrary != null) {                             linkTask.Sources.FileNames.Add(                                 dependencyImportLibrary.FullName);                         }                         break;                     case VcProjectConfiguration.ConfigurationType.StaticLibrary:                         linkTask.Sources.FileNames.Add(vcProjectConfig.OutputPath);                         break;                 }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,GetProductVersion,The following switch statement is missing a default case: switch(productVersion.Major) {                 case 7:                     switch (productVersion.Minor) {                         case 0:                             return ProductVersion.Rainier;                         case 10:                             return ProductVersion.Everett;                     }                     break;                 case 8:                     return ProductVersion.Whidbey;                 case 9:                     return ProductVersion.Orcas;             }
Missing Default,NAnt.VSNet,VcProject,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProject.cs,GetProductVersion,The following switch statement is missing a default case: switch (productVersion.Minor) {                         case 0:                             return ProductVersion.Rainier;                         case 10:                             return ProductVersion.Everett;                     }
Missing Default,NAnt.VSNet,VcProjectConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectConfiguration.cs,Initialize,The following switch statement is missing a default case: switch (ext) {                     case ".cpp":                     case ".c":                         if (!_sourceConfigs.ContainsKey(fileConfig)) {                             _sourceConfigs[fileConfig] = new ArrayList(1);                         }                          // add file to list of sources to build with this config                         ((ArrayList) _sourceConfigs[fileConfig]).Add(fileName);                          // register output file for linking                         _objFiles.Add(vcProject.GetObjOutputFile(fileName'                              fileConfig' intermediateDir));                         break;                     case ".rc":                         if (!_rcConfigs.ContainsKey(fileConfig)) {                             _rcConfigs[fileConfig] = new ArrayList(1);                         }                          // add file to list of resources to build with this config                         ((ArrayList) _rcConfigs[fileConfig]).Add(fileName);                          // register output file for linking                         _objFiles.Add(vcProject.GetResourceOutputFile(fileName'                              fileConfig));                         break;                     case ".idl":                     case ".odl": // ODL is used for old OLE objects                         if (!_idlConfigs.ContainsKey(fileConfig)) {                             _idlConfigs[fileConfig] = new ArrayList(1);                         }                          // add file to list of idl's to build with this config                         ((ArrayList) _idlConfigs[fileConfig]).Add(fileName);                         break;                 }
Missing Default,NAnt.VSNet,VcProjectConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectConfiguration.cs,Initialize,The following switch statement is missing a default case: switch (Type) {                 case ConfigurationType.StaticLibrary:                     _outputPath = GetLibrarianOutputFile(intermediateDir);                     break;                 case ConfigurationType.Application:                 case ConfigurationType.DynamicLibrary:                     _outputPath = GetLinkerOutputFile();                     break;                 case ConfigurationType.Makefile:                     string nmakeOutput = GetToolSetting(VcConfigurationBase.NMakeTool' "Output");                     if (!String.IsNullOrEmpty(nmakeOutput)) {                         _outputPath = FileUtils.CombinePaths(Project.ProjectDirectory.FullName' nmakeOutput);                     }                     break;             }
Missing Default,NAnt.VSNet,VcProjectConfiguration,C:\research\architectureSmells\repos\nant_nant\src\NAnt.VSNet\VcProjectConfiguration.cs,GetLinkerOutputFile,The following switch statement is missing a default case: switch (Type) {                 case ConfigurationType.Application:                     extension = ".exe";                     break;                 case ConfigurationType.DynamicLibrary:                     extension = ".dll";                     break;             }
