Implementation smell,Namespace,Class,File,Method,Description
Long Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,SplitLine,The method has 134 lines of code.
Long Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The method has 162 lines of code.
Long Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The method has 158 lines of code.
Long Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The method has 198 lines of code.
Long Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The method has 480 lines of code.
Complex Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,SplitLine,Cyclomatic complexity of the method is 22
Complex Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,Cyclomatic complexity of the method is 32
Complex Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,Cyclomatic complexity of the method is 11
Complex Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,Cyclomatic complexity of the method is 11
Complex Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,Cyclomatic complexity of the method is 21
Complex Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,Cyclomatic complexity of the method is 26
Complex Method,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,Cyclomatic complexity of the method is 107
Long Parameter List,fomm.Scripting,GenericBaseScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\GenericBaseScript.cs,Select,The method has 5 parameters. Parameters: p_strItems' p_strPreviews' p_strDescriptions' p_strTitle' p_booSelectMany
Complex Conditional,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The conditional expression  "!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step))"  is complex.
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])       {         case "DialogYesNo":           switch (line.Length)           {             case 2:               Warn("Missing arguments to function 'If DialogYesNo'");               return false;             case 3:               return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;             case 4:               return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;             default:               Warn("Unexpected arguments after function 'If DialogYesNo'");               goto case 4;           }         case "DataFileExists":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If DataFileExists'");             return false;           }           return             ((string[])               ExecuteMethod(                 () =>                   FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                          false))).Length == 1;         case "FommNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FommNEwerThan'");             return false;           }           try           {             return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                    new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If VersionGreaterThan'");             return false;           }         case "ScriptExtenderPresent":           if (line.Length > 2)           {             Warn("Unexpected arguments to 'If ScriptExtenderPresent'");           }           return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);         case "ScriptExtenderNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");           }           if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))           {             return false;           }           try           {             return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");             return false;           }         case "FalloutNewerThan":           if (line.Length == 2)           {             Warn("Missing arguments to function 'If FalloutNewerThan'");             return false;           }           if (line.Length > 3)           {             Warn("Unexpected arguments to 'If FalloutNewerThan'");           }           try           {             return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");           }           catch           {             Warn("Invalid argument to function 'If FalloutNewerThan'");             return false;           }         case "Equal":           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Equal'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Equal'");           }           return line[2] == line[3];         case "GreaterEqual":         case "GreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If Greater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If Greater'");           }           int arg1' arg2;           if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If Greater'");             return false;           }           if (line[1] == "GreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         case "fGreaterEqual":         case "fGreaterThan":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'If fGreater'");             return false;           }           if (line.Length > 4)           {             Warn("Unexpected arguments to 'If fGreater'");           }           double arg1' arg2;           if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))           {             Warn("Invalid argument upplied to function 'If fGreater'");             return false;           }           if (line[1] == "fGreaterEqual")           {             return arg1 >= arg2;           }           return arg1 > arg2;         }         default:           Warn("Unknown argument '" + line[1] + "' supplied to 'If'");           return false;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: var items = new string[line.Length - 2];
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: Array.Copy(line' 2' items' 0' line.Length - 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: Array.Copy(line' 2' items' 0' line.Length - 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: descs[i] = line[i*argsperoption + 2];
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelectVar,The following statement contains a magic number: line.Length < 2
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelectVar,The following statement contains a magic number: line.Length > 2
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: var NullLoop = new FlowControlStruct(2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: line[1] = line[2];
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)       {         case 1:           Warn("Missing arguments to function 'Message'");           break;         case 2:           ExecuteMethod(() => Script.MessageBox(line[1]));           break;         case 3:           ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));           break;         default:           Warn("Unexpected arguments after 'Message'");           goto case 3;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)       {         case 1:           Warn("Missing arguments to function 'Message'");           break;         case 2:           ExecuteMethod(() => Script.MessageBox(line[1]));           break;         case 3:           ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));           break;         default:           Warn("Unexpected arguments after 'Message'");           goto case 3;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)       {         case 1:           Warn("Missing arguments to function 'Message'");           break;         case 2:           ExecuteMethod(() => Script.MessageBox(line[1]));           break;         case 3:           ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));           break;         default:           Warn("Unexpected arguments after 'Message'");           goto case 3;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)       {         case 1:           Warn("Missing arguments to function 'Message'");           break;         case 2:           ExecuteMethod(() => Script.MessageBox(line[1]));           break;         case 3:           ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));           break;         default:           Warn("Unexpected arguments after 'Message'");           goto case 3;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionInstallDataFile,The following statement contains a magic number: line.Length > 2
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCopyDataFile,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: line.Length > 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: line[2] == "True"
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: line.Length < 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: line.Length > 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: line.Length < 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: line.Length > 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: var bteData = (byte[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFile(line[3]));
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: ExecuteMethod(() => Script.EditShader(package' line[2]' bteData));
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetVar,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetVar,The following statement contains a magic number: line.Length > 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetVar,The following statement contains a magic number: variables[line[1]] = line[2];
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetDirectoryName,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetDirectoryName,The following statement contains a magic number: line.Length > 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetDirectoryName,The following statement contains a magic number: variables[line[1]] = Path.GetDirectoryName(line[2]);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileName,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileName,The following statement contains a magic number: line.Length > 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileName,The following statement contains a magic number: variables[line[1]] = Path.GetFileName(line[2]);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileNameWithoutExtension,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileNameWithoutExtension,The following statement contains a magic number: line.Length > 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileNameWithoutExtension,The following statement contains a magic number: variables[line[1]] = Path.GetFileNameWithoutExtension(line[2]);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: line.Length < 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: line.Length > 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: variables[line[1]] = Path.Combine(line[2]' line[3]);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: variables[line[1]] = Path.Combine(line[2]' line[3]);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: line.Length < 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: line.Length > 5
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: !int.TryParse(line[3]' out start)
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: variables[line[1]] = line[2].Substring(start);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: line.Length == 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: line.Length < 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: line.Length > 5
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: !int.TryParse(line[3]' out start)
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: variables[line[1]] = line[2].Remove(start);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: line.Length == 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionStringLength,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionStringLength,The following statement contains a magic number: line.Length > 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionStringLength,The following statement contains a magic number: variables[line[1]] = line[2].Length.ToString();
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: line.Length < 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: line.Length > 4
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadRenderer,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadRenderer,The following statement contains a magic number: line.Length > 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadRenderer,The following statement contains a magic number: variables[line[1]] = (string) ExecuteMethod(() => Script.GetRendererInfo(line[2]));
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionExecLines,The following statement contains a magic number: line.Length < 2
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionExecLines,The following statement contains a magic number: line.Length > 2
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: func.RemoveRange(index - 1' 2);
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSet,The following statement contains a magic number: line.Length < 3
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: switch (line[0])           {             case "":               Warn("Empty function");               break;             case "If":             case "IfNot":               FlowControl.Push(new FlowControlStruct(0));               break;             case "Else":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)               {                 FlowControl.Peek().active = FlowControl.Peek().line != -1;               }               else               {                 Warn("Unexpected Else");               }               break;             case "EndIf":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndIf");               }               break;             case "Select":             case "SelectMany":             case "SelectWithPreview":             case "SelectManyWithPreview":             case "SelectWithDescriptions":             case "SelectManyWithDescriptions":             case "SelectWithDescriptionsAndPreviews":             case "SelectManyWithDescriptionsAndPreviews":             case "SelectVar":             case "SelectString":               FlowControl.Push(new FlowControlStruct(1));               break;             case "Case":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                 {                   FlowControl.Peek().active = true;                   FlowControl.Peek().hitCase = true;                 }               }               else               {                 Warn("Unexpected Break");               }               break;             case "Default":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                 {                   FlowControl.Peek().active = true;                 }               }               else               {                 Warn("Unexpected Default");               }               break;             case "EndSelect":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndSelect");               }               break;             case "For":               FlowControl.Push(new FlowControlStruct(2));               break;             case "EndFor":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndFor");               }               break;             case "Break":             case "Continue":             case "Exit":               break;           }
Magic Number,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: switch (line[0])           {             case "":               Warn("Empty function");               break;             case "If":             case "IfNot":               FlowControl.Push(new FlowControlStruct(0));               break;             case "Else":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)               {                 FlowControl.Peek().active = FlowControl.Peek().line != -1;               }               else               {                 Warn("Unexpected Else");               }               break;             case "EndIf":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndIf");               }               break;             case "Select":             case "SelectMany":             case "SelectWithPreview":             case "SelectManyWithPreview":             case "SelectWithDescriptions":             case "SelectManyWithDescriptions":             case "SelectWithDescriptionsAndPreviews":             case "SelectManyWithDescriptionsAndPreviews":             case "SelectVar":             case "SelectString":               FlowControl.Push(new FlowControlStruct(1));               break;             case "Case":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                 {                   FlowControl.Peek().active = true;                   FlowControl.Peek().hitCase = true;                 }               }               else               {                 Warn("Unexpected Break");               }               break;             case "Default":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                 {                   FlowControl.Peek().active = true;                 }               }               else               {                 Warn("Unexpected Default");               }               break;             case "EndSelect":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndSelect");               }               break;             case "For":               FlowControl.Push(new FlowControlStruct(2));               break;             case "EndFor":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndFor");               }               break;             case "Break":             case "Continue":             case "Exit":               break;           }
Magic Number,fomm.Scripting,FlowControlStruct,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FlowControlStruct,The following statement contains a magic number: type = 2;
Missing Default,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following switch statement is missing a default case: switch (line[1])       {         case "Count":         {           if (line.Length < 5)           {             Warn("Missing arguments to function 'For Count'");             return NullLoop;           }           if (line.Length > 6)           {             Warn("Unexpected extra arguments to 'For Count'");           }           int start' end' step = 1;           if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||               (line.Length >= 6 && !int.TryParse(line[5]' out step)))           {             Warn("Invalid argument to 'For Count'");             return NullLoop;           }           var steps = new List<string>();           for (var i = start; i <= end; i += step)           {             steps.Add(i.ToString());           }           return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);         }         case "DataFile":         {           if (line.Length < 4)           {             Warn("Missing arguments to function 'For Each DataFile'");             return NullLoop;           }           if (line.Length > 4)           {             Warn("Unexpected extra arguments to 'For Each DataFile'");           }            var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());           for (var i = strFiles.Length - 1; i >= 0; i--)           {             strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);           }           return new FlowControlStruct(strFiles' line[3]' LineNo);         }       }
Missing Default,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following switch statement is missing a default case: switch (type)       {         case IniType.Fallout:           ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));           break;         case IniType.FalloutPrefs:           ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));           break;         case IniType.Geck:           ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));           break;         case IniType.GeckPrefs:           ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));           break;       }
Missing Default,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following switch statement is missing a default case: switch (type)       {         case IniType.Fallout:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));           break;         case IniType.FalloutPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));           break;         case IniType.Geck:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));           break;         case IniType.GeckPrefs:           variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));           break;       }
Missing Default,fomm.Scripting,fommScript,C:\research\architectureSmells\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following switch statement is missing a default case: switch (line[0])           {             case "":               Warn("Empty function");               break;             case "If":             case "IfNot":               FlowControl.Push(new FlowControlStruct(0));               break;             case "Else":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)               {                 FlowControl.Peek().active = FlowControl.Peek().line != -1;               }               else               {                 Warn("Unexpected Else");               }               break;             case "EndIf":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndIf");               }               break;             case "Select":             case "SelectMany":             case "SelectWithPreview":             case "SelectManyWithPreview":             case "SelectWithDescriptions":             case "SelectManyWithDescriptions":             case "SelectWithDescriptionsAndPreviews":             case "SelectManyWithDescriptionsAndPreviews":             case "SelectVar":             case "SelectString":               FlowControl.Push(new FlowControlStruct(1));               break;             case "Case":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                 {                   FlowControl.Peek().active = true;                   FlowControl.Peek().hitCase = true;                 }               }               else               {                 Warn("Unexpected Break");               }               break;             case "Default":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                 {                   FlowControl.Peek().active = true;                 }               }               else               {                 Warn("Unexpected Default");               }               break;             case "EndSelect":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndSelect");               }               break;             case "For":               FlowControl.Push(new FlowControlStruct(2));               break;             case "EndFor":               if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)               {                 FlowControl.Pop();               }               else               {                 Warn("Unexpected EndFor");               }               break;             case "Break":             case "Continue":             case "Exit":               break;           }
