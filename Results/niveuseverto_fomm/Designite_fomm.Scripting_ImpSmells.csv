Implementation smell,Namespace,Class,File,Method,Description
Long Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,SplitLine,The method has 132 lines of code.
Long Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The method has 162 lines of code.
Long Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The method has 145 lines of code.
Long Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The method has 180 lines of code.
Long Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The method has 476 lines of code.
Complex Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,Cyclomatic complexity of the method is 10
Complex Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,Cyclomatic complexity of the method is 20
Complex Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,Cyclomatic complexity of the method is 25
Complex Method,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,Cyclomatic complexity of the method is 12
Long Parameter List,fomm.Scripting,GenericBaseScript,C:\repos\niveuseverto_fomm\fomm.Scripting\GenericBaseScript.cs,Select,The method has 5 parameters. Parameters: p_strItems' p_strPreviews' p_strDescriptions' p_strTitle' p_booSelectMany
Complex Conditional,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The conditional expression  "!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step))"  is complex.
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionIf,The following statement contains a magic number: switch (line[1])        {          case "DialogYesNo":            switch (line.Length)            {              case 2:                Warn("Missing arguments to function 'If DialogYesNo'");                return false;              case 3:                return MessageBox.Show(line[2]' ""' mbButtons.YesNo) == DialogResult.Yes;              case 4:                return MessageBox.Show(line[2]' line[3]' mbButtons.YesNo) == DialogResult.Yes;              default:                Warn("Unexpected arguments after function 'If DialogYesNo'");                goto case 4;            }          case "DataFileExists":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If DataFileExists'");              return false;            }            return              ((string[])                ExecuteMethod(                  () =>                    FileManagement.GetExistingDataFileList(Path.GetDirectoryName(line[2])' Path.GetFileName(line[2])'                                                           false))).Length == 1;          case "FommNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FommNEwerThan'");              return false;            }            try            {              return ((Version) ExecuteMethod(() => m_midInstaller.Script.GetGameVersion())) >=                     new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If VersionGreaterThan'");              return false;            }          case "ScriptExtenderPresent":            if (line.Length > 2)            {              Warn("Unexpected arguments to 'If ScriptExtenderPresent'");            }            return (bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false);          case "ScriptExtenderNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If ScriptExtenderNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If ScriptExtenderNewerThan'");            }            if (!(bool) (ExecuteMethod(() => Script.ScriptExtenderPresent()) ?? false))            {              return false;            }            try            {              return ((Version) ExecuteMethod(() => Script.GetScriptExtenderVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If ScriptExtenderNewerThan'");              return false;            }          case "FalloutNewerThan":            if (line.Length == 2)            {              Warn("Missing arguments to function 'If FalloutNewerThan'");              return false;            }            if (line.Length > 3)            {              Warn("Unexpected arguments to 'If FalloutNewerThan'");            }            try            {              return ((Version) ExecuteMethod(() => Script.GetGameVersion())) >= new Version(line[2] + ".0");            }            catch            {              Warn("Invalid argument to function 'If FalloutNewerThan'");              return false;            }          case "Equal":            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Equal'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Equal'");            }            return line[2] == line[3];          case "GreaterEqual":          case "GreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If Greater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If Greater'");            }            int arg1' arg2;            if (!int.TryParse(line[2]' out arg1) || !int.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If Greater'");              return false;            }            if (line[1] == "GreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          case "fGreaterEqual":          case "fGreaterThan":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'If fGreater'");              return false;            }            if (line.Length > 4)            {              Warn("Unexpected arguments to 'If fGreater'");            }            double arg1' arg2;            if (!double.TryParse(line[2]' out arg1) || !double.TryParse(line[3]' out arg2))            {              Warn("Invalid argument upplied to function 'If fGreater'");              return false;            }            if (line[1] == "fGreaterEqual")            {              return arg1 >= arg2;            }            return arg1 > arg2;          }          default:            Warn("Unknown argument '" + line[1] + "' supplied to 'If'");            return false;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to function 'Select'");          return new string[0];        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: var items = new string[line.Length - 2];
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: Array.Copy(line' 2' items' 0' line.Length - 2);
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: Array.Copy(line' 2' items' 0' line.Length - 2);
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelect,The following statement contains a magic number: for (var i = 0; i < line.Length/argsperoption; i++)        {          items[i] = line[i*argsperoption];          if (Previews)          {            previews[i] = line[i*argsperoption + 1];            if (Descriptions)            {              descs[i] = line[i*argsperoption + 2];            }          }          else          {            if (Descriptions)            {              descs[i] = line[i*argsperoption + 1];            }          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelectVar,The following statement contains a magic number: if (line.Length < 2)        {          Warn("Missing arguments" + Func);          return new string[0];        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSelectVar,The following statement contains a magic number: if (line.Length > 2)        {          Warn("Unexpected arguments" + Func);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: var NullLoop = new FlowControlStruct(2);
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to function 'For'");          return NullLoop;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: if (line[1] == "Each")        {          line[1] = line[2];        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following statement contains a magic number: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)        {          case 1:            Warn("Missing arguments to function 'Message'");            break;          case 2:            ExecuteMethod(() => Script.MessageBox(line[1]));            break;          case 3:            ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));            break;          default:            Warn("Unexpected arguments after 'Message'");            goto case 3;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)        {          case 1:            Warn("Missing arguments to function 'Message'");            break;          case 2:            ExecuteMethod(() => Script.MessageBox(line[1]));            break;          case 3:            ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));            break;          default:            Warn("Unexpected arguments after 'Message'");            goto case 3;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)        {          case 1:            Warn("Missing arguments to function 'Message'");            break;          case 2:            ExecuteMethod(() => Script.MessageBox(line[1]));            break;          case 3:            ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));            break;          default:            Warn("Unexpected arguments after 'Message'");            goto case 3;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionMessage,The following statement contains a magic number: switch (line.Length)        {          case 1:            Warn("Missing arguments to function 'Message'");            break;          case 2:            ExecuteMethod(() => Script.MessageBox(line[1]));            break;          case 3:            ExecuteMethod(() => Script.MessageBox(line[1]' line[2]));            break;          default:            Warn("Unexpected arguments after 'Message'");            goto case 3;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionInstallDataFile,The following statement contains a magic number: if (line.Length > 2)        {          Warn("Unexpected arguments after InstallDataFile");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCopyDataFile,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to CopyDataFile");        }        else        {          if (line.Length > 3)          {            Warn("Unexpected extra arguments after CopyDataFile");          }            ExecuteMethod(() => Script.CopyDataFile(line[1]' line[2]));        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCopyDataFile,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to CopyDataFile");        }        else        {          if (line.Length > 3)          {            Warn("Unexpected extra arguments after CopyDataFile");          }            ExecuteMethod(() => Script.CopyDataFile(line[1]' line[2]));        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCopyDataFile,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to CopyDataFile");        }        else        {          if (line.Length > 3)          {            Warn("Unexpected extra arguments after CopyDataFile");          }            ExecuteMethod(() => Script.CopyDataFile(line[1]' line[2]));        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to function SetPluginActivation");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: if (line.Length > 3)        {          Warn("Unexpected extra arguments to function SetPluginActivation");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: if (line[2] == "True")        {          ExecuteMethod(() => Script.SetPluginActivation(line[1]' true));        }        else if (line[2] == "False")        {          ExecuteMethod(() => Script.SetPluginActivation(line[1]' false));        }        else        {          Warn("Expected 'True' or 'False'' but got '" + line[2] + "'");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: if (line[2] == "True")        {          ExecuteMethod(() => Script.SetPluginActivation(line[1]' true));        }        else if (line[2] == "False")        {          ExecuteMethod(() => Script.SetPluginActivation(line[1]' false));        }        else        {          Warn("Expected 'True' or 'False'' but got '" + line[2] + "'");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetPluginActivation,The following statement contains a magic number: if (line[2] == "True")        {          ExecuteMethod(() => Script.SetPluginActivation(line[1]' true));        }        else if (line[2] == "False")        {          ExecuteMethod(() => Script.SetPluginActivation(line[1]' false));        }        else        {          Warn("Expected 'True' or 'False'' but got '" + line[2] + "'");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: if (line.Length < 4)        {          Warn("Missing arguments to EditINI");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: if (line.Length > 4)        {          Warn("Unexpected arguments to EditINI");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: if (line.Length < 4)        {          Warn("Missing arguments to 'EditShader'");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: if (line.Length > 4)        {          Warn("Unexpected arguments to 'EditShader'");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: var bteData = (byte[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFile(line[3]));
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditShader,The following statement contains a magic number: ExecuteMethod(() => Script.EditShader(package' line[2]' bteData));
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetVar,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to function SetVar");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetVar,The following statement contains a magic number: if (line.Length > 3)        {          Warn("Unexpected extra arguments to function SetVar");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSetVar,The following statement contains a magic number: variables[line[1]] = line[2];
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetDirectoryName,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to GetDirectoryName");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetDirectoryName,The following statement contains a magic number: if (line.Length > 3)        {          Warn("Unexpected arguments to GetDirectoryName");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetDirectoryName,The following statement contains a magic number: try        {          variables[line[1]] = Path.GetDirectoryName(line[2]);        }        catch        {          Warn("Invalid argument to GetDirectoryName");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileName,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to GetFileName");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileName,The following statement contains a magic number: if (line.Length > 3)        {          Warn("Unexpected arguments to GetFileName");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileName,The following statement contains a magic number: try        {          variables[line[1]] = Path.GetFileName(line[2]);        }        catch        {          Warn("Invalid argument to GetFileName");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileNameWithoutExtension,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to GetFileNameWithoutExtension");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileNameWithoutExtension,The following statement contains a magic number: if (line.Length > 3)        {          Warn("Unexpected arguments to GetFileNameWithoutExtension");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionGetFileNameWithoutExtension,The following statement contains a magic number: try        {          variables[line[1]] = Path.GetFileNameWithoutExtension(line[2]);        }        catch        {          Warn("Invalid argument to GetFileNameWithoutExtension");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: if (line.Length < 4)        {          Warn("Missing arguments to CombinePaths");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: if (line.Length > 4)        {          Warn("Unexpected arguments to CombinePaths");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: try        {          variables[line[1]] = Path.Combine(line[2]' line[3]);        }        catch        {          Warn("Invalid argument to CombinePaths");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionCombinePaths,The following statement contains a magic number: try        {          variables[line[1]] = Path.Combine(line[2]' line[3]);        }        catch        {          Warn("Invalid argument to CombinePaths");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length < 4)        {          Warn("Missing arguments to Substring");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length > 5)        {          Warn("Unexpected extra arguments to Substring");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSubstring,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to Substring");            return;          }          variables[line[1]] = line[2].Substring(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length < 4)        {          Warn("Missing arguments to RemoveString");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length > 5)        {          Warn("Unexpected extra arguments to RemoveString");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionRemoveString,The following statement contains a magic number: if (line.Length == 4)        {          int start;          if (!int.TryParse(line[3]' out start))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start);        }        else        {          int start' end;          if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end))          {            Warn("Invalid argument to RemoveString");            return;          }          variables[line[1]] = line[2].Remove(start' end);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionStringLength,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to StringLength");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionStringLength,The following statement contains a magic number: if (line.Length > 3)        {          Warn("Unexpected extra arguments to StringLength");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionStringLength,The following statement contains a magic number: variables[line[1]] = line[2].Length.ToString();
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: if (line.Length < 4)        {          Warn("Missing arguments to function ReadINI");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: if (line.Length > 4)        {          Warn("Unexpected extra arguments to function ReadINI");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following statement contains a magic number: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadRenderer,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to function 'ReadRendererInfo'");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadRenderer,The following statement contains a magic number: if (line.Length > 3)        {          Warn("Unexpected extra arguments to function 'ReadRendererInfo'");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadRenderer,The following statement contains a magic number: variables[line[1]] = (string) ExecuteMethod(() => Script.GetRendererInfo(line[2]));
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionExecLines,The following statement contains a magic number: if (line.Length < 2)        {          Warn("Missing arguments to function 'ExecLines'");          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionExecLines,The following statement contains a magic number: if (line.Length > 2)        {          Warn("Unexpected extra arguments to function 'ExecLines'");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1]) & int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("not");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1]) | int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("or");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1]) ^ int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("xor");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1])%int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("mod");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1])%int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("%");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = (int) Math.Pow(int.Parse(func[index - 1])' int.Parse(func[index + 1]));          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("^");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1])/int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("/");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1])*int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("*");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1]) + int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("+");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,iSet,The following statement contains a magic number: while (index != -1)        {          var i = int.Parse(func[index - 1]) - int.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("-");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: while (index != -1)        {          var i = double.Parse(func[index - 1])%double.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("mod");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: while (index != -1)        {          var i = double.Parse(func[index - 1])%double.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("%");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: while (index != -1)        {          var i = Math.Pow(double.Parse(func[index - 1])' double.Parse(func[index + 1]));          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("^");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: while (index != -1)        {          var i = double.Parse(func[index - 1])/double.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("/");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: while (index != -1)        {          var i = double.Parse(func[index - 1])*double.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("*");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: while (index != -1)        {          var i = double.Parse(func[index - 1]) + double.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("+");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,fSet,The following statement contains a magic number: while (index != -1)        {          var i = double.Parse(func[index - 1]) - double.Parse(func[index + 1]);          func[index + 1] = i.ToString();          func.RemoveRange(index - 1' 2);          index = func.IndexOf("-");        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSet,The following statement contains a magic number: if (line.Length < 3)        {          Warn("Missing arguments to function " + (integer ? "iSet" : "fSet"));          return;        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionSet,The following statement contains a magic number: for (var i = 2; i < line.Length; i++)        {          func.Add(line[i]);        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: for (var i = 1; i < script.Length || ExtraLines.Count > 0; i++)        {          string s;          if (ExtraLines.Count > 0)          {            i--;            s = ExtraLines.Dequeue().Replace('\t'' ' ').Trim();          }          else          {            s = script[i].Replace('\t'' ' ').Trim();          }          cLine = i.ToString();          while (s.EndsWith("\\"))          {            s = s.Remove(s.Length - 1);            if (ExtraLines.Count > 0)            {              s += ExtraLines.Dequeue().Replace('\t'' ' ').Trim();            }            else            {              if (++i == script.Length)              {                Warn("Run-on line passed end of script");              }              else              {                s += script[i].Replace('\t'' ' ').Trim();              }            }          }            if (SkipTo != null)          {            if (s == SkipTo)            {              SkipTo = null;            }            else            {              continue;            }          }            var line = SplitLine(s);          if (line.Length == 0)          {            continue;          }            if (FlowControl.Count != 0 && !FlowControl.Peek().active)          {            switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }          }          else          {            switch (line[0])            {              case "":                Warn("Empty function");                break;                //Control structures              case "Goto":                if (line.Length < 2)                {                  Warn("Not enough arguments to function 'Goto'");                }                else                {                  if (line.Length > 2)                  {                    Warn("Unexpected extra arguments to function 'Goto'");                  }                  SkipTo = "Label " + line[1];                  FlowControl.Clear();                }                break;              case "Label":                break;              case "If":                FlowControl.Push(new FlowControlStruct(i' FunctionIf(line)));                break;              case "IfNot":                FlowControl.Push(new FlowControlStruct(i' !FunctionIf(line)));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = false;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' false)));                break;              case "SelectMany":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' false)));                break;              case "SelectWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' false)));                break;              case "SelectManyWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' false)));                break;              case "SelectWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' true)));                break;              case "SelectManyWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' true)));                break;              case "SelectWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' true)));                break;              case "SelectManyWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' true)));                break;              case "SelectVar":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' true)));                break;              case "SelectString":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' false)));                break;              case "Break":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 1)                  {                    for (var j = 0; j <= k; j++)                    {                      fcs[j].active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Break");                }                break;              }              case "Case":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Case");                }                break;              case "Default":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":              {                var fc = FunctionFor(line' i);                FlowControl.Push(fc);                if (fc.line != -1 && fc.values.Length > 0)                {                  variables[fc.var] = fc.values[0];                  fc.active = true;                }                break;              }              case "Continue":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    fcs[k].forCount++;                    if (fcs[k].forCount == fcs[k].values.Length)                    {                      for (var j = 0; j <= k; j++)                      {                        fcs[j].active = false;                      }                    }                    else                    {                      i = fcs[k].line;                      variables[fcs[k].var] = fcs[k].values[fcs[k].forCount];                      for (var j = 0; j < k; j++)                      {                        FlowControl.Pop();                      }                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Continue");                }                break;              }              case "Exit":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    for (var j = 0; j <= k; j++)                    {                      FlowControl.Peek().active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Exit");                }                break;              }              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  var fc = FlowControl.Peek();                  fc.forCount++;                  if (fc.forCount == fc.values.Length)                  {                    FlowControl.Pop();                  }                  else                  {                    i = fc.line;                    variables[fc.var] = fc.values[fc.forCount];                  }                }                else                {                  Warn("Unexpected EndFor");                }                break;                //Functions              case "Message":                FunctionMessage(line);                break;              case "PerformBasicInstall":                FunctionPerformBasicInstall(line);                break;              case "InstallDataFile":                FunctionInstallDataFile(line);                break;              case "CopyDataFile":                FunctionCopyDataFile(line);                break;              case "FatalError":                Break = true;                Fatal = true;                break;              case "Return":                Break = true;                break;              case "SetPluginActivation":                FunctionSetPluginActivation(line);                break;              case "EditINI":                FunctionEditINI(line' IniType.Fallout);                break;              case "EditPrefsINI":                FunctionEditINI(line' IniType.FalloutPrefs);                break;              case "EditGeckINI":                FunctionEditINI(line' IniType.Geck);                break;              case "EditGeckPrefsINI":                FunctionEditINI(line' IniType.GeckPrefs);                break;              case "EditSDP":              case "EditShader":                FunctionEditShader(line);                break;              case "SetVar":                FunctionSetVar(line);                break;              case "GetFolderName":              case "GetDirectoryName":                FunctionGetDirectoryName(line);                break;              case "GetFileName":                FunctionGetFileName(line);                break;              case "GetFileNameWithoutExtension":                FunctionGetFileNameWithoutExtension(line);                break;              case "CombinePaths":                FunctionCombinePaths(line);                break;              case "Substring":                FunctionSubstring(line);                break;              case "RemoveString":                FunctionRemoveString(line);                break;              case "StringLength":                FunctionStringLength(line);                break;              case "ReadINI": //TODO: Split into 4                FunctionReadINI(line' IniType.Fallout);                break;              case "ReadPrefsINI":                FunctionReadINI(line' IniType.FalloutPrefs);                break;              case "ReadGeckINI":                FunctionReadINI(line' IniType.Geck);                break;              case "ReadGeckPrefsINI":                FunctionReadINI(line' IniType.GeckPrefs);                break;              case "ReadRendererInfo":                FunctionReadRenderer(line);                break;              case "ExecLines":                FunctionExecLines(line' ExtraLines);                break;              case "iSet":                FunctionSet(line' true);                break;              case "fSet":                FunctionSet(line' false);                break;              default:                Warn("Unknown function '" + line[0] + "'");                break;            }          }          if (Break)          {            break;          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: for (var i = 1; i < script.Length || ExtraLines.Count > 0; i++)        {          string s;          if (ExtraLines.Count > 0)          {            i--;            s = ExtraLines.Dequeue().Replace('\t'' ' ').Trim();          }          else          {            s = script[i].Replace('\t'' ' ').Trim();          }          cLine = i.ToString();          while (s.EndsWith("\\"))          {            s = s.Remove(s.Length - 1);            if (ExtraLines.Count > 0)            {              s += ExtraLines.Dequeue().Replace('\t'' ' ').Trim();            }            else            {              if (++i == script.Length)              {                Warn("Run-on line passed end of script");              }              else              {                s += script[i].Replace('\t'' ' ').Trim();              }            }          }            if (SkipTo != null)          {            if (s == SkipTo)            {              SkipTo = null;            }            else            {              continue;            }          }            var line = SplitLine(s);          if (line.Length == 0)          {            continue;          }            if (FlowControl.Count != 0 && !FlowControl.Peek().active)          {            switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }          }          else          {            switch (line[0])            {              case "":                Warn("Empty function");                break;                //Control structures              case "Goto":                if (line.Length < 2)                {                  Warn("Not enough arguments to function 'Goto'");                }                else                {                  if (line.Length > 2)                  {                    Warn("Unexpected extra arguments to function 'Goto'");                  }                  SkipTo = "Label " + line[1];                  FlowControl.Clear();                }                break;              case "Label":                break;              case "If":                FlowControl.Push(new FlowControlStruct(i' FunctionIf(line)));                break;              case "IfNot":                FlowControl.Push(new FlowControlStruct(i' !FunctionIf(line)));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = false;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' false)));                break;              case "SelectMany":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' false)));                break;              case "SelectWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' false)));                break;              case "SelectManyWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' false)));                break;              case "SelectWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' true)));                break;              case "SelectManyWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' true)));                break;              case "SelectWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' true)));                break;              case "SelectManyWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' true)));                break;              case "SelectVar":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' true)));                break;              case "SelectString":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' false)));                break;              case "Break":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 1)                  {                    for (var j = 0; j <= k; j++)                    {                      fcs[j].active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Break");                }                break;              }              case "Case":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Case");                }                break;              case "Default":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":              {                var fc = FunctionFor(line' i);                FlowControl.Push(fc);                if (fc.line != -1 && fc.values.Length > 0)                {                  variables[fc.var] = fc.values[0];                  fc.active = true;                }                break;              }              case "Continue":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    fcs[k].forCount++;                    if (fcs[k].forCount == fcs[k].values.Length)                    {                      for (var j = 0; j <= k; j++)                      {                        fcs[j].active = false;                      }                    }                    else                    {                      i = fcs[k].line;                      variables[fcs[k].var] = fcs[k].values[fcs[k].forCount];                      for (var j = 0; j < k; j++)                      {                        FlowControl.Pop();                      }                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Continue");                }                break;              }              case "Exit":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    for (var j = 0; j <= k; j++)                    {                      FlowControl.Peek().active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Exit");                }                break;              }              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  var fc = FlowControl.Peek();                  fc.forCount++;                  if (fc.forCount == fc.values.Length)                  {                    FlowControl.Pop();                  }                  else                  {                    i = fc.line;                    variables[fc.var] = fc.values[fc.forCount];                  }                }                else                {                  Warn("Unexpected EndFor");                }                break;                //Functions              case "Message":                FunctionMessage(line);                break;              case "PerformBasicInstall":                FunctionPerformBasicInstall(line);                break;              case "InstallDataFile":                FunctionInstallDataFile(line);                break;              case "CopyDataFile":                FunctionCopyDataFile(line);                break;              case "FatalError":                Break = true;                Fatal = true;                break;              case "Return":                Break = true;                break;              case "SetPluginActivation":                FunctionSetPluginActivation(line);                break;              case "EditINI":                FunctionEditINI(line' IniType.Fallout);                break;              case "EditPrefsINI":                FunctionEditINI(line' IniType.FalloutPrefs);                break;              case "EditGeckINI":                FunctionEditINI(line' IniType.Geck);                break;              case "EditGeckPrefsINI":                FunctionEditINI(line' IniType.GeckPrefs);                break;              case "EditSDP":              case "EditShader":                FunctionEditShader(line);                break;              case "SetVar":                FunctionSetVar(line);                break;              case "GetFolderName":              case "GetDirectoryName":                FunctionGetDirectoryName(line);                break;              case "GetFileName":                FunctionGetFileName(line);                break;              case "GetFileNameWithoutExtension":                FunctionGetFileNameWithoutExtension(line);                break;              case "CombinePaths":                FunctionCombinePaths(line);                break;              case "Substring":                FunctionSubstring(line);                break;              case "RemoveString":                FunctionRemoveString(line);                break;              case "StringLength":                FunctionStringLength(line);                break;              case "ReadINI": //TODO: Split into 4                FunctionReadINI(line' IniType.Fallout);                break;              case "ReadPrefsINI":                FunctionReadINI(line' IniType.FalloutPrefs);                break;              case "ReadGeckINI":                FunctionReadINI(line' IniType.Geck);                break;              case "ReadGeckPrefsINI":                FunctionReadINI(line' IniType.GeckPrefs);                break;              case "ReadRendererInfo":                FunctionReadRenderer(line);                break;              case "ExecLines":                FunctionExecLines(line' ExtraLines);                break;              case "iSet":                FunctionSet(line' true);                break;              case "fSet":                FunctionSet(line' false);                break;              default:                Warn("Unknown function '" + line[0] + "'");                break;            }          }          if (Break)          {            break;          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: for (var i = 1; i < script.Length || ExtraLines.Count > 0; i++)        {          string s;          if (ExtraLines.Count > 0)          {            i--;            s = ExtraLines.Dequeue().Replace('\t'' ' ').Trim();          }          else          {            s = script[i].Replace('\t'' ' ').Trim();          }          cLine = i.ToString();          while (s.EndsWith("\\"))          {            s = s.Remove(s.Length - 1);            if (ExtraLines.Count > 0)            {              s += ExtraLines.Dequeue().Replace('\t'' ' ').Trim();            }            else            {              if (++i == script.Length)              {                Warn("Run-on line passed end of script");              }              else              {                s += script[i].Replace('\t'' ' ').Trim();              }            }          }            if (SkipTo != null)          {            if (s == SkipTo)            {              SkipTo = null;            }            else            {              continue;            }          }            var line = SplitLine(s);          if (line.Length == 0)          {            continue;          }            if (FlowControl.Count != 0 && !FlowControl.Peek().active)          {            switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }          }          else          {            switch (line[0])            {              case "":                Warn("Empty function");                break;                //Control structures              case "Goto":                if (line.Length < 2)                {                  Warn("Not enough arguments to function 'Goto'");                }                else                {                  if (line.Length > 2)                  {                    Warn("Unexpected extra arguments to function 'Goto'");                  }                  SkipTo = "Label " + line[1];                  FlowControl.Clear();                }                break;              case "Label":                break;              case "If":                FlowControl.Push(new FlowControlStruct(i' FunctionIf(line)));                break;              case "IfNot":                FlowControl.Push(new FlowControlStruct(i' !FunctionIf(line)));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = false;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' false)));                break;              case "SelectMany":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' false)));                break;              case "SelectWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' false)));                break;              case "SelectManyWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' false)));                break;              case "SelectWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' true)));                break;              case "SelectManyWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' true)));                break;              case "SelectWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' true)));                break;              case "SelectManyWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' true)));                break;              case "SelectVar":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' true)));                break;              case "SelectString":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' false)));                break;              case "Break":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 1)                  {                    for (var j = 0; j <= k; j++)                    {                      fcs[j].active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Break");                }                break;              }              case "Case":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Case");                }                break;              case "Default":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":              {                var fc = FunctionFor(line' i);                FlowControl.Push(fc);                if (fc.line != -1 && fc.values.Length > 0)                {                  variables[fc.var] = fc.values[0];                  fc.active = true;                }                break;              }              case "Continue":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    fcs[k].forCount++;                    if (fcs[k].forCount == fcs[k].values.Length)                    {                      for (var j = 0; j <= k; j++)                      {                        fcs[j].active = false;                      }                    }                    else                    {                      i = fcs[k].line;                      variables[fcs[k].var] = fcs[k].values[fcs[k].forCount];                      for (var j = 0; j < k; j++)                      {                        FlowControl.Pop();                      }                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Continue");                }                break;              }              case "Exit":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    for (var j = 0; j <= k; j++)                    {                      FlowControl.Peek().active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Exit");                }                break;              }              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  var fc = FlowControl.Peek();                  fc.forCount++;                  if (fc.forCount == fc.values.Length)                  {                    FlowControl.Pop();                  }                  else                  {                    i = fc.line;                    variables[fc.var] = fc.values[fc.forCount];                  }                }                else                {                  Warn("Unexpected EndFor");                }                break;                //Functions              case "Message":                FunctionMessage(line);                break;              case "PerformBasicInstall":                FunctionPerformBasicInstall(line);                break;              case "InstallDataFile":                FunctionInstallDataFile(line);                break;              case "CopyDataFile":                FunctionCopyDataFile(line);                break;              case "FatalError":                Break = true;                Fatal = true;                break;              case "Return":                Break = true;                break;              case "SetPluginActivation":                FunctionSetPluginActivation(line);                break;              case "EditINI":                FunctionEditINI(line' IniType.Fallout);                break;              case "EditPrefsINI":                FunctionEditINI(line' IniType.FalloutPrefs);                break;              case "EditGeckINI":                FunctionEditINI(line' IniType.Geck);                break;              case "EditGeckPrefsINI":                FunctionEditINI(line' IniType.GeckPrefs);                break;              case "EditSDP":              case "EditShader":                FunctionEditShader(line);                break;              case "SetVar":                FunctionSetVar(line);                break;              case "GetFolderName":              case "GetDirectoryName":                FunctionGetDirectoryName(line);                break;              case "GetFileName":                FunctionGetFileName(line);                break;              case "GetFileNameWithoutExtension":                FunctionGetFileNameWithoutExtension(line);                break;              case "CombinePaths":                FunctionCombinePaths(line);                break;              case "Substring":                FunctionSubstring(line);                break;              case "RemoveString":                FunctionRemoveString(line);                break;              case "StringLength":                FunctionStringLength(line);                break;              case "ReadINI": //TODO: Split into 4                FunctionReadINI(line' IniType.Fallout);                break;              case "ReadPrefsINI":                FunctionReadINI(line' IniType.FalloutPrefs);                break;              case "ReadGeckINI":                FunctionReadINI(line' IniType.Geck);                break;              case "ReadGeckPrefsINI":                FunctionReadINI(line' IniType.GeckPrefs);                break;              case "ReadRendererInfo":                FunctionReadRenderer(line);                break;              case "ExecLines":                FunctionExecLines(line' ExtraLines);                break;              case "iSet":                FunctionSet(line' true);                break;              case "fSet":                FunctionSet(line' false);                break;              default:                Warn("Unknown function '" + line[0] + "'");                break;            }          }          if (Break)          {            break;          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: for (var i = 1; i < script.Length || ExtraLines.Count > 0; i++)        {          string s;          if (ExtraLines.Count > 0)          {            i--;            s = ExtraLines.Dequeue().Replace('\t'' ' ').Trim();          }          else          {            s = script[i].Replace('\t'' ' ').Trim();          }          cLine = i.ToString();          while (s.EndsWith("\\"))          {            s = s.Remove(s.Length - 1);            if (ExtraLines.Count > 0)            {              s += ExtraLines.Dequeue().Replace('\t'' ' ').Trim();            }            else            {              if (++i == script.Length)              {                Warn("Run-on line passed end of script");              }              else              {                s += script[i].Replace('\t'' ' ').Trim();              }            }          }            if (SkipTo != null)          {            if (s == SkipTo)            {              SkipTo = null;            }            else            {              continue;            }          }            var line = SplitLine(s);          if (line.Length == 0)          {            continue;          }            if (FlowControl.Count != 0 && !FlowControl.Peek().active)          {            switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }          }          else          {            switch (line[0])            {              case "":                Warn("Empty function");                break;                //Control structures              case "Goto":                if (line.Length < 2)                {                  Warn("Not enough arguments to function 'Goto'");                }                else                {                  if (line.Length > 2)                  {                    Warn("Unexpected extra arguments to function 'Goto'");                  }                  SkipTo = "Label " + line[1];                  FlowControl.Clear();                }                break;              case "Label":                break;              case "If":                FlowControl.Push(new FlowControlStruct(i' FunctionIf(line)));                break;              case "IfNot":                FlowControl.Push(new FlowControlStruct(i' !FunctionIf(line)));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = false;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' false)));                break;              case "SelectMany":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' false)));                break;              case "SelectWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' false)));                break;              case "SelectManyWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' false)));                break;              case "SelectWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' true)));                break;              case "SelectManyWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' true)));                break;              case "SelectWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' true)));                break;              case "SelectManyWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' true)));                break;              case "SelectVar":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' true)));                break;              case "SelectString":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' false)));                break;              case "Break":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 1)                  {                    for (var j = 0; j <= k; j++)                    {                      fcs[j].active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Break");                }                break;              }              case "Case":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Case");                }                break;              case "Default":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":              {                var fc = FunctionFor(line' i);                FlowControl.Push(fc);                if (fc.line != -1 && fc.values.Length > 0)                {                  variables[fc.var] = fc.values[0];                  fc.active = true;                }                break;              }              case "Continue":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    fcs[k].forCount++;                    if (fcs[k].forCount == fcs[k].values.Length)                    {                      for (var j = 0; j <= k; j++)                      {                        fcs[j].active = false;                      }                    }                    else                    {                      i = fcs[k].line;                      variables[fcs[k].var] = fcs[k].values[fcs[k].forCount];                      for (var j = 0; j < k; j++)                      {                        FlowControl.Pop();                      }                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Continue");                }                break;              }              case "Exit":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    for (var j = 0; j <= k; j++)                    {                      FlowControl.Peek().active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Exit");                }                break;              }              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  var fc = FlowControl.Peek();                  fc.forCount++;                  if (fc.forCount == fc.values.Length)                  {                    FlowControl.Pop();                  }                  else                  {                    i = fc.line;                    variables[fc.var] = fc.values[fc.forCount];                  }                }                else                {                  Warn("Unexpected EndFor");                }                break;                //Functions              case "Message":                FunctionMessage(line);                break;              case "PerformBasicInstall":                FunctionPerformBasicInstall(line);                break;              case "InstallDataFile":                FunctionInstallDataFile(line);                break;              case "CopyDataFile":                FunctionCopyDataFile(line);                break;              case "FatalError":                Break = true;                Fatal = true;                break;              case "Return":                Break = true;                break;              case "SetPluginActivation":                FunctionSetPluginActivation(line);                break;              case "EditINI":                FunctionEditINI(line' IniType.Fallout);                break;              case "EditPrefsINI":                FunctionEditINI(line' IniType.FalloutPrefs);                break;              case "EditGeckINI":                FunctionEditINI(line' IniType.Geck);                break;              case "EditGeckPrefsINI":                FunctionEditINI(line' IniType.GeckPrefs);                break;              case "EditSDP":              case "EditShader":                FunctionEditShader(line);                break;              case "SetVar":                FunctionSetVar(line);                break;              case "GetFolderName":              case "GetDirectoryName":                FunctionGetDirectoryName(line);                break;              case "GetFileName":                FunctionGetFileName(line);                break;              case "GetFileNameWithoutExtension":                FunctionGetFileNameWithoutExtension(line);                break;              case "CombinePaths":                FunctionCombinePaths(line);                break;              case "Substring":                FunctionSubstring(line);                break;              case "RemoveString":                FunctionRemoveString(line);                break;              case "StringLength":                FunctionStringLength(line);                break;              case "ReadINI": //TODO: Split into 4                FunctionReadINI(line' IniType.Fallout);                break;              case "ReadPrefsINI":                FunctionReadINI(line' IniType.FalloutPrefs);                break;              case "ReadGeckINI":                FunctionReadINI(line' IniType.Geck);                break;              case "ReadGeckPrefsINI":                FunctionReadINI(line' IniType.GeckPrefs);                break;              case "ReadRendererInfo":                FunctionReadRenderer(line);                break;              case "ExecLines":                FunctionExecLines(line' ExtraLines);                break;              case "iSet":                FunctionSet(line' true);                break;              case "fSet":                FunctionSet(line' false);                break;              default:                Warn("Unknown function '" + line[0] + "'");                break;            }          }          if (Break)          {            break;          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: for (var i = 1; i < script.Length || ExtraLines.Count > 0; i++)        {          string s;          if (ExtraLines.Count > 0)          {            i--;            s = ExtraLines.Dequeue().Replace('\t'' ' ').Trim();          }          else          {            s = script[i].Replace('\t'' ' ').Trim();          }          cLine = i.ToString();          while (s.EndsWith("\\"))          {            s = s.Remove(s.Length - 1);            if (ExtraLines.Count > 0)            {              s += ExtraLines.Dequeue().Replace('\t'' ' ').Trim();            }            else            {              if (++i == script.Length)              {                Warn("Run-on line passed end of script");              }              else              {                s += script[i].Replace('\t'' ' ').Trim();              }            }          }            if (SkipTo != null)          {            if (s == SkipTo)            {              SkipTo = null;            }            else            {              continue;            }          }            var line = SplitLine(s);          if (line.Length == 0)          {            continue;          }            if (FlowControl.Count != 0 && !FlowControl.Peek().active)          {            switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }          }          else          {            switch (line[0])            {              case "":                Warn("Empty function");                break;                //Control structures              case "Goto":                if (line.Length < 2)                {                  Warn("Not enough arguments to function 'Goto'");                }                else                {                  if (line.Length > 2)                  {                    Warn("Unexpected extra arguments to function 'Goto'");                  }                  SkipTo = "Label " + line[1];                  FlowControl.Clear();                }                break;              case "Label":                break;              case "If":                FlowControl.Push(new FlowControlStruct(i' FunctionIf(line)));                break;              case "IfNot":                FlowControl.Push(new FlowControlStruct(i' !FunctionIf(line)));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = false;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' false)));                break;              case "SelectMany":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' false)));                break;              case "SelectWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' false)));                break;              case "SelectManyWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' false)));                break;              case "SelectWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' true)));                break;              case "SelectManyWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' true)));                break;              case "SelectWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' true)));                break;              case "SelectManyWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' true)));                break;              case "SelectVar":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' true)));                break;              case "SelectString":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' false)));                break;              case "Break":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 1)                  {                    for (var j = 0; j <= k; j++)                    {                      fcs[j].active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Break");                }                break;              }              case "Case":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Case");                }                break;              case "Default":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":              {                var fc = FunctionFor(line' i);                FlowControl.Push(fc);                if (fc.line != -1 && fc.values.Length > 0)                {                  variables[fc.var] = fc.values[0];                  fc.active = true;                }                break;              }              case "Continue":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    fcs[k].forCount++;                    if (fcs[k].forCount == fcs[k].values.Length)                    {                      for (var j = 0; j <= k; j++)                      {                        fcs[j].active = false;                      }                    }                    else                    {                      i = fcs[k].line;                      variables[fcs[k].var] = fcs[k].values[fcs[k].forCount];                      for (var j = 0; j < k; j++)                      {                        FlowControl.Pop();                      }                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Continue");                }                break;              }              case "Exit":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    for (var j = 0; j <= k; j++)                    {                      FlowControl.Peek().active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Exit");                }                break;              }              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  var fc = FlowControl.Peek();                  fc.forCount++;                  if (fc.forCount == fc.values.Length)                  {                    FlowControl.Pop();                  }                  else                  {                    i = fc.line;                    variables[fc.var] = fc.values[fc.forCount];                  }                }                else                {                  Warn("Unexpected EndFor");                }                break;                //Functions              case "Message":                FunctionMessage(line);                break;              case "PerformBasicInstall":                FunctionPerformBasicInstall(line);                break;              case "InstallDataFile":                FunctionInstallDataFile(line);                break;              case "CopyDataFile":                FunctionCopyDataFile(line);                break;              case "FatalError":                Break = true;                Fatal = true;                break;              case "Return":                Break = true;                break;              case "SetPluginActivation":                FunctionSetPluginActivation(line);                break;              case "EditINI":                FunctionEditINI(line' IniType.Fallout);                break;              case "EditPrefsINI":                FunctionEditINI(line' IniType.FalloutPrefs);                break;              case "EditGeckINI":                FunctionEditINI(line' IniType.Geck);                break;              case "EditGeckPrefsINI":                FunctionEditINI(line' IniType.GeckPrefs);                break;              case "EditSDP":              case "EditShader":                FunctionEditShader(line);                break;              case "SetVar":                FunctionSetVar(line);                break;              case "GetFolderName":              case "GetDirectoryName":                FunctionGetDirectoryName(line);                break;              case "GetFileName":                FunctionGetFileName(line);                break;              case "GetFileNameWithoutExtension":                FunctionGetFileNameWithoutExtension(line);                break;              case "CombinePaths":                FunctionCombinePaths(line);                break;              case "Substring":                FunctionSubstring(line);                break;              case "RemoveString":                FunctionRemoveString(line);                break;              case "StringLength":                FunctionStringLength(line);                break;              case "ReadINI": //TODO: Split into 4                FunctionReadINI(line' IniType.Fallout);                break;              case "ReadPrefsINI":                FunctionReadINI(line' IniType.FalloutPrefs);                break;              case "ReadGeckINI":                FunctionReadINI(line' IniType.Geck);                break;              case "ReadGeckPrefsINI":                FunctionReadINI(line' IniType.GeckPrefs);                break;              case "ReadRendererInfo":                FunctionReadRenderer(line);                break;              case "ExecLines":                FunctionExecLines(line' ExtraLines);                break;              case "iSet":                FunctionSet(line' true);                break;              case "fSet":                FunctionSet(line' false);                break;              default:                Warn("Unknown function '" + line[0] + "'");                break;            }          }          if (Break)          {            break;          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: for (var i = 1; i < script.Length || ExtraLines.Count > 0; i++)        {          string s;          if (ExtraLines.Count > 0)          {            i--;            s = ExtraLines.Dequeue().Replace('\t'' ' ').Trim();          }          else          {            s = script[i].Replace('\t'' ' ').Trim();          }          cLine = i.ToString();          while (s.EndsWith("\\"))          {            s = s.Remove(s.Length - 1);            if (ExtraLines.Count > 0)            {              s += ExtraLines.Dequeue().Replace('\t'' ' ').Trim();            }            else            {              if (++i == script.Length)              {                Warn("Run-on line passed end of script");              }              else              {                s += script[i].Replace('\t'' ' ').Trim();              }            }          }            if (SkipTo != null)          {            if (s == SkipTo)            {              SkipTo = null;            }            else            {              continue;            }          }            var line = SplitLine(s);          if (line.Length == 0)          {            continue;          }            if (FlowControl.Count != 0 && !FlowControl.Peek().active)          {            switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }          }          else          {            switch (line[0])            {              case "":                Warn("Empty function");                break;                //Control structures              case "Goto":                if (line.Length < 2)                {                  Warn("Not enough arguments to function 'Goto'");                }                else                {                  if (line.Length > 2)                  {                    Warn("Unexpected extra arguments to function 'Goto'");                  }                  SkipTo = "Label " + line[1];                  FlowControl.Clear();                }                break;              case "Label":                break;              case "If":                FlowControl.Push(new FlowControlStruct(i' FunctionIf(line)));                break;              case "IfNot":                FlowControl.Push(new FlowControlStruct(i' !FunctionIf(line)));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = false;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' false)));                break;              case "SelectMany":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' false)));                break;              case "SelectWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' false)));                break;              case "SelectManyWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' false)));                break;              case "SelectWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' true)));                break;              case "SelectManyWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' true)));                break;              case "SelectWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' true)));                break;              case "SelectManyWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' true)));                break;              case "SelectVar":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' true)));                break;              case "SelectString":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' false)));                break;              case "Break":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 1)                  {                    for (var j = 0; j <= k; j++)                    {                      fcs[j].active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Break");                }                break;              }              case "Case":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Case");                }                break;              case "Default":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":              {                var fc = FunctionFor(line' i);                FlowControl.Push(fc);                if (fc.line != -1 && fc.values.Length > 0)                {                  variables[fc.var] = fc.values[0];                  fc.active = true;                }                break;              }              case "Continue":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    fcs[k].forCount++;                    if (fcs[k].forCount == fcs[k].values.Length)                    {                      for (var j = 0; j <= k; j++)                      {                        fcs[j].active = false;                      }                    }                    else                    {                      i = fcs[k].line;                      variables[fcs[k].var] = fcs[k].values[fcs[k].forCount];                      for (var j = 0; j < k; j++)                      {                        FlowControl.Pop();                      }                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Continue");                }                break;              }              case "Exit":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    for (var j = 0; j <= k; j++)                    {                      FlowControl.Peek().active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Exit");                }                break;              }              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  var fc = FlowControl.Peek();                  fc.forCount++;                  if (fc.forCount == fc.values.Length)                  {                    FlowControl.Pop();                  }                  else                  {                    i = fc.line;                    variables[fc.var] = fc.values[fc.forCount];                  }                }                else                {                  Warn("Unexpected EndFor");                }                break;                //Functions              case "Message":                FunctionMessage(line);                break;              case "PerformBasicInstall":                FunctionPerformBasicInstall(line);                break;              case "InstallDataFile":                FunctionInstallDataFile(line);                break;              case "CopyDataFile":                FunctionCopyDataFile(line);                break;              case "FatalError":                Break = true;                Fatal = true;                break;              case "Return":                Break = true;                break;              case "SetPluginActivation":                FunctionSetPluginActivation(line);                break;              case "EditINI":                FunctionEditINI(line' IniType.Fallout);                break;              case "EditPrefsINI":                FunctionEditINI(line' IniType.FalloutPrefs);                break;              case "EditGeckINI":                FunctionEditINI(line' IniType.Geck);                break;              case "EditGeckPrefsINI":                FunctionEditINI(line' IniType.GeckPrefs);                break;              case "EditSDP":              case "EditShader":                FunctionEditShader(line);                break;              case "SetVar":                FunctionSetVar(line);                break;              case "GetFolderName":              case "GetDirectoryName":                FunctionGetDirectoryName(line);                break;              case "GetFileName":                FunctionGetFileName(line);                break;              case "GetFileNameWithoutExtension":                FunctionGetFileNameWithoutExtension(line);                break;              case "CombinePaths":                FunctionCombinePaths(line);                break;              case "Substring":                FunctionSubstring(line);                break;              case "RemoveString":                FunctionRemoveString(line);                break;              case "StringLength":                FunctionStringLength(line);                break;              case "ReadINI": //TODO: Split into 4                FunctionReadINI(line' IniType.Fallout);                break;              case "ReadPrefsINI":                FunctionReadINI(line' IniType.FalloutPrefs);                break;              case "ReadGeckINI":                FunctionReadINI(line' IniType.Geck);                break;              case "ReadGeckPrefsINI":                FunctionReadINI(line' IniType.GeckPrefs);                break;              case "ReadRendererInfo":                FunctionReadRenderer(line);                break;              case "ExecLines":                FunctionExecLines(line' ExtraLines);                break;              case "iSet":                FunctionSet(line' true);                break;              case "fSet":                FunctionSet(line' false);                break;              default:                Warn("Unknown function '" + line[0] + "'");                break;            }          }          if (Break)          {            break;          }        }
Magic Number,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following statement contains a magic number: for (var i = 1; i < script.Length || ExtraLines.Count > 0; i++)        {          string s;          if (ExtraLines.Count > 0)          {            i--;            s = ExtraLines.Dequeue().Replace('\t'' ' ').Trim();          }          else          {            s = script[i].Replace('\t'' ' ').Trim();          }          cLine = i.ToString();          while (s.EndsWith("\\"))          {            s = s.Remove(s.Length - 1);            if (ExtraLines.Count > 0)            {              s += ExtraLines.Dequeue().Replace('\t'' ' ').Trim();            }            else            {              if (++i == script.Length)              {                Warn("Run-on line passed end of script");              }              else              {                s += script[i].Replace('\t'' ' ').Trim();              }            }          }            if (SkipTo != null)          {            if (s == SkipTo)            {              SkipTo = null;            }            else            {              continue;            }          }            var line = SplitLine(s);          if (line.Length == 0)          {            continue;          }            if (FlowControl.Count != 0 && !FlowControl.Peek().active)          {            switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }          }          else          {            switch (line[0])            {              case "":                Warn("Empty function");                break;                //Control structures              case "Goto":                if (line.Length < 2)                {                  Warn("Not enough arguments to function 'Goto'");                }                else                {                  if (line.Length > 2)                  {                    Warn("Unexpected extra arguments to function 'Goto'");                  }                  SkipTo = "Label " + line[1];                  FlowControl.Clear();                }                break;              case "Label":                break;              case "If":                FlowControl.Push(new FlowControlStruct(i' FunctionIf(line)));                break;              case "IfNot":                FlowControl.Push(new FlowControlStruct(i' !FunctionIf(line)));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = false;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' false)));                break;              case "SelectMany":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' false)));                break;              case "SelectWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' false)));                break;              case "SelectManyWithPreview":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' false)));                break;              case "SelectWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' false' true)));                break;              case "SelectManyWithDescriptions":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' false' true)));                break;              case "SelectWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' false' true' true)));                break;              case "SelectManyWithDescriptionsAndPreviews":                FlowControl.Push(new FlowControlStruct(i' FunctionSelect(line' true' true' true)));                break;              case "SelectVar":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' true)));                break;              case "SelectString":                FlowControl.Push(new FlowControlStruct(i' FunctionSelectVar(line' false)));                break;              case "Break":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 1)                  {                    for (var j = 0; j <= k; j++)                    {                      fcs[j].active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Break");                }                break;              }              case "Case":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Case");                }                break;              case "Default":                if (FlowControl.Count == 0 || FlowControl.Peek().type != 1)                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":              {                var fc = FunctionFor(line' i);                FlowControl.Push(fc);                if (fc.line != -1 && fc.values.Length > 0)                {                  variables[fc.var] = fc.values[0];                  fc.active = true;                }                break;              }              case "Continue":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    fcs[k].forCount++;                    if (fcs[k].forCount == fcs[k].values.Length)                    {                      for (var j = 0; j <= k; j++)                      {                        fcs[j].active = false;                      }                    }                    else                    {                      i = fcs[k].line;                      variables[fcs[k].var] = fcs[k].values[fcs[k].forCount];                      for (var j = 0; j < k; j++)                      {                        FlowControl.Pop();                      }                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Continue");                }                break;              }              case "Exit":              {                var found = false;                var fcs = FlowControl.ToArray();                for (var k = 0; k < fcs.Length; k++)                {                  if (fcs[k].type == 2)                  {                    for (var j = 0; j <= k; j++)                    {                      FlowControl.Peek().active = false;                    }                    found = true;                    break;                  }                }                if (!found)                {                  Warn("Unexpected Exit");                }                break;              }              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  var fc = FlowControl.Peek();                  fc.forCount++;                  if (fc.forCount == fc.values.Length)                  {                    FlowControl.Pop();                  }                  else                  {                    i = fc.line;                    variables[fc.var] = fc.values[fc.forCount];                  }                }                else                {                  Warn("Unexpected EndFor");                }                break;                //Functions              case "Message":                FunctionMessage(line);                break;              case "PerformBasicInstall":                FunctionPerformBasicInstall(line);                break;              case "InstallDataFile":                FunctionInstallDataFile(line);                break;              case "CopyDataFile":                FunctionCopyDataFile(line);                break;              case "FatalError":                Break = true;                Fatal = true;                break;              case "Return":                Break = true;                break;              case "SetPluginActivation":                FunctionSetPluginActivation(line);                break;              case "EditINI":                FunctionEditINI(line' IniType.Fallout);                break;              case "EditPrefsINI":                FunctionEditINI(line' IniType.FalloutPrefs);                break;              case "EditGeckINI":                FunctionEditINI(line' IniType.Geck);                break;              case "EditGeckPrefsINI":                FunctionEditINI(line' IniType.GeckPrefs);                break;              case "EditSDP":              case "EditShader":                FunctionEditShader(line);                break;              case "SetVar":                FunctionSetVar(line);                break;              case "GetFolderName":              case "GetDirectoryName":                FunctionGetDirectoryName(line);                break;              case "GetFileName":                FunctionGetFileName(line);                break;              case "GetFileNameWithoutExtension":                FunctionGetFileNameWithoutExtension(line);                break;              case "CombinePaths":                FunctionCombinePaths(line);                break;              case "Substring":                FunctionSubstring(line);                break;              case "RemoveString":                FunctionRemoveString(line);                break;              case "StringLength":                FunctionStringLength(line);                break;              case "ReadINI": //TODO: Split into 4                FunctionReadINI(line' IniType.Fallout);                break;              case "ReadPrefsINI":                FunctionReadINI(line' IniType.FalloutPrefs);                break;              case "ReadGeckINI":                FunctionReadINI(line' IniType.Geck);                break;              case "ReadGeckPrefsINI":                FunctionReadINI(line' IniType.GeckPrefs);                break;              case "ReadRendererInfo":                FunctionReadRenderer(line);                break;              case "ExecLines":                FunctionExecLines(line' ExtraLines);                break;              case "iSet":                FunctionSet(line' true);                break;              case "fSet":                FunctionSet(line' false);                break;              default:                Warn("Unknown function '" + line[0] + "'");                break;            }          }          if (Break)          {            break;          }        }
Magic Number,fomm.Scripting,FlowControlStruct,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FlowControlStruct,The following statement contains a magic number: type = 2;
Missing Default,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionFor,The following switch statement is missing a default case: switch (line[1])        {          case "Count":          {            if (line.Length < 5)            {              Warn("Missing arguments to function 'For Count'");              return NullLoop;            }            if (line.Length > 6)            {              Warn("Unexpected extra arguments to 'For Count'");            }            int start' end' step = 1;            if (!int.TryParse(line[3]' out start) || !int.TryParse(line[4]' out end) ||                (line.Length >= 6 && !int.TryParse(line[5]' out step)))            {              Warn("Invalid argument to 'For Count'");              return NullLoop;            }            var steps = new List<string>();            for (var i = start; i <= end; i += step)            {              steps.Add(i.ToString());            }            return new FlowControlStruct(steps.ToArray()' line[2]' LineNo);          }          case "DataFile":          {            if (line.Length < 4)            {              Warn("Missing arguments to function 'For Each DataFile'");              return NullLoop;            }            if (line.Length > 4)            {              Warn("Unexpected extra arguments to 'For Each DataFile'");            }              var strFiles = (string[]) ExecuteMethod(() => m_midInstaller.Fomod.GetFileList().ToArray());            for (var i = strFiles.Length - 1; i >= 0; i--)            {              strFiles[i] = strFiles[i].Replace(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);            }            return new FlowControlStruct(strFiles' line[3]' LineNo);          }        }
Missing Default,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionEditINI,The following switch statement is missing a default case: switch (type)        {          case IniType.Fallout:            ExecuteMethod(() => Script.EditFalloutINI(line[1]' line[2]' line[3]' true));            break;          case IniType.FalloutPrefs:            ExecuteMethod(() => Script.EditPrefsINI(line[1]' line[2]' line[3]' true));            break;          case IniType.Geck:            ExecuteMethod(() => Script.EditGeckINI(line[1]' line[2]' line[3]' true));            break;          case IniType.GeckPrefs:            ExecuteMethod(() => Script.EditGeckPrefsINI(line[1]' line[2]' line[3]' true));            break;        }
Missing Default,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,FunctionReadINI,The following switch statement is missing a default case: switch (type)        {          case IniType.Fallout:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetFalloutIniString(line[2]' line[3]));            break;          case IniType.FalloutPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetPrefsIniString(line[2]' line[3]));            break;          case IniType.Geck:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckIniString(line[2]' line[3]));            break;          case IniType.GeckPrefs:            variables[line[1]] = (string) ExecuteMethod(() => Script.GetGeckPrefsIniString(line[2]' line[3]));            break;        }
Missing Default,fomm.Scripting,fommScript,C:\repos\niveuseverto_fomm\fomm.Scripting\fommScript.cs,Execute,The following switch statement is missing a default case: switch (line[0])            {              case "":                Warn("Empty function");                break;              case "If":              case "IfNot":                FlowControl.Push(new FlowControlStruct(0));                break;              case "Else":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Peek().active = FlowControl.Peek().line != -1;                }                else                {                  Warn("Unexpected Else");                }                break;              case "EndIf":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 0)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndIf");                }                break;              case "Select":              case "SelectMany":              case "SelectWithPreview":              case "SelectManyWithPreview":              case "SelectWithDescriptions":              case "SelectManyWithDescriptions":              case "SelectWithDescriptionsAndPreviews":              case "SelectManyWithDescriptionsAndPreviews":              case "SelectVar":              case "SelectString":                FlowControl.Push(new FlowControlStruct(1));                break;              case "Case":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && Array.IndexOf(FlowControl.Peek().values' s) != -1)                  {                    FlowControl.Peek().active = true;                    FlowControl.Peek().hitCase = true;                  }                }                else                {                  Warn("Unexpected Break");                }                break;              case "Default":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  if (FlowControl.Peek().line != -1 && !FlowControl.Peek().hitCase)                  {                    FlowControl.Peek().active = true;                  }                }                else                {                  Warn("Unexpected Default");                }                break;              case "EndSelect":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 1)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndSelect");                }                break;              case "For":                FlowControl.Push(new FlowControlStruct(2));                break;              case "EndFor":                if (FlowControl.Count != 0 && FlowControl.Peek().type == 2)                {                  FlowControl.Pop();                }                else                {                  Warn("Unexpected EndFor");                }                break;              case "Break":              case "Continue":              case "Exit":                break;            }
